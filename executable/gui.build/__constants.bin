<module PySimpleGUI>C:\code\venv\callllama\lib\site-packages\PySimpleGUIC:\code\venv\callllama\lib\site-packages\PySimpleGUI\__init__.pyfolder_nameImageSubsampleUberForm*ERROR laying out form.... Image Element has no image specified*group_idscalebackground_colorTComboboxOutput.__init__total_timedefault_valueorientationborder_widthreliefprogress_meter_border_depthImage.UpdatekeysymdurationOrientationDefaultinput_valuesUberForm.__init__eprintBACKGROUND#B7CECEINPUT#FDFFF7TEXT_INPUTSCROLLBUTTONwhite#658268PROGRESS#247BA0#F8FAF0password_charCancelfile_typesbutton_textauto_size_button1.0max_line_totalwidth_usedtotal_linessingle_line_messagelongest_line_lenlines_neededEncodeRadioRowColtime_per_itemasksaveasfilename#7186C7FlexForm.LayoutRealtimeButton Parms are a variable number of Elements DecodeRadioRowColFlexForm._Close#475841vsbAutoClose
    Display MsgBox with 2 buttons, "Yes" and "No"
    :param args:
    :param button_color:
    :param auto_close:
    :param auto_close_duration:
    :param font:
    :return:
    DEFAULT_SCROLLBAR_COLORGroupIDuberSELECT_MODE_SINGLEhighlightcolorNEFlexForm.__init__******************* SHOW TABBED FORMS ERROR .... no argumentsMeterIDChecktime_remaining_shortrow_numcol_numCheckbox.Get
        Radio Button Element
        :param text:
        :param group_id:
        :param default:
        :param scale: Adds multiplier to size (w,h)
        :param size: Size of field in characters
        :param auto_size_text: True if should shrink field to fit the default text
        :param background_color: Color for Element. Text or RGB Hex
        :param font:
        #ffa0dccurselection = configureScrollbarDefaultElementSizebluecurrent_valuemax_valuestart_timestat_messagesDEFAULT_SLIDER_RELIEFValueFLATDecrementButton.__del__IsTabbedFormDEFAULT_TEXT_ELEMENT_BACKGROUND_COLORKayakselect_mode#E0F5FFALL Files*.*redgreenEasyProgressMeterData-alphaTypetroughrelieficon_fileMsgBoxOKCancelTealMonoProgressBarColorReturnValuesListMsgBoxAutoCloseELEM_TYPE_IMAGEextra#6D9F85FlexForm._AutoCloseAlarmCallbackCurrentRowNumberExit
        Slider Element
        :param range:
        :param default_value:
        :param orientation:
        :param border_width:
        :param relief:
        :param scale: Adds multiplier to size (w,h)
        :param size: Size of field in characters
        :param background_color: Color for Element. Text or RGB Hex
        :param font:
        screen_widthDEFAULT_WINDOW_LOCATIONDemo form..FileBrowseSourceButtonCallBackbar_colorlocal_border_widthChangeLookAndFeelAutoSizeTextBUTTON_TYPE_READ_FORMELEM_TYPE_INPUT_RADIOheight_computedTKImageFlexForm.AddRowStartupTKuser_defined_iconscrollbar_colorclamaskdirectoryCourier NewCancelledConvertArgsToSingleString#00345BTKEntryMultiline.__del__image_sizecombostyleFlexForm.MouseWheelCallbackNumCols_GetDefaultElementSize#FFFFFF#000000WM_WINDOW_DESTROYEDFlexForm.__exit__ELEM_TYPE_TEXTRadVarFileTypesMultiline.__init__MSG_BOX_CANCELLED#%06XProgressbarfocusELEM_TYPE_INPUT_TEXTside#9FB8ADform_rowsdest#DDD8BATKTabControl#FFF9D5
    Display a standard MsgBox that will automatically close after a specified amount of time
    :param args:
    :param button_color:
    :param auto_close:
    :param auto_close_duration:
    :param font:
    :return:
    filetypesDEFAULT_WINDOW_ICONMouseWheel:DownCaller requested a cancelDEFAULT_DEBUG_WINDOW_SIZENumOpenWindowseasy_print_dataupdate_idletasksColumnShowGetComplimentaryHexfocus_forceTKListBoxTKProgressBarForReal
    Create and show a form on tbe caller's behalf.
    :param title:
    :param max_value:
    :param args: ANY number of arguments the caller wants to display
    :param orientation:
    :param bar_color:
    :param size:
    :param scale:
    :param Style:
    :param StyleOffset:
    :return: ProgressBar object that is in the form
    DropDownsunkenTANSRELIEF_FLATTxttheme_useLengthseeQuitwin_sizeforegroundText.__init__Notebooktotal_time_shortnormalNewValueHorizontalRELIEF_GROOVEcomp_colorTKCombo#ffff64SELECT_MODE_BROWSEDebugWin.PrintbothELEM_TYPE_COLUMNTKComboBoxJustificationMouseWheel:Upstderrinitialize_onlytop_level_formImage.__init__DEFAULT_BORDER_WIDTHbd
    A ONE-LINE progress meter. Add to your code where ever you need a meter. No need for a second
    function call before your loop. You've got enough code to write!
    :param title: Title will be shown on the window
    :param current_value: Current count of your items
    :param max_value: Max value your count will ever reach. This indicates it should be closed
    :param args:  VARIABLE number of arguements... you request it, we'll print it no matter what the item!
    :param orientation:
    :param bar_color:
    :param size:
    :param scale:
    :param Style:
    :param StyleOffset:
    :return: False if should stop the meter
    <MouseWheel>DEFAULT_FONTStartTimeProgressBar.__del__FlexForm.ShowELEM_TYPE_INPUT_COMBOvbaris_tabbed_formUseDefaultFocusdeterminateFlexForm.__del__#01826BMultiline.Get
    Update the progress meter for a form
    :param form: class ProgressBar
    :param value: int
    :return: True if not cancelled, OK....False if Error
    #6E266ERadValueObjToStringSingleObj#480656#4F2398#380474TextToDisplay<ButtonPress-1>{} Estimated Total Time©Úbutton_colorÚbutton_typeÚ
auto_closeÚauto_close_durationÚiconÚ
line_widthÚfontÚargsÚargs_to_printÚlocal_line_widthÚtitleÚformÚmax_line_totalÚtotal_linesÚmessageÚmessage_wrappedÚmessage_wrapped_linesÚlongest_line_lenÚ
width_usedÚheightÚpadÚbutton_textÚvaluesÚbuttonreturn_keyboard_eventsInputCombo.__del__#A5CADDPriorCountUpdateBarTRANSPARENT_BUTTON#046380DefaultValuelocal_orientation{} Elapsed Time#0A37A3COLOR_SYSTEM_DEFAULTCBoxDebugWin.__init__ShownsepcharendcharReliefauto_size_buttons
    Display a MsgBox with a single "Cancel" button.
    :param args:
    :param button_color:
    :param auto_close:
    :param auto_close_duration:
    :param font:
    :return:
    ELEM_TYPE_OUTPUTtextvariableEasyPrint Output#082567#ffb482You should be importing it rather than running itAddToReturnDictionary#F0F595LayoutAndShowIntVarDictionaryKeyCounter
        Spin Box Element
        :param values:
        :param initial_value:
        :param scale: Adds multiplier to size (w,h)
        :param size: Size of field in characters
        :param auto_size_text: True if should shrink field to fit the default text
        :param background_color: Color for Element. Text or RGB Hex
        :param font:
        TKOutput.__del__CurrentValuegeometryWidth#B0AAC2<Return>LISTBOX_SELECT_MODE_SINGLESlider.UpdateOkSpin.__del__StatMessagesSlider.__del__tab_control+%i+%iTKButtonbar_text©ÚiconÚbutton_colorÚelement_sizeÚmarginsÚelement_paddingÚauto_size_textÚauto_size_buttonsÚfontÚborder_widthÚslider_border_widthÚslider_reliefÚslider_orientationÚautoclose_timeÚmessage_box_line_widthÚprogress_meter_border_depthÚprogress_meter_styleÚprogress_meter_reliefÚprogress_meter_colorÚprogress_meter_sizeÚtext_justificationÚbackground_colorÚelement_background_colorÚtext_element_background_colorÚinput_elements_background_colorÚinput_text_colorÚscrollbar_colorÚ
text_colorÚelement_text_colorÚdebug_win_sizeÚwindow_locationÚ	icon_fileBuildResultsForSubformdefault_textComputeProgressStatsSELECT_MODE_MULTIPLEFormListtxt#303952GreenMono#d0dbbd {:6.2f} Seconds per Iterationmy_flex_formRadiobuttonTKListboxwinfo_height#f0f3f7EXTENDEDBorderDepthGreenTanDEFAULT_PROGRESS_BAR_STYLEdisable_ProgressMeterFont1234567890AddRowsthicknessTKOutput.Closemove_string#F0F0F0selection_setmax_line_lenBindReturnKeyTKProgressBar.__init__TargetSource FolderInputText.__init__TKOutput.write#A8C1B4OnClosingCallbackPackFormIntoFrame.<locals>.CharWidthInPixelsBlueMonoYou are running the PySimpleGUI.py file itselfPositionyes_nosolidwraplengthnon_blockingfound_focusMSG_BOX_ERRORHere is your sample input form....Destination Folder#e6d3a8#283b5bSaveFlexForm.Show.<locals>.<genexpr>time_deltaseconds_remainingtime_delta_shortbrowselook_and_feeltroughcolor#F4EFCFFlexForm.OnClosingCallback#F7F3EC#FF0000winfo_screenwidthGetTextBoximage_subsampleRELIEF_SOLIDMyWindows.__init__BarExpiredSandyBeachpadyFlexForm.LayoutAndReadyscrollcommandscreen_heightConvertFlexToTKDEFAULT_SLIDER_ORIENTATIONiconbitmapDEFAULT_ELEMENT_BACKGROUND_COLORTKSpinBox *** CANCELLING ***BType#C2D4D8ScaleTkButtonColor<Key>current_countnew_textButton.Updatebind_return_keyObjToStringSingleObj.<locals>.<genexpr><module PySimpleGUI.PySimpleGUI>bgRIGHTSlider.__init__padxframestyleDEFAULT_INPUT_ELEMENTS_COLORElement.ReturnKeyHandlerDEFAULT_AUTOSIZE_TEXTraisedprogress_bar_colortkst
        Button Element - Specifies all types of buttons
        :param button_type:
        :param target:
        :param button_text:
        :param file_types:
        :param image_filename:
        :param image_size:
        :param image_subsample:
        :param border_width:
        :param scale: Adds multiplier to size (w,h)
        :param size: Size of field in characters
        :param auto_size_button:
        :param button_color:
        :param font:
        InputText.GetDEFAULT_PROGRESS_BAR_BORDER_WIDTH* Warning... no image specified in Image Element! *PurpleKeyboardCallback
    Display a user defined for and return the filled in data
    UberForm.__del__EasyProgressMeterDataClassFlexForm.SetIcontab_nameDEFAULT_AUTOSIZE_BUTTONSfgDEFAULT_BACKGROUND_COLORPaddestroy#a8cfddParentFormFileSaveAsDEFAULT_BUTTON_COLORDebug WindowMyFlexFormmasterwin_widthwin_heightRadio.__init__Checkbox.__del__my.Vertical.TProgressbarImageFilenameTKTextmaximumUberForm.AddFormInputText.UpdateELEM_TYPE_INPUT_SLIDER
    Display MsgBox with 2 buttons, "OK" and "Cancel"
    :param args:
    :param button_color:
    :param auto_close:
    :param auto_close_duration:
    :param font:
    :return:
    DefaultTextdisplay_text#F3FB62<ButtonRelease-1>MsgBoxYesNoDEFAULT_INPUT_TEXT_COLORMSG_BOX_OK_CANCELfav_icon {:6.2f} Iterations per SecondTextInputDefaultDEFAULT_ELEMENT_TEXT_COLOR
        Input a line of text Element
        :param default_text: Default value to display
        :param scale: Adds multiplier to size (w,h)
        :param size: Size of field in characters
        :param auto_size_text: True if should shrink field to fit the default text
        :param password_char: If non-blank, will display this character for every character typed
        :param background_color: Color for Element. Text or RGB Hex
        Checkbox.UpdatePROGRESS_BAR_STYLESkeycodeNICE_BUTTON_COLORSStringVarSetGlobalIcon#a7ad7f
    Display a MsgBox with a red button
    :param args:
    :param button_color:
    :param auto_close:
    :param auto_close_duration:
    :param font:
    :return:
    #183440DEFAULT_AUTOCLOSE_TIMEPrintClosestrvartarget_elementfile_nameWindowIcon{} of {}MyFormShowTabbedFormElement.__del__LISTBOX_SELECT_MODE_EXTENDED#efeccbgrooveTKrootDestroyedEasyProgressMeterCancel#00A949complete_outputMultiline.UpdateBUTTON_TYPE_BROWSE_FILENotRunningdefault_path#b4ffb4BluePurpleInitializeResultsuse_default_focusPasswordCharacterColumn.AddRowvistaTKStringVarInitialStateInputCombo.__init__
        Check Box Element
        :param text:
        :param default:
        :param scale: Adds multiplier to size (w,h)
        :param size: Size of field in characters
        :param auto_size_text: True if should shrink field to fit the default text
        :param background_color: Color for Element. Text or RGB Hex
        :param font:
        settings#92aa9dFlexForm.GetScreenDimensionstktext_labelNWUserData
    Display a MsgBox with a single buttoned labelled "OK"
    :param args:
    :param button_color:
    :param auto_close:
    :param auto_close_duration:
    :param font:
    :return:
    mainloopButton.ButtonCallBackAutoSizeButtonsNumRowsNeutralBlueProgressBar.UpdateBarxpnative
        Output Element - reroutes stdout, stderr to this window
        :param scale: Adds multiplier to size (w,h)
        :param size: Size of field in characters
        :param background_color: Color for Element. Text or RGB Hex
        output_elementwinfo_reqwidthThisRow#5d907d
        Progress Bar Element
        :param max_value:
        :param orientation:
        :param scale: Adds multiplier to size (w,h)
        :param size: Size of field in characters
        :param auto_size_text: True if should shrink field to fit the default text
        :param bar_color:
        :param style:
        :param border_width:
        :param relief:
        InputText.__del__verticalLISTBOX_SELECT_MODE_MULTIPLE<KeyRelease>SetOptions#dfedf2BarStyletheme_create_easy_print_dataCENTERstickymax_line_widthnum_lineslines_usedtotal_lines_neededSubmitTextJustificationstringvarRELIEF_RAISED#012f2fridgeEasyPrintClose#AAB6D3MSG_BOX_YES_NOLastButtonClickedcolorsFolderBrowseparmMeterText_GetNumLinesNeededLISTBOX_SELECT_MODE_BROWSEDEFAULT_PROGRESS_BAR_COLORListbox.__del__©NN©NN©NN©NNNNNNNNNNNNNNNNNNNNNNNNN©NN©NNToplevelTKAfterIDDEFAULT_LISTBOX_SELECT_MODEbutton_pressed_textColumn.__init__horizontalTFrameReturnValuesDictionaryListbox.__init__#96D2AB#DDE0DEObjToString.<locals>.<genexpr>DEFAULT_TEXT_COLORDEFAULT_ELEMENT_SIZEutcnowenter_submits#F2EFE8UberForm._CloseflatNonBlockingafter_cancelButton.ButtonPressCallBackCheckbox.__init__
        Image Element
        :param filename:
        :param scale: Adds multiplier to size (w,h)
        :param size: Size of field in characters
        DEFAULT_TEXT_JUSTIFICATIONSpin.__init__ELEM_TYPE_INPUT_LISTBOXRadioDictTextColoraskopenfilename#%02x%02x%02xScrolledTextBox#E3E3E3BUTTON_TYPE_CLOSES_WINColumn.__del__TKProgressBar.__del__LEFTMsgBoxErrorUberParentyviewButtonReleaseCallBackGetElementAtLocationBorderWidthELEM_TYPE_PROGRESS_BARprevious_stderrLastKeyboardEventTKOutput.flushtextwrapclassic
    Show message box.  Displays one line per user supplied argument. Takes any Type of variable to display.
    :param args:
    :param button_color:
    :param button_type:
    :param auto_close:
    :param auto_close_duration:
    :param icon:
    :param line_width:
    :param font:
    :return:
    DEFAULT_ELEMENT_PADDINGfieldbackgroundFlexForm.LayoutAndShowTKFrameELEM_TYPE_INPUT_CHECKBOXBUTTON_TYPE_SAVEAS_FILEprevious_stdoutthis_rowcolTKOutput.__init__ButtonTextRELIEF_RIDGE{} %filedialogMsgBoxCancelFlexForm.CloseNonBlockingFormLightGreen#A6B2BEGetPathBox
        Input Multi-line Element
        :param default_text:
        :param enter_submits:
        :param scale: Adds multiplier to size (w,h)
        :param size: Size of field in characters
        :param auto_size_text: True if should shrink field to fit the default text
        :param background_color: Color for Element. Text or RGB Hex
        #64778dRangemy.Horizontal.TProgressbarUseDictionary_my_windows{} Time Remaining
        Listbox Element
        :param values:
        :param select_mode: SELECT_MODE_BROWSE, SELECT_MODE_EXTENDED, SELECT_MODE_MULTIPLE, SELECT_MODE_SINGLE
        :param font:
        :param scale: Adds multiplier to size (w,h)
        :param size: Size of field in characters
        :param auto_size_text: True if should shrink field to fit the default text
        :param background_color: Color for Element. Text or RGB Hex        DEFAULT_PROGRESS_BAR_RELIEFsprintFlexForm.ReadwinnativeParentWindowFlexForm.GetElementAtLocation©8ÚformÚcontaining_frameÚtoplevel_formÚCharWidthInPixelsÚborder_depthÚ	focus_setÚrow_numÚflex_rowÚtk_row_frameÚcol_numÚelementÚfontÚauto_size_textÚelement_sizeÚ
text_colorÚelement_typeÚ	col_frameÚdisplay_textÚwidthÚheightÚlinesÚmax_line_lenÚ	num_linesÚ	stringvarÚjustificationÚjustifyÚanchorÚtktext_labelÚwraplenÚbtextÚbtypeÚ	auto_sizeÚbcÚtkbuttonÚphotoÚdefault_textÚshowÚ
combostyleÚlistbox_frameÚitemÚvsbÚdefault_valueÚfntÚ
char_widthÚprogress_lengthÚprogress_widthÚ	directionÚ	bar_colorÚIDÚvalueÚRadVarÚslider_lengthÚslider_widthÚ
range_fromÚrange_toÚtkscaleSave As...BrightColorsELEM_TYPE_INPUT_MULTILINEselectbackgroundmeasurebar2_ProgressMeterUpdateFormRemainedOpenDEFAULT_PROGRESS_BAR_SIZEMESSAGE_BOX_LINE_WIDTHTKCheckbuttonAddToReturnListELEM_TYPE_BLANKgrid#003532extendedhighlightthicknessELEM_TYPE_INPUT_SPINFlexForm.__enter__ImageSizeSelectModeTKRadioImage.__del__TKIntVarscrolledtextDEFAULT_METER_ORIENTATIONLabelAutoCloseDurationquitDEFAULT_ERROR_BUTTON_COLOREasyProgressMeterDataClass.ComputeProgressStatsSpinboxButton.__init__C:\code\venv\callllama\lib\site-packages\PySimpleGUI\PySimpleGUI.pyBrownBlue
        Input Combo Box Element (also called Dropdown box)
        :param values:
        :param scale: Adds multiplier to size (w,h)
        :param size: Size of field in characters
        :param auto_size_text: True if should shrink field to fit the default text
        :param background_color: Color for Element. Text or RGB Hex
        BUTTON_TYPE_REALTIME#40A860ReadNonBlockingIncrementELEM_TYPE_BUTTONMyWindows.IncrementHORIZONTALFlexForm.AddRowsMaxValue#D0D0D0EnterSubmitsFlexForm.KeyboardCallbackBackgroundColorDEFAULT_MARGINSborderwidthListbox.UpdateFlexForm.ReadNonBlockingEasyPrintoldDEFAULT_SLIDER_BORDER_WIDTHReturnKeyboardEvents#fcfff6highlightbackgroundfrom_DisplayTextPURPLES
        Text Element - Displays text in your form.  Can be updated in non-blocking forms
        :param text: The text to display
        :param scale: Scaling factor (w,h) (2,2)= 2 * Size
        :param size: Size of Element in Characters
        :param auto_size_text: True if the field should shrink to fit the text
        :param font: Font name and size ("name", size)
        :param text_color: Text Color name or RGB hex value '#RRGGBB'
        :param background_color: Background color for text (name or RGB Hex)
        :param justification: 'left', 'right', 'center'
        winfo_screenheightMAX_SCROLLED_TEXT_BOX_HEIGHTPhotoImageRadio.__del__winfo_width#F1F4FCDebugWin.CloseBUTTON_TYPE_BROWSE_FOLDERTKProgressBar.UpdateRootNeedsDestroyingGetFileBoxFlexForm._GetDefaultElementSizeEasyProgressMeterDataClass.__init__VERTICALTKScaleColumn.LayoutselectmodeButton.ButtonReleaseCallBackRELIEF_SUNKENFormReturnValuesMyWindows.Decrementtheme_settingscall llamaand llama shall respond
C:\Users\pfass\github\callllama\gui.pyNationGamecall llama!<module>__annotations__Create a new NavigableString associated with this soup.currentTagBeautiful Soup
Elixir and Tonic
"The Screen-Scraper's Friend"
http://www.crummy.com/software/BeautifulSoup/

Beautiful Soup uses a pluggable XML or HTML parser to parse a
(possibly invalid) document into a tree representation. Beautiful Soup
provides methods and Pythonic idioms that make it easy to navigate,
search, and modify the parse tree.

Beautiful Soup works with Python 2.7 and up. It works better if lxml
and/or html5lib is installed.

For more than you ever wanted to know about Beautiful Soup, see the
documentation:
http://www.crummy.com/software/BeautifulSoup/bs4/doc/

.pycBeautifulSoup._popToTagNo parser was explicitly specified, so I'm using the best available %(markup_type)s parser for this system ("%(parser)s"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.

The code that caused this warning is on line %(line_number)s of the file %(filename)s. To get rid of this warning, pass the additional argument 'features="%(parser)s"' to the BeautifulSoup constructor.
4.6.3"%s" looks like a filename, not markup. You should probably open this file and pass the filehandle into Beautiful Soup.BeautifulSoup.handle_dataBeautifulStoneSoupparseOnlyThesesubclassfrom_encoding[document]most_recently_poppedBeautifulSoup.__copy__BeautifulSoup.handle_starttagThe "%s" argument to the BeautifulSoup constructor has been renamed to "%s."decoded_markuphttps:markupMassageCouldn't find a tree builder with the features you requested: %s. Do you need to install a parser library?C:\code\venv\callllama\lib\site-packages\bs4\__init__.pykwattrsBS4 does not respect the markupMassage argument to the BeautifulSoup constructor. The tree builder is responsible for any necessary markup massage.fromEncodingBS4 does not respect the convertEntities argument to the BeautifulSoup constructor. Entities are always converted to Unicode characters.encoding_partBeautifulSoup.new_stringBS4 does not respect the isHTML argument to the BeautifulSoup constructor. Suggest you use features='lxml' for HTML and features='lxml-xml' for XML.smartQuotesToThe BeautifulStoneSoup class is deprecated. Instead of using it, pass features="xml" into the BeautifulSoup constructor.Leonard Richardson (leonardr@segfault.org)"%s" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.BeautifulSoup.resetcant_start_withpreserve_whitespace_tag_stackstack_sizeBeautifulSoup.insert_before.pyostacklevelcontainerClasscurrent_datastrippableBeautifulStoneSoup.__init__ 
	BS4 does not respect the selfClosingTags argument to the BeautifulSoup constructor. The tree builder is responsible for understanding self-closing tags.BeautifulSoup.endDataASCII_SPACES_check_markup_is_urlinclusivePop
    This class defines the basic interface called by the tree builders.

    These methods will be called by the parser:
      reset()
      feed(markup)

    The tree builder may call these methods from its feed() implementation:
      handle_starttag(name, attrs) # See note about return value
      handle_endtag(name)
      handle_data(data) # Appends to the current data node
      endData(containerClass=NavigableString) # Ends the current data node

    No matter how complicated the underlying parser is, you should be
    able to build a tree using 'start tag' events, 'end tag' events,
    'data' events, and "done with data" events.

    If you encounter an empty-element tag (aka a self-closing tag,
    like HTML's <br> tag), call handle_starttag and then
    handle_endtag.
     encoding="%s"BeautifulSoup.insert_afterBeautifulSoup.__init__<module bs4>Create a new tag associated with this soup.BeautifulSoup.new_tagBeautifulSoup._feedPops the tag stack up to and including the most recent
        instance of the given tag. If inclusivePop is false, pops the tag
        stack up to but *not* including the most recent instqance of
        the given tag.©ÚselfÚmarkupÚfeaturesÚbuilderÚ
parse_onlyÚfrom_encodingÚexclude_encodingsÚkwargsÚdeprecated_argumentÚargÚoriginal_featuresÚbuilder_classÚmarkup_typeÚcallerÚglobalsÚline_numberÚfilenameÚfnlÚvaluesÚpossible_filenameÚis_fileÚeFeatureNotFoundBeautifulSoup._check_markup_is_urlConstructor.

        :param markup: A string or a file-like object representing
        markup to be parsed.

        :param features: Desirable features of the parser to be used. This
        may be the name of a specific parser ("lxml", "lxml-xml",
        "html.parser", or "html5lib") or it may be the type of markup
        to be used ("html", "html5", "xml"). It's recommended that you
        name a specific parser, so that Beautiful Soup gives you the
        same results across platforms and virtual environments.

        :param builder: A specific TreeBuilder to use instead of looking one
        up based on `features`. You shouldn't need to use this.

        :param parse_only: A SoupStrainer. Only parts of the document
        matching the SoupStrainer will be considered. This is useful
        when parsing part of a document that would otherwise be too
        large to fit into memory.

        :param from_encoding: A string indicating the encoding of the
        document to be parsed. Pass this in if Beautiful Soup is
        guessing wrongly about the document's encoding.

        :param exclude_encodings: A list of strings indicating
        encodings known to be wrong. Pass this in if you don't know
        the document's encoding but you know Beautiful Soup's guess is
        wrong.

        :param kwargs: For backwards compatibility purposes, the
        constructor accepts certain keyword arguments used in
        Beautiful Soup 3. None of these arguments do anything in
        Beautiful Soup 4 and there's no need to actually pass keyword
        arguments into the constructor.
        You provided Unicode markup but also provided a value for from_encoding. Your from_encoding will be ignored.BS4 does not respect the smartQuotesTo argument to the BeautifulSoup constructor. Smart quotes are always converted to Unicode characters.Error building tree: supposedly %r was inserted into %r after the fact, but I don't see it!BeautifulSoup objects don't support insert_before(). 
        Check if markup looks like it's actually a url and raise a warning 
        if so. Markup can be unicode or str (py2) / bytes (py3).
        Add an object to the parse tree.BeautifulSoup.handle_endtag_soupDEFAULT_BUILDER_FEATURESf_linenoBeautifulSoup.popTagBeautifulSoup.decodeNO_PARSER_SPECIFIED_WARNINGCopyright (c) 2004-2018 Leonard RichardsonBeautifulSoup objects don't support insert_after().<?xml version="1.0"%s?>
BeautifulSoup.__getstate__pushTagStopParsingReturns a string or Unicode representation of this document.
        To get Unicode, pass None for encoding.BeautifulSoup.pushTagold_nameROOT_TAG_NAMEPush a start tag on to the stack.

        If this method returns None, the tag was rejected by the
        SoupStrainer. You should proceed as if the tag had not occurred
        in the document. For instance, if this was a self-closing tag,
        don't call handle_endtag.
        Deprecated interface to an XML parser.supports_unicode_filenamesBeautifulSoup.object_was_parsedBeautifulSoup._check_markup_is_url.<locals>.<genexpr>BeautifulSoup.__init__.<locals>.deprecated_argumentstartElementÛ   úareaúbaseúbrúcolúembedúhrúimgúinputúkeygenúlinkúmenuitemúmetaúparamúsourceútrackúwbrúbasefontúbgsoundúcommandúframeúimageúisindexúnextidúspacerblock_elementsendDocumentintersectionC:\code\venv\callllama\lib\site-packages\bs4\builderThis TreeBuilder knows facts about HTML.

    Such as which tags are empty-element tags.
    meta_encodingSAXTreeBuilder.endPrefixMapping<module bs4.builder>SAXTreeBuilder.endElementdefaultdictnsTupleregister_treebuilders_fromhttp_equivcandidate_setthis_module_htmlparserreversepermissive_lxmlSAXTreeBuilder.closeSAXTreeBuilder.charactersSAXTreeBuilder.startPrefixMappingÛ#   úaddressúarticleúasideú
blockquoteúcanvasúddúdivúdlúdtúfieldsetú
figcaptionúfigureúfooterúformúh1úh2úh3úh4úh5úh6úheaderúhrúliúmainúnavúnoscriptúolúoutputÚpúpreúsectionútableútfootúulúvideoSAXTreeBuilder.feedtreebuilder_classSAXTreeBuilder.startElementTreeBuilderRegistry¼   úsourceúimgúmetaúinputúparamúkeygenúcolúhrúisindexúspacerúcommandúframeúembedúlinkúmenuitemúimageúbasefontúwbrútrackúareaúbrúnextidúbgsoundúbaseissubclassTreeBuilderRegistry.registerTreeBuilder.prepare_markupTurn a document into a Beautiful Soup object tree.HTMLTreeBuilder.set_up_substitutionsTreeBuilder.test_fragment_to_documentcandidateswe_have_the_featureSAXTreeBuilder.endElementNS_html5libbuilders_for_featureuniversaltag_specificC:\code\venv\callllama\lib\site-packages\bs4\builder\__init__.pyWrap an HTML fragment to make it look like a document.

        Different parsers do this differently. For instance, lxml
        introduces an empty <head> tag, and html5lib
        doesn't. Abstracting this away lets us write simple tests
        which run HTML fragments through the parser and compare the
        results against other HTML fragments.

        This method should not be used outside of tests.
        [Unknown tree builder]TreeBuilder._replace_cdata_list_attribute_valuesûÚ*[   zclassz	accesskeyzdropzoneÚa[   zrelzrevzlink[   zrelzrevztd[   zheaderszth[   zheaderszform[   zaccept-charsetzobject[   zarchivezarea[   zrelzicon[   zsizesziframe[   zsandboxzoutput[   zfor0SAXTreeBuilder.startElement.<locals>.<genexpr>SAXTreeBuilder.startDocumentReplaces class="foo bar" with class=["foo", "bar"]

        Modifies its input in place.
        A Beautiful Soup treebuilder that listens for SAX events.TreeBuilder.can_be_empty_elementSAXTreeBuilder.startElementNSTreeBuilderRegistry.__init__SAXTreeBuilder.endDocumentMight a tag with this name be an empty-element tag?

        The final markup may or may not actually present this tag as
        self-closing.

        For instance: an HTMLBuilder does not consider a <p> tag to be
        an empty-element tag (it's not in
        HTMLBuilder.empty_element_tags). This means an empty <p> tag
        will be presented as "<p></p>", not "<p />".

        The default implementation has no opinion about which tags are
        empty-element tags, so a tag will be presented as an
        empty-element tag if and only if it has no contents.
        "<foo></foo>" will become "<foo />", and "<foo>bar</foo>" will
        be left alone.
        ¼#   úmainúh2Úpúnavúformúh5únoscriptúulúliúdivúdtúhrútfootú
blockquoteúh3úvideoúfooterúasideúfigureú
figcaptionúh4úh6úheaderúfieldsetúdlúh1úpreúsectionúarticleúoutputúaddressúddútableúcanvasúolRegister a treebuilder based on its advertised features.Copy TreeBuilders from the given module into this module.TreeBuilderRegistry.lookupElement.removeChildTreeBuilderForHtml5lib.insertDoctypeElement.cloneNodeElement.setAttributeslast_childs_last_descendantTextNode<module bs4.builder._html5lib>converted_attributesTreeBuilderForHtml5lib.testSerializer.<locals>.serializeElementHTML5TreeBuilderHTML5TreeBuilder.create_treebuilderAttrList.keysold_nodeTreeBuilderForHtml5lib.elementClassnew_parentnew_parent_elementfinal_next_elementnew_parents_last_descendantnew_parents_last_childnew_parents_last_descendant_next_elementto_appendfirst_childAttrList.__contains__lastindexElement.insertTextAttrList.__len__You provided a value for parse_only, but the html5lib tree builder doesn't support parse_only. The entire document will be parsed.AttrList.__init__string_childold_elementnew_elementTreeBuilderForHtml5lib.fragmentClass^(.*?)(?: PUBLIC "(.*?)"(?: "(.*?)")?| SYSTEM "(.*?)")?$TreeBuilderForHtml5lib.__init__Element.reparentChildrenAttrList.itemsTreeBuilderForHtml5lib.appendChildextra_kwargsElement.getNameTupleTreeBuilderForHtml5lib.commentClassunderlying_builderTextNode.__init__HTML5TreeBuilder.feedAttrList.__getitem__TreeBuilderForHtml5lib.documentClassdoctype_reAttrList.__iter__Use html5lib to build a tree.Move all of this tag's children into another tag.Element.hasContentElement.appendChildYou provided a value for exclude_encoding, but the html5lib tree builder doesn't support exclude_encoding.TreeBuilderForHtml5lib.getDocumentnew_html5libC:\code\venv\callllama\lib\site-packages\bs4\builder\_html5lib.pyHTML5TreeBuilder.test_fragment_to_documentElement.insertBeforeTextNode.cloneNode<html><head></head><body>%s</body></html>treebuilder_baseElement.getAttributesAttrList.__setitem__HTML5TreeBuilder.prepare_markup[document_fragment]TreeBuilderForHtml5lib.getFragmentreal_namehandle_empty_elementCONSTRUCTOR_STRICT_IS_DEPRECATEDunexpected call to parse_starttag()
  <[a-zA-Z][-.a-zA-Z0-9:_]*          # tag name
  (?:\s+                             # whitespace before attribute name
    (?:[a-zA-Z_][-.:a-zA-Z0-9_]*     # attribute name
      (?:\s*=\s*                     # value indicator
        (?:'[^']*'                   # LITA-enclosed value
          |\"[^\"]*\"                # LIT-enclosed value
          |[^'\">\s]+                # bare value
         )
       )?
     )
   )*
  \s*                                # trailing whitespace
DOCTYPE bs4.builder._htmlparserhandle_declHTMLPARSERBeautifulSoupHTMLParser.handle_pitagfindattr_dictattrvalueparser_argsBeautifulSoupHTMLParser.handle_starttagC:\code\venv\callllama\lib\site-packages\bs4\builder\_htmlparser.pyBeautifulSoupHTMLParser.unknown_declhandle_startendtagset_cdata_modehandle_commentrawdataattrnameBeautifulSoupHTMLParser.handle_startendtagBeautifulSoupHTMLParser.handle_endtaglasttag
        :return: A 4-tuple (markup, original encoding, encoding
        declared within markup, whether any characters had to be
        replaced with REPLACEMENT CHARACTER).
        convert_charrefs<module bs4.builder._htmlparser>__starttag_textHTMLParserTreeBuilder.feedgetposCDATA[\s*((?<=[\'"\s])[^\s/>][^\s/=>]*)(\s*=+\s*(\'[^\']*\'|"[^"]*"|(?![\'"])[^>\s]*))?locatestarttagendHTMLParserTreeBuilder.prepare_markupcdata_elemCONSTRUCTOR_TAKES_CONVERT_CHARREFScheck_for_whole_start_tagattrfindIn Python 3, HTMLParser subclasses must implement error(), although this
        requirement doesn't appear to be documented.

        In Python 2, HTMLParser implements error() as raising an exception.

        In any event, this method is called only on very strange markup and our best strategy
        is to pretend it didn't happen and keep going.
        HTMLParseErrorinterestingcheck_already_closed&%s""BeautifulSoupHTMLParser.handle_entityrefBeautifulSoupHTMLParser.handle_declBeautifulSoupHTMLParser.handle_commenthandle_charrefCDATA_CONTENT_ELEMENTSjunk characters in start tag: %rPython's built-in HTMLParser cannot parse the given document. This is not a bug in Beautiful Soup. The best solution is to install an external parser (lxml or html5lib), and use Beautiful Soup with that parser. See http://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser for help.attrfind_tolerantBeautifulSoupHTMLParser.handle_dataBeautifulSoupHTMLParser.erroralready_closed_empty_elementBeautifulSoupHTMLParser.__init__Use the HTMLParser library to parse HTML files that aren't too bad.BeautifulSoupHTMLParser.handle_charref</\s*%s\s*>CONSTRUCTOR_TAKES_STRICTHTMLParserTreeBuilder.__init__strip_cdataLXMLTreeBuilderForXML.startLXMLTreeBuilderForXML.parser_forXMLParserCHUNK_SIZELXMLTreeBuilder.feed_prefix_for_namespaceLXMLTreeBuilderForXML.piLXMLTreeBuilderForXML._getNsTagHandle comments as Comment objects.DEFAULT_PARSER_CLASSinverted_nsmapLXMLTreeBuilderForXML.default_parserbs4.builder._lxml_default_parsercompleted_tagLXMLTreeBuilderForXML.closelxml-htmlLXMLTreeBuilderForXML.test_fragment_to_documentLXMLTreeBuilderForXML.datanew_attrsLXMLTreeBuilderForXML.comment<?xml version="1.0" encoding="utf-8"?>
%s
        :yield: A series of 4-tuples.
         (markup, encoding, declared encoding,
          has undergone character replacement)

        Each 4-tuple represents a strategy for parsing the document.
        LXMLTreeBuilderForXML.feedLXMLTreeBuilderForXML.start.<locals>.<genexpr>processing_instruction_classLXMLTreeBuilderForXML.__init__<html><body>%s</body></html>LXMLTreeBuilderForXML.prepare_markupParserErrorLXMLTreeBuilderForXML._prefix_for_namespacensmapsLXMLTreeBuilderForXML.endrecover<module bs4.builder._lxml>Find the currently active prefix for the given namespace.pubidLXMLTreeBuilderForXML.doctypeDEFAULT_NSMAPSLXMLTreeBuilder.default_parserLXMLTreeBuilder.test_fragment_to_documentC:\code\venv\callllama\lib\site-packages\bs4\builder\_lxml.py  þÿ([-])strip_byte_order_markcharacters_for_reUnicodeDammit._codecûó   )zeuroz20ACó   ú ó   )zsbquoz201Aó   )zfnofz192ó   )zbdquoz201Eó   )zhellipz2026ó   )zdaggerz2020ó   )zDaggerz2021ó   )zcircz2C6ó   )zpermilz2030ó   )zScaronz160ó   )zlsaquoz2039ó   )zOEligz152ó   ú?ó   )z#x17Dz17Dó   r   ó   r   ó   )zlsquoz2018ó   )zrsquoz2019ó   )zldquoz201Có   )zrdquoz201Dó   )zbullz2022ó   )zndashz2013ó   )zmdashz2014ó   )ztildez2DCó   )ztradez2122ó   )zscaronz161ó   )zrsaquoz203Aó   )zoeligz153ó   r   ó   )z#x17Ez17Eó   )zYumlÚ 0ûó   zEURó   ú ó   ú,ó   Úfó   z,,ó   z...ó   ú+ó   z++ó   ú^ó   ú%ó   ÚSó   ú<ó   zOEó   ú?ó   ÚZó   r   ó   r   ó   ú'ó   r   ó   ú"ó   r    ó   Ú*ó   ú-ó   z--ó   ú~ó   z(TM)ó   Úsó   ú>ó   zoeó   r   ó   Úzó   úYó    r   ó   ¡ú!ó   ¢Úcó   £zGBPó   ¤ú$ó   ¥zYENó   ¦ú|ó   §r   ó   ¨z..ó   ©Ú ó   ªz(th)ó   «z<<ó   ¬r6   ó   ­r   ó   ®z(R)ó   ¯r%   ó   °Úoó   ±z+-ó   ²ú2ó   ³ú3ó   ´)r   zacuteó   µÚuó   ¶ÚPó   ·r#   ó   ¸r   ó   ¹Ú1ó   ºz(th)ó   »z>>ó   ¼z1/4ó   ½z1/2ó   ¾z3/4ó   ¿r   ó   ÀÚAó   Ár`   ó   Âr`   ó   Ãr`   ó   Är`   ó   År`   ó   ÆzAEó   ÇÚCó   ÈÚEó   Érj   ó   Êrj   ó   Ërj   ó   ÌÚIó   Íro   ó   Îro   ó   Ïro   ó   ÐÚDó   ÑÚNó   ÒÚOó   Órx   ó   Ôrx   ó   Õrx   ó   Örx   ó   ×r#   ó   Ørx   ó   ÙÚUó   Úr   ó   Ûr   ó   Ür   ó   Ýr3   ó   ÞÚbó   ßÚBó   àÚaó   ár   ó   âr   ó   ãr   ó   är   ó   år   ó   æzaeó   çr8   ó   èÚeó   ér   ó   êr   ó   ër   ó   ìÚió   ír   ó   îr   ó   ïr   ó   ðrJ   ó   ñÚnó   òrJ   ó   órJ   ó   ôrJ   ó   õrJ   ó   örJ   ó   ÷ú/ó   ørJ   ó   ùrR   ó   úrR   ó   ûrR   ó   ürR   ó   ýÚyó   þr   ó   ÿr¬   0triedchunk_starthtml_meta_reUnicodeDammit.__init__<\s*meta[^>]+charset\s*=\s*["']?([^>]*?)[ /;'">]override_encodingssmart_quotes_toEncodingDetector.find_declared_encodingSubstitute XML entities for special XML characters.

        :param value: A string to be substituted. The less-than sign
          will become &lt;, the greater-than sign will become &gt;,
          and any ampersands will become &amp;. If you want ampersands
          that appear to be part of an entity definition to be left
          alone, use substitute_xml_containing_entities() instead.

        :param make_quoted_attribute: If True, then the string will be
         quoted, as befits an attribute value.
        EntitySubstitution.quoted_attribute_valueBARE_AMPERSAND_OR_BRACKETLAST_MULTIBYTE_MARKERreverse_lookupshift-jisCHARACTER_TO_HTML_ENTITYfind_codec_usableMake a value into a quoted XML attribute, possibly escaping it.

         Most strings will be quoted using double quotes.

          Bob's Bar -> "Bob's Bar"

         If a string contains double quotes, it will be quoted using
         single quotes.

          Welcome to "my bar" -> 'Welcome to "my bar"'

         If a string contains both single and double quotes, the
         double quotes will be escaped, and the string will be quoted
         using double quotes.

          Welcome to "Bob's Bar" -> "Welcome to &quot;Bob's bar&quot;
        UnicodeDammit._to_unicodeaposEntitySubstitution.substitute_xml_containing_entities_populate_class_variablesSubstitute XML entities for special XML characters.

        :param value: A string to be substituted. The less-than sign will
          become &lt;, the greater-than sign will become &gt;, and any
          ampersands that are not part of an entity defition will
          become &amp;.

        :param make_quoted_attribute: If True, then the string will be
         quoted, as befits an attribute value.
        unicode_markupSome characters could not be decoded, and were replaced with REPLACEMENT CHARACTER.Used with a regular expression to substitute the
        appropriate XML entity for an XML special character.UnicodeDammit._convert_fromSuggests a number of possible encodings for a bytestring.

    Order of precedence:

    1. Encodings you specifically tell EncodingDetector to try first
    (the override_encodings argument to the constructor).

    2. An encoding declared within the bytestring itself, either in an
    XML declaration (if the bytestring is to be interpreted as an XML
    document), or in a <meta> tag (if the bytestring is to be
    interpreted as an HTML document.)

    3. An encoding detected through textual analysis by chardet,
    cchardet, or a similar external library.

    4. UTF-8.

    5. Windows-1252.
    ([<>&])EntitySubstitution._substitute_xml_entityembedded_encodingwindows_1252WINDOWS_1252_TO_UTF8in_bytesmain_encodingbyte_chunks^<\?.*encoding=['"](.*?)['"].*\?>detwingleEncodingDetector.encodingsMS_CHARSsmart_quotes_compiledEncodingDetector.strip_byte_order_markReplace certain Unicode characters with named HTML entities.

        This differs from data.encode(encoding, 'xmlcharrefreplace')
        in that the goal is to make the result more readable (to those
        with ASCII displays) rather than to recover from
        errors. There's absolutely nothing wrong with a UTF-8 string
        containg a LATIN SMALL LETTER E WITH ACUTE, but replacing that
        character with "&eacute;" will make it more readable to some
        people.
        UnicodeDammit.find_codecÿþ  CHARSET_ALIASESsearch_entire_documentBeautiful Soup bonus library: Unicode, Dammit

This library converts a bytestream to Unicode through any means
necessary. It is heavily based on code from Mark Pilgrim's Universal
Feed Parser. It works best on XML and HTML, but it does not rewrite the
XML or HTML to reflect a new encoding; that's the tree builder's job.
re_definitionC:\code\venv\callllama\lib\site-packages\bs4\dammit.pyCHARACTER_TO_HTML_ENTITY_RE&#xchardet_encodingiconv_codecYield a number of encodings that might work for this markup.Given a document, tries to find its declared encoding.

        An XML encoding is declared at the beginning of the document.

        An HTML encoding is declared in a <meta> tag, hopefully near the
        beginning of the document.
        proposedx-sjischardet_typedeclared_encoding_matchUTF-8 is the only currently supported main encoding.EntitySubstitution.substitute_html([<>]|&(?!#\d+;|#x[0-9a-fA-F]+;|\w+;))Windows-1252 and ISO-8859-1 are the only currently supported embedded encodings.EncodingDetector.__init__xml_endposhtml_endposquote_withsmart_quotes_recodepoint2nameMS_CHARS_TO_ASCIImatchobjchardet_dammitsniffed_encodingûé   s   â¬é   s   âé   s   Æé   s   âé   s   â¦é   s   â é   s   â¡é   s   Ëé   s   â°é   s   Å é   s   â¹é   s   Åé   s   Å½é   s   âé   s   âé   s   âé   s   âé   s   â¢é   s   âé   s   âé   s   Ëé   s   â¢é   s   Å¡é   s   âºé   s   Åé   s   Å¾é   s   Å¸é    s   Â é¡   s   Â¡é¢   s   Â¢é£   s   Â£é¤   s   Â¤é¥   s   Â¥é¦   s   Â¦é§   s   Â§é¨   s   Â¨é©   s   Â©éª   s   Âªé«   s   Â«é¬   s   Â¬é­   s   Â­é®   s   Â®é¯   s   Â¯é°   s   Â°é±   s   Â±é²   s   Â²é³   s   Â³é´   s   Â´éµ   s   Âµé¶   s   Â¶é·   s   Â·é¸   s   Â¸é¹   s   Â¹éº   s   Âºé»   s   Â»é¼   s   Â¼é½   s   Â½é¾   s   Â¾é¿   s   Â¿éÀ   s   ÃéÁ   s   ÃéÂ   s   ÃéÃ   s   ÃéÄ   s   ÃéÅ   s   ÃéÆ   s   ÃéÇ   s   ÃéÈ   s   ÃéÉ   s   ÃéÊ   s   ÃéË   s   ÃéÌ   s   ÃéÍ   s   ÃéÎ   s   ÃéÏ   s   ÃéÐ   s   ÃéÑ   s   ÃéÒ   s   ÃéÓ   s   ÃéÔ   s   ÃéÕ   s   ÃéÖ   s   Ãé×   s   ÃéØ   s   ÃéÙ   s   ÃéÚ   s   ÃéÛ   s   ÃéÜ   s   ÃéÝ   s   ÃéÞ   s   Ãéß   s   Ãéà   s   Ã éá   ó   ¡éâ   s   Ã¢éã   s   Ã£éä   s   Ã¤éå   s   Ã¥éæ   s   Ã¦éç   s   Ã§éè   s   Ã¨éé   s   Ã©éê   s   Ãªéë   s   Ã«éì   s   Ã¬éí   s   Ã­éî   s   Ã®éï   s   Ã¯éð   s   Ã°éñ   s   Ã±éò   s   Ã²éó   s   Ã³éô   s   Ã´éõ   s   Ãµéö   s   Ã¶é÷   s   Ã·éø   s   Ã¸éù   s   Ã¹éú   s   Ãºéû   s   Ã»éü   s   Ã¼éý   s   Ã½éþ   s   Ã¾0A class for detecting the encoding of a *ML document and
    converting it to a Unicode string. If the source encoding is
    windows-1252, can replace MS smart quotes with their HTML or XML
    equivalents._substitute_html_entityUnicodeDammit.declared_html_encodingEntitySubstitution._populate_class_variablesxml_encoding_reGiven a string and its encoding, decodes the string into Unicode.
        %encoding is a string recognized by encodings.aliasesMULTIBYTE_MARKERS_AND_SIZESFix characters from one encoding embedded in some other encoding.

        Currently the only situation supported is Windows-1252 (or its
        subset ISO-8859-1), embedded in UTF-8.

        The input must be a bytestring. If you've already converted
        the document to Unicode, you're too late.

        The output is a bytestring in which `embedded_encoding`
        characters have been converted to their `main_encoding`
        equivalents.
        CHARACTER_TO_XML_ENTITY<module bs4.dammit>UnicodeDammit.detwingleEntitySubstitution._substitute_html_entitySubstitute XML or HTML entities for the corresponding characters.EncodingDetector._usableChanges a MS smart quote character to an XML or HTML
        entity, or an ASCII character.ENCODINGS_WITH_SMART_QUOTESIf a byte-order mark is present, strip it and return the encoding it implies.UnicodeDammit._sub_ms_charFIRST_MULTIBYTE_MARKERNavigableString.__copy__findNextSiblingindent_contentsI don't know how to match against a %sunicode-escapeprettifyTag.childGeneratorTag.select.<locals>.Counter.nth_child_of_typeForce an attribute value into a string representation.

        A multi-valued attribute will be converted into a
        space-separated stirng.
        findAllCannot replace an element with its contents when thatelement is not part of a tree.Is this tag an empty-element tag? (aka a self-closing tag)

        A tag that has contents is never an empty-element tag.

        A tag that has no contents may or may not be an empty-element
        tag. It depends on the builder used to create the tag. If the
        builder has a designated list of empty-element tags, then only
        a tag whose name shows up in that list is considered an
        empty-element tag.

        If the builder has no designated list of empty-element tags,
        then any tag with no contents is an empty-element tag.
        PageElement.previousSiblingGeneratorNavigableString.output_readyprevious_elementsTag.has_keydescendantsIs this element part of an XML tree or an HTML tree?

        This is used when mapping a formatter name ("minimal") to an
        appropriate function (one that performs entity-substitution on
        the contents of <script> and <style> tags, or not). It can be
        inefficient, but it should be called very rarely.
        PageElement._last_descendantInvalid group selection syntax: %sselect_one_formatter_for_nameNavigableString.__getattr__stopNodematch_against__getnewargs__NavigableString.__new__HTMLAwareEntitySubstitution.substitute_htmlReturns the value of the 'key' attribute for the tag, or
        the value given for 'default' if it doesn't have that
        attribute.<%s%s%s%s>PageElement.parentGeneratorold_parentPY3Kdefault_candidate_generatorReturns the closest parent of this Tag that matches the given
        criteria.Calling a tag like a function is the same as calling its
        find_all() method. Eg. tag('a') returns a list of all the A tags
        found within this tag.Tag.has_attr
        Find the index of a child by identity, not value. Avoids issues with
        tag.contents.index(element) getting the index of equal elements.
        Tag.encode_contentsdecode_contentsA SGML processing instruction.Returns a Unicode representation of this tag and its contents.

        :param eventual_encoding: The tag is destined to be
           encoded into this encoding. This method is _not_
           responsible for performing that encoding. This information
           is passed in so that it can be substituted in if the
           document contains a <META> tag that mentions the document's
           encoding.
        limitHTMLXMLFormatterPageElement.setupCharsetMetaAttributeValue.__new__The default HTML formatter.id_matchesmarkup_attrsTag.select.<locals>.<lambda>recursive_selectprevious_siblingspredecessorprevious_childnext_childparser_classparserClassTag.descendants   Default candidate generator, tag name="%s"Appends the given tag to the contents of this tag._selector_combinatorsfindPreviousSiblingA copy of a Tag is a new Tag, unconnected to the parse tree.
        Its contents are a copy of the old Tag's contents.
        NavigableString.__getnewargs__Yield all strings of certain classes, possibly stripping them.

        By default, yields only NavigableString and CData objects. So
        no comments, processing instructions, etc.
        "[^"]*:[^"]*"Element has no parent, so 'after' has no meaning.]]>Tag.__eq__PageElement._find_onefindParentsCreate a new NavigableString.

        When unpickling a NavigableString, this method is called with
        the string in DEFAULT_OUTPUT_ENCODING. That encoding needs to be
        passed in to the superclass's __new__ or the superclass won't know
        how to handle non-ASCII characters.
        Returns true iff this tag has the same name, the same attributes,
        and the same contents (recursively) as the given tag.nextGeneratorTag.get_textUnsupported or invalid CSS selector: "%s"ResultSet object has no attribute '%s'. You're probably treating a list of items like a single item. Did you call find_all() when you meant to call find()?SoupStrainer._normalize_search_valuesubstitute_entitiesMinimalHTMLFormatter.substitutePageElement.find_next_siblings_includes_valuetag_idCan't insert an element after itself.Tag.select.<locals>.recursive_selectfind_previous_siblings
        Get all child strings, concatenated using the given separator.
        PageElement._tag_name_matches_and.<locals>._matchReturns the first item that matches the given criteria and
        appears before this Tag in the document.A minimal HTML formatter.Tag.__hash__^(?P<tag>[a-zA-Z0-9][-.a-zA-Z0-9:_]*)?\[(?P<attribute>[\w-]+)(?P<operator>[=~\|\^\$\*]?)=?"?(?P<value>[^\]"]*)"?\]$recursive_candidate_generatornew_child(Recursive select picked up candidate %s %s)_is_or_starts_with_dashpreviousGeneratorContains the navigational information for some part of the page
    (either a tag or a piece of text)<![CDATA[Tag.__str__Destructively rips this element out of the tree.ContentMetaAttributeValue.encodepub_idPageElement.find_all_nextPageElement.find_all_previous©.ÚselfÚselectorÚ_candidate_generatorÚlimitÚcontextÚ	selectorsÚused_selectorsÚselected_object_idsÚpartial_selectorÚ
candidatesÚ	candidateÚ	object_idÚtokensÚcurrent_contextÚindexÚtokenÚnew_contextÚnew_context_idsÚrecursive_candidate_generatorÚtag_nameÚcheckerÚmÚ	attributeÚoperatorÚvalueÚtag_idÚ
id_matchesÚklassÚclassesÚclasses_matchÚpseudoÚpseudo_attributesÚfoundÚpseudo_typeÚpseudo_valueÚCounterÚnext_tag_siblingÚ
next_tokenÚrecursive_selectÚ_use_candidate_generatorÚcheckÚdefault_candidate_generatorÚcountÚtagÚresultÚiformat_string     FAILURE %s %sCHARSET_REXMLFormatter.substituteCannot replace a Tag with its parent.prettyPrintindentLevelunwrapRenders the contents of this tag as a bytestring.

        :param indent_level: Each line of the rendering will be
           indented this many spaces.

        :param eventual_encoding: The bytestring will be in this encoding.

        :param formatter: The output formatter responsible for converting
           entities to Unicode characters.
        original_valueResultSet.__getattr__strainerFinal verdict:Running CSS selector "%s"AttributeValueWithCharsetSubstitution SYSTEM "%s"findNextSiblingsTag.decomposemarkup_namecall_function_with_tag_datamarkup_attr_mapnext_elements_is_xmlnth-of-typeindent_spaceTag.__getitem___alias.<locals>.aliasPageElement.next_siblingsTag._all_stringscdata_containing_tags_substitute_if_appropriateConvenience property to get the single string within this tag.

        :Return: If this tag has a single string child, return value
         is that string. If this tag has no children, or more than one
         child, return value is None. If this tag has one child tag,
         return value is the 'string' attribute of the child tag,
         recursively.
        Entity substitution rules that are aware of some HTML quirks.

    Specifically, the contents of <script> and <style> tags should not
    undergo entity substitution.

    Incoming NavigableString objects are checked to see if they're the
    direct children of a <script> or <style> tag.
    PageElement.previous_siblings  Token was consumed by the previous combinator.replaceWithChildrenIterates over a generator looking for things that match.tag_name_rePageElement.nextGenerator<!DOCTYPE normalized_attrs    Calling select("%s") recursively on %s %sTag.__bool__is_initializedaccept_selflocal_nameTag.__unicode__^[a-zA-Z0-9][-.a-zA-Z0-9:_]*$Tag.find_allPerform a CSS selection operation on the current element.my_childfindPreviousSiblingsCData strings are passed into the formatter.
        But the return value is ignored.PageElement._attribute_checker.<locals>._is_or_starts_with_dashTag._should_pretty_printRepresents a found HTML tag with its attributes and contents.PageElement.find_parent----------------------------------------Tag.clearSoupStrainer.searchReturns true iff this tag is not identical to the other tag,
        as defined in __eq__.PageElement.extractReturns the closest sibling to this Tag that matches the
        given criteria and appears after this Tag in the document.PageElement.previousGeneratorHTMLXMLFormatter.substitutePageElement.next_elementsNavigableString.nameRenders the contents of this tag as a Unicode string.

        :param indent_level: Each line of the rendering will be
           indented this many spaces.

        :param eventual_encoding: The tag is destined to be
           encoded into this encoding. This method is _not_
           responsible for performing that encoding. This information
           is passed in so that it can be substituted in if the
           document contains a <META> tag that mentions the document's
           encoding.

        :param formatter: The output formatter responsible for converting
           entities to Unicode characters.
        PageElement._attr_value_as_stringtag[key] returns the value of the 'key' attribute for the tag,
        and throws an exception if it's not there.Format XML using HTML rules.%s|%svoid_element_close_prefixTag.__init__Tag.__iter__Makes the given element the immediate successor of this one.

        The two elements will have the same parent, and the given element
        will be immediately after this one.
        Finds the last element beneath this object to be parsed.Returns the siblings of this Tag that match the given
        criteria and appear after this Tag in the document.wrap_insidemy_index.%(name)sTag is deprecated, use .find("%(name)s") instead. If you really were looking for a tag called %(name)sTag, use .find("%(name)sTag")findChildHTMLAwareEntitySubstitution.substitute_xmlPageElement.format_stringtext.string gives you text. This is for backwards
        compatibility for Navigable*String, but for CData* it lets you
        get the string without the CData wrapper.-->Tag.select.<locals>.default_candidate_generatorContentMetaAttributeValue.encode.<locals>.rewriteTransform certain characters into named entities.PREFIXsubchildResultSet.__init__Tag.__contains__has_key is deprecated. Use has_attr("%s") instead.PageElement._attribute_checker.<locals>._includes_valueCreate a function that performs a CSS selector operation.

        Takes an operator, attribute and optional value. Returns a
        function that will return True for elements that match that
        combination.
        Returns the parents of this Tag that match the given
        criteria.PageElement.appendReturns the closest sibling to this Tag that matches the
        given criteria and appears before this Tag in the document.Returns the siblings of this Tag that match the given
        criteria and appear before this Tag in the document.closeTagattribute_stringElement has no parent, so 'before' has no meaning.Basic constructor.Tag.select.<locals>.classes_matchPageElement.parentsPageElement._is_xmlMakes the given element the immediate predecessor of this one.

        The two elements will have the same parent, and the given element
        will be immediately before this one.
        Cannot insert a tag into itself.<!--Tag.select_oneTag.__call__[any]Sets up the initial relations between this element and
        other elements.Substitute only the essential XML entities.Tag.renderContentsA generic stand-in for the value of a meta tag's 'content' attribute.

    When Beautiful Soup parses the markup:
     <meta http-equiv="content-type" content="text/html; charset=utf8">

    The value of the 'content' attribute will be one of these objects.
    ((^|;)\s*charset=)([^;]*)
        Extract all children. If decompose is True, decompose instead.
        _lastRecursiveChildmy_parentReturns all items that match the given criteria and appear
        before this Tag in the document.findAllNextreplace_with_childrenPageElement._find_all.<locals>.<genexpr>PageElement.find_previous_siblingpreformatted_tagsA pseudo-class must be prefixed with a tag name.current_indexnew_childs_last_elementparents_next_siblingPageElement._attribute_checker.<locals>.<lambda>SoupStrainer.search_tagnth-of-type pseudo-class value must be at least 1.The length of a tag is the length of its list of contents.Can't insert an element before itself.ContentMetaAttributeValue.__new__A tag is non-None even if it has no contents.Alias one attribute name to another for backward compatibilityPageElement.unwraporiginal_markupget_attribute_listAn HTML formatter that omits the slash in a void tag.The same as get(), but always returns a list.SoupStrainer._matchesTag.stringDoctype.for_name_and_idsfindChildrenHTML_FORMATTERS Considering token "%s"Returns all items that match the given criteria and appear
        after this Tag in the document.A NavigableString cannot be given a name.recursiveChildGeneratorTag.select.<locals>.Counter.__init__NamespacedAttribute.__new__destination<module bs4.element>Format the given string using the given formatter.Tag.__setitem__SoupStrainer.__init__PageElement.previous_elementsEncapsulates a number of ways of matching a markup element (tag or
    text).Cannot replace one element with another when theelement to be replaced is not part of a tree.PreformattedStringAn XML processing instruction.Should this tag be pretty-printed?setattr expected 3 arguments, got 2Tag.select.<locals>.next_tag_siblingTag.select.<locals>.id_matchesTag.__repr__already_triedPageElement.insertPageElement.replace_withA ResultSet is just a list that keeps track of the SoupStrainer
    that created it.Tag.get_attribute_listfetchPreviousSiblingsfindAllPreviousTag.__ne__PageElement.insert_beforeReturn only the first child of this Tag matching the given
        criteria.C:\code\venv\callllama\lib\site-packages\bs4\element.pyXML_FORMATTERSTag.decode_contentsNo value provided for new tag's name.PageElement.find_parentsOnly numeric values are currently supported for the nth-of-type pseudo-class.HTML5FormatterSetting tag[key] sets the value of the 'key' attribute for the
        tag.Tag.index: element not in tagstripped_stringsA copy of a NavigableString has the same contents and class
        as the original, but it is not connected to the parse tree.
        A generic stand-in for the value of a meta tag's 'charset' attribute.

    When Beautiful Soup parses the markup '<meta charset="utf8">', the
    value of the 'charset' attribute will be one of these objects.
    PageElement.insert_afterThis was kind of misleading because has_key() (attributes)
        was different from __in__ (contents). has_key() is gone in
        Python 3, anyway.     SUCCESS %s %sExtracts a list of Tag objects that match the given
        criteria.  You can specify the name of the Tag and any
        attributes you want the Tag to have.

        The value of a key-value pair in the 'attrs' map can be a
        string, a list of strings, a regular expression object, or a
        callable that takes a string and returns whether or not the
        string matches for some custom definition of 'matches'. The
        same is true of the tag name.    Running candidate generator on %s %sHTMLAwareEntitySubstitution._substitute_if_appropriate_select_debugPageElement.nextSiblingGeneratorTag.is_empty_elementSUFFIXA stand-in object for a character encoding specified in HTML.Contains information about how to format a parse tree.Tag.stripped_stringsfetchNextSiblingsTag.__len__PageElement.find_previous_siblingsCharsetMetaAttributeValue.encode</%s%s>Tag.childrenOnly the following pseudo-classes are implemented: nth-of-type.Final combinator "%s" is missing an argument.PageElement.wrapTag.__copy__Tag.recursiveChildGenerator'%s' object has no attribute '%s'Look up a formatter function based on its name and the tree.Tag.__getattr__Cannot insert None into a tag.fetchParentsDeleting tag[key] deletes all 'key' attributes for the tag.quoted_colonPageElement._formatter_for_nameIterating over a tag iterates over its contents.Formatter.substitute_entitiesReturns the first item that matches the given criteria and
        appears after this Tag in the document.Renders this tag as a string.getTextA NavigableString not subject to the normal formatting rules.

    The string will be passed into the formatter (to trigger side effects),
    but the return value will be ignored.
    attribselect_reisSelfClosingTag.__delitem__searchTagPreformattedString.output_readySoupStrainer.__str__([a-zA-Z\d-]+)\(([a-zA-Z\d]+)\)Recursively destroys the contents of this tree.Tag.prettifyverify_gamegame_pageC:\Users\pfass\github\callllama\callllama.py<br/>format_infoTurn number game_infohttp://www.llamaserver.net/gameinfo.cgi?game=This module is used with the main function `call_llama`

The call_llama function accepts a string and will return a formatted
string with the desired game's current status and hosting time.
If any errors are encountered, call_llama will return a string with
the error text.

The module can also be run as a script from the command line by passing
the target game as an argument.

Example:
    $ python callllama.py myGame
Game: soup_objgmttz_stringduenation_tableNext Host: %m/%d/%y at %H:%M{0} is not a real gameerror parsing game datanations.<locals>.<lambda>parse_game_pagenext_hostscrape_game_infostrip_rowGame not Found. Llama is imprisoned.request_game_pageNext turn due: <module callllama>Find game page on llamaserver and return game info as a formatted string.

    Args:
        game (str): the name of a game hosted on llamaserver.net.

    Returns:
        str: formatted game info, or an error string.
    || TurnC:\code\venv\callllama\lib\site-packages\certifiC:\code\venv\callllama\lib\site-packages\certifi\__init__.py<module certifi>2018.08.24<module certifi.core>
    The weak security bundle is being deprecated. Please bother your service
    provider to get them to stop using cross-signed roots.
    cacert.pemC:\code\venv\callllama\lib\site-packages\certifi\core.py
certifi.py
~~~~~~~~~~

This module returns the installation location of cacert.pem.
The weak security bundle has been removed. certifi.old_where() is now an alias of certifi.where(). Please update your code to use certifi.where() instead. certifi.old_where() will be removed in 2018.DeprecatedBundleWarning<module chardet>C:\code\venv\callllama\lib\site-packages\chardetuniversaldetectorExpected object of type bytes or bytearray, got: {0}
    Detect the encoding of the given byte string.

    :param byte_str:     The byte sequence to examine.
    :type byte_str:      ``bytes`` or ``bytearray``
    C:\code\venv\callllama\lib\site-packages\chardet\__init__.py¨   é   i	  iâ  éÿ   i  éÆ   é	   éR   é   i  é±   éÊ   ia  iè  i  én   iæ  é!   iÊ  i  éL   é,   iB  é   i  i  i  i  i  é   i{  i]
  i®  i  i  ij  i  i§  i.  iN  ii  i¬  é   éÌ   é:   i  i  i  é?   i  i  i=  iN  éK   éÞ   é   ik  iq	  iÈ  i  iã  i  éà   i  ib  é   é
   i  i¿  é   iã
  io  i2  i  ii  é   iË  ic  i8  i  i  i  iû  éü   iª  i  é   i{  é|   éÎ   i  é"   iä  i  é@   i\  i  iÅ	  i¹  iº  é   iÇ  i  i  iF  i  i|  iQ  éH   i  i  éP   iv  éî   i  iå  i  i«  iD  i^
  iô  i   iF  i}  iÁ  éE   i«  iO  é³   i0  i×  és   ió  i4  é<   é2   i¬  é   i&  iM  iÞ  iô  i~  é´   iã  iG  é   i  i[  i°  i  i?  i  i  ia  i  iK	  i*  i   ig  iÆ	  éZ   i
  i:  i  é   i  iK  iù	  é   i	  é¶   i  i´  i  iÜ  i`  il  i  i  i  é   i	  i   éq   i  i~  i  éò   i  iª	  i  iÌ  iÛ  i§  ic  i  éu   é   i  i*  i  iü  i	  iå  i  é~   im  iÂ  iÈ  é   ie  i¡  éG   i^  iõ  in  é   i  éU   iC  iæ  iC  iÞ  i  i¬  i×  i  i÷  i   éj   io  i/  i  i  iP  i7	  i[  iç  éÝ   iæ  i?  i  i¤  i  io  éS   i(  i¯  i  éÀ   ip  é]   i   i6  ij  i  i@  i  i  iß  i  i  i8  é   é+   i3  i[  é   i°  i\  i¢  iµ  iÈ  i  é¤   i]	  iA  i·  éÓ   iÝ  i1  éÃ   i  iH  iç  iè  id  i  éê   i+  i­  i2  i  i¹  i¡  ié  iO  iL	  i  i  if  i1  éä   i  i£  iÓ  i  i¡  i  i3  i9  éï   él   i,  éÈ   i	  i   iß  i  i¢  i£  i  i  ie  iz
  iQ  iM  i&  iÍ  éX   i»  iö  i  i  éÔ   i
  é   é   iÔ  ik  ip  i¤  éM   é»   i¤  iÞ  é%   é   i®  i¥  i  i¦  i§  é'   iÜ	  i¥  i\  i  i  é7   é   éJ   i¦  i!  iã  iÂ  i  i  éÙ   iN  iû  iB  iP  i_
  iq  é   é¬   iê  i  i  ië  iì  i§  é    i  i  i   iI  iç  i8	  iË  i
  i  i{
  é   iß  i  i  iý  é¼   ém   ió  i¨  if  iµ  iþ  ix  iÁ  ià  i¨  i©  ií  iª  i  ið  ig  i  éÄ   i
  i  i«  i¬  i¡  i  éù   i·  é&   i­  i'  i®  i  i  i  iý  é.   é²   iÎ  i  i¯  iM	  i°  éÖ   i­  i©  i$  é#   iÃ  iD  ih  iA  iú	  é   iË  ir  i±  i²  iU  iG  i  iÒ  iÖ  i
  i  iQ  iS  ii  i  i¹  éd   i  é0   éF   iÏ  iï  iC  i  i³  i  i´  i   iÎ  iJ  i  iÏ  iU  é   iÜ  é¹   iN	  i  i¢  i²  i<  iµ  i  i:  iA
  iä
  iª  i	  i 	  i9  ií  i}  i  iÝ	  iõ  i  iW  iP  i  i  i)  iD  i   i«  i  i4  iî  iÞ	  i)  iè  i  ir	  i¶  is  i¥  ié  it  i  i9	  iÆ  i¬  iý  is	  i*  i  i­  i·  i  i¶  i  i]  i£  i¸  i®  i  i	  iD  ij  i(
  i  iï  i  i  i  iu  i5  iY  ij  i	  il  iº  iu  i  i  iï  i  i  i`
  i  i=  iá  i  iÑ  iÃ  iÄ  i¯  i¥  i5  i  i!  iî  i¬  iT  iE  ix  i°  i±  ie  é   iß	  i×  iO	  iP  i®  i|
  i6  iA  i  i/  ik  iâ  iÀ
  i  il  i!  i	  iÉ  iB  i¹  i`  i³  i
  iÐ  é§   iA  i¤  i  i  i  i¼  ið  iv  i	  iÑ  iº  iw  i»  i¾  éå   iM  iÁ
  i  iê  i°  i  i²  ia
  i  i  iÂ
  i}
  ië  ix  i,  é}   i  i  iB
  i³  i¼  i½  iì  i¾  i¿  iÀ  i´  iF  ik  im  iû	  iÝ  i  iæ  i	  i  iñ  iÁ  ib  i¶  i)
  i^  iP	  i  i,  i¾  iã  iÍ  i7  i5  i~
  iy  i|  i  iz  i»  i  iî  iÃ
  iC
  i{  i  i  i  iþ  i¢  iÂ  i  i­  i  i1  éÒ   éb   i  iü	  iò  iÃ  i¯  it	  iÊ  i  i  i_  ié  é   iÄ  ií  i  i  iå
  iæ
  ib
  iÅ  é   i»  i5  éD   é°   i¹  il  i  i|  i[  i*
  iÆ  é«   i  i  i%  é   iG  i^	  i  il  i  iÆ  ió  iµ  i`  i¶  iÇ  i¯  ip  iÈ  é   in  éc   ig  im  i  iì  i'  i2  i¡  é   i×  i{  iî  i  iÉ  i  iù  i  iD
  iÈ  if  i	  iÊ  i|  i:	  éÚ   i¾  i  ià  i  iä  iô  i  iÒ  iË  i°  in  i¢  iÓ  iï  iÌ  é;   iÍ  iI  iY  i}  iñ  i  iX  i"  i·  i
  iÎ  iÇ  iÀ  i  iÏ  ií  i-  i²  il  ið  ií  i  iÄ  i­  i  iÿ  i¼  iE  i  i~  i¿  i>  i]  iÐ  i,  iÑ  iÒ  iå  iv  iL  iB  éi   i&  iÆ  iÞ  i  ið  i÷  i®  iG  iÓ  iï  i  iB  iÔ  iõ  i+
  i¸  i  i  iþ  i¹  iñ  iÔ  iÇ	  i   ia  i  iº  i  i
  ia  iÕ  i}  iE
  i  iD  iÖ  i=  iä  i0  i  i×  i  i6  iØ  i  iÍ  iv  i!  é   i»  iÙ  iÚ  é   i  ið  i  é9   iH  i  i÷  i¼  i½  i  iF  i¥  iÊ  iØ  iÔ  i®  i"  i  iH  iÒ  ið  iÔ  i  io  i  i¶  iR  i*  iø  i.  i  iÊ  i½  i  i  iI  é3   i  i,
  i§  i*  iS  i  é­   i¾  iX  iÛ  iÜ  i/  i  ib  ip  i¿  i	  i  é   iÝ  iÞ  iß  iË  iR  i  i  iµ  i7  i  i2  iò  i	  ià  iÀ  iá  iâ  iØ  i¸  i_	  iã  ib  i  i
  i­  iË  i  i«	  i  i¹  i  i  iÁ  i  i`	  éO   i  i	  iÕ  i`  i7  i
  i  i  i  i  i  ií  i   ia	  iä  iÂ  iå  iæ  iç  iè  ig  i  ió  i  i¸  i
  i_  i  i~  éØ   i£  iÃ  i  i  iö  ia  iÄ  i
  ib	  ié  iê  ië  i  iå  é    iì  i¬	  i;  éç   i	  i-  i  iÅ  iQ	  ií  éé   i  iq  i  iÆ  iÇ  iî  é`   iñ  i#  i#  iï  i  ið  i  ir  i
  is  i  i  iæ  id  it  iç
  iò  ic
  iñ  i  ik  iw  i  iò  i±  ió  iô  iõ  i  i  i  iÎ  ég   i  iQ  i£  iU  i  i  iÌ  iö  i°  é   éC   iS  i  ic	  i§  i  i5  i÷  iø  iB  iâ  i_  i²  ic  iN  éë   iÙ  iY  i¢  iÉ  iô  i
  éº   iL  id  iÄ
  i÷  i	  iK  i  i8  ia  iG  i  i  i
  i³  iù  i  is  i6  iý	  it  i;	  éN   iõ  iö  i  i	  i4  iÒ  i:  i  i\  iq  iú  i  i  i.  iÈ  i  i  iu  iÅ
  ið  iÓ  iÉ  i  iÆ
  é   i  ir  iÊ  i  iÇ
  i  iË  ic  iú  i  i¾  i@  iû  i  iæ  i  i´  iü  i  iî  i/  i9  i  i  iý  i  iÌ  iÔ  i¤  i÷  iø  i<	  id
  i  iç  iú  i8  iv  i  iC  iÍ  i  i  iè  im  i²  i  iþ  ió  iÜ  i  iÿ  iZ  iÎ  é¥   éó   iÏ  iw  ià	  é{   i«  i  iü  iÐ  é$   i  i  iM  id  i0  ir  i  iç  i½  ig  i  iV  iø  i  i   i   i:  iZ  iÌ  i  i{  i$  ie  i0  i  i  i$  iµ  i 
  iù  i³  i5  i  i[  iÑ  év   i  i  ic  i  iV  iR	  i$  i;  é   i  i  if  i  i  iÖ  id  i¾  iÎ  iW  ie
  i  i¨  iè  i  i  i  iú  i  iJ  iÀ  i  iõ  i  iu  iÒ  i	  iù  i
  i  i  iû  iK  i÷  i2  i¡  iL  i   i.  i¤  i¤  i2  iÕ  i  iú  i  i  éÅ   i  i%  i  iÝ  iÓ  i  i  i  iÊ  i  iÔ  i  i  i  é   iè
  ix  i¶  iM  iÍ  i}  i  iû  iT  i  i  iÕ  id	  iü  i  i©  iç  i¿  i`  i  i  i  iü  i	  i3  i  i  i;  i  i  i  i  iy  iY  iL  i¢  i¹  iá	  iâ	  i  i  i  é   iU  é\   iñ  i¼  i  i£  iè  iV  iN  i  i  ié
  iª  i½  i   i  i"  ix  i%  i  i;  i=	  i   iý  iÖ  i2  iE  i¤  i!  i  i×  iÌ  é^   iØ  i"  iw  iê
  i#  i·  ié  iÙ  i  i  i$  i<  iQ  i  iî  ir  i%  i  i]  iÚ  i&  iø  i<  i'  i  i3  i6  iB  i  i  i(  iÞ  i´  i×  i  iØ  i  i¥  ig  i  i  i)  i¡
  i	  i*  i+  i!	  i  é   iÛ  éÁ   i:  iþ  i7  i»  i^  i  i  i  i  i(  iý  i,  i+  i  i  ix  i-  i  i/  ih  i=  i.  iÜ  iÝ  é   i  iV  i  i¯  i  éh   iÎ  i  i/  i  i  éý   i  i<  iø  ií  i;  i0  i¦  iû  iÞ  i
  iþ	  i1  iz  ié  i  iÍ  i5  i6  i¢
  i_  é)   i2  i3  iß  i4  iy  i"	  é   iÏ  iÈ
  i  i^  i5  i·  iÙ  i?  i%  i+  if
  i¸  i6  i_  iW  iÖ  i  i
  i7  i>  i  i£
  ig
  i#	  éè   iu	  i8  i¹  iÚ  i9  ih
  iF
  ió  iV  i{  iÚ  iO  iê  iI  éw   i~  i  i^  i  i  i:  i§  iÿ  ià  i¨  iá  iÙ  i   i­	  i;  ie  i1  i  i  i©  ié  iæ  iù  iÏ  i   iê  iÛ  i  i   iP  i<  i=  iã  i>  i
  iÝ  é(   i`  iR  i?  iY  i¡  iI  iã	  éæ   iâ  iº  i7  iÜ  i  i?  iï  iÚ  i  i@  iß  io  éþ   iq  iY  in  i  i  il  i  iª  i«  i  iÇ  iÉ
  ii
  iE  iP  iV  i  i!  i»  iË  i¢  i  i¬  in  i  iA  iã  i|  i¤
  i  i
  iB  i£  i  i  i  i  i-
  iÿ	  iO  iÊ
  i¼  iC  i³  iD  iW  iT  iT  é   i×  iã  i¿  i  i}  iE  iä  i&  iþ  i  i  iÝ  iÓ  i  iú  iÿ  i  iû  i~  iG
  ië
  iÚ  i  i$	  iW  iÿ  i   iå  io  iá  i 
  iF  i  iG  iæ  i  i"  iÕ  éð   iâ  i#  iç  iè  iD  i-  iQ  iÚ  iH  ie  iä	  i  i  iI  i  iñ  i  iJ  iz  i
  i¤  iK  i  i  iL  i¥  i$  i
  i  i¦  iÁ  i  iH
  é¾   iÖ  i  i  ié  iê  iM  i:  iÈ	  i  iÒ  iN  ië  iI
  iÝ  i¥  iì  iH  iê  i  i  i  iO  ií  i°  i	  iP  iQ  iî  i­  ik  iR  iR  iÞ  é×   i×  iì
  i
  i  iï  i  ið  iû  i§  i  iñ  iS  iT  i¦  iç  i  i%  i  i  iÄ  iÅ  iò  i&  iS  iU  i  iå  iS	  i  iC  iò  i¨  iì  iV  i~  i  i!  iX  iØ  i®  i  i  iý  i,  ió  i  iô  iå  iO  iï  i|  iõ  i  iÛ  iP  i  ie	  iù  iö  i¡  i  i  i  iÀ  i©  iü  i  i÷  iØ  i¥  iT  i  é   iÜ  iª  iW  ië  iø  i  iX  iõ  iY  i«  iR  i  iv  i  i  i  i  i  i=  i  i¬  iZ  i  iU  iÉ  i­  i[  iß  iù  i®  iV  i%	  i\  iú  i¯  i]  i¯  i°  i^  i8  iT	  i.
  i'  i_  iû  iv  i±  i  i°  i±  iw  it  i  i`  ia  ib  i>	  iü  iÝ  i"  i{  é   ië  i	  iý  ic  iÎ  id  i9  i  i  i  iÌ  i[  i9  i  i  id  ih  i
  ie  i´  i¼  iì  iJ
  i!  iþ  i²  if  iÓ  éô   i  ií  i³  i´  iT  ig  i²  i  i½  i%  i  éW   iM  ih  i  i¿  ii  iÀ  iÑ  i¶  iµ  i  éÛ   iÆ  i  i  i(  ij
  i  iy  i7  im  i³  ij  ik  i¾  i?	  iW  i"  iÚ  ië  é¸   i  éB   iÿ  il  i|  i  éö   i)  iz  i±  éâ   i  iÏ  i´  i  ið  i  i¢  i¸  im  é£   in  iu  iv	  iw  iÉ  i	  i*  i   iµ  io  ip  i¢  é   iq  i7  i.  ir  iò  i  i
  i  i  i¥
  iö  if  i  i  ià  is  i&	  iy  i  i¶  i   i¿  i  iâ  i  i·  i  i  i>  i  i¶  iþ  iá  i  éY   i  i  it  i±  iu  i/
  i+  iÀ  iv  i  i«  i  i@  iw  i  iÉ	  iå	  éµ   i  i3  i¸  iÛ  i  i,  ix  iâ  i6  i9  i  i 	  i  i¶  é6   iî  é½   i  i!  i  i¹  iy  iÎ  iQ  i:  ic  i  i·  i  i-  éo   i¸  i  iF  iX  i  iï  i¹  if  iã  i  iz  ií
  iº  i»  iÁ  iÒ  iÙ  i{  i/  é÷   i·  i'	  i®	  ib  i  iÚ  i`  i  i¾  i  iu  i	  iv  i¬  i  i  iº  iË
  i
  i
  i¼  i±  iº  iä  i0  iE  éª   iS  i¦  i8  i[  i|  i}  iG  i»  i  iç  i!  i~  i  i¼  iF  iU	  i  i  i  i  i  ie  is  iÁ  i  iå  iw	  i  iÁ  i  i"  i  ia  i	  iZ  i&  i½  iü  i  iâ  i	  i
  i  i  iÔ  iA  iº  i  i¦
  i  ii  i  i  iö  iø  i  i¾  i  i  i   i
  io  i¢  i  i  i  iî
  i  i  i	  i  iA  i  iJ  i0  ið  ix	  iÌ
  i»  iæ  i  iY  i  i  i½  i  i¿  iÊ	  iñ  i  i¾  iZ  i8  io  i  iÛ  iQ  iÀ  i  iÁ  i¯  i  i  éú   éa   éQ   iÂ  i  ip  i;  i  é    iP  i  ib  iä  i  i  i  i  i  iÃ  i  i  i  i¶  i¯	  iª  iÕ  i  i  i  i¿  i  i  i¤  i¨  iÌ  i]  i  iÄ  i  i  i
  é¨   iÓ  i  iÅ  i  i'  i  i  i.  iç  éÜ   i
  iñ  i  i  i  iÂ  iL  i¸  iÍ  i  i  i  i	  iÀ  i/  i  i  i  i¹  iB  i0  i[  i  i8  i  i  i  i  iæ	  i  i  i/  i3  iÁ  iÂ  i  i  i  i  iæ  i  i0  iò  in  iÃ  iÍ  iÄ  i  iÅ  i  éì   i  i	  iè  i  i   i  i  iù  i  i  i¡  i4  i¢  i  éõ   i  i<  i°	  i  i
  i®  iË  iY  i	  i£  i  éÇ   iC  iÆ  i¤  i  i§
  iÙ  iù  iÚ  iÕ  i}  i1  i  i  i  i¥  i¦  iK  é   ié  éã   i0
  iF  ià  iÞ  i¯  iÍ
  i  i#  i  i\  i§  i¦  iÊ  éf   i  é>   i   i  i  i¡  i  iÆ  i¨  i©  iÈ  i  iÎ
  i  iò  iÕ  iª  ij  i  i«  i  i  i  i-  ip  i9  i@	  i6  iy  i  ió  ié  i  i
  i1
  iÂ  i  i  i¬  i­  i  i®  éV   iÖ  iÂ  iÇ  ië  i4  ié  i  i  iK  i1  iÈ  iÏ
  iD  iê  iè  iæ  i­  i  i  i#  i«  i²  i  iÃ  i2  i  i¯  i  iË	  iZ  iH  ip  i°  iÉ  ig  iÊ  iÇ  i  i¢  iq  ér   i
  iÈ  éÑ   i÷  i±  i²  i  i  iK
  iV	  i¨
  i\  i,  i
  i³  ië  i´  i  iá  i]  i  iº  iu  é   i
  i  i  iµ  iÉ  iì  iô  i  i¶  iZ  i¾  i®  i
  i  i  iÎ  i  ij  iË  i  i0  ih  ih  i  iÌ  iì  i  i  iE  i  i·  i	
  i§  i  i	  iú  i¸  i¹  iº  iÍ  iÊ  ií  i  i  iË  i©
  i  i  iø  i2
  é¡   i  iÌ  i¿  iÛ  i  iM  iÍ  iw  iÎ  i  i  iy	  i?  iÙ  iø  iÃ  i

  it  im  i(	  iÌ	  i  i+  i  i  iÏ  i»  iÒ  i  é©   i  ii  i
  i  i±	  iÄ  i  iÜ  i
  iã  iL
  i¼  ià  i)	  i£  i  iª
  i±  i  if	  iÍ  i²	  i½  i  i  i  i  iß  iR  i"  iA	  i3  ií  i¾  i-  i1  i¿  i$  i¤  i(  iß  i]  ió  i#  iÿ  i$  iï
  i  iî  iÎ  i   i*	  ió  i  i  i  i
  iÐ  i  i«
  i=  ik
  iÀ  i!  iÁ  i¥  iÂ  iÃ  iÄ  iî  i
  i  iï  é   é_   ià  iÑ  iÓ  iÏ  i^  i2  i  iÐ
  i  iÒ  iì  i9  i  iÅ  iÅ  iÓ  iÂ  iÆ  i4  i   iÔ  iÐ  i
  éø   ib  i  i  iÇ  i  i  iô  i  i  é5   iÈ  iÆ  iÉ  i  i"  i	  i¦  i  iÕ  i  iÊ  é¿   i4  iI  i  iË  i#  i£  i¡  é   i  i  i  iÎ  i  ij  i  iÖ  i  i$  ik  i¢  i  i¬
  i  i\  i§  ig  i  iE  i5  iË  iÌ  iÇ  iý  iÍ  iÎ  i×  i¯  ið
  i  iØ  i6  i°  iÏ  i  i	  iÏ  i%  i  iê  ið  iÙ  i£  i[  i  iÚ  iÛ  iÐ  i±  i  i¤  i&  ée   iË  iÑ  iñ  iÛ  iÒ  io  iò  iÓ  il  i	  i}  iÔ  iÕ  iÖ  iz  iÑ  i+	  i×  iØ  i¥  i  iÙ  iÚ  in  i-  iõ  iñ
  i'  i  ii  i
  iè  i  ià  i(  iÛ  iÜ  iÍ	  iÜ  i¬  i   iÒ  iÝ  iØ  i  i¨  i  ió  iÝ  iÞ  iB  ii  iq  iÇ  i  i  i<  i  i*  ij  i)  i"  i*  iÓ  i>  i)  i7  iß  i+  i  iÞ  i§  i  iß  i¤  iá  éz   ià  i,  i³  i¥  iá  i  iM
  i)  ir  i  iâ  i-  i	  iô  iâ  iã  iÔ  iä  iÕ  éT   iÖ  ép   iÝ  iå  i#  i#  ià  i½  i  iû  iæ  i×  iç  i©  i®  i  iÉ  i	  i	  iá  i  i  iS  iî  i.  i8  i  iè  iÕ  ié  iz	  i9  i=  iØ  i¨  i  im  iÿ  iS  i  i  i¨  iÀ  iÏ  ix  iê  ië  i/  iá  iâ  iq  iì  i  i3  ií  i5  iî  i:  iõ  iª  iÿ  iÇ  iã  iä  i  iå  iô  i
  i;  i¦  i0  i1  iï  i  i  iü  i¥  in  ií  i_  i  i]  i  i  in  iÝ  ið  iÙ  iÖ  i
  i%  ië  iñ  i¼  iò  i  i`  i  iÚ  ió  iÛ  iz  iT  is  i2  i3
  iæ  i  i{	  é   i5  éË   é   i  iò
  ig	  i  iû  ik  iç  iè  iô  i  ió
  iõ  iö  i3  i4  i÷  i§  iø  ic  i   iÅ  iù  i  i
  iì  i  ia  i:  i1  iõ  ié  i©  i!  éA   ih  i   io  iÑ
  i6  i"  iú  iû  é   il
  é-   iÐ  i
  ia  i5  i  iç	  iõ  i  i¨  iü  i#  i!  iý  i$  iþ  i«  iÿ  i4
  if  iÏ  i	  i%  i&  i­
  iN
  i   i
  iÜ  iW  iõ  i  i  i  i  i
  i'  i÷  i$  ié  i  i<  iö  iN  i  i  iW	  ik  i¿  iO
  iÐ  iê  i  i  iÝ  iß  iX	  i,	  i  i6  i&  it  iê  iP
  i  i©  i7  i¬  i÷  iÒ
  i-	  ij  i  i	  i­  i  iC  é[   ip  i  iö  i'  i8  i
  ib  ië  im
  i  i®  i²  i{  i(  i  iè	  ií  iÎ	  i9  i¯  iÏ	  i  i:  i  i
  i^  i×  iÃ  iì  iB	  i;  i  iî  i  i  ií  i
  iÀ  éí   i
  iÞ  i	  iî  i)  i<  i=  i
  i  i°  i½  i>  i  i  i  i  iÓ
  é=   iï  i  i  ið  i  i¯  iþ  i§  i  i  in
  i¿  iH  iD  i®
  i?  iñ  iU  iW  i
  i=  i  i:  iö  i³	  iN  iø  iK  iE  i@  i4  ic  i±  i  i>  i±  iQ
  i
  iA  i  i  ih  iß  i  i²  i
  i(  i]  ià  i  iò  iB  i*  iá  i  il  ió  iC  iD  iâ  iE  ih	  iÿ  i  iô  i  éû   iã  iX  i  i  i  i  i+  iñ  iÜ  i§  i+  iJ  iä  iå  iU  éÍ   i  i
  iè  im  i   iE  i  i  i  iF  i  iG  i
  ék   i´	  in  iõ  i³  id  i  iý  i  i  é   iñ  iæ  iF  i!  i   i   ir  i@  iç  iH  i"  iC  iG  i¸  é¢   iÄ  i  i  i^  i´  iÈ  i÷  é8   it  i)  i;  iù  i?  i!  i  io  iI  iÈ  i"  i#  i#  i$  i  iJ  iµ	  i%  iô
  i&  ir  iK  i'  i5
  i(  i)  iö  io
  i@  i}  iA  i÷  i,  iø  i*  i4  é1   i+  i·  iª  iú  iû  iÂ  i"  i  i,  i  iõ
  iC	  iè  iu  ir  iD	  i-  iµ  i-  i«  iL  iv  i{  iî  i|	  iM  i.  i.  iN  iY	  i6
  i  i  i¬  i/  i0  i/  iü  iÄ  i1  i$  i¨  i2  i%  iG  iR  iB  iÉ  i_  i°  ié  iC  iê  iø  iD  ië  i3  i   i¦  i  i²  iý  iô  i  i.	  iì  i¶	  i4  i@  iw  iº  i5  i  i6  i7  iù  ii	  ií  i&  i0  iî  i8  i	  i&  iÐ	  i*  é   i+  iG  iO  iu  é   i#  i
  i1  iP  iR  iµ  iQ  iú  i  iÄ  i)  iï  iØ  i=  i9  iû  il  i­  iÕ  iÚ  i¡  iE  iS  i¢  ik  iþ  i\  i	  i³  i·  i¶  iy  i:  i®  i;  i<  iF  i%  i=  iý  iR  i  i   i>  id  i'  i,  i?  ie  i$  i  i2  i3  i-  iü  iÊ  i4  i  i(  iS  i@  iA  iB  iÅ  i.  iT  i£  iO  i  iù  iÜ  ið  i¤  i  i·  i&  i  i¨  iÖ  i¯
  i<  iö
  i  i  iý  iC  i  iD  iú  iþ  iU  iÖ  ip
  iG  ie  i¸  i¯  i°  i  i÷
  iE  i;  iV  iF  i'  iG  i)  i
  ió  i}	  iH  i*  iØ  iW  i¥  i¨  iI  i¦  iT  i  iø
  i¹  i§  iÉ  iï  iç  i  i	  i©  iJ  i.  ig  i~  é   iU  iÿ  ij	  i	  i  i  iX  i¨  iñ  i8  i©  i*  i·	  iò  iª  iK  i~	  iã  i  i±  iL  i  iH  iº  iê  i  i%  éÂ   i+  if  i«  i²  iÿ  ió  it  iá  iM  iN  iã  i  iË  i   i	  i  i 
  iü  i  ik	  iY  i  iY  iô  iõ  i  é*   i/  iÐ  iO  iR
  iZ  iH  ià  i#  iI  i»  ié	  iÃ  i  i5  iS
  i]  iE	  i[  i\  i   is  iI  i+  iP  iQ  i,  i¸	  i¼  iR  i¬  iS  iT  iä  i,  iÌ  iU  i]  iV  iÌ  iÂ  iL  i-  i!  i²  iT
  i\  é4   iW  iû  i  iX  iY  iZ  i»  i[  i>  iw  i­  iö  iÁ  iÆ  i+  i^  i   iJ  iÑ  i_  i$  iþ  i\  i  iÅ  i  il  i.  i]  i`  i®  i^  i_  iq
  i%  iþ  i`  ia  i  i  iá  i½  i6  ig  iU
  ib  ic  id  ia  i¾  iq  ix  iù
  ie  i  ib  iy  i³  if  ih  ig  ih  i÷  iù  i'  ii  i  i¯  ié  i	  ij  ir  iø  i  i0  i	  i=  iï  ib  i|  é   i¼  iÇ  i   i  i´  i	  i  ih  ik  iÔ
  il  i  i¦  i°
  ia  i  ic  im  iÞ  i  i  in  i±
  i³  iu  iü  i°  id  ie  iÇ  is  iK  i/  io  i7  iý  i&  i	  iJ  i8  ip  iq  ii  ij  if  iù  iê	  ig  i	  i  iò  i(  i©  i`  ir  is  i  i  i  i  i<  iF  ik  if  iÅ  ià  é¯   iÞ  i]  i  i  iI  it  i>  iú  iu  iª  iv  i  i¿  iô  i±  iÀ  i0  iú  i-  iû  iw  iL  i©  i¹	  iü  i²  i  i   iG  ia  i  i  it  iý  i  iÁ  iS  iK  ix  i  iy  iz  iý  i«  iV
  éß   i²  iO  iï  i1  é·   iÂ  i{  iú
  iÍ  i£  iF	  iy  iÀ  i9  iZ	  éñ   i|  i}  i~  iF  iÎ  i³  iå  iÕ
  i	  i:  i  i  i  i  i2  iÆ  i  i  ip  i¡  i;  iG	  i¦  iþ  i	  ih  i  i  iÿ  i  i7
  iä  i´  i  i  iq  i   iæ  iM  iÛ  i  i  i  i  i  iµ  iç  iè  iÃ  i  i  iÖ
  i(  i8
  iµ  iN  i	  i  i3  ië	  i  iO  i<  i  i»  i  iT  i  iW
  i	  i  i  i¶  i  i(  iâ  i   i  i1  iì  i  i  i  i  iõ  iå  iu  iZ  i  i²
  i	  ic  i   ij  iP  ip  i  i  i
  i  iê  iÈ  i¶  iv  ii  ij  i  i
  i³  i  i  iþ  iQ  iK  i  i  iÑ	  i'  i·  iÂ  i£  i  iß  i9
  i  i  i
  iÒ	  iz  i¸  iº	  i  i  i¹  ik  i  i  i  ië  iÏ  iþ  i2  i	  i  il  i  iÑ  i>  i=  iC  i'  iÿ  iÁ  i>  i
  i  iZ  i¡  i  i  i·  im  in  iÿ  iÄ  ib  i  ié  i	  i  iq  i?  i±  i
  i  i  i  i»	  i"  i  iû
  i?  i  i}  iÒ  i  io  i@  i>  i  iA  i¸  i1  i  i)  i  i  i  i?  i³
  iÄ  i¼  i  i½  ix  i	  i  i	  i  i	  i3  i¹  i  ih  i¢  i  il  i  iö  i  i)  i  iÅ  ip  i   i'  iº  i»  i»  i4  iÿ  iº  i  iü
  i¡  i¢  i£  iA  i_  i	  iB  iú  iL  i  i  iP  iq  iÍ  i   i¤  ir  i  i  iª  i  iX
  i  ic  is  i!
  i¥  i¦  i  iH  i  i	  iw  i  i§  i¨  iC  iD  it  i  i«  i©  iª  i«  i¬  ix  i  i  i¼	  i/	  i  i  i  i5  i  i4  iu  i  ir
  i¬  i  i_  i­  i®  é/   i  i<  i¯  i~  i7  iy  im  i°  i  i^  i5  in  ib  i´
  it  i´  i  il	  iü  i¼  iÖ  i6  iä  i	  i7  iÙ  i±  i  i  i­  i  iv  i½  i²  i³  i	  i8  i:
  i  iý
  i  i0	  i  i1	  iö  iw  i  éI   i´  iµ  i  i¶  i»  i(  iÓ  i  iB  iÐ  i·  i4  is  iÆ  i¸  i¹  iº  i»  i  i×
  i¼  i¼  i?  iC  i  ix  i	  iE  iH  i  iÐ  iF  iy  iz  iG  i½  i  i¾  i¿  i{  iÀ  iÁ  i  i|  i¾  i;
  i}  i9  im  iH	  i~  iÂ  iz  i  i£  is
  i	  iÃ  iM  iÄ  iÅ  i  i¼  iÆ  i  im	  iÇ  iÔ  iI  iÈ  iÉ  i  io  i  iÊ  i  iË  i  i©  iÌ  i_  i  iÍ  iÎ  iÑ  i2	  i3	  iH  i  i*  i®  i  i
  i  i  iµ  i<
  i´  ii  i:  iÏ  iØ
  iÐ  i   i  iA  i¾  iÒ  iô  iR  iÑ  iÒ  i°  i  i  iÇ  iÓ  i"
  i¯  iÓ	  i¶  iµ  i  iÔ  iü  iµ
  i  iÈ  i  iÕ  i¶
  iÖ  iÏ  iQ  i  iÉ  iY
  i  i  i  i÷  i  i  i  i{  iK  iÇ  i  é¦   i[  i  iJ  i×  iÐ  iN  i·  iS  i  i  i  i¬  iI	  i  i¿  iT  i@  i  iÊ  iØ  i  iÙ
  i½  i@  i  iR  i  i  iì	  it
  iÀ  i  iÙ  iJ  iI  iÚ  iþ
  ið  iö  i  éÕ   i
  iU  i  im  i  iÛ  iÁ  i{  i	  iÜ  i	  i  i;  iV  i  i  ií	  i  i  i<  i  i  iË  id  iÝ  iÔ  iê  iX  i  iÞ  i9  iÑ  i  i6  iÈ  iß  iU  i  ià  i  i   iá  iL  i!  i=
  iâ  i)  iã  i·
  i	  i  iä  iÌ  i 	  i  é®   iç  i
  i  i=  i$  i(  iv  iØ  i  i&  iå  ic  i­  i  i  iæ  i	  i
  iÂ  i>  iÃ  ië  iç  i{  i"  i  iè  ié  iê  i#  ië  iì  i  ií  iW  i  i	  iÃ  iî  iÄ  iî	  i  i$  i¸
  i%  i  iï  iä  i  ið  i&  i^  i  ië  i[	  i½	  iñ  i'  i  iÉ  i  i  iè  i  iÊ  i(  i   iÅ  i  i2  i\	  iJ  i
  ip  ip  in	  i  iu
  iq  i)  iò  i¾	  iO  i>
  i¸  i
  i*  iX  i  ió  iï	  i+  iô  i¾  i,  iÚ
  iõ  ià  i¹
  iö  i  iù  iÆ  iK  i÷  i  i		  éÉ   iI  i-  i  iø  i!  iù  iú  iû  iü  iý  i.  iD  iþ  i  iJ  is  i#
  i  i  iÌ  iá  i7  i  i¬  iÀ  i/  iw  i  i|  i   i  i¹  iÿ  i¸  i"  i4	  i|  i,  i   i  iÐ  i  ið	  i  i  i  i  i  i  i  i  i?  iY  iP  i0  i  i1  iZ
  iZ  iÿ
  i¡  i
  i¡	  iÅ  iÍ  i#  i@  i2  i  i|  iö  iz  i  i  i´  i  iA  i'  i  i?
  iÇ  i	  iÈ  i8  i´  i¿  éy   iÑ  iL  iV  i
  i3  i  iÔ	  iÓ  i$  iÉ  i  ië  iM  iÐ  i%  iÃ  i  i	  iÎ  i  i  i.  i  i4  iN  i½  i  i   i  iº
  iñ	  iÀ  ió  i  i  iÛ
  i5  i9  i%  i  iÊ  iË  iK  iQ  i  iâ  éx   i6  i7  i  iB  iÁ  i
	  iO  iv
  i[  i£  i  i&  i  iÏ  i  i
  iò  i  iX  i  i*  i  i\  iP  iò	  i»
  iN  i+  iw
  i  i  iÐ  i  iW  iC  i¡  i  i¿	  iQ  iD  i  i?  i]  iÌ  i  i  i^  io	  iR  i	  iÂ  iE  i  i
  i  iF  i  i'  i´  iX  i  iG  i  iS  i¢  i  iT  iR  i  i8  ix  iÕ	  ik  iS  i¡  iT  iø  i  i   i  iÔ  i×  iD  i   i9  i!  i  i¨  i  i¦  i(  i  iL  i"  i#  i$  i%  i_  iÁ  i&  iJ  i:  iU  i¡  i}  i  i)  i  i
  i;  i<  i  iE  i+  i'  i¼
  i  iH  i=  iV  i*  iH  iy  i,  i+  iW  i3  i>  iÕ  i©  i?  i(  iI  i,  i-  i`  iq  i¢  ia  i  iæ  i  i  iô  i)  i*  iX  i¢	  i+  i  iO  éá   iY  i,  i-  i£  i.  i¤  i/  iÃ  iÛ  i0  i.  iÃ  iÊ  i¥  i1  i
  iJ  ir  i2  i3  i$
  i	  i4  i¦  i5  i6  i7  iÐ  i½  ib  ió	  iñ  i  i}  i£	  if  iã  iK  iÒ  iÜ
  iÝ
  i	  i¤	  i8  iZ  i9  iÍ  i:  iÎ  iÑ  ic  iÏ  i:  i  i  i;  is  iJ	  i@  iÐ  iô	  it  i;  i½
  i/  i<  id  i  iõ	  iù  iÑ  iU  iò  i0  iµ  ie  i=  iå  if  iu  iM  i÷  iÊ  i  i§  iÒ  i>  i	  i[  i  iA  iL  i  ii  i?  i¥	  i  iÓ  i	  i@  iA  iv  iB  iC  i\  iÄ  ij  i«  i[
  iÔ  ig  iD  iE  iÜ  i  iF  i  iB  i¨  iG  iÕ  i©  iH  iì  i(  iÙ  iM  iC  ih  iÌ  iI  iN  iJ  i  iK  iL  iª  i«  iM  iÑ  i1  i2  iN  é   i¬  id  iO  id  iV  iD  i`  i  i#  i5	  iP  i]  iQ  iE  in  i
  iÖ	  i­  i®  i^  iR  i_  iF  iS  ip	  ii  ið  iT  iU  iª  i  i£  iV  iê  iÖ  i¦	  i¯  iG  iÒ  iº  i°  ie  iH  iO  iö	  i±  iP  i`  iW  iw  ij  iX  i   i  i3  i
  ia  i¶  iI  iY  iJ  ix  i7  i  i  iÔ  i-  iÖ  i4  ik  i  ib  iZ  i-  i²  i  i.  ic  i³  i[  i	  ir  i;  iÄ  iK  i5  iL  iX  i  i   i	  iÆ  i  i\  i]  iµ  i´  i6  i%
  i^  i_  iµ  iÙ  i~  i`  il  iy  ia  iz  i~  iÓ  iÅ  ib  i?  i·  ic  i7  id  i
  iª  i©  ie  i¶  iz  iÝ  iÔ  iM  if  ig  i/  ih  i|  i·  i@  id  iø  i  ii  iN  i¤  iä  i¸  i8  if  i  iú  ij  ik  i¹  iO  iP  i¥  iß  il  im  i@  in  i9  iÀ	  io  i¤  iÁ	  iÕ  iÞ  i<  is  i  i\
  iQ  i.  iR  iN  i@  i×  iº  ip  i  iS  i{  iq  i»  iA  iÉ  i×  iú  i  iò  iT  i  i  i¼  i½  i:  i¾  iÑ  ir  iØ  is  i@
  iW  i;  it  iu  i¥  iv  iw  ix  iy  i|  i¿  iÀ  i  iº  iz  iÅ  iÆ  i3  iQ  i³  iá  im  i¸  iA  i{  i|  i«  iÂ	  iÁ  i}  iO  iR  iÇ  i±  ig  i  i  i~  iZ  i¾
  i  i  i  i  i  iØ  i\  im  i  i}  iÂ  i<  iX  iÃ  i×	  i  i÷	  iÞ
  i  i  i  i  iÄ  iY  i  iÅ  i  i0  iÆ  iÇ  iÅ  i¦  i=  iØ	  i  i  i  iL  iÆ  i  i  i  ih  i  i  iÈ  ii  i>  i>  i  i/  i?  iU  i  i  iå  i  iª  ie  i)  ix
  ét   i  if  iS  i  iÙ  iy
  iß
  in  i  i  i  iT  i  i@  iÓ  i  i§  i  i  éÏ   i  iÉ  i  iÊ  iÙ	  i  iÙ  iz  iU  ig  i  iV  iÖ  io  i   i  i6	  ip  it  i¡  i¢  i£  i­  iû  éÐ   iÚ  iA  iä  iJ  iV  ih  iZ  iÃ	  i×  iW  iË  i¤  i¥  i¦  C:\code\venv\callllama\lib\site-packages\chardet\big5freq.pychardet.big5freq<module chardet.big5prober>Big5Prober.__init__C:\code\venv\callllama\lib\site-packages\chardet\big5prober.pyBig5Prober.charset_nameBig5Prober.languageCharDistributionAnalysis.feed_total_charsSURE_NO_table_sizeEUCJPDistributionAnalysis.get_orderjisfreqCharDistributionAnalysis.resetC:\code\venv\callllama\lib\site-packages\chardet\chardistribution.pyEUCJPDistributionAnalysis.__init__euctwfreqEUCKRDistributionAnalysis.get_orderBig5DistributionAnalysis.__init__EUCKRDistributionAnalysis.__init___freq_charsfeed a character with known lengthSURE_YESSJISDistributionAnalysis.get_orderchardet.chardistributionEUCTWDistributionAnalysis.__init__typical_distribution_ratioENOUGH_DATA_THRESHOLDgb2312freqGB2312DistributionAnalysis.get_order_char_to_freq_ordereuckrfreqreturn confidence based on existing dataCharDistributionAnalysis.get_confidenceSJISDistributionAnalysis.__init__<module chardet.chardistribution>GB2312DistributionAnalysis.__init__CharDistributionAnalysis.got_enough_dataCharDistributionAnalysis.__init__Big5DistributionAnalysis.get_orderCharDistributionAnalysis.get_orderreset analyser, clear any stateEUCTWDistributionAnalysis.get_orderchardet.charsetgroupprober_best_guess_proberbest_confCharSetGroupProber.feed%s not activeCharSetGroupProber.__init__<module chardet.charsetgroupprober>_active_numCharSetGroupProber.resetCharSetGroupProber.get_confidenceCharSetGroupProber.languageC:\code\venv\callllama\lib\site-packages\chardet\charsetgroupprober.pyCharSetGroupProber.charset_nameCharSetProber.stateCharSetProber.filter_international_wordsfilteredin_tagbuf_charCharSetProber.filter_with_english_lettersCharSetProber.resetC:\code\venv\callllama\lib\site-packages\chardet\charsetprober.pychardet.charsetproberCharSetProber.feedlast_charCharSetProber.charset_name[a-zA-Z]*[-ÿ]+[a-zA-Z]*[^a-zA-Z-ÿ]?CharSetProber.filter_high_byte_only
        Returns a copy of ``buf`` that retains only the sequences of English
        alphabet and high byte characters that are not between <> characters.
        Also retains English alphabet and high byte characters immediately
        before occurrences of >.

        This filter can be applied to all scripts which contain both English
        characters and extended ASCII characters, but is currently only used by
        ``Latin1Prober``.
        <module chardet.charsetprober>([ -])+CharSetProber.get_confidence
        We define three types of bytes:
        alphabet: english alphabets [a-zA-Z]
        international: international characters [Â-Ã¿]
        marker: everything else [^a-zA-ZÂ-Ã¿]

        The input buffer can be thought to contain a series of words delimited
        by markers. This function works to filter all words that contain at
        least one international character. All contiguous sequences of markers
        are replaced by a single space ascii character.

        This filter applies to all scripts which do not use English characters.
        CharSetProber.__init___curr_char_lenCodingStateMachine.next_statechardet.codingstatemachine
    A state machine to verify a byte sequence for a particular encoding. For
    each byte the detector receives, it will feed that byte to every active
    state machine available, one byte at a time. The state machine changes its
    state based on its previous state and the byte it receives. There are 3
    states in a state machine that are of interest to an auto-detector:

    START state: This is the state to start with, or a legal byte sequence
                 (i.e. a valid code point) for character has been identified.

    ME state:  This indicates that the state machine identified a byte sequence
               that is specific to the charset it is designed for and that
               there is no other possible encoding which can contain this byte
               sequence. This will to lead to an immediate positive answer for
               the detector.

    ERROR state: This indicates the state machine identified an illegal byte
                 sequence for that encoding. This will lead to an immediate
                 negative answer for this encoding. Detector will exclude this
                 encoding from consideration from here on.
    byte_classCodingStateMachine.get_coding_state_machine_curr_byte_pos_curr_stateCodingStateMachine.get_current_charlenC:\code\venv\callllama\lib\site-packages\chardet\codingstatemachine.pyCodingStateMachine.language<module chardet.codingstatemachine>CodingStateMachine.resetCodingStateMachine.__init__<module chardet.compat>base_strC:\code\venv\callllama\lib\site-packages\chardet\compat.pyC:\code\venv\callllama\lib\site-packages\chardet\cp949prober.pyCP949Prober.languageCP949Prober.__init__chardet.cp949proberCP949Prober.charset_name<module chardet.cp949prober><module chardet.enums>CHINESE
All of the Enums that are used throughout the chardet package.

:author: Dan Blanchard (dan.blanchard@gmail.com)
CHINESE_TRADITIONALUNDEFINEDSYMBOL
    This enum represents the different categories language models for
    ``SingleByteCharsetProber`` put characters into.

    Anything less than CONTROL is considered a letter.
    LINE_BREAK
    This enum represents the different states a prober can be in.
    LIKELY
    This enum represents the likelihood of a character following the previous one.
    NEGATIVE
    This enum represents the different language filters we can apply to a
    ``UniversalDetector``.
    
    This enum represents the different states a universal detector can be in.
    DIGITCJKSequenceLikelihood.get_num_categories:returns: The number of likelihood categories in the enum.UNLIKELY
    This enum represents the different states a state machine can be in.
    C:\code\venv\callllama\lib\site-packages\chardet\enums.pyEscCharSetProber.resetEscCharSetProber.get_confidence_detected_language
    This CharSetProber uses a "code scheme" approach for detecting encodings,
    whereby easily recognizable escape or shift sequences are relied on to
    identify these encodings.
    _detected_charsetactive_sm_countchardet.escproberEscCharSetProber.__init__escsmEscCharSetProber.feed<module chardet.escprober>EscCharSetProber.charset_nameEscCharSetProber.languageC:\code\venv\callllama\lib\site-packages\chardet\escprober.pyISO2022JP_CHAR_LEN_TABLEHZ_CLS<module chardet.escsm>ISO2022KR_CHAR_LEN_TABLEHZ_STISO-2022-CNHZ_CHAR_LEN_TABLE¨   é   é    r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   é   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   é   r   é   r   r   r   r   é	   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   ISO2022CN_CHAR_LEN_TABLE¨   é   é    r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   é   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   ISO2022CN_CLSISO2022CN_STISO2022JP_STHZ-GB-2312ISO-2022-KRISO2022KR_ST¨   é   é    r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   é   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   ¨   é   é    r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   C:\code\venv\callllama\lib\site-packages\chardet\escsm.pyISO2022KR_CLSISO-2022-JPISO2022JP_CLSEUCJPProber.get_confidenceEUCJPProber.resetEUCJPProber.charset_name<module chardet.eucjpprober>EUCJPProber.feedC:\code\venv\callllama\lib\site-packages\chardet\eucjpprober.pyEUCJPProber.__init__EUCJPProber.language¨0	  é   é   éx   it  iá  i·  i¸  iH  ia  éÔ   i¹  iÃ  i  i+  iº  éW   iu  i»  éh   i  i]  i³  i¼  ió  i­  iô  iü  i½  i¾  i¿  iÀ  iv  iw  iÁ  iÂ  iÃ  é   im  iF  i!  ip  iÄ  i  iè  é   iÅ  iõ  iÆ  i±  ix  iÇ  é/   i  iö  iÈ  iÉ  i  éø   iÊ  i  i9  i  i­  iË  ét   iÛ  i-  iy  i«  éK   i´  é   iÌ  iÍ  iÎ  iÏ  é   iO  i  in  iÄ  iÐ  iÑ  iÒ  iÆ  i  i0  é   iÓ  é<   i4  é{   i¤  iÔ  iÕ  iÖ  i×  ii  iØ  ir  iÙ  iÚ  iÛ  iÜ  i  iÝ  iÞ  iß  ià  iá  iâ  iX  iX  iã  iä  iå  iæ  éY   i  i¢  i&  i  iP  iç  iè  ié  i²  iµ  iÅ  iê  i^  ië  éñ   iì  ií  iî  i÷  iï  i9  ið  iç  iñ  iò  ió  iô  iQ  iï  i"  é   it  éþ   iõ  é±   i  i  i]  i{  i7  iö  é   i÷  i{  iø  i;  iù  iu  iò  iz  i/  iú  i|  éË   i¶  iû  iÆ  i7  iü  i§  i.  iý  iþ  i·  iþ  i  iÿ  i   i¸  i  i  i  i  i  i{  i  i  i  i#  i|  i}  i  i~  i¨  it  i8  i  i_  i	  i
  i  i  i  i!  i  i  i  i_  i  i  iÊ  iÚ  i  i  i*  i  iu  i  i`  i"  i  i  i|  i  i  i  i  i  i  ia  i  i  i  i  i  i  i?  i  iR  i!  i   i/  i©  i¹  i!  i"  i=  i  iþ  i#  iº  i$  i%  i&  i'  i(  i)  i,  iÒ  i'  ib  i$  i*  i¹  i+  i  i-  iË  i,  i  i  i  ið  i  i&  iU  i»  iÐ  i#  i  i  i-  i.  é'   i  i  if  i/  is  i  i0  iÅ  i  i  i  iÓ  i   iÿ  i9  ie  é[   i1  i  i®  i  iZ  i  i¥  i:  iÉ  i  i  i2  i3  iÛ  iG  i   i  i  éy   i4  iÝ  i  i  i5  i6  i7  i,  éw   iÇ  i¼  is  i8  iø  éÏ   i9  i:  i  i½  i~  i;  i  i<  i;  i}  i=  i>  i?  io  i)  iç  i  i@  i  iA  iB  i¼  i×  i2  iY  iC  iD  i  i<  iE  iF  iG  iH  iI  i%  iJ  iK  iL  iM  iN  iO  i  é`   i>  iP  iö  i=  iQ  i¾  iR  i  iS  iT  i;  iÑ  i  i  i  i  iU  i  iV  iW  iX  i4  iY  é   i  iZ  i[  i¿  i\  i]  é   i  i^  iù  i  i_  é"   iP  i  i  i`  i;  i  i~  iH  ia  é    iv  iú  éz   i?  i  i  iª  ib  iû  i  i<  ic  id  éd   ie  if  ic  é0   i  id  i  ig  iy  i  iü  ih  ii  és   i0  ij  i=  ik  i¶  il  i  iÞ  i  i<  ib  i  i³  éU   i  iò  i  i  iI  im  in  io  i  ip  iq  ir  is  it  iu  é   iÃ  i  iÜ  i6  iv  iw  i  i*  iÀ  é]   ix  iy  iý  iÁ  iz  iZ  i÷  é-   é:   éµ   ib  i  i{  i|  é   i&  i'  i»  iè  i5  i  i½  i  i>  i}  i~  iw  i  ig  i  i¯  i  i6  i  i%  i  i  é(   i  év   i´  é   i«  iw  i  iâ  é®   i  éE   i  iØ  i  i  i  iþ  iÂ  iÿ  i  if  éÙ   iV  i  i7  i  i  i  i  iB  i  éN   i  i[  i  i'  i  i  i  i  i¶  i  éÐ   iS  i  i  i  i  iÃ  ie  i  i  ix  i  i  iÄ  i  i  i  i  i  i  i   é   iþ  i  i  i  i  i  i   i¡  i¢  ió  i?  i£  i  i  i¤  iq  i¥  if  i¾  i(  i)  iÅ  i¦  i~  ié  i\  iÇ  i  i  iÝ  iì  i)  i  i  i§  i  iê  i  iÆ  i¨  i©  iª  i«  é$   i  éä   iñ  é÷   iÆ  i¬  il  i¦  i­  i®  i  é~   iÐ  iê  iC  é   i   i  i¬  i@  i  iÙ  i¯  i°  iÓ  é2   i  éã   iK  i  iz  iV  i  iÈ  éð   é   é    iQ  ir  if  i  i  i  é   é   i   ih  i+  i3  i  i1  é   i  i±  i²  i³  é   ég   i(  i·  i  iú  iz  iÞ  i´  iµ  i¶  i·  i  i¸  i¹  iº  i»  i¼  i½  éì   i¾  i  i¿  iÀ  iA  éÀ   i<  ij  i  i  iM  ig  iÁ  i2  iÇ  iÂ  iÃ  iÄ  iÅ  iÆ  iÇ  iÈ  iÉ  iV  ih  i  iê  iJ  iÊ  iË  i0  éß   i  éb   é   é½   i  iÒ  i  iÌ  i  iÍ  é   iY  éú   i§  i  éê   i   éâ   éa   i!  é*   é§   iÎ  éÉ   iÏ  iÐ  iK  iD  i8  i  iR  i  iB  é¶   i@  i´  i  i  i  iô  iÑ  i³  iy  iÒ  iÓ  iÔ  iÕ  i  iX  i:  i¿  iÖ  i#  i×  iµ  iâ  ii  iØ  éG   i   ié  ik  i°  iÙ  i=  iÚ  iÛ  é   iÜ  é!   i´  iÝ  iÞ  éJ   éà   iß  é=   é¿   i  i  i}  ià  i  ij  i  i  iá  iâ  iã  iä  iå  iæ  iç  iè  ié  iê  iE  ië  iì  ií  iî  é³   ij  iO  é4   iÔ  éö   iï  ið  iñ  iò  i  iÉ  ió  i	  iv  i]  i  iC  i  iô  iõ  iö  i¡  i  i÷  io  iø  iù  éý   i  i
  iú  i¢  é   il  ic  iA  i±  iû  iÈ  iÏ  i  i¿  i¸  iµ  i  éT   i  ià  ik  é   éÜ   éÆ   i§  iü  iô  i3  i*  i£  éq   iÉ  éÂ   i>  ië  i  iý  iþ  iÿ  i   i+  i  i  i  i  i  é;   i  ép   i  ix  i  iÇ  é   iã  i  i  i  i©  ió  i	  iÀ  i
  i  iø  i  i  iÊ  i  é©   éõ   il  i  i  i  i¤  i  i  é)   éë   i  é   éü   im  i8  i  i  iD  i  iÕ  i  i  i  i  i  i¥  i  i¦  i  i  é7   iL  éB   i§  i  iD  i  iÊ  i  iÀ  iõ  it  i  i  i  i   i!  i  i"  i#  i$  i%  iR  i&  i'  i(  i)  i*  éº   i+  i,  é´   i,  i-  i.  ém   iË  i
  i^  i/  ic  i¨  iE  iß  i  i  ia  im  i0  iE  i1  i2  i3  i  i©  iª  i4  iT  i  iö  iÌ  i5  i«  i  i  iÍ  i6  i7  i  in  i¬  iµ  io  i8  i9  iF  i­  i®  i¯  i:  iG  i;  i<  i=  i>  i?  i@  iA  iB  iC  iD  iE  i$  iF  iG  iÎ  iÏ  i%  i°  i  ip  iH  iI  iJ  iK  iL  iÐ  i½  i  ià  i±  i  iì  iM  iN  iO  iP  iQ  iR  é   i¡  iS  i/  iT  i  iU  iË  i  i  iV  i  éI   iH  éç   i  iÂ  i²  i¡  iW  i³  iX  é   iq  iY  iZ  i[  i\  ií  ir  i´  is  i]  i^  i_  i`  é   iv  iL  ia  é   iÐ  é.   iµ  ib  iF  i>  iÑ  iÑ  éj   ic  éZ   i¬  iÎ  iB  i6  i  i`  id  ie  i  iÒ  é|   i  if  i¶  iù  i5  ig  i®  ih  i  ii  éH   é­   ij  iÌ  i  ik  i·  il  iÓ  i1  im  in  io  ip  iq  ir  iC  is  it  iu  iv  iw  ië  ix  iy  iz  i{  i¸  i  i|  i}  i~  i  i  i¹  i  é   i  i  i  iO  iÙ  i  i  i  i  i  i  i  i  iº  i  i  iE  i  i  iq  i  i  iI  i÷  i\  i  i-  i¨  i  iS  iº  i  i  é
   i  ie  i¨  i  iÓ  él   iÁ  iM  é   é¬   éQ   i  éP   i  i  i^  i  i  i-  iF  i  i  i¢  i  i  i  i»  iÚ  iú  i  i  i  i  i¼  i  iá  i  i  i
  i.  iÃ  it  i  i  i   i  iJ  iÌ  i¡  i¢  i£  i  i½  i¾  ig  i¤  i¥  i¦  i§  i¨  i¿  i©  iª  i«  i¬  i­  i®  i¯  i°  i±  i²  i³  iÀ  iÔ  i´  iµ  i¶  i·  i¸  i¹  iº  i»  i  i¼  i½  éÈ   i¾  iÝ  iu  i¿  iÀ  iÛ  i9  i	  iÁ  iÂ  iÃ  i	  iæ  i$  iÄ  iÅ  iÆ  iÁ  i  é5   i%  é   ik  éL   é   iÇ  i  iÂ  iÕ  i  iø  i  iÈ  iÈ  iA  iº  i÷  iÿ  iè  i­  iÕ  i  iÃ  iÉ  éR   é²   iu  i  iÍ  iÊ  i  iË  i)  iÌ  iÍ  i:  iÎ  iÏ  iÐ  é   iÂ  éÎ   iÑ  i"  i$  iv  iÒ  iÿ  é¢   éc   iZ  é¤   iß  iÓ  iÄ  iÅ  é   i*  iW  i  iK  iÔ  iL  iÕ  é+   é«   i  é   é×   iÖ  i×  iÍ  i  iØ  i	  iB  éØ   iÙ  i?  iÚ  é   iÛ  i  iÜ  iÝ  i¾  iÖ  é   iM  i[  i5  iÞ  iä  iß  in  i  éî   iî  iÆ  ià  éC   iá  i'  iâ  iã  iÍ  iä  iÞ  i®  i  iå  i
  iæ  iç  iè  i	  ié  i  iê  ië  iì  ií  iî  éF   iT  i/  iï  ið  iñ  iò  é   é8   iý  éu   i°  ió  iô  iK  iÔ  i(  iM  é   i  éi   i  i  i×  ió  iõ  é»   iö  i  iÇ  i÷  iT  iø  é?   i  éæ   iù  iú  i  iû  i  ée   i   i(  iî  iû  iü  iý  i  iþ  é%   i0  é   é   iÿ  éO   i£  i 	  i8  i	  i	  i	  i	  i	  iÈ  é   i  i	  i	  i	  é   iÖ  é#   é   éå   i		  i·  éÒ   éV   i
  é   i  iP  i  é    éM   iW  iÄ  i
	  i  i	  iõ  i|  i	  i	  éS   iÕ  é   i±  i  iÉ  iÊ  iË  i	  i	  iÌ  iÌ  i	  i	  i	  i	  i	  i	  iÍ  i	  i	  é   é9   éD   i  i  éÓ   éª   iØ  é   i	  é3   i³  iæ  i	  i	  i	  i{  i	  i  iÈ  i	  i	  i	  i©  i 	  iÎ  é   iû  i  i¯  i!	  ik  i  iÏ  é   iÐ  iN  éó   iY  iÑ  i"	  i#	  i$	  i%	  i&	  i'	  i(	  i]  i)	  i*	  i+	  i,	  i-	  i.	  i  i/	  iÒ  iÓ  é>   i  é¦   éá   i0	  i1	  i  i£  iÙ  é   i\  i   i2	  i  i3	  iÔ  iÕ  i4	  i5	  i6	  iw  i7	  i¸  i8	  i  i3  i  iª  iÜ  i9	  i:	  iL  é   éÞ   é   i;	  éè   i<	  i  i  i  i  iÖ  i×  i  i   ià  iØ  i=	  iù  iJ  i>	  i?	  i@	  iÙ  iA	  éò   iB	  iC	  iD	  iÚ  iE	  iÅ  iÉ  iF	  iG	  iH	  iI	  iä  iÖ  iÛ  i°  iÜ  iï  iJ	  iK	  i  iÝ  iL	  iM	  iN	  i  iI  iO	  iP	  iÞ  iQ	  iR	  iS	  i¤  iT	  iß  iU	  iV	  iW	  iX	  iÚ  iY	  iZ	  i[	  i\	  i]	  iâ  i¶  i^	  i_	  i`	  ia	  ià  i  ib	  ic	  id	  ie	  i  ií  if	  ig	  iU  iÎ  ix  i   ih	  i  iá  ii	  ij	  éÿ   i  iß  i4  i&  éÖ   iâ  iã  i!  i  éï   i¼  iS  iy  i  iä  iå  i"  i  iæ  i#  ik	  iç  il	  im	  in	  é°   i¿  iñ  ip  iQ  i  i.  io	  iU  é¥   iO  iè  ip	  ié  iq	  ir	  is	  ix  it	  i¼  iu	  iv	  iw	  i  i   i$  ix	  i  iy	  iã  i`  iz	  i{	  i|	  i}	  éÝ   i~	  i	  i	  i	  i	  i	  i	  i	  éÃ   iC  iÖ  é¼   i  i×  i%  iy  i  i  io  i	  iÄ  i	  i	  i	  i	  i	  i	  i  i	  i	  i	  i	  i  ié  i	  iê  i   i	  i	  i  é@   i«  iï  i	  iG  i	  iã  iå  i  i2  éÕ   ië  iì  i  i	  i	  i	  i	  iN  i	  i  iä  ið  iÁ  iÛ  i	  i	  i	  i	  i	  ér   i 	  ií  iz  in  é£   iì  iÁ  iP  i¡	  i#  i¢	  i&  iQ  i£	  ií  im  i¤	  ic  i·  iÜ  i¥	  i'  i¦	  iw  i§	  i¨	  éÚ   i(  il  i@  iô  iî  iï  i)  ið  i*  i©	  iª	  i«	  i¬	  iå  i­	  i®	  i¯	  i°	  i  i¡  i±	  i  iñ  i²	  i³	  i´	  iH  i¬  iµ	  i¶	  i  i·	  i  i¢  i¸	  i¹	  iº	  iò  i»	  i¼	  ir  i½	  i  i£  éA   i¾	  i²  éÍ   iÏ  i¤  i¿	  é}   i,  i  i  i:  i»  i  i  é   i  i  iI  iÀ	  iN  iù  i1  iÁ	  iW  éô   éÛ   i  iú  i¸  i  ió  iÂ	  i+  iÃ	  iÄ	  é1   iØ  ib  iå  iÅ	  iq  iÆ	  i,  iÇ	  iû  é¾   ie  iõ  ië  é_   i  id  iÈ	  iÉ	  iÊ	  iË	  iÌ	  iÍ	  é   iô  i2  i¦  iõ  i  iÎ	  é¡   iÏ	  iÐ	  iÑ	  iÒ	  i  iÓ	  iö  iÔ	  iÕ	  i  i-  iÖ	  iØ  i÷  i×	  iØ	  iÙ	  iÚ	  iÛ	  iÜ	  iÙ  iÝ	  iÞ	  iß	  ià	  iá	  iâ	  iü  iã	  iÝ  iä	  iå	  é   éÌ   i7  iæ	  ið  iç	  i  iè	  ié	  iê	  ië	  iì	  ií	  iî	  éÇ   iÀ  iø  iÔ  iö  i  iø  éÄ   é,   iG  iÞ  i  iî  iï	  iý  i^  ið	  iñ	  i.  iò	  é   ig  i¥  ió	  iÜ  iô	  iõ	  iö	  i¥  iù  i÷	  i  iß  i  i_  i¡  iø	  iù	  iú	  i¢  é·   ih  ih  i  i{  iû	  i|  iü  i¹  éù   i3  iü	  iý	  iþ	  iÒ  iç  iÿ	  i 
  i
  é\   i  iª  i¤  i  i
  i
  i
  i
  i
  i
  i
  é¹   i	
  i

  i
  i
  i  iú  i  i
  ij  i
  ii  i  i4  i  i
  i
  i
  i
  i
  i
  iû  éû   i
  i
  i
  i
  iü  é6   id  éí   i/  i
  i
  i  i  i  éo   i
  iý  iR  iÑ  é   iÊ  é	   é&   i
  ék   én   iz  éÑ   é   iá  iò  i
  iþ  i
  i¯  éÊ   éX   iÿ  id  i  iS  i  i}  i
  i}  i   iÚ  i~  i½  ià  i  iÎ  i 
  i!
  iN  i"
  i¾  i¹  é¸   iá  iâ  i×  i#
  i  éÁ   is  i$
  i%
  i&
  éf   iD  i  i1  i'
  i¥  i  i(
  i@  i)
  é^   é¯   éÅ   i  i*
  iË  i+
  i,
  i-
  i.
  i/
  iJ  i+  i0
  i1
  i2
  iÂ  iT  i  i3
  i4
  i5
  i6
  éé   i7
  iA  i.  i£  iº  iã  i8
  i9
  i  i"  i:
  i;
  iñ  i<
  i=
  i>
  i  i²  i0  i?
  i»  i@
  i  iA
  iB
  i  iC
  iD
  iE
  iF
  iG
  i  i  i_  i[  iH
  iI
  i¦  i  i`  ia  iJ
  i  i  i  i¦  iK
  iL
  iM
  iN
  é¨   iO
  i  ii  i  i  i  iP
  iQ
  iR
  chardet.euckrfreqC:\code\venv\callllama\lib\site-packages\chardet\euckrfreq.py      @C:\code\venv\callllama\lib\site-packages\chardet\euckrprober.pyEUCKRProber.language<module chardet.euckrprober>EUCKRProber.__init__EUCKRProber.charset_name¨   é   i  iâ  éÿ   i  éÆ   é	   éR   é   i  é±   éÊ   i  iè  iø
  én   i  é!   i©  i  éL   é,   iA  é   is  i  i  i  i  é   iL  iS
  i®  i  iñ  iÜ  i  i£  i.  iN  ii  i«  é   éÌ   é:   iÈ  i  i  é?   i  i  i=  iN  éK   éÞ   é   iÝ  il	  iÈ  i  i¬  iü  éà   iù
  i   é   é
   i  i¿  é   iÖ
  io  i$  i  ii  é   iª  ic  i8  i  iÉ  i  iû  éü   iª  i  é   iz  é|   éÎ   it  é"   i­  ie  é@   i\  i  i¾	  i¸  i¹  é   iÆ  i  i  iF  i  iM  iQ  éH   i  i  éP   iv  éî   if  iå  i  i«  iD  iT
  iô  i   iF  iN  iÁ  éE   i  iO  é³   i/  i×  és   iò  i3  é<   é2   i  é   i&  iL  iÞ  ió  iO  é´   iã  iG  é   i  iM  i°  i  i?  i  i  i`  i  iF	  i*  iÊ  ig  i¿	  éZ   i
  i:  i  é   i  iK  iñ	  é   i	  é¶   i  i´  i  iÜ  i`  iÞ  i  i  ig  é   i	  i   éq   i  i~  i  éò   iP  i£	  i  i«  iÛ  i§  i!  i  éu   é   i  i*  i  i÷  i	  i®  i  é~   iß  iÂ  iÈ  é   ie  iË  éG   i^  iô  ià  é   iý  éU   iC  iæ  iB  iÞ  i  i¬  i×  i  i÷  i   éj   io  i/  i  i  iO  i2	  i[  i  éÝ   i¯  i&  i  i£  i  iá  éS   i(  i¯  iþ  éÀ   ip  é]   i  i6  ii  iú
  i'  i  i  iß  i  i  i8  é   é+   i%  i[  é   i°  i\  iÌ  iµ  iÈ  i  é¤   iX	  i(  i·  éÓ   iÉ  i0  éÃ   i   iH  i°  i±  i"  i!  éê   i+  i  i1  i"  iµ  i¡  i²  iO  iG	  i  i  if  i1  éä   i  iÍ  iÓ  i  i  i  i2  i9  éï   él   i,  éÈ   i	  i   iß  i  i   i¡  i}  ih  i#  iq
  iQ  iM  i&  i¬  éX   i»  iõ  i#  i  éÔ   i
  é   é   iÔ  ij  iâ  iÎ  éM   é»   i¢  iÊ  é%   é   i  i£  i$  i¤  i¥  é'   iÕ	  iÏ  iN  ii  i  é7   é   éJ   iÐ  i!  iã  iÂ  i  i  éÙ   iM  iû  i)  iP  iU
  iã  é   é¬   i³  i  i%  i´  iµ  iÑ  é    i  iû
  i   iI  iç  i3	  iÇ  i
  i  ir
  é   iË  iò  i  iü  é¼   ém   ió  i¦  i$  iµ  iý  ix  iÁ  iÌ  iÒ  i§  i¶  i¨  ió  ið  i%  i&  éÄ   i
  i  i©  iª  i¡  i  éù   i·  é&   i«  i'  i¬  i  i'  i  iø  é.   é²   i­  i  i­  iH	  i®  éÖ   i­  iÓ  i$  é#   iÃ  iD  i&  iA  iò	  é   iË  iä  i¯  i°  iU  iG  i  iÒ  iÑ  i
  iQ  iP  iS  i'  i  i¹  éd   iÿ  é0   éF   iÏ  iï  i*  i  i±  i  i²  i  iÎ  iJ  i  i®  iU  é   iÜ  é¹   iI	  iR  i¢  i²  i<  i³  iS  i:  i7
  i×
  iÔ  i	  i	  i9  iè  i}  i  iÖ	  iõ  i  iV  iP  iT  i  i)  iC  i   iÕ  i  i&  i·  i×	  i)  i  i  im	  i´  iå  i¥  i  iµ  i  i4	  iÆ  iÖ  iý  in	  i*  i  i×  i¶  i  i¶  i  iO  i£  i·  iØ  i  i	  i+  i(  i
  iô  iî  i  iU  i(  iæ  i5  iY  ij  iü
  il  i¶  iu  i  i)  i¸  i*  i+  iV
  i  i=  iÍ  i  iÐ  iÃ  iÄ  iÙ  i¥  i4  i  i!  ié  i¬  iT  i,  ix  iÚ  iÛ  ie  é   iØ	  i×  iJ	  iP  i®  is
  i5  iA  iV  i/  ik  iÎ  i¶
  i  il  i!  i	  iÉ  iA  i¸  i`  i³  iý
  i¯  é§   iA  i¤  iþ
  i  i  i¼  i¹  iç  i	  i°  i¹  iè  iº  i¾  éå   iM  i·
  i  i  i°  i  iÜ  iW
  i  i  i¸
  it
  i  ié  i+  é}   i  ij  i8
  iÝ  i»  i¼  i  i½  i¾  i¿  iÞ  i-  i)  im  ió	  iÝ  iW  iæ  i		  i  iº  iÀ  ia  i¶  i
  iP  iK	  iõ  i,  i¾  iÏ  iÍ  i7  i'  iu
  iê  i{  ik  ië  iº  i  iî  i¹
  i9
  iì  i  i  i  iþ  i¢  iÁ  i  i¬  i  i1  éÒ   éb   i  iô	  i»  iÂ  i¯  io	  iÊ  iX  i,  iQ  ié  é   iÃ  i  i  i  iØ
  iÙ
  iX
  iÄ  é   i·  i5  éD   é°   i¹  il  i  ií  i[  i 
  iÆ  é«   iY  i  i%  é   i.  iY	  i  i*  i  iÅ  i¼  iß  iR  ià  iÆ  i  ip  iÇ  é   in  éc   ig  i+  i  iì  i'  i2  i¡  é   iÒ  i{  i  il  iÈ  im  iù  i  i:
  iÇ  if  i
	  iÉ  i|  i5	  éÚ   i¾  i  ià  iZ  iÐ  i½  iö  i±  iÊ  i  i,  i¢  i²  i   iË  é;   iÌ  iI  iY  iî  iñ  i[  iX  i"  iá  i	  iÍ  iÇ  iÀ  i~  iÎ  ií  i,  i²  ik  i¡  iì  i-  iÄ  i­  i  iþ  i¸  iD  i  iï  i¿  i>  i]  iÏ  i,  iÐ  iÑ  iä  iv  iL  iB  éi   i&  iÆ  iÞ  iÿ
  ið  iö  i®  iG  iÒ  iê  i  iB  iÓ  i¾  i!
  iâ  ið  iu  iù  iã  i¢  iÔ  iÀ	  i   ia  i  iä  i  iv
  iS  iÔ  i}  i;
  i  iD  iÕ  i=  iä  i0  i   iÖ  i\  i(  i×  i  iÍ  iv  i   é   iå  iØ  iÙ  é   i.  ið  iñ  é9   iH  i  iö  iæ  iç  i]  iE  i¥  iÊ  iÓ  iÔ  i­  i!  iò  i/  iÒ  iï  i³  i   i-  i  i¶  iQ  i*  i÷  i.  i/  iÊ  i½  ió  i  i0  é3   i  i"
  i§  i*  iR  i  é­   iè  iW  iÚ  iÛ  i/  i  ib  i.  ié  i	  i  é   iÜ  iÝ  iÞ  iË  iR  i  i  iµ  i)  i  i2  i£  i	  iß  iê  ià  iá  iØ  i¸  iZ	  iâ  iT  i  iw
  i­  iË  iô  i¤	  i  i¹  iõ  i  ië  i  i[	  éO   iö  i	  i´  i`  i7  ix
  i^  i÷  iø  i  i  ií  iÿ  i\	  iã  iì  iä  iå  iæ  iç  ig  i  i¤  in  i¸  i
  i_  i  i~  éØ   i£  ií  i0  i  i¿  ia  iî  iy
  i]	  iè  ié  iê  iù  iÑ  é    ië  i¥	  i;  éç   i	  i-  i÷  iï  iL	  iì  éé   iú  i/  i  ið  iñ  ií  é`   ið  i#  i"  iî  i  iï  i  i0  i
  is  i  iû  iå  id  is  iÚ
  iñ  iY
  ið  i  ik  iw  io  iñ  i  iò  ió  iô  i1  i  i2  iÎ  ég   ip  iQ  i£  iU  iø  iv  iÌ  iõ  i°  é   éC   iS  iü  i^	  i§  i  i5  iö  i÷  iB  iâ  i_  i   ib  iN  éë   iÙ  iX  i¢  iÈ  i¥  i
  éº   iL  ic  iº
  iÀ  i	  iK  iw  i*  ia  iG  i3  iý  i
  i¡  iø  i  i1  i6  iõ	  i2  i6	  éN   i¦  i§  i  i	  i3  iÑ  i:  iþ  i\  iq  iú  i  i  i-  iò  i  i  i3  i»
  ië  iÒ  ió  ix  i¼
  é   iù  ir  iô  i4  i½
  i_  iõ  iU  iù  iÿ  i¾  i@  iú  i5  iÒ  i  i¢  iû  i  ií  i/  i+  i6  i  iü  i  iö  iÓ  i¤  i¨  iÁ  i7	  iZ
  i  iæ  iú  i8  i4  i  iC  i÷  i  iú  iç  il  i²  i`  iý  iò  iÜ  i  iþ  iY  iø  é¥   éó   iù  i5  iÙ	  é{   i«  i   iü  iú  é$   i7  i   iM  iV  i0  ir  i  iÓ  i¹  ig  i  iV  i©  i8  iÿ  i9  i,  iZ  iÌ  i  i{  i#  iW  i0  i  i   i$  i£  i
  iÂ  i³  i4  i  i[  iû  év   i  i  ic  i  iV  iM	  i$  i-  é   i  i  iX  i  i  iµ  id  iº  iÎ  iW  i[
  i  i¤  iÔ  i  i  iq  iÃ  i  i1  iÀ  i  iõ  i  it  iü  i  iª  i	  i  i  iÄ  i2  i÷  i2  i:  i3  i   i.  i¤  i¤  i2  iÕ  i
  i«  i  i  éÅ   i  i%  i  iÝ  iý  i  i  i  iÉ  i  iþ  i  i  i  é   iÛ
  i6  i¤  i4  iÍ  i|  i  i¬  iS  i  i  iÿ  i_	  iÅ  i  i¥  iç  i¿  i`  i  i  i  i­  i	  i3  i  i  i;  ir  i  i  i  i7  iY  iL  i;  i¹  iÚ	  iÛ	  i  i  i  é   iT  é\   iì  i»  i  i<  iè  iV  i5  i  i  iÜ
  i¦  i¼  iû  i  i"  ix  i%  i  i;  i8	  i   i®  i   i2  iE  i=  i!  i  i  iÈ  é^   i  iw  iÝ
  i"  i·  iè  i  is  i  i#  i<  iQ  i  iî  ir  i$  i  i]  i  i%  i÷  i.  i&  i  i3  i5  iB  i  iy  i'  iÞ  i´  i¶  i  i·  i  i>  iY  ia  ib  i(  i
  i	  i)  i*  i	  i  é   i  éÁ   i:  i¯  i6  i»  i^  i  i  i  i  i(  iÆ  i+  i+  i  i  ix  i,  i	  i.  ih  i/  i-  i  i  é   i
  iV  i  i®  i  éh   iÎ  iz  i.  i  i  éý   i  i<  iø  ií  i;  i/  i?  iû  i  i
  iö	  i0  i8  iÕ  i  iÉ  i5  i6  i
  i_  é)   i1  i2  i	  i3  iy  i	  é   iÏ  i¾
  i  i^  i4  i¥  i¸  i?  i$  i+  i\
  i¦  i5  i_  iW  iÖ  i  iz
  i6  i0  i  i
  i]
  i	  éè   ip	  i7  i§  iÚ  i8  i^
  i<
  ió  iV  i9  i¹  i6  ié  iI  éw   i}  ic  i^  i  i  i9  i@  i°  i
  iA  i  iÔ  i  i¦	  i:  ie  i1  i  i  iB  ié  iæ  iø  iÏ  i  iÖ  iº  i  i±  i7  i;  i<  iã  i=  i{
  iÝ  é(   i`  iR  i1  iY  i  iI  iÜ	  éæ   i  i¨  i6  i»  id  i>  iï  iÚ  ie  i?  iß  io  éþ   iq  iY  in  i  i  il  i  iC  iD  i{  iÇ  i¿
  i_
  iE  iP  iU  i  iü  i©  iÊ  i  i  iE  im  i  i@  iã  i:  i
  i  i
  iA  i  i  i  i  i  i#
  i÷	  iN  iÀ
  iª  iB  i³  iC  iW  iT  iT  é   i×  i  i»  if  i;  iD  i  i&  iÇ  i|  i  iÝ  iÓ  i  iù  iÈ  i  iú  i<  i=
  iÞ
  iÕ  i  i	  iV  iú  iÉ  i  io  iá  iø	  iE  iÊ  iF  i  i  iý  iÔ  éð   iâ  iþ  i  i  iD  i-  i8  iÚ  iG  id  iÝ	  i  iË  iH  it  iñ  i  iI  iz  i
  i  iJ  iÌ  iÍ  iK  i  iÿ  i|
  i  i  iÁ  i  i>
  é¾   iÕ  i  i²  i  i  iL  i:  iÁ	  i=  iÒ  iM  i  i?
  i¼  i¤  i  iH  iê  i  i  i  iN  i  i¯  i	  iO  iP  i  iF  ik  iQ  i9  i½  é×   iÖ  iß
  iù	  iu  i  iv  i  iû  i  i³  i  iR  iS  i¥  iç  i}  i   i>  i  iÄ  iÅ  i  i  i:  iT  i	  iå  iN	  i  iC  ií  i  iì  iU  i~  i  i   iW  iØ  iG  i  i  iý  i,  i  i  i  iå  iO  iï  i|  i  i´  iÖ  iO  i?  iV  i`	  iø  i   i   i~  i  iw  iÀ  i  iû  i@  i!  i×  i¥  i;  i  é   i×  i  iW  iê  i"  iÎ  iX  iõ  iY  i  iR  ig  iu  i  iÏ  ih  iÐ  ix  i=  i
  i  iZ  i  i<  iÉ  i  i[  i¾  i#  i  i=  i 	  i\  i$  i  i]  iH  iI  i^  i7  iO	  i$
  i  i_  i%  iv  iJ  i  i   i!  iw  it  i  i`  ia  ib  i9	  i&  iØ  i"  i{  é   i×  i	  i'  ic  iÊ  id  i8  i  i  iµ  iÌ  i[  i9  i¶  i·  id  iZ  iú	  ie  i´  i¼  iØ  i@
  i!  i(  i"  if  iÓ  éô   i  iÙ  i#  i$  iT  ig  iK  i  i«  i%  i  éW   iM  ih  i  i¿  ii  i¼  iÑ  i¶  i%  i¸  éÛ   iÆ  i  i  i  i`
  i  iy  i7  im  iL  ij  ik  i¬  i:	  i>  i!  iÚ  ië  é¸   i  éB   i)  il  i|  i  éö   i  iz  i±  éâ   ii  iÏ  iM  i  ið  iÑ  i¢  i¸  im  é£   in  iu  iq	  iv  iÉ  iÒ  i  i*  iN  io  ip  i¢  é   iq  i7  i.  ir  iò  iy  iÓ  i  i  i
  iö  if  i  i  i¿  is  i!	  iy  iÔ  iO  i	  i­  i  iâ  i+  iP  ij  iÕ  i>  i  i¶  iþ  iÀ  i  éY   i  iA  it  i±  iu  i%
  i  i®  iv  i  i§  iz  i2  iw  i,  iÂ	  iÞ	  éµ   i  i3  iQ  iÛ  i  i  ix  iÁ  i6  i9  ik  iû  i  i&  é6   iÚ  é½   i-  i
  i¹  iR  iy  iÎ  iQ  i9  ic  iÖ  i'  i.  i  éo   i(  iB  iF  i?  il  iÛ  i)  ie  iÂ  i×  iz  ià
  iS  iT  i¯  iÒ  iØ  i{  i/  é÷   i·  i"	  i§	  ib  i/  iÙ  i`  i  i¾  i0  iu  iº  iv  i¨  i  i1  iº  iÁ
  iû	  i»  iU  i°  i*  iÃ  i/  iE  éª   iS  i¦  i8  iZ  i|  i}  iF  i+  i  iç  i!  i~  i2  i,  iF  iP	  i  im  i  i
  i  ie  is  iÁ  iC  iÄ  ir	  i  i½  i  i  i¼  ia  i3  iZ  i%  i-  iü  i  iâ  i	  i4  i  i  iÔ  iA  iº  i  i
  iØ  ii  i  i  iö  iø  iD  i.  i  i  i   iü	  in  i¡  i  i  i½  iá
  i¾  i  i	  i  i3  i5  iJ  i0  iÜ  is	  iÂ
  i»  iÅ  i  i@  i  i  iV  i  i/  iÃ	  iÝ  i6  iW  iA  i7  io  iÙ  iÚ  iP  i0  i  i1  i¯  in  i  éú   éa   éQ   i2  i  ip  i:  i  é    iP  i  ib  iä  i  i  i  i  i{  i3  i7  iE  i  i¶  i¨	  iª  iÕ  i|  iF  iG  iX  i  i  i¤  i¨  iË  i]  iÚ  i4  i¿  i  i}
  é¨   iÓ  iÛ  i5  i  i&  i  i8  i	  iÆ  éÜ   iý	  iñ  i  iÀ  i  i°  iL  i¸  iÍ  i  i  iÜ  i	  iY  i
  i  i  i  i¹  i4  i  iB  i9  i8  i  i  i  i  iß	  iH  iÝ  i/  i3  iZ  i[  i  iÞ  io  iÁ  iæ  i:  i0  iÞ  in  i\  iÍ  i]  iÂ  i^  i  éì   iÃ  i	  iÇ  i  i   iI  iÄ  iù  iÅ  i;  i¡  i4  i¢  i<  éõ   i=  i;  i©	  i  i
  i®  iË  iX  i	  i£  i  éÇ   i5  i_  i¤  iß  i
  iÙ  iù  iÚ  iÕ  i}  i0  i>  ip  iJ  i¥  i¦  iK  é   iÈ  éã   i&
  iF  ià  iÙ  i¯  iÃ
  ià  i#  i  i[  i§  i¦  iÊ  éf   i  é>   iq  i  i?  ir  i  i6  i¨  i©  iÈ  i  iÄ
  i  iò  iÕ  iª  ij  i  i«  i  i  i@  i-  ip  i9  i;	  i6  iy  iA  iî  ié  i  iþ	  i'
  i¾  i  i  i¬  i­  i  i®  éV   iÖ  iÂ  i`  ië  i4  ié  i  i  iK  i  ia  iÅ
  i6  iÉ  iè  iæ  i©  i  i  i"  i«  i±  iK  i±  i  i  i¯  iÆ  iÄ	  iY  iG  io  i°  ib  if  ic  i7  i  is  ip  ér   iÿ	  i8  éÑ   i÷  i±  i²  i  i  iA
  iQ	  i
  iC  i,  i 
  i³  iÊ  i´  i  iá  i\  iL  iº  iu  é   i~
  iá  iÇ  iµ  i9  iì  ió  iB  i¶  iZ  i½  iª  i
  iC  iÈ  iÎ  i  ij  id  i  i0  ih  ig  i  ie  iË  iM  i}  i7  iâ  i·  i
  i¦  iD  i	  iù  i¸  i¹  iº  if  i:  ií  i  iN  i;  i 
  iE  iF  iø  i(
  é¡   i  i<  i¾  iÛ  iG  iM  i=  iw  ig  i  i~  it	  i?  iÙ  iø  i¿  i
  it  im  i#	  iÅ	  i  i+  i  i  ih  i»  iÒ  i  é©   i  i[  i
  iO  iª	  i²  i  iÛ  i
  iã  iB
  i¼  ià  i$	  it  i  i¡
  i±  i  ia	  iÌ  i«	  i½  iH  i  i  i  iß  iQ  i"  i<	  i  iÌ  i¾  i-  i1  i¿  i#  iu  i'  iÚ  iD  iß  i  iÿ  i  iâ
  iI  iî  i>  iJ  i%	  ió  i  iP  i  i
  ii  i  i¢
  i=  ia
  iÀ  iK  iÁ  iv  iÂ  iÃ  iÄ  iÍ  i
  i  iÎ  é   é_   ià  ij  iÓ  i?  iE  i1  iã  iÆ
  i  ik  ië  i8  iQ  iÅ  i³  il  iÂ  iÆ  i  i  im  i@  i
  éø   ib  iÉ  i  iÇ  i  iR  ià  iÊ  i  é5   iÈ  i´  iÉ  i  iL  i	  iw  i  in  i  iÊ  é¿   i4  iH  i  iË  iM  i£  i  é   i  i  iË  iÍ  i  i\  i  io  iÌ  iN  i]  i  i  i£
  i  i\  ix  ig  i  iE  i  iË  iÌ  iÇ  iü  iÍ  iÎ  ip  i«  iã
  i  iq  i  i¬  iË  iÍ  iü  iÏ  iO  iÎ  iê  iÏ  ir  i  iZ  i  is  it  iÐ  i­  i  i  iP  ée   iË  iÑ  iÐ  iÛ  iÒ  io  iÑ  iÓ  i^  i  i}  iÔ  iÕ  iÖ  iz  iA  i&	  i×  iØ  i  iä  iÙ  iÚ  in  i-  iô  iä
  iQ  i  ii  i
  iè  i  iÛ  iR  iÛ  iu  iÆ	  iÜ  i¬  i   iB  iÝ  iØ  iå  iy  i  iÒ  iv  iw  iB  ih  iq  iÇ  i  i  i<  i  i*  ii  iS  i"  iT  iC  i>  i)  i  ix  iU  i  iÞ  i§  i~  iß  i¤  iÜ  éz   ià  iV  i³  i¥  iá  iÏ  iC
  i)  iq  i  iÝ  iW  i	  iÓ  iâ  iã  iD  iä  iE  éT   iF  ép   iÝ  iå  i#  i#  iy  i½  iæ  iû  iæ  iG  iç  iz  i®  i  iÉ  iý  i	  iá  i  i  iS  iî  iX  i  i  iè  iÕ  ié  iu	  i  i=  iH  i¨  i  i_  iÿ  iR  i  i  i¨  i¿  iÏ  iw  iê  ië  iY  iz  i{  iq  iì  i  i3  ií  i5  iî  i  iá  i{  iÿ  iµ  i|  i}  iS  i~  iô  i
  i  i  iZ  i[  iï  i  i  iü  i¥  i`  iì  iF  i  i]  i  i  in  iÜ  ið  iI  iÖ  i
  i  ië  iñ  i¼  iò  i  iG  iT  iJ  ió  iK  iz  iS  ir  i\  i)
  i  i  iv	  é   i5  éË   é   i  iå
  ib	  i  iú  ij  i  i  iô  iÐ  iæ
  iõ  iö  i]  i^  i÷  i  iø  ic  iÑ  iÅ  iù  i  i
  iì  iç  ia  i:  i1  iÔ  i  i©  iÒ  éA   ih  i  ia  iÇ
  i6  iÓ  iú  iû  é   ib
  é-   iÐ  i
  iH  i_  i  ià	  iõ  i  i  iü  iÔ  i  iý  iÕ  iþ  i|  iÿ  i*
  if  iÎ  i	  iÖ  i  i¤
  iD
  i   i
  iL  iW  iõ  i  i  iU  i  i
  i  i÷  i$  ié  i  i  iÕ  iN  i  i  iR	  ik  i¿  iE
  iÌ  iê  i  i  iM  iß  iS	  i'	  i  i`  i×  is  i  iF
  i  i  ia  i}  iÖ  iÈ
  i(	  ij  i  i	  i~  iV  iB  é[   ib  iW  iâ  iØ  ib  i
  iI  i  ic
  i  i  i²  i{  iÙ  i  iá	  ií  iÇ	  ic  i  iÈ	  i  id  i  i
  i]  i×  iÃ  i  i=	  ie  i  ií  i  i  i  i
  iÀ  éí   i
  iN  i	  i  iÚ  if  ig  i
  iè  i  i½  ih  i  i  i  i  iÉ
  é=   i  iX  i  i  i  i¯  iý  i§  i  i  id
  i¿  iH  iC  i¥
  ii  i  iT  iW  i
  i  i  i9  iõ  i¬	  iN  i×  iK  iE  ij  i4  iJ  i  iY  i  i±  iG
  i	  ik  i  i  ih  iO  i  i  i
  i  i]  iP  iZ  i  il  iÛ  iQ  i[  ik  i  im  in  iR  io  ic	  iþ  i  i  i  éû   iS  iX  i  i  i  i\  i+  iñ  iÜ  i§  iÜ  iI  iT  iU  iU  éÍ   i  i
  iè  il  ié  iD  i  i  i  ip  i  iq  i
  ék   i­	  im  i  i  iK  i  iý  i  i  é   iñ  iV  i8  iê  i   i   ir  i@  iW  ir  ië  iC  iG  i¸  é¢   iÀ  i  i  i^  i  iÈ  iã  é8   it  i  i:  iØ  i  i!  i  in  is  i¶  i"  iì  i#  i$  i]  it  i®	  i%  iç
  i&  ir  iu  i'  i+
  i(  i)  i  ie
  i  i}  i  i  iÝ  i  i*  i4  é1   i+  i·  i  iÙ  iÚ  iÂ  i  i  i,  i  iè
  i>	  iX  it  ir  i?	  iÞ  i  i-  i  iv  iu  i{  iî  iw	  iw  iß  i.  ix  iT	  i,
  i  i  i  i/  i0  ià  iÛ  iÄ  i1  ií  i¨  i2  iî  iG  iR  i  i·  i^  i°  iY  i  iZ  iä  i  i[  i3  i^  i¦  i  i²  iÜ  iô  i
  i)	  i\  i¯	  i4  i@  iv  iº  i5  i  i6  i7  i  id	  i]  iï  iá  i^  i8  iþ  i&  iÉ	  i  é   i  i9  iy  iu  é   i  i
  iâ  iz  iR  iµ  i{  i  i  iÄ  i(  i_  iØ  i<  i9  i  il  i  iÕ  iÚ  i_  i   iS  i`  ik  iÝ  i[  i	  i²  i·  i  ix  i:  i  i;  i<  i!  i$  i=  iý  i|  i  iÿ  i>  id  ið  i  i?  ie  i  i  iã  iä  i  i  i¸  iå  i  iñ  i}  i@  iA  iB  iÅ  i.  i~  ia  iO  i  iå  iÜ  i`  ib  i  i  i%  i  i¨  iÖ  i¦
  i;  ié
  i  i  i  iC  i  iD  iæ  i  i  iÖ  if
  i"  iL  i  i  i  i  iê
  iE  i;  i  iF  i&  iG  iò  i
  ió  ix	  iH  i)  iØ  i  ic  i§  iI  id  iT  i  ië
  i  ie  iÉ  iï  iç  i   i	  i©  iJ  i  ig  i~  é   iU  i  ie	  i	  i  i  i  if  ia  i8  ig  ió  i°	  ib  ih  iK  iy	  iÞ  i  i  iL  i  i:  i  iê  i  i  éÂ   i*  iM  ii  i®  iÞ  ic  it  iá  iM  iN  iã  i  i¹  i  i	  i  i
  iû  i  if	  i  i  iY  id  ie  i  é*   i  iÐ  iO  iH
  i  i#  ià  i#  i;  i  iâ	  iÃ  i  iæ  iI
  i\  i@	  i  i  iß  is  i$  iô  iP  iQ  iõ  i±	  i  iR  ij  iS  iT  iß  i+  iÌ  iU  i  iV  iº  iÂ  iL  iö  i!  i  iJ
  i\  é4   iW  iç  i  iX  iY  iZ  i»  i[  i>  iw  ik  if  iÀ  iÆ  i+  i  i   i%  iÑ  i  i$  iþ  i\  i  iÁ  i  il  i÷  i]  i  il  i^  i_  ig
  i%  iþ  i`  ia  ig  i  i  iá  i  iç  iN  iK
  ib  ic  id  i  i  ic  iw  iì
  ie  ià  ib  iy  i  if  ih  ig  ih  ih  iù  i'  ii  i  im  ié  iz	  ij  id  ii  iá  i  i	  i<  iî  i  i|  é   i¼  iÇ  i   i  i  iÿ  i  iO  ik  iÊ
  il  i  i¦  i§
  ia  i  i  im  iÝ  i  i  in  i¨
  i¯  iu  iè  in  i  i  iÇ  ie  i&  iø  io  iè  iý  i  i	  i<  ié  ip  iq  iP  iQ  i  ij  iã	  i  i 	  i  iò  i(  i©  i_  ir  is  i  i  i  i  i<  iE  iR  if  iÅ  ià  é¯   iÞ  i]  i  i  iI  it  i=  iú  iu  iª  iv  i  i  iï  io  i  iù  ik  i,  il  iw  i'  i©  i²	  im  i²  i  i  iF  i`  i  iâ  if  ié  i  i  iS  iJ  ix  i  iy  iz  in  i«  iL
  éß   ip  iO  iï  i  é·   i  i{  ií
  i»  i£  iA	  iy  iÀ  iê  iU	  éñ   i|  i}  i~  iF  i¼  iq  ià  iË
  i	  ië  i  i  i  i  i  iÂ  i  i  ip  i  iì  iB	  i¦  io  i	  i  i  i  ip  i  i-
  iä  ir  i  i  iq  iq  iá  i(  iÛ  ir  i   i  i¡  is  i  iâ  iã  i  i  i  iÌ
  i(  i.
  is  i)  i¢  it  i  iä	  i  i*  ií  iu  i»  i  iT  iv  iM
  i{	  i  i  it  i  i'  iâ  i   i  iú  iì  i  i  i  i  ið  iå  ig  iZ  iw  i©
  i	  ic  i   ij  i+  ip  i  i  i£  ix  iê  iÈ  i  ih  i  i  i  i
  i³  i  i  iê  i,  i=  i  i  iÊ	  i  iu  iÁ  i£  i  iÞ  i/
  iy  i  i
  iË	  iy  iv  i³	  iã  i  iw  i  i  i  i  ië  i½  iþ  iû  iz  i  i  i  iÍ  i>  iî  iC  i'  iÿ  iÁ  iï  i{  i  iZ  i¡  i  i  i  i  i  ië  iÄ  ia  i  iä  i	  i¤  iq  i?  i±  i
  i  i|  i  i´	  i"  i  iî
  ið  i  i}  iÎ  i  i  iñ  i=  i  iA  i  i1  i  i)  i  i  i  i?  iª
  i  i¼  i  i½  ix  i	  i  i	  i  i	  iü  i  i¥  ih  i  iS  i  iñ  i  i(  i  i  i  i   i'  ix  iy  i»  iý  iÿ  i  i  iï
  i¡  i¢  i£  iò  i_  i	  ió  iú  i>  i  i}  iP  i¤  iÍ  iì  i¥  i  i  i~  iª  i  iN
  i  ic  i  i
  i¦  i§  i  iH  i  i	  ii  i  i¨  i©  iô  iõ  iª  i  i«  i«  i¬  i­  i®  ij  i¦  i§  iµ	  i*	  i  i¨  i©  iþ  iä  i  i  i  ih
  i¬  iª  i_  i¯  i°  é/   i  i<  i±  i~  i7  ik  iT  i²  i  i]  i  iU  ib  i«
  it  i°  i  ig	  iü  iz  iÖ  iÿ  iä  i|	  i   iÙ  i³  i  i  i­  i«  i  i{  i´  iµ  i	  i  i0
  i  ið
  i  i+	  i  i,	  iö  i  i¬  éI   i¶  i·  i  i¸  i  i  iÏ  i  iB  i¾  i¹  i4  is  i  iº  i»  i¼  i½  iå  iÍ
  i¾  i¼  i?  iC  i  i   i	  iö  iG  ií  iÐ  i÷  i¡  i¢  iø  i¿  i  iÀ  iÁ  i£  iÂ  iÃ  i  i¤  i|  i1
  i¥  i  im  iC	  iÄ  iÅ  il  i  i   ii
  i}	  iÆ  i?  iÇ  iÈ  i  i  iÉ  i  ih	  iÊ  iÐ  iI  iË  iÌ  i¦  iV  i  iÍ  i­  iÎ  i  i¨  iÏ  i^  i  iÐ  iÑ  i¿  i-	  i.	  iù  i  i)  i®  i®  i
  i  i§  i±  i2
  i³  ii  i  iÒ  iÎ
  iÓ  i  i  iA  i¾  iÀ  iô  i-  iÔ  iÕ  i°  i  iî  i  iÖ  i
  i¯  iÌ	  i²  i´  i  i×  iü  i¬
  i¯  i  i¨  iØ  i­
  iÙ  iÏ  iQ  iï  i  iO
  i°  i  i©  iò  i  i  i  iz  iK  iÃ  ið  é¦   i[  iñ  iJ  iÚ  iÐ  i@  i³  i.  iª  i  i  i¬  iD	  i  i}  i/  i@  i  i  iÛ  i«  iÏ
  i  i@  i  iR  iÜ  i¬  iå	  ij
  i~  i±  iÝ  iJ  iú  iÞ  iñ
  iï  iö  i²  éÕ   i
  i0  i  im  i  iß  i  im  i~	  ià  i	  iæ  i  i1  iá  i  iæ	  i  i­  i  i  i  i  id  iâ  iÔ  iå  iX  i  iã  i9  iÑ  i®  i  iÄ  iä  iU  i¯  iå  i  i  iæ  iL  i  i3
  iç  i  iè  i®
  i	  iò  ié  iÌ  i	  ió  é®   iç  i
  i³  i  i$  i(  iv  iØ  i´  i&  iê  ib  i­  iô  iµ  ië  iõ  iö  i  i  i  ië  iì  i{  i  i°  ií  iî  iï  i  ið  iñ  i±  iò  i2  i²  i	  iÃ  ió  i  iç	  i  i  i¯
  i  i¶  iô  iä  i³  iõ  i  i^  iö  iæ  iV	  i¶	  i÷  i  i·  iÅ  i  i¸  iè  i´  iÊ  i  i¹  i  i  i2  iW	  iû  i
  iW  io  ii	  i  ik
  iX  i  iø  i·	  iA  i4
  i¸  i
  i  i3  iµ  iù  iè	  i  iú  i  i  iÐ
  iû  iß  i°
  iü  i  iù  i  iü  iý  iç  i	  éÉ   iH  i  i  iþ  iº  iÿ  i   i  i  i  i  iD  i  i  iI  is  i
  i¶  i·  i  ià  i   i¸  i¬  iÀ  i  iw  i  i{  i   i  i¹  i  i´  i»  i/	  in  i,  i  i  i  iÐ  i	  ié	  i¹  iº  i
  i»  i  i  i  i  i  i4  iB  i   i  i¡  iP
  i5  iò
  i¡  i
  i	  iÅ  i  i¼  i	  i¢  i  i|  iö  iz  i  i  i´  i¼  i
  i'  i½  i5
  i  i  i  i!  i´  i   éy   iÑ  iý  iV  i  i£  i÷  iÍ	  iÁ  i½  i  i  ië  iþ  iÐ  i¾  iÂ  i  i	  i  i  i  i-  i  i¤  iÿ  i½  i  ió
  i  i±
  iê	  i¡  ió  i  i  iÑ
  i¥  i"  i%  i  i  i  iJ  iC  i  iá  éx   i¦  i§  i  i  i¢  i	  i   il
  i6  i¢  i¾  i  i  i   i  i
  iò  i  iX  i¿  i  i  i7  i  ië	  i²
  iN  i  im
  i  i  iÏ  i   iW  i  i  i!  i¸	  i  i  iô
  i>  i8  i  i"  i#  i9  ij	  iD  iè  i£  i  i$  i	
  i%  i  iõ
  i¿  i´  iX  i&  i  i'  iE  i  i(  iF  i  i)  i¨  ix  iÎ	  ik  i  i¡  i  ió  i*  i+  iÀ  iÂ  i×  iD  iÁ  i©  i,  i  i¨  i  i¦  iÀ  i  iK  i-  i.  i/  i:  iÁ  i0  iJ  iª  i  i1  i|  iø  iÁ  i  ié  i«  i¬  iê  iE  i*  i2  i³
  i  i  i­  i  iÂ  iH  ix  i  iÃ  i  i3  i®  iÃ  i©  i¯  i3  i  iÄ  iÅ  i;  ip  iÂ  i<  i  iæ  i  iù  iô  i4  i5  i	  i	  i6  i  iO  éá   i
  i7  i8  iÃ  i9  iÄ  i:  i¤  iÛ  i;  iÆ  iÃ  iÆ  iÅ  i<  i
  i  iY  i=  i>  i
  i	  i?  iÆ  i@  iA  iB  i¡  ië  i½  i=  iì	  ið  i  io  i	  if  iâ  i  iÒ  iÒ
  iÓ
  i	  i	  iC  i  iD  i  i#  i  i¢  i>  i  iE  i  iú  iF  iZ  iE	  i°  i  ií	  i[  i$  i´
  iÇ  iG  i?  i  iî	  iô  iÑ  iG  iñ  iÈ  iµ  i@  iH  iå  iA  i\  iL  i÷  i  iÊ  iÇ  i£  iI  i	  i  i  i±  i  i  ii  iJ  i 	  iì  i¤  i	  iK  iL  i]  iM  iN  i  iÃ  ij  i«  iQ
  i¥  iB  iO  iP  iÜ  i  iQ  iö
  i²  iÈ  iR  i¦  iS  iT  iç  i(  iÙ  i  i³  iC  iÌ  iU  i  iV  iû  iW  iX  iÉ  iÊ  iY  i  iÉ  iÊ  iZ  é   iË  id  i[  ic  iH  i´  i_  i  i#  i0	  i\  i  i]  iµ  in  i

  iÏ	  iÌ  iÍ  i  i^  i  i¶  i_  ik	  iD  ið  i`  ia  i©  i  ib  iê  iÄ  i¡	  ic  i·  i  iº  iÎ  id  i¸  i  iï	  iÏ  i  i  id  i^  iE  ie  i  i  iË  i
  i  iµ  i¹  if  iº  i_  i7  i  i  iÔ  i   i§  iÌ  iF  i  i  ig  i-  iÐ  i  i!  i  iÑ  ih  i	  iq  i;  i¥  i»  iÍ  i¼  iX  i  i   i	  iÆ  i  ii  ij  iµ  iÒ  iÎ  i
  ik  il  iÓ  iÙ  i~  im  iG  i`  in  iy  ip  i  iÄ  io  i>  i¶  ip  iÏ  iq  i
  iª  i©  ir  iÔ  ia  iÝ  i  i½  is  it  i"  iu  i|  iÕ  i?  i  iø  i  iv  i¾  i¡  iä  iÖ  iÐ  ie  i  iõ  iw  ix  iy  i¿  iÀ  i¢  iß  iz  i{  i@  i|  iÑ  i¹	  i}  i  iº	  i  iÞ  i%  is  i  iR
  iÁ  i.  iÂ  iM  i?  i¨  i×  i~  i  iÃ  ib  i  iØ  i@  iÉ  iÅ  iú  i  iò  iÄ  ií  i  iÙ  iÚ  iÒ  i  iÑ  i  i©  i  i6
  iI  iÓ  i  i  i  i  i  i  i  ic  iÛ  iÜ  i  iº  i  i¦  i§  i2  i  i³  iá  im  i·  i@  i  i  iª  i»	  iÝ  i  iN  i  i¨  i±  if  i  i  i  iZ  iµ
  i  i  i  i  i  iÆ  i\  iH  i  id  iÞ  iÔ  iJ  iß  iÐ	  i  ið	  iÔ
  i  i  i  iî  ià  iK  i  iá  i  i#  iâ  iã  iÅ  i  iÕ  iÑ	  i  i  i  iK  iÅ  i  i  i  ig  i   i¡  iä  ih  iÖ  i>  i¢  i.  i×  iÅ  i£  i¤  iå  i¥  iª  i  i)  in
  ét   i¦  i  i  i§  iª  io
  iÕ
  iI  iï  i÷
  i¨  i  iq  iØ  iÓ  ir  i  i©  iª  éÏ   i«  i¬  ip
  iå  iÒ	  i­  iÇ  iz  i  i  i®  iU  i  iJ  i¯  i  i1	  iK  it  i°  i±  i²  i­  iö  éÐ   i«  iÙ  iã  iJ  iÆ  i  iL  i¼	  i  iÇ  i³  i´  iµ  i¶  C:\code\venv\callllama\lib\site-packages\chardet\euctwfreq.pychardet.euctwfreqEUCTWProber.__init__TaiwanEUC-TWEUCTWProber.language<module chardet.euctwprober>C:\code\venv\callllama\lib\site-packages\chardet\euctwprober.pyEUCTWProber.charset_namechardet.gb2312freqÍÌÌÌÌÌì?¨°  i  ií  i£  i<	  iT  iß  i	  iQ  i¨  i  i
  iç  ië  i<  iw  i  i9	  éà   iþ	  iß  i¯  iÃ  iZ  i¸  iÜ  iq  i  i  iü  iW
  iy  i  i  ie  io  iÊ  iv
  iú  i  i  iÇ  iÐ  i  i  iL  iB  i  iQ  éù   iø  iÒ  iQ  iÿ  iî  iE  i  if  i  i  iö  i  iì  iÅ  i  id  i(  iy  i  i¹  i,  i	  iô  i
  iE  ie  é¹   i  iW  iR  iì  i³  i|	  iR
  iÿ  i¬
  iá  i
  iX
  iî  ij  iE  i  i  i+  iP  i  é   i  i  iâ  i  é;   iÐ  im  iÛ  il  iá  iÍ  i  i  é   i  ie  iH  i¯  i  iÈ  i  i^  ik  i6  iÝ  i"  éF   iÕ  i©
  iÎ  i÷  i^	  iâ  i  i¨  iÙ  éÙ   i?  i`  iu  i$  i1  iÕ
  iò  iÅ  i   iU  ië  i1  iÜ  i  ig  il  iÛ  i  i		  i  iG  iÜ  i2  iË  iq	  iõ  i   iP  i¸  iL	  iØ  ië  i¶  i  iy	  i  é·   iÇ
  iÈ  iM  iÉ  ik  i  i4	  i¤  i  i¼  ià  i  i  i	  i@	  i`  i±  i5  éÄ   iÊ  iN  i  i7  i3  i´  in  i  iu  iG  i&  ib  ih  i0  i  iM  iN  i  iæ	  i
  iY	  iÈ
  iá  i¾	  é   i¿  éõ   i»
  é&   iÍ
  iQ  i
  i7  i^  ih  i×  i«  iJ  i  iP  i»  iù  iÔ  ir  i­  iÿ  i¢  i  iê  iç  iT	  i-  iG  i,  iu  i  iè	  iï  i$  i  i  i<  iB  i  i$  i>  i  iØ  ix  iL  iW  i  iè  in  i  iç  iT  iæ  iZ  i  iï  iÑ	  i{  i  iû  i¹	  i¯  é   i  i
  i?  i
  é0   ib  i;  éD   iÙ  i  éÆ   i¿  iC  iS  i  iU  i>	  i|  ig  ië  i  i·	  iæ
  iK  éì   i

  i  iÒ  i  i%  i5  i¥  i¾  i  iô  il  iµ  ih  i
  i  iÔ  i?  éý   i  é    iU  i  éÅ   i²  i	  i±  i*  i<  i  i¼
  iô  i
  éú   i
  iã  ií  iÉ  i  iÉ
  i!	  iX  i©  i  i	  i¾  iQ  ig  i  iâ  iÂ  i¿	  iñ  ir  i½
  i¬  iÐ  iq  i  i
  iß  iz  iÃ  i	  i3  é   iÖ  iÚ  i¹  i  i
  i]  ic  iz  i  i  i7  iÄ  i_  i  i  iC  i¦  i&  ia  iH  i|
  il  i
  i  i=  i·  i  iI  iP  iÝ
  i×  i~
  i8  i`  iö  iw	  i  iÐ
  iT  i  i¸  iÇ  i  i  ië  iÀ  i  i  i  i  éá   i[  iq  é¢   i  iÏ	  ig  i¢  é|   iC  i	  i  iØ  iN  iI  iÅ  i  i5  i
  i(  ið  i/  iH  iK
  i
  i¡  é   i  iú  i9  iÁ  iI  i  iú  i|  ió  é¾   iÝ  iØ  i  é   iW  i  i£  i¿  i  i^  é~   i  i  i  iÃ	  i  i=  iX  i  i3  iõ
  iI  iô  i  i
  éü   iÀ  i¨  iÖ  i3  ir  é   iÐ  éÞ   io  i  iÉ  ið  i{  i  ii  iC  éÒ   é!   iH  iÔ	  éÈ   ið  i  éf   é    i=  i  i1  é[   iã  i|  iD  i  i%  i  it  i  i«  iþ  iù  i   i°  i.  i¯  é   i  éy   i  iT  iµ  i°  i9
  iÔ  i  i#  é±   i´  iJ  ió  én   iÅ  i  i  i  iÛ  i>  iB  i"  ií  i  ia  iì  ié  iM  iK  éÐ   i  iW  i°  iã	  iõ	  i!  ir	  iF  i+	  ið
  i
  i  iô  ix
  éH   iJ  iÆ  éÔ   iÑ  i  i2  éK   ië  iR  i$  i  i9  i
  it
  iØ  iú
  iò  iÒ  i  é   ió  i  i¶  iÆ  i  i  i  i%  i~  iÙ
  i`	  é   iâ  iÑ  i¶  i'  iv  i  i  ií  i¹  i|  i  é'   i  i  in
  i*  i  i°  iç  iF  i¶  i%  i  é)   i~  i£  i
  i³  i  iJ  i&  iå  i  i!  iD  iÒ  iw  i  i[  i  i  i	  iâ  i	  i'	  iÁ	  iç  ék   i  i÷  i	  i  ið  éÂ   iÆ  é   iÁ  i  iÙ  i¨  ih
  éB   i_  i¼  i?  i  ig  ih  iÝ  i'  i  i  i¸  i  iþ  i  i´  iì  i  i  i®  i  é5   i]  iý  i  iç  iþ  i  iû  éï   i  iÌ  i1	  i¡  i)  ia	  i  iÊ  ià  iø  i;	  i  iÙ  i_  ià  i  éQ   i/  iu
  iÅ
  i«
  ij  i[  iô  i}  i  i
  iõ  iî  i×	  i  i  i¯  iQ  i^
  i  iG  i  iz  iÑ  iä  i  iV  iO  iÊ  i  iö  i  iÄ  i  im  iu  iù	  i6  iÜ  ié  i-  i$  iþ  i°  iR  iÌ  i}	  i  ip  ir  i]  i¾
  iD  i  i  i  iæ  i  ii  i  i  i·  i  i  i1  in  iÔ  ié  i  it  iY  iG	  iþ  i÷  i/  i|  ét   i0  i
  i  iÄ  i  i¼  i\  iÑ
  iÃ  iï  iv  iÍ  iú  i°  ic  i¤  i  i¾  i
  i~  iA  i"  i²  i"	  i!  i8  éC   i8	  i  iÆ	  ij  i  i1  i   il  i>  iÞ
  i  i]
  i  i¶  i~  éÀ   iL  i(  i  iË  iK  id  é   év   iD  i¾  i×  iÉ  i%  iØ	  iæ  iÓ  iç	  i,  é   i2  iÓ  i
  i  i  ij  é-   i.  iï  im  iK  i  i¾  éó   io  i	  i;  i	  iø  iÙ  id  i@  ia  i	  iM	  i1  iL  i@  i2  i±  iw  i§  it  iQ  i
  i/  i¹  i   iÐ  i~  i»  i  iø  i©  i
  i/  iÎ  iô  i_	  i#  iÑ  éO   iù  iO  iG  é   iö  ik  i[  iO  io  iº  é×   i-
  i
  é­   i   iµ	  i!  i  iõ  iI  iÍ  iÙ  i§  i{  ir  i  i.  ih  i  i  iT
  i  i  é   i'  iL
  éa   i²  iø  i@  é   i¡  iÉ  iø  ií  iÁ  iT  i/
  iµ  i   iÅ  iì  i  i  iM  ië  ii
  il  iÝ  i  iè  i{  i8  i#  i¾  i  iÜ  i9  i¢  iS  iR  i	  éw   i  iZ  iõ  i0
  iE  ig  ig  i¶  iø  é
   iÑ  éL   iÐ  iî  ip  i¼  iÅ  iS  i  i  iù  iÔ  iä  i³	  i@  i»  iI	  iL  i;
  iO  iq  iâ  i¼  i)	  i  i:  iF  i  i5  iJ  id  iA
  iÇ  i
  i)  iE  iL  éY   i©  i¢  i  iì  im	  i  iì  iæ  iË  iÛ  iÇ  ic  i¬  iR  i¬  i!  i  i°  i½  iû
  éÎ   i(  iÀ  iÚ  i]  éI   i  iò
  ió	  iæ  ie  i  i  i  i  é   iÂ  iÌ  i`  iô  i  iÚ  i  i  i²  i[  i¿  iC
  i(  iP  i,  i   i}  iO	  i'  iL  i\
  iù  iø  i  i§  i  i  iZ  iÞ  i  is  i'  i	  iU  i¢  iØ  iÁ  iÆ  iN
  é   i±  i  iÃ
  i·  i«  iM  iÑ  iå  i£  iº  iï  i  éÖ   iÍ  ii  iå  ig  i'  i±  iÙ  i	  iî  i
  é¥   éP   i0  is	  ii  iø  ip	  i¯	  in  i  i  iò  i  i\  i
  iª  i  i®
  i!  ih  éø   éÊ   im  i(  i&  i
  iC  i  iB  i)  i5	  i  i  é   i  i°  iù  i
  ió  iÚ  é>   iý  ií  é²   é°   i  i	  éÉ   i{  iN  iÞ  i  i  iE  i3  é   éJ   i#  i¤  ic  i¡  i¹
  i  i$
  éî   i5  i  ix  i  i]  ió  iÎ  ik  éñ   ií  iÔ  iÕ  i¨  iP
  i  i
  i  i  ir  iÊ  iL  i±  iz  id  i  i  i#  iý  i  iÈ  i[  iS  i  ih  i  iG  iÿ  i¸  i  iª  i   iU  é+   iÛ	  iy  é£   iw  i"  i¹  iV  i2  i&  iz  iÌ	  iÎ	  i·  iJ
  iP	  iÐ	  iÄ  i  éÜ   i½  i%	  iZ  i$  io  iT  iK  i1  i®  i»  i`  iV  i  i  i   id  éº   i¶  i³  i»  i+  i³  i×  iA  i  iî  i  iñ  i  i$  i´  i	  i_  i3  i\  i  iê  éã   éç   i  ib  i  if  é÷   i¿  iÕ  i  iµ
  iA  in  i  i¡  éx   é®   iF  iý
  iO  i[  i¡  iè  é(   i¨  i   i  i#  i7  i2	  ix  i  if	  iÄ	  iÏ  i!  i6  i{  éÍ   i  iY  i  é   i  i+  i­  i   iÁ  i©  i   iä  i  iÔ  iø	  i	  iK  ie  ió  i¨  i  iT  i$  i·  i  i  ih  i  i	  iR  i  i¥  i"  i¥  i  éZ   i   i_  i  i@  iÆ  ia  i  iî  i  i3  i°
  ik  i)  ij  i§  i  i  ie  i  i  iA  i^  iÄ  i
  iW	  ië  iý  ih  i:
  iz
  i)
  i  i|  iª  iÂ  i  i  i  i8  ij  éÛ   iß
  i  iü  i3  i	  i  iz  ið  ip  iy  i§  i×  i2  io  iD	  i=  iì  é.   i  i9  ia  if  i  i*  i_  i  i	  i*  i  i  iã  i¯
  iº  i  i-  i  i·  i}  i©  i
  iÙ  iÇ  i*	  i  it  é   it  i6  éq   iÊ  iÂ  i  iî  iâ  iÕ  i  iS  i 	  i  i  i!  i)  i  iy  i  éÌ   i  i   ij	  i¤  i§	  iÃ  iV  iI  i  i  ig
  i  i  iL  iÞ  i´  i  ip  iD  iµ  i  iº  i  i%  i£  i¡  iM  i  i¯  i  i$  iÞ  iÓ  i¶  iE	  i"  iU	  iÁ  ie
  i	  i|  iÜ	  iQ  i  i¥  iÀ  iû  i  i¶  i
  i1
  iÀ  iÝ  iÆ  i¦  é$   i   i]  i4  i&  iý  i°  iz  iµ  iä  i`  ió  iw  i 
  i  i  i  iË
  i)  i%
  i&  i£  iÐ  i®  i*  i¨  i  i8  i2  i>  iS  i  iÌ  i¾  i1  i#  i«  i÷  i
  iÏ  i#  i	  i¿
  i¼  iØ  i  iÒ  iF  i  i  i,	  i>  i+  i  i  i²  iZ  é3   iq  éª   iÕ  i$  i  i
  iV  ií	  i;  i  i   iN  iË  ém   iK  iW  i   i¾  é   i5  iª
  iº	  éR   i4  iÜ  iI  i  iD  iÝ  iÃ  iÖ  iü
  iÌ  i
  ið  iú  i  i  i%  iK  i|  i  i  i§  i  éµ   iê  é   i9  i  in	  i¦  iñ  ië
  i-  i3  i2
  ip  i  é   i?  i½  i~  i¤  i­  iÀ  iò  iÌ  iC  i«  i[  i¯  i­
  iß  iî  i»  i3	  i>  iä  il  i  i`  ix	  ié  iÒ  i´  iù  i#  i  iý  iª  i0  éâ   iý  i  iÞ	  iL  i¬  iþ  iQ  iÛ  iR  i  i?  i(  im  i  i`
  iË  i3  i  iÿ  i  i&
  i³
  i  i  is  iD  i«  i0	  ib	  if  i@  i«	  i¹  iï  i¨  i  i=  i¼  i
  i<  éÕ   iï  i«  ií  iÊ  i6  i  iÞ  is  iì  iý  iê  iS  iÌ  i§  iÒ
  i8  iZ
  iÈ  i¦  i´  i¬  iú  iè  iù  i  i¶
  iÅ  ià
  iã  i  i¸  iN  iÂ	  i  i
  iL  i
  iJ	  i  iÔ  i©	  ib  i  ig  i  iì  i[
  i¸  i  i  i  i  i~  i±  i	  i	  iã  i  if  iõ  i  i  i  i±
  i  i`  i4  i=	  i  i  iÙ  il  i?	  i  ic  i½  i  i  i  ii  i÷  iª  i  iÈ  i¥  i°  i  i  iw  i  i  i  i%  i  iª  id	  i^  i+  iñ  iÑ  i¾  iZ  é«   iF  iI  i¾  it  é¨   iå	  é/   iË	  i  i  iy  i*  is  i&  i+  i  iÐ  i)  i  i±  iá	  i­  iø  i  i
  i¬  ie	  ié  iï  iQ  i]	  i  i	  i_  i7	  i  i0  éc   iu  ié  iü  iL  ik  i  iº  iÝ  i  i   é#   i  i  i  i  iè  é    iÇ  i?  iÝ  é¦   i  i  in  i  iÄ  iê  i  i	  ið  i  iÉ	  iH  i¤  iY  i  iu	  i  iè
  i	  iö  iJ  i×  i_  i_  i&  iª  iô  i  iÝ  iÀ  iª  iZ  i%  é   i	  is  iñ  iS  i  i  i  iV  i÷  iè  ié  i¼  iÞ  i1  i'  éß   i«  iF  i\  i
  i|  i±	  iW  ií  iÖ  i|  é   iS  éW   iÇ	  i*  i	  iR  il  iP  i#  iµ  i  i-  iq  i²  iÚ  é	   i¸  i  i4  i  i¶  iÂ  i®  iþ  ia  i·  iú  i  i  i@  iÊ  iX  ii  i%  iÅ  iÁ  i8  i3  i,  iù  i}  i²  iÆ  iå  éd   ix  iô	  iÎ  i#	  i  i6  iÜ
  iÜ  i.  i  i  iA  iÊ  iÍ  ir  iÚ
  i  iR  id  iî  i  i+  iû  iÎ  iÈ  i  i{  i{  iH  iÿ	  i  iÝ  iæ  iÁ  i  iÍ  ic  i	  i  i¦  iß  i¥  i,  i  iI
  iÕ  ic  i  iÿ  i  i¥  i  i=  i¾  iJ  i.  i,  i>  i  i  i©  iL  ie  i]  i  i
  iC  iö  iû  iÈ  i*  i;  i  i¯  i   i°  ip  i
  iê  i¿  iR  iÉ  i9  i¡  i
  i  iÿ
  iÍ  i½  i?  i:  iö	  iË  iñ  iQ  i'  is  iá  iw  i[  iÆ  iº  i-  i  i)  i  iê  éM   ií  iá  iø  i¹  i]  é}   i6  i@  i  i  iU  i®  i¾  i  i/  i¼  i¢  is  i¬	  i  i  ik	  i?  iñ  i,  i=
  i1  iM  i  i  i  i/  iS
  id  éÃ   iÅ  io
  i6	  ik  iu  i  iõ  i  iW  é{   i  ix  iW  iÌ  iÍ  i  ië  i  ix  i^  iÚ  é   i[	  i+  é7   i:  iÜ  iU  i  i£  i!  i  i¨  iÖ
  i.  iH  iT  iÃ  iY  i«  iá  i	  i   i@  i"  iC  is  i	  ié	  i  iG  éb   i  i7  i~  i.
  iU  i   iq  i¡	  ià  i½  i  i{  iÆ  iú  é´   iY  i/  i  iì  i¢  iA  i
  iÓ  i*  i:  i8  i'  iÅ  i  iø  iÎ  i  iA  i_  i0  ií  i  iÃ  i  ii  i  iK  ió
  i  i  it  i*  i«  i¤  iÔ
  i  ié  iÆ  iµ  i¶	  iä  éæ   i  iD  i  iÇ  i   i>  i¶  iò  iv  i  i
  iä
  i'  iù  éV   i¶  iÆ  iå
  iË  i   ik  i  i  i\  i  é³   i·  i  i!  i  ià  é*   iU  i½  ið  i  i  i  iz  i  i\  if  i¨  i  iÒ	  i
  iÄ  éí   i  iÊ  iÜ  i³  i²  iÚ  iî  i  iB	  i  i  i®  iö  i  i{  é   i=  i
  éÏ   i&  iþ
  iî  iV  iÍ	  i¬  é"   i!  iÌ  i÷	  i  iÅ  iñ
  i(	  i=  i¿  iõ  iå  iå  i9  i  iÛ  i4  ia  éÇ   i×  i-  iQ	  é   i  i«  iØ
  im  iå  i  i  ið  iC  i²  iª  i7  i}  iq  iD  i4  ií  éu   i  iÙ	  iÌ  iÒ  iv  i  i¾  iF	  iè  iu  ia
  i  iH  io  iÊ
  i
	  il  iK  iA	  iþ  i×  iß	  iz  i4  i»	  i!
  iH
  i  i	  éê   i5  i  ij  iÖ  i`  i  i  iB  i:  iO  ia  iÌ  i#  iÂ  é   i¥  id  é   i­  i(  i  i&  iµ  i^  im  ig  iE
  i  io	  iã  i(  iG  i$  i@  i
  iI  i  i»  iA  i  i  é`   éX   i  i7  ià  i/  i  i$  iû  iñ  i¥  ih  i  i¦  i  ië	  iU  i"  iT  é   iâ  iþ  iÒ  im  é   iã  i!  i  iÍ  iÐ  i  i¥  i   i  iM  i	  iÜ  é   iæ  i	  é2   iq  iç  i  é9   i§  iá  i  é   i  i  ië  i/  iâ  iõ  éð   i  ép   i@  iX	  i÷  ij  é   ii  i^  ib  ié
  iÍ  in  i  iv  é   iï  iÞ  io  io  éÁ   i  iv  iñ  iË  i0  iÜ  i9  iÏ  i$	  iî  if  iS  iz  i
  i  iD  i{  iâ  iX  éÿ   i  iò  iV  i3  iY  i
  iÚ  iÏ
  iA  iÖ  i  é   i  iú  iq  iU  i
  i:	  i  i2  ij  i­  i  i  i{	  i  i®	  iF  i©  i¢  i	  i  i	  i×  é   iÚ  ic  ii  iR	  i;  ik  éh   ií  i  iÓ
  i  iY  iO  ix  iÿ  éz   iZ  i<  iv	  i  i²  i
  i  iï  iI  i  i±  i4
  iM  iâ  iÖ  iß  i¬  ib  i  i  i¢  i  i  iû  i  iC  iÇ  iÌ
  i  iÆ  iO  i  i8  iÇ  iÏ  iÝ	  i.  i]  i  iV  ic
  iÓ	  i¯  ið  i
  iH	  i¦  iT  iÑ  iÀ  i 	  i  i>
  i  iº  i  i3  i  é   iì  é,   i¢  iÉ  if  i  iû  i  il  iT  iW  iH  i.  i'  i>  ip  iÓ  iÀ  i¡  i"  i  i¸	  iJ  i©  iæ  iñ  iv  i2  i  ió  i	  ix  i	  i2  iÄ  ig  i   i4  i­  iç  i
  i©  iÀ  i  i{
  iz	  i  iÅ	  i¦
  iµ  iÃ  iú	  iÈ  i³  i  i  iÞ  i?  i  iÔ  é¿   i	  iJ  i¬  iÉ  iã  iÀ
  i¨	  i8  é   é¯   iE  ij  é\   iº  i8  i8
  i  i   i  é   i  i`  i  i>  ib  iS  i  iÎ  é¼   i  iÚ  i  i½  i0  iÂ  i  iû  iE  i±  ià  id  i¦  iü  iö  i1  é   iå  i¾  in  é@   iÓ  iö  iË  iT  i  i	  éÝ   iÊ  iQ  éÚ   iC  i¡  i  iK  i;  ik  iÁ  ií  iÐ  ié  iÁ  i_  i\	  ie  i  iw  iè  iÏ  i  i  iM  i¿  i.	  ir  ia  i  iÇ  i«  iì  i  i¥
  i§  i¡  iþ  ig  i¸  iÀ  i'  i¢
  i   i  i  i£	  éT   i  i§  i4  io  iß  i	  iX  iy  i  ix  i  iñ	  iÐ  i
  iU
  é^   i:  i  i  ië  iÿ  i  i"  i#  iÖ  iÛ  i  i  i¤	  iÕ  iÉ  iõ  iN  iU  i  iü  ip  é   i"
  i-  i¿  iª	  é   i  i:  iÌ  i
  i  iÖ	  iÍ  iê  i¨  i	  i  é   iW  i  iG
  iL  i  i  iG  iw  éo   ið  i  i  iM  ir  é   i  i  i¿  iQ
  iã  iI  iN  é%   i  iX  i  i  iÁ  i7  iÝ  ia  iø  i½  i  éû   i	  i'
  ii  ih  i®  i}  iN  iy  i?  it  i  iù  iD  iü  i  i  éö   i  él   iý  i  i  i	  i  éË   ie  iJ  is  i2  i*  iy  iÓ  i  iú  i  iÚ  i  iá  iq  i  iÉ  i5  i}  is  i$  i¬  iò  i  i5
  iB  ié  iÏ  é¸   i#  id  is  i}  iÕ  i~  iå  i  ib
  i  iO
  i/	  é]   i©  i®  iê	  i]  i2  éë   i  if  i7  i  i­  iO  i  iR  i  i#
  i	  i[  i  éE   i½  i  if
  iS  iû	  id  iF  i÷  iÀ  éþ   iC	  iV
  i>  i£  i	  iê  iB  i»  i  i	  i1  i6  im  éå   i  i	  iÂ  é§   iã  iÒ  ip
  iß  i  ié  iû  i<  iz  iº
  i|  iX  é   i½  iû  is  ie  i]  i  iï  é¶   i
  iÂ  i  iO  iç  i+  iÈ	  i  i   iÈ  i¢  iú  i:  i	  iA  iô  i  iÐ  iç  iõ  i(
  i§
  im  i  é4   iP  é   i	  in  i   i  io  io  i®  i  im  i  iy  é   i  i8  i 	  éÑ   i<  iÂ  i  i<  ic	  iC  iÓ  iÉ  i&  iw  i  iî	  i$  i 
  i9  i&  i²  iè  i)  i`  i  i  i  iß  i¯  iG  ib  iE  iö  i:  iQ  io  iF  i¯  iÊ  iÏ  i	  i£
  iF  i|  i;  iø
  i  i  i3  i4  i%  iÎ  é:   i¼	  ic  i  ip  i6
  i\  iC  i¬  i0  i9  i¤  iÃ  i¼  i¸  ià  i~	  i  i  i"  ih  i  iù  iÏ  iì	  i)  i  i¥	  iê  i´  i÷  i*
  i  i  i  i
  i%  i  i	  iè  i  i  i³  i.  iä  i¦  i9  i	  iÈ  i  iÙ  i½  i¿  i	  i  i"  i!  iû  i,
  i·  ig	  iJ  ig  iF
  iú  i  iÕ  iÖ  iñ  i;  ii	  iZ  iE  i^  iA  iú  i  il  i5  iÑ  iï  iä  i4  i'  i´  i  ik  i	  iü  iý	  i2  iä  i¤
  i  i	  iX  i7  é   i  i¨
  i{  iÃ  iB  ix  i=  ée   i(  i  é   iÎ  iÇ  i'  i·  i  é   i  iÅ  i   iÉ  i  i  i  i  iD
  ii  ik  i  iÛ  i³  iÖ  i-  i,  iï
  ie  i7
  iÎ  é   iÞ  ià  é   iÛ  i  in  i}
  ip  i7  ij  i¨  i¢	  i¬  i9  iÕ  iù
  éØ   i  i  éé   i0  iP  iÔ  éè   i  iè  i  iØ  iO  i´
  i  iï	  éò   iU  i
  i  iæ  i<
  iù  i  iÄ
  iJ  iá  it  iN  iÄ  i)  i  i.  iæ  é©   i*  i  iA  éä   ir
  i]  i)  i®  i  iÒ  i©  iG  i  i_  ip  ik
  i§  i  i	  i%  i
  iÝ  iÎ
  iß  i>  ib  i_  i^  é?   i  i:  iY  iD  i%  é¬   iÒ  i»  iÓ  i  iÿ  i  é   iY  i  i
  iä  i×  i  i»  i  il
  éA   i  ið	  iÛ
  iü	  iD  iB  i	  i
  ià  i	  i@
  i(  iv  iÉ  ié  iõ  ég   iâ
  i	  i}  iv  i¦  i  i  iö  iï  i  iï  i  i  i  iÚ  i  i  i  i  iË  i   i-  i~  i¡  iy  i%  i	  iÂ
  é_   iÁ  i´  i  iË  ió  i  éj   iM  i¶  iª  iG  i+  i°	  i  iÁ  éô   iò	  iÚ  iï  i  i3
  i;  i  éG   i)  i  i
  iæ  i®  i  i  i  i  i  i
  i
  i¹  i,  iI  i	  i¼  iÑ  i  iX  iA  i\  iÃ  é   iÄ  iP  iv  iá  i	  iV  i  i=  i
  i¡
  i6  i<  iÈ  iX  i  iÁ
  i	  i  i8  i-	  iY
  i  iÛ  i³  i³  i¸  i  é¤   ic  i  iÜ  i   i9  i²	  i-  iu  ið  i	  i¿  i´  iR  iö
  i  i  i6  i  iâ	  i  ih	  i}  i  i?
  iw  i  iÂ  iä	  ia  i(  i  i  é1   iº  i  iÎ  i>  i  iÓ  i²  iý  i§  i]  iÆ
  iX  ir  iP  i0  i,  i  i+  ij  i  i`  i¦  i÷  iÏ  i  i.  i  i  i 
  iº  i&	  iW  iB
  i­  i  i|  i7  éU   i  ià	  é   iW  i  iY  i  i  iÑ  iw
  i
  i   i  i  i  i  i  i¤  iu  iØ  ib  i  iq
  iÑ  i  ib  ií  i  i  é»   é=   i$  i¢  iN  iJ  i  iç  iU  iá  i  i  iÀ	  i  i£  éi   iK  i,  i·  i  i4  ir  i{  iè  i  iH  i±  ip  i5  i  i£  i=  iÕ	  iÓ  iE  i9  i®  i;  i  é<   i  i5  iê
  i  ii  i®  i\  i  i  é   ip  i  i  iò  i«  ér   i·  éN   iÔ  i  i^  iþ  i  i  i«  iK  i  ié  i*  i  i{  i+
  i½	  i  i*  i8  i  i÷  i  i	  i  i¹  i­  iä  ij
  i  i@  il	  é6   iÏ  i2  i8  iÂ  i	  iÔ  i  iì  i'  i§  iè  iè  iB  i³  i  i  i\  ià  ió  iS  iV	  i  i~  iã  iü  i  iÙ  i  iÃ  i  iV  iá
  iz  iÜ  i^  i	  i¦  i¶  iµ  i_
  i}  iG  iq  é¡   iI  i¤  iÙ  i  é8   it  ih  iS	  i¸  i}  iR  i­	  i9  é   éS   in  iP  i  iB  i  i  iå  és   iØ  iX  i}  if  ið  iü  i  i  iÊ  i³  iß  i  éÓ   iê  in  iI  i^  é½   iT  iÅ  ix  iÎ  ir  iû  iÄ  i_  é   ib  i¼  iO  iP  iQ  iR  iS  C:\code\venv\callllama\lib\site-packages\chardet\gb2312freq.pychardet.gb2312proberGB2312Prober.charset_nameC:\code\venv\callllama\lib\site-packages\chardet\gb2312prober.py<module chardet.gb2312prober>GB2312Prober.languageGB2312Prober.__init__HebrewProber.__init__chardet.hebrewproberNORMAL_NUN<module chardet.hebrewprober>NORMAL_PEHebrewProber.is_final_visual_proberlogicalProberFINAL_MEM_final_char_visual_scoreISO-8859-8FINAL_TSADIFINAL_PEvisualProberHebrewProber.resetis_non_finalMIN_FINAL_CHAR_DISTANCEFINAL_NUN_before_prevNORMAL_MEMMIN_MODEL_DISTANCELOGICAL_HEBREW_NAMEfinalsubmodelsubHebrewProber.feedC:\code\venv\callllama\lib\site-packages\chardet\hebrewprober.py_logical_proberHebrewProber.charset_nameNORMAL_KAFFINAL_KAFNORMAL_TSADIVISUAL_HEBREW_NAMEHebrewProber.language_final_char_logical_scoreHebrewProber.stateHebrewProber.is_non_finalHebrewProber.set_model_probers¨  é(   é   é   é¶   é   é´   i'  iO  i  i}  iß  iÐ  iü  iþ  i]  i¶  i·  i  iá
  iÿ  i©  i²  iÎ  i   é«   i´  iß  é   é³   iÏ  iX  i}  iî  iÐ  ik  é   ig  i¸  i  ik  i¤  éè   éä   i  i  i  i  iù  iú  i%  i&  é0   é1   é,   é-   i±  i²  i  i  iä  i  iµ  iç  iÑ  i<  i  i  ip  iÑ  iÒ  iÓ  iÔ  iÕ  iÖ  ig  i×  i  iØ  iW  iX  iÙ  ià  ih  i"  ií  i¿  i  iÚ  i
  i	  i  i\  iË  i¥  i
  i/  i  iá  iÒ  iÓ  i  iÄ  i0  i  i
  ih  iý  iÔ  iÛ  iÜ  iÝ  iÞ  iß  ià  iá  iâ  iã  iä  iå  iæ  iç  iè  ié  iê  ië  iì  ií  iî  iï  ið  iñ  iò  ió  iô  iõ  iö  i÷  iø  i  iù  iú  iû  iü  iý  iþ  iÿ  i   i  i  i  i  i  i  i  i  i	  i
  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i   i  i!  i"  i#  i$  i%  i&  i'  i(  i)  i*  i+  i,  i-  i.  i/  i0  i1  i2  i3  i4  i5  i6  i7  iÀ  iV  ij  i4  iµ  i  i  iB  i  i  i8  i9  i:  i;  i<  i=  i>  iv  i¬  iÒ  i  iS  iû  ie  i  if  i  i  id	  i+  iÙ  iÀ  ia  iw  iÓ  i  iÁ  iI  iî  i~  iÛ  i½
  i  i?  i@  iA  iB  iC  iD  i
  i  i-  i  i  ii  iÕ  i¹  i  iE  i^  i.  iâ  i3  i  ii  iF  i/  iY  i¶  iã  i  iæ  ij  iâ
  i  iG  iH  iI  iJ  iq  é   i1  é   iY  é   ik  é/   i  é2   é   é   é#   i  é   éó   é*   é   é   é   é   é¸   é   é[   é   é\   é5   i  é!   i!  é	   é%   é@   il  é   é'   iA  é   é   é   é4   é   é   éÐ   é   é    é   é<   i  é   é   i-  éµ   i  i7  éS   é   iÃ  é~   iK  i=  é   éE   é    é;   é   é   é7   i7  i8  ém   é&   é   é   é
   é   éO   iK  é=   i~  id  é   é   iL  iM  iN  iO  iP  iQ  iR  iS  iT  iU  iV  éY   é>   éJ   é"   ip	  ép   é   éÄ   i  é   éT   i_  é   iý  é.   éX   é   i«  éL   ij  ée   i  é9   éP   é    il  éy   iä  é©   i  éD   éë   é   i·  é)   ih  iÓ  éF   é?   é   é+   i  i  ig  éc   i  éÂ   éB   é]   iN  éÙ   éÀ   é8   éj   é:   i5  i  i  i7  é   é   éR   i4  éG   éd   é   éÖ   i  én   i  éh   it  é6   é3   é$   éW   éC   iþ  é¹   i:
  ix  iä  é   i*  iV	  i  iW  iX  iY  iZ  i[  i\  i]  i^  i_  i`  i  ia  ib  ic  id  ie  if  ig  ih  ii  ij  ik  il  im  in  io  ip  iq  ir  is  it  iº  iu  iv  iw  ix  iy  iz  i{  i|  iù  iï  i  iÖ  il  i}  iÿ  i~  i  i  i	  i  i»  i  i  i×  i
  ià  iØ  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i   i¡  i¢  i£  i¤  i¥  i¦  i§  i¨  i©  iª  i«  i¬  i­  i®  i¯  i°  i±  i²  i³  i´  iµ  i¶  i·  i¸  i¹  iº  i»  i¼  i½  i¾  i¿  iÀ  iÁ  iÂ  iÃ  iÄ  iÅ  iÆ  iÇ  iÈ  iÉ  iÊ  iË  iÌ  iÍ  iÎ  iÏ  iÐ  iÑ  iÒ  iÓ  iÔ  iÕ  iÖ  i×  iØ  iÙ  iÚ  iÛ  iÜ  iÝ  iÞ  iß  ià  iá  iâ  iã  iä  iå  iæ  iç  iè  ié  iê  ië  iì  ií  iî  iï  ið  iñ  iò  ió  iô  iõ  iö  i÷  iø  iù  iú  iû  iü  iý  iþ  iÿ  i   i  i  i  i  i  ik  i  iã
  i>  iä
  iå
  i	  i   i	  ij  iÛ  é¥   i  iZ  i[  i\  i]  i  i  i  i  i  i	  i
  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i   i!  i"  i#  i$  i%  i&  i'  i(  i)  i*  i+  i,  i-  i.  i/  i0  i1  i2  i3  i4  i5  i6  i7  i8  i9  i:  i;  i<  i=  i>  i?  i@  iA  iB  iC  iD  iE  iF  iG  iH  iI  iJ  iK  iL  iM  iN  iO  iP  iQ  iR  iS  iT  iU  iV  iW  iX  iY  iZ  i[  i\  i]  i^  i_  i`  ia  ib  ic  id  ie  if  ig  ih  ii  ij  ik  il  im  in  io  ip  iq  ir  is  it  iu  iv  iw  ix  iy  iz  i{  i|  i}  i~  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i   i¡  i¢  i£  i¤  i¥  i¦  i§  i¨  i©  iª  i«  i¬  i­  i®  i¯  i°  i±  i²  i³  i´  iµ  i¶  i·  i¸  i¹  iº  i»  i¼  i½  i¾  i¿  iÀ  iÁ  iÂ  iÃ  iÄ  iÅ  iÆ  iÇ  iÈ  iÉ  iÊ  iË  iÌ  iÍ  iÎ  iÏ  iÐ  iÑ  iÒ  iÓ  iÔ  iÕ  iÖ  i×  iØ  iÙ  iÚ  iÛ  iÜ  iÝ  iÞ  iß  ià  iá  iâ  iã  iä  iå  iæ  iç  iè  ié  iê  ië  iì  ií  iî  iï  ið  iñ  iò  ió  iô  iõ  iö  i÷  iø  iù  iú  iû  iü  iý  iþ  iÿ  i   i  i  i  i  i  i  i  i  i	  i
  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i   i!  i"  i#  i$  i%  i&  i'  i(  i)  i*  i+  i,  i-  i.  i/  i0  i1  i2  i3  i4  i5  i6  i7  i8  i9  i:  i;  i<  i=  i>  i?  i@  iA  iB  iC  iD  iE  iF  iG  iH  iI  iJ  iK  iL  iM  iN  iO  iP  iQ  iR  iS  iT  iU  iV  iW  iX  iY  iZ  i[  i\  i]  i^  i_  i`  ia  ib  ic  id  ie  if  ig  ih  ii  ij  ik  il  im  in  io  ip  iq  ir  is  it  iu  iv  iw  ix  iy  iz  i{  i|  i}  i~  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i   i¡  i¢  i£  i¤  i¥  i¦  i§  i¨  i©  iª  i«  i¬  i­  i®  i¯  i°  i±  i²  i³  i´  iµ  i¶  i·  i¸  i¹  iº  i»  i¼  i½  i¾  i¿  iÀ  iÁ  iÂ  iÃ  iÄ  iÅ  iÆ  iÇ  iÈ  iÉ  iÊ  iË  iÌ  iÍ  iÎ  iÏ  iÐ  iÑ  iÒ  iÓ  iÔ  iÕ  iÖ  i×  iØ  iÙ  iÚ  iÛ  iÜ  iÝ  iÞ  iß  ià  iá  iâ  iã  iä  iå  iæ  iç  iè  ié  iê  ië  iì  ií  iî  iï  ið  iñ  iò  ió  iô  iõ  iö  i÷  iø  iù  iú  iû  iü  iý  iþ  iÿ  i   i  i  i  i  i  i  i  i  i	  i
  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i   i!  i"  i#  i$  i%  i&  i'  i(  i)  i*  i+  i,  i-  i.  i/  i0  i1  i2  i3  i4  i5  i6  i7  i8  i9  i:  i;  i<  i=  i>  i?  i@  iA  iB  iC  iD  iE  iF  iG  iH  iI  iJ  iK  iL  iM  iN  iO  iP  iQ  iR  iS  iT  iU  iV  iW  iX  iY  iZ  i[  i\  i]  i^  i_  i`  ia  ib  ic  id  ie  if  ig  ih  ii  ij  ik  il  im  in  io  ip  iq  ir  is  it  iu  iv  iw  ix  iy  iz  i{  i|  i}  i~  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i   i¡  i¢  i£  i¤  i¥  i¦  i§  i¨  i©  iª  i«  i¬  i­  i®  i¯  i°  i±  i²  i³  i´  iµ  i¶  i·  i¸  i¹  iº  i»  i¼  i½  i¾  i¿  iÀ  iÁ  iÂ  iÃ  iÄ  iÅ  iÆ  iÇ  iÈ  iÉ  iÊ  iË  iÌ  iÍ  iÎ  iÏ  iÐ  iÑ  iÒ  iÓ  iÔ  iÕ  iÖ  i×  iØ  iÙ  iÚ  iÛ  iÜ  iÝ  iÞ  iß  ià  iá  iâ  iü  i  i  iå  iÓ  iÙ  i¢  i  i  i2  iã  iä  i{  iT  iÙ  ia
  i¯
  i^  iå  iá  i|  i¡  i=  i  im  ik  i  iä  iú  i	  iV  iy  i	  i  i
  iq	  i  ið  i   i¾
  i°	  é   i  i¸  iÄ  i!  i  iÁ	  iÒ  i  ió  i¸  é¤   iC  iO  i3  i  iÍ  iæ  iü  i  ir	  i²  i³  in  iÄ  i+  i  iÉ  i  i¿
  ip  iq  iå  i;
  éA   iæ  iý  iá  iC  i0  i  in  i¼  i  iç  iT  iC  io  i  iÿ  i
  i#	  i  i  i~  i  iP  iæ  iú  iÞ  i  iô  i×	  i  iØ	  i  i$	  iz  iÚ  iÔ  i&  iÈ  i  iî  iç  i   iÛ  iÀ  iù  iÃ  i_  i  é¯   iU  iÙ  i½  is	  iÙ	  i  iÕ  iI  iª  i  iï  i  i  i  iè  i3  iÜ  i  i$  iW  i1  i5  iP  ië	  i  i  ið  iâ  i¯  iñ  iX  i¸  i£  i»  il  ié  iÁ  iH  iú  i	  i  i  iÔ  i  i´  i  i
  iW  iØ  i~  ip  i  i$  i  i  i  i@  iL  iç  iÚ	  i  iö  iÌ  iu  i  i  iJ  iI	  iW	  ië  i¸  i_  iê  i 	  i<  i  ið  i  i]  iD  iÂ  iÜ  i  i  ih  iæ  i  i¨  i  i  éÞ   éf   i-  i½  é}   it	  i  iÂ	  i  éÈ   iÄ  i  i,  éà   i
  ib  i¦  iÂ  iX  i  i  iF  i  i{  i`  iì  iú  i+  i3  iq  iü  im  iö  i4  iâ  i»  iû  iµ  i  iB  il  iX	  i¾  i   i%
  i«  i  i%	  i2  iu  i  i¡	  iÃ	  i¹  iJ  i  i|  ir  i·  i@  i  iß  i  i  iÅ  iÞ  i¿  i  iÛ	  iL
  i  i  i  i  i  i½  ib
  iJ	  i  ic  i  iÖ  ië  éø   iû  iÇ  i  i4	  iR  i  im  iT  iè  iÈ  i  i¶  iì  ií  iÛ  i  ie	  iî  i  i?  i  ió  i  i¤  i  i-  i	  i¦  i*  iE  i¢  iÐ  i+  i¹  ià  i&	  i±	  iÐ  i½  i/  iÂ  iÒ  i.  is  i[  iñ  i+  i  iÀ
  i  i
  iB  ic
  i¬  iè  iá  i  i·  i	  i)  i  i,  i×  iu	  i  i	  i  i9  i&
  i  i  iÎ  i  i¥  iv	  iã  iY  iØ  i3  iþ  i
  iã  i  i  iD  i¯  i¼  i®  i  id  i§  i  i|  i(  iy  i  iÌ  i  i£  i<  i8  iÎ	  ii  i  i  i  id
  i5  iB  i  in  i  iï  i  iï  iÍ  i|  iì	  i!  iÑ  i)  i@  in  im  i  i²	  i0  ia  iÉ  iü  iÄ	  éz   i'  éÃ   i«  iÅ	  iW  ið  i[  iv  iÉ  iÃ  i³	  iÝ  i  i	  io  i  iÜ	  i  i
  i  i   i'
  i²  i  i"  iû  i  i9  i  i  i  iÇ  iJ  i½  i  ih  iñ  i  ie
  i  éö   i\  iÞ  é   i   ip  i@  i  iQ  i9  iß  iº  éî   i	  é»   iü  i  iw	  ii  iE  i¸  iJ  iI  ií	  iì  i  i÷  iÏ  i  if  iÁ  i£  i  i
  iè  i1  iÙ  iÕ  i
  iÖ  i¤  i'	  ir  i  iµ  iä  iå  iÀ  i  i  ic  iÝ	  iq  i  ix  iÐ  i  i
  i2  iÝ  i¥  i  iÉ  i¢	  i*  i  i¾  ib  iF  iù  iv  iñ  id  iÁ  i  iá  i!  iR  iÁ  iÑ  iQ  i  i   i  iP  iï  i  i  i  i  i  ià  i(	  iÜ  i©  i_  i  i`  i  i  if
  i  i6  iÎ  iA  i  iÝ  ia  iÚ  iò  iu  iT  i  i2  iî  iµ  i  i  i·  i  i^  iC  i×  iæ
  iÁ  i[  iç  iÂ  iv  i%  iü  iá  iå  in  i!  iF  i¬  iZ  i^  iâ  i  iÔ  id  i  iß  iæ  ix	  i³  i§  i]  ié  iB  i   ic  iÃ  iê  i¯  i  iP  iq  i	  i  iH  iY	  i  iÎ  i(
  ió  iÁ
  iÏ  ig  i}  iK  i£	  iË  i  i4  iô  iW  i  i¤  ií  iC  ig
  i-  id  iæ  ik  i  i4  i}  i  iq  i~  i+  i´	  iô  i¼  ih  i@	  i	  i  i@  iA	  iD  i:  i§  i  ie  iç
  iç  iq  iw  iç  i¦  i  iè  iõ  iÚ  i  id  iÑ  iZ  iý  i*  iM
  i[  iò  i©  is  iZ  i
  iº  ié  i>  i  i'  i-  ië  iè
  i  i  iÈ  i)	  i  ië  iö  iô  it  iF  i7  iÂ  it  i#  iÎ  i  i  iÒ  i  iY  i  i£  if  ik  ib  i1  i  iÄ  i  i6  io  ic  i  iq  iî	  i÷  i  iÈ  ié
  iu  i´  i:  iâ  iô  iN
  iÂ  iU  i=  iï	  iv  iò  il  éN   iï  iÊ  iý  i]  i  i;  ió  iÔ  iÂ
  iÆ  i  il  iL  i	  i}  i   iÕ  i  iÓ  iB	  é   i8  iQ  iÄ  i#  i`  iT  iÅ  iµ	  ix  i  ir  iÏ	  i  i  i  iÔ  ià  ið	  iÝ  i3  in  i  iÏ  i  ið  i  i  i{  iý  i  i@  iì  iæ  i  iÒ  i9  éª   é   i±  i5  ih
  id  iZ	  éÕ   i  ii  i  i±  i  i»  i  is  i-  ir  ií  i  i  iÔ  i[  iË  i0  i  i  i¾  iä  i.  iS  i	  iR  iO
  iô  i  i  iì  i;  i   i4  iy	  i
  i;  i´  iz	  iø  ip  iµ  i¥  i   ií  i­  i:  i(  i|  i
  i¨  i"  iÅ  iÒ  iÓ  i©  i  i¦  iO  i÷  ie  i¡  i­  éû   i  iC	  it  i)
  i  i6  éK   i  iå  i8  iö  iP
  i  ih  iø  iî  ié  i  iÂ  i3  i$  iê  iÜ  i*
  i=  éb   ie  i  iÅ  i4  iª  ië  iÆ	  i.  i7  i  i\  iþ  iù  i  ij  i§  i  iú  i  iù  i¹  iã  é¼   i/  i  é²   iÙ  i¨  i=  iÊ  i^  iÐ  i5	  i¡  iÛ  i¤	  i\  iÞ  i  iû  ií  i9  i#  i+  i°
  is  i,  iª  i7  i  iü  iY  iñ  iª  iê
  iM  iÎ  i+
  ii
  iQ  i  é¢   i6	  iÌ  iã  iê  i¸  i  iy  i©  i  is  i#  i{	  iÆ  iU  if  i<  iÜ  i¯  iv  iß  i¥  i)  ië
  i  i  i  i®  iò  im  i<  i  i  i¥	  iæ  iÌ  ig  iý  i	  él   iÈ  i   iD	  ib  iu  iÃ
  iª  iD  iB  i  i  iÇ  i[	  i«  i  i8  iâ  i  i>  i  i­  i  i»  i²  iä  iå  i  i]  iì  iD  ií  éá   iÔ  i6  iZ  iô  i¦	  i5  iÉ  i
  iì
  i<  im  iÈ  i,  i§	  i¦  iu  i^  i¶	  iý  iÅ  ig  ió  i  éI   i  iµ  ig  iï  i¥  i\  i:  i  iM  ét   i·	  iá  iE  i  éo   éô   iß  iþ  iÕ  iE  iR  iÚ  i  i¢  iE  ij
  iî  ég   iW  i÷  i  iK  i¸	  iC  i  i=  iÓ  i]  i$  i!  iý  i	  i  iÑ  i¹  é`   iK  iv  i  i  i0  ii  é­   é^   éâ   i¬  i3  iÖ  i"  i  i  éç   iÐ  i  éa   ik
  i  i;  iw  i  iº  i«  iæ  i  iÿ  i
  iy  i  i²  iã  iß  iP  i  i¦  i¨	  iw  i£  é   iç  it  ið  i²  ié  i  iè  iî  iJ  ia  i  iû  i]  iè  iÆ  iÕ  i	  é   i  i´  i  iL  ih  i  ié  iÝ  iÄ
  iu  ij  i  i  i#  iC  iÖ  i¤  i	  ia  éÍ   i!  és   i|	  i°  i	  iY  i  i
  i»  i¦  iþ  ih  iO  i5  i³  iõ  iz  ii  i±
  iS  iò  iL  iÕ  i.  iõ  i&  i  i	  i<
  i7  ið  is  iA  i¨  i  iM  iÉ  i°  is  iá  i*  i,
  i%  i²
  iÇ	  i   ik  iê  i&  if  éå   iO  ij  i"  i½  i(  i-  i  i[  iþ  iÑ  iñ  iü  i-  i=  i°  i}	  i  i¶  éM   iS  i  iÒ  iÚ  i  i¨  i  i   i¢  ië  iÛ  i
  i
  i  i
  i®  i~	  i¿  iJ  it  ik  iv  ie  iy  i  éì   i  i<  iò  if  iõ  iM  ék   iÊ  i  iª  io  iÖ  éÏ   iå  iw  iv  il  iì  i]  i  i  i.  iÅ
  iÞ  iì  i¸  i/  if	  iq  i$  ig  iö  iG  é¾   éý   in  i¶  i>  i6  i=  i¦  i­  i§  iÕ  i£  iN  iñ	  ix  i  ie  i*	  i  ih  i  ið  iä  i$  i®  ià  i  io  ib  i,  i  i  iþ  i  it  iÇ  i»  i	  iÜ  i  ií
  iV  iþ  iî
  ii  i  i¹  iú  ië  iw  i  i  ip  iH  iÝ  éV   i«  ii  i<  iZ  i	  i8  ér   iw  i  i&  éË   ió  i¿  i/  iâ  i­  iÁ  ií  i>  i  i>  iE	  ix  iî  i&  ie  iÆ  iw  i	  iî  i  i5  iÝ  iÊ  i
  i  i\  i³  éü   i  iS  ii  i  i  é¨   iÒ  i2  éÁ   iï  i  i  i+  i'  iÖ  i%  i  ié  ix  iO  i¹  i
  iQ
  i¡  iÕ  i  i  iÿ  iÔ  i_  éH   iÏ  i¾  i  i¼  ig  i  iØ  iy  i  i
  i0  i&  i+	  i  i  i  i·  i®  il
  i'  i  i'  iz  i  i	  i	  i±  i_  iå  iÅ  i  iô  iõ  iþ  i?  iï
  iô  iÞ	  é£   iz  iï  im
  i|  i
  i  i	  ig	  i0  iÀ  iÖ  i   iõ  i*  i  iö  i
  i`  iw  i  i  i  i#  éÒ   ic  i)  iá  iê  iR
  iÞ  éÎ   ió  iT  é   iÏ  ir  i  iV  i  iò  i¢  i_  i  iÿ  i  i¿  ir  i  iÅ  i³
  i`  ix  i¾  i  i
  iø  i³  if  i¶  i  in
  i=
  i*  iA  i  iò	  i(  éò   ix  éú   iS
  i³  é{   iT
  i  i9  i  i±  iM  i  ir  éØ   i  i;  i  i(  i  i%  i  i[  ia  ib  i  iº  iD  i  i¬  i  i-
  i\	  i÷  i  i  i  io
  iE  im  i)  iç  i!  i¬  i  ic  iÀ  i,	  i1  i  i]	  i«  é   i  i>  iI  é°   i§  iß	  iT  i  iã  ið  i÷  i¿  i  iy  i  ik  iz  ix  ié  iN  i	  iÄ  i  i  i 	  i5  iø  iß  i"  i×  iH  i<  id  iù  i
  i­  i  ih	  ió	  i  i
  ip
  i  i²  i:  iL  i1  iÆ  i§  iË  i  i·  i>
  iÅ  iq
  i?  iZ  iM  iI  i½  i  iB  iK	  iD  i  i#  i  i
  iY  i>  éù   iì  i  i  i`  i  i  i  i  i  i  iÞ  i  i  i¦  iú  iù  i   i¢  ið  ic  i³  i  i  iÿ  iÛ  éÜ   iT  i  ia  i  i2  iy  i/  iÆ  i"  iU
  éÚ   éñ   ib  i¨  iù  iÀ  i/  i®  ià	  iÃ  i  i
  i{  i
  i  ij  éþ   i  éº   i5  i*  ié  i°  iÝ  i¬  ia  ix  iÆ  i­  i¹	  i  iF  iê  iñ  i¼  i7  iø  iñ  iº	  i?  iþ  éw   iÉ  i  i  ió  i×  i+  i  i8  iÊ  iÆ
  iN  ið
  i  iÇ  i,  iØ  in  i  i  i  iú  io  is  i_  i?  iå  i»	  i  i  i  iô	  i  i×  i?  i0  iá	  i	  iõ  iy  i3  if  i¯  i=  i  i  il  i  iõ	  i  iv  i]  i   i	  i	  iÈ  ið  iz  iÇ
  iö  iy  ij  i  iu  i  iê  ip  iÌ  ij  é   i  i	
  ii  iz  i  iÖ  ir
  i  i  ià  iï  iØ  i  i  i  iF  i¡  i'  iÐ	  i{  in  i  ix  éu   i$  i  i¸  i¹  iM  i£  é÷   iâ  ik  i   ip  iÈ
  i^	  iq  i  i`  i|  i¾  i	  i  i

  i|  i	  iÉ
  i  iº  i	  i
  i¨  i®  iã  i	  iG  i  iø  i-  iò  iZ  i1  iY  iñ  i-	  i	  ie  iò  i¾  i[  iC  éÿ   i¾  i¡  ie  i°  i.  i-  i  i÷  i×  i	  i   i  i
  i
  i7	  ib  il  i	  é   iô  ió  i{  iô  i.  i	  i  iÈ  iz  i¸  iÌ  i 
  i   i?
  ió  i  i9  i  i
  iÍ  i  i  i}  i£  i¡
  ia  i  iö	  i
  éQ   i	  id  i;  iV
  iÚ  i/  i^  iD  iØ  i?  im  iÍ  iÎ  i9  iI  i
  iÜ  iÞ  i
  i  iÙ  iÊ
  i{  i}  i   iû  i  i  i  é   i&  i×  i~  iä  iX  iÿ  iû  i}  iÏ  iÖ  i9  i  iè  i:  i¢  i"  i\  i  iá  i
  i_	  éÓ   i8  iW  i~  i^  i%  iP  is  i±  iw  i  i¾  i  i8	  iü  iL  ià  i  i.
  iè  i  iÐ  iô  i  iN  éÇ   iÓ  iP  i¥  iS  i  iá  iê  i:  iR  i'  i0  ib  i  i»  i´
  iõ  iÍ  i  ië  iz  i  i÷	  i  i  i  i  iK  iÇ  éÆ   ià  i¢
  ir  i  iq  i
  iæ  ià  in  iL	  i  i©  i  i®  i³  i   i  iõ  iå  iX  i@
  iç  ig  éi   é¡   i¼  i4  i¨  i:  i  i  i  ir  i©	  i  iQ  iñ
  i  i	  i;  i'  iý  i>  iâ  ib  im  iÃ  iw  éß   iö  i÷  is
  iß  i  i­  iA
  i  it
  i9	  i  iø  i  i  i	  io  i^  i  i  i2  i¯  ic  iâ  i  éÛ   i²  i  ir  i  i  iþ  i!  i  it  i  i1  i{  iá  iØ  i  i©  é   i¶  is  i  i´  iõ  i  i¿  iÊ  éx   i  év   ia  ip  iù  iä  i  iÃ  iL  iO  iö  i  iU  i¤  i.  i  éÔ   i)  i.	  i  iE  i	  i"  i  iy  i  i	  iû  i  iÍ  é¦   i(  i  i  i¿  iq  iE  i6  i
  iË
  i2  iu  i6  iÀ  iû  i¬  iÆ  i.  i·  ii	  i  iØ  iV  i  i  is  iÌ
  i  i¢  iG  iG  ij  it  i  iW  i  i	  i  i®  i`  i÷  i  i  iu  iâ  i  iµ
  iò  i{  iQ  i  iø	  iO  iC  i³  iú  i  iâ  iJ  iù	  i	  i	  i$  iÓ  iø  iÙ  i/	  iË  i  i_  i  iÆ  i  ij	  iR  i°  i7  i  i´  i/
  i  i3  iD  iu
  i6  iX  i4  iù  iæ  i  i  iû  i  i>  i  i  i  i0
  i`  i`	  i
  iñ  iü  iÙ  iU  iÉ  i   i£
  ir  i  i´  i)  i×  i5  ië  iH  iË  i 
  i  i  i~  ir  iý  i
  iþ  iï  i  i  i	  é   i  i]  iÎ  i¯  i  i¶  i  ië  i  i@  i½  iÉ  i¶
  ia  iÎ  iv  i÷  i  i  i/  i!  i6  iê  iÕ  i§  i7  iw  iÁ  i	  i3  ic  i8  ix  i  i¥  iö  iB
  iÜ  i×  iM	  iÿ  é   iF	  iÀ  ig  i  i¤  i  i(  i¡  i  i:	  i   iä  iH  i  iÍ
  if  é×   i  i"  iÑ  i~  iý  iÐ  iã  i
  iy  i  i  i¦  iò  i   i!  iN  iÒ  i4  iA  iÏ  id  ie  éé   éõ   iz  i  i  iã  iä  iÌ  ið  i¶  i0	  ií  iÿ  i  i¼  i  i  i  ií  i{  iØ  iÏ  i  i¤
  iú  if  i(  il  iè  iG  iª	  i  éÅ   i^  iB  im  iF  i|  i  iU  iÞ  i  i2  iR  iÜ  ià  i#  iî  i  i  iç  iF  éÝ   i  éU   i¹  iº  iû  i1  iÂ  ic  ik  i©  iN	  iS  i«	  é   éï   iò
  iÇ  iø  i$  iO	  i  i  iY  i  iÁ  i  i   iÞ  iG  i  i  iü  iW
  i	  iC
  i?  iµ  i  é   i~  iã  i  iU  iF  iÇ  i¨  i  i  ié  iß  i  i  iC  i¼	  i  iË  i  ie  i  iÙ  i¡  iª  i  i/  iQ  i_  iv
  i;  i¶  i·  iP  i)  éã   iG  im  i	  i  i  iG  i,  iI  iz  é_   i	  éÉ   i	  i9  in  i  i·
  iA  iú	  i
  iX
  iè  i#  iV  i)  i<  i%  i  i}  iÁ  i¥  iH  iw
  i5  i  ip  i.  i  iÄ  i«  im  i  i¯  iÏ  i  i#  ih  i|  ib  iü  i  i  i@  i(  i^  iz  iÃ  i  iA  ió
  i   i  i"  i  ig  i  i|  iÔ  iÈ  i  é   iÃ  i6  i¬  iX  i  iÿ  i,  iÑ  iì  i		  i  iå  i$  i#  iI  ik	  i°  i  i  i  i:  i	  i  iQ  i  io  ih  iV  i$  i  iñ  it  i  i´  i£  iY
  i,  iÐ  i  i
  i  iD  i¿  iÈ	  i~  iÓ  i  i¹  i½  i%  iº  i  i   i©  é·   i  i  iÂ  iÔ  i   i7  i/  i
	  é®   iÓ  éæ   i	  iE  iV  ió  iÕ  iE  iu  i  i&  iÊ  i÷  i  i¸  iÑ	  ií  io  i  iý  iZ  i  ii  i·  i  i	  i  i  i  é§   i!  iÚ  in  i8  iî  i'  i  é½   i  i  iÇ  i  iÝ  i	  i  iG  i  iR  i2  iò  i  i:  i  i,  éí   i  iZ
  il  i  i(  iX  iP	  i?  iº  i  i	  io  i  i  i§  iö  iÄ  i  iW  i*  i  éð   i;  i8  i  i&  i)  i¤  iå  i
  io  iÊ  i  i¯  i­  iH  i_  i  iª  i0  iÃ  ix
  iù  i0  i  i;	  i  i  i  iÿ  iX  i¡  i	  éÌ   iÑ  i1  iþ  éZ   i*  i%  iÉ	  é¿   i  é|   id  i`  i  i  iS  ij  i}  i\  i  iÛ  iø  iG	  i§  i  i	  if  éq   i%  iB  i  i1
  ip  i  i"  i  i  iÚ  i  i  i|  iº  iñ  i  iÒ	  ió  il	  i2
  é±   i
  iÖ  i  i  i@  ih  i  i;  iú  é¬   i  i	  i  i	  i¶  i¼  i&  i  i  iè  i}  i  i%  i  i±  i  i  i?  i¤  i¬	  iÛ  ia	  iy
  i  i¸
  iÑ  iõ  iû	  i·  i=  i1  i  i<  iÿ  i{  i#  i  éÊ   iã  i  iÎ
  iA  i  i
  i  it  i   i  i	  i  i>  i
  iK  i3
  iµ  i  i=  éê   i  i\  iæ  iç  i'  iA  i+  ig  iÊ  ib	  iK  i¡  iÚ  iÿ  iç  i  iÄ  i
  iÐ  i4
  i´  i*  i  im	  i­	  iÀ  i¥
  io  iN  i   i0  i(  ii  iõ  i$  i4  i   i{  i  i¤  i¢  iQ	  iË  i  iU  ié  i»  iµ  i,  i`  i  iÓ	  i¼  i  iÏ
  ij  i)  i   iÍ  i-  i6  éÑ   i	  iF  i2  i)  i  i  i*  i¹  iY  C:\code\venv\callllama\lib\site-packages\chardet\jisfreq.py      @chardet.jisfreqSJISContextAnalysis.charset_nameJapaneseContextAnalysis.got_enough_dataJapaneseContextAnalysis.__init__jp2CharContextJapaneseContextAnalysis.resetNUM_OF_CATEGORY_total_relJapaneseContextAnalysis.feedMAX_REL_THRESHOLDCP932EUCJPContextAnalysis.get_orderDONT_KNOWSHIFT_JISENOUGH_REL_THRESHOLDJapaneseContextAnalysis.get_confidence_last_char_ordernum_byteschardet.jpcntxJapaneseContextAnalysis.get_orderC:\code\venv\callllama\lib\site-packages\chardet\jpcntx.pySJISContextAnalysis.__init___rel_sample<module chardet.jpcntx>©S)Sé    r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   é   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   )Sr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   _charset_name_need_to_skip_char_numSJISContextAnalysis.get_order¨   éÿ   r   r   r   r   r   r   r   r   r   éþ   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éý   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éü   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éM   éZ   éc   éd   éH   ém   ék   ée   éO   é¹   éQ   éf   éL   é^   éR   én   éº   él   é[   éJ   éw   éT   é`   éo   é»   és   r   r   r   r   r   r   éA   éE   éF   éB   é?   éD   ép   ég   é\   éÂ   éh   é_   éV   éW   éG   ét   éÃ   éU   é]   éa   éq   éÄ   éÅ   éÆ   éÇ   éÈ   r   r   r   r   r   éÎ   éÏ   éÐ   éÑ   éÒ   éÓ   éÔ   éÕ   éx   éÖ   é×   éØ   éÙ   éÚ   éÛ   éÜ   éÝ   éN   é@   éS   éy   éb   éu   éi   éÞ   éß   éà   éá   éâ   éã   éä   éå   éX   éæ   éç   éè   éé   éz   éY   éj   éê   éë   éì   éí   éî   é-   éï   éð   éI   éP   év   ér   éñ   éò   éó   éô   éõ   é>   é:   éö   é÷   éø   éù   éú   é   é    é#   é+   é%   é,   é7   é/   é(   é;   é!   é.   é&   é$   é)   é   é'   é   é"   é3   é0   é1   é5   é2   é6   é9   é=   éû   éC   r   é<   é8   é   é   é	   é   é   é   é   é   é   é   é   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   éK   é4   r   é*   é   Latin5_BulgarianCharToOrderMapwin1251BulgarianCharToOrderMapchardet.langbulgarianmodelBulgarianLangModel! _Bï?BulgairanC:\code\venv\callllama\lib\site-packages\chardet\langbulgarianmodel.py¨   é    é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   ¨   éÿ   r   r   r   r   r   r   r   r   r   éþ   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éý   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éü   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éM   éZ   éc   éd   éH   ém   ék   ée   éO   é¹   éQ   éf   éL   é^   éR   én   éº   él   é[   éJ   éw   éT   é`   éo   é»   és   r   r   r   r   r   r   éA   éE   éF   éB   é?   éD   ép   ég   é\   éÂ   éh   é_   éV   éW   éG   ét   éÃ   éU   é]   éa   éq   éÄ   éÅ   éÆ   éÇ   éÈ   r   r   r   r   r   r(   r/   r4   r5   r6   r7   r8   éÉ   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   éÑ   éÒ   éÓ   éÔ   éÕ   éÖ   é×   éØ   éÙ   éÚ   éÛ   éÜ   éÝ   éÞ   éß   éà   éá   r   éâ   éã   éä   éå   éæ   éi   éç   éè   éé   éê   éë   éì   é-   éí   éî   é   é    é#   é+   é%   é,   é7   é/   é(   é;   é!   é.   é&   é$   é)   é   é'   é   é"   é3   é0   é1   é5   é2   é6   é9   é=   éï   éC   éð   é<   é8   é   é   é	   é   é   é   é   é   é   é   é   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   éK   é4   éñ   é*   é   é>   éò   éó   éô   é:   éõ   éb   éö   é÷   éø   éù   éú   éû   r   r   r   ¨   éÿ   r   r   r   r   r   r   r   r   r   éþ   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éý   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éü   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   é   é   é   é   é   é   é   é   é   é   éJ   é   éK   é   é   é   é   é   é   é    é¡   é¢   é£   é¤   é¥   r   r   r   r   r   r   éG   é¬   éB   é­   éA   é®   éL   é¯   é@   é°   é±   éM   éH   é²   éE   éC   é³   éN   éI   é´   éµ   éO   é¶   é·   é¸   é¹   r   r   r   r   r   é¿   éÀ   éÁ   éÂ   éÃ   éÄ   éÅ   éÆ   éÇ   éÈ   éÉ   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   éÑ   éÒ   éÓ   éÔ   éÕ   éÖ   é×   éØ   éÙ   éÚ   éÛ   éÜ   éÝ   éÞ   éß   éà   éá   éD   éâ   éã   éä   éå   éæ   éç   éè   éé   éê   éë   éì   éí   éî   éï   éð   éñ   éò   éó   éô   éõ   éö   é÷   éø   éù   éú   éû   r   r   é   é   é   é   é   é   é'   é   é   é   é   é   é   é   é   é   é   é   é	   é   é   é   é   é
   é   é   é   é   é   é   é   é6   é;   é%   é,   é:   é)   é0   é5   é.   é7   é*   é<   é$   é1   é&   é   é"   é#   é+   é-   é    é(   é4   é8   é!   é=   é>   é3   é9   é/   é?   é2   éF   IBM866_char_to_order_mapRussianLangModel¨   é    é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   chardet.langcyrillicmodel¨   éÿ   r   r   r   r   r   r   r   r   r   éþ   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éý   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éü   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   é   é   é   é   é   é   é   é   é   é   éJ   é   éK   é   é   é   é   é   é   é    é¡   é¢   é£   é¤   é¥   r   r   r   r   r   r   éG   é¬   éB   é­   éA   é®   éL   é¯   é@   é°   é±   éM   éH   é²   éE   éC   é³   éN   éI   é´   éµ   éO   é¶   é·   é¸   é¹   r   r   r   r   r   é¿   éÀ   éÁ   éÂ   éD   éÃ   éÄ   éÅ   éÆ   éÇ   éÈ   éÉ   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   éÑ   éÒ   éÓ   éÔ   éÕ   éÖ   é×   éØ   éÙ   é   é;   é6   éF   é   é%   é   é,   é   é:   é   é)   é   é0   é'   é5   é   é.   éÚ   éÛ   éÜ   éÝ   éÞ   éß   éà   é   é7   é   é*   éá   éâ   éã   éä   é   é<   éå   éæ   éç   éè   éé   éê   éë   é   é$   éì   éí   éî   éï   éð   éñ   éò   éó   é   é1   é   é&   é   é   é   é"   é   éô   éõ   éö   é÷   é#   é   éø   é+   é	   é-   é   é    é   é(   é   é4   é   é8   é
   é!   é   é=   éù   éú   é   é>   é   é3   é   é9   é   é/   é   é?   é   é2   éû   r   r   win1251_char_to_order_mapKOI8-R¨   éÿ   r   r   r   r   r   r   r   r   r   éþ   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éý   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éü   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   é   é   é   é   é   é   é   é   é   é   éJ   é   éK   é   é   é   é   é   é   é    é¡   é¢   é£   é¤   é¥   r   r   r   r   r   r   éG   é¬   éB   é­   éA   é®   éL   é¯   é@   é°   é±   éM   éH   é²   éE   éC   é³   éN   éI   é´   éµ   éO   é¶   é·   é¸   é¹   r   r   r   r   r   é%   é,   é!   é.   é)   é0   é8   é3   é*   é<   é$   é1   é&   é   é"   é#   é-   é    é(   é4   é5   é7   é:   é2   é9   é?   éF   é>   é=   é/   é;   é+   é   é   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é¿   éÀ   éÁ   éÂ   éÃ   éÄ   éÅ   éÆ   éÇ   éÈ   éÉ   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   éÑ   éÒ   éÓ   éÔ   éÕ   éÖ   é×   éØ   éÙ   éÚ   éÛ   éÜ   éÝ   éÞ   éß   éà   éá   éâ   éã   éä   éå   éæ   éç   éè   éé   éê   éë   éì   éí   éî   é	   é   é   é   é'   é   é   é   é   é   é6   é   é   é   é   é   éï   éD   éð   éñ   éò   éó   éô   éõ   éö   é÷   éø   éù   éú   éû   r   r   lµ½P@ï?¨   éÿ   r   r   r   r   r   r   r   r   r   éþ   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éý   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éü   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   é   é   é   é   é   é   é   é   é   é   éJ   é   éK   é   é   é   é   é   é   é    é¡   é¢   é£   é¤   é¥   r   r   r   r   r   r   éG   é¬   éB   é­   éA   é®   éL   é¯   é@   é°   é±   éM   éH   é²   éE   éC   é³   éN   éI   é´   éµ   éO   é¶   é·   é¸   é¹   r   r   r   r   r   é¿   éÀ   éÁ   éÂ   éÃ   éÄ   éÅ   éÆ   éÇ   éÈ   éÉ   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   éÑ   éÒ   éÓ   éÔ   éÕ   éÖ   é×   éØ   éÙ   éÚ   éÛ   éÜ   éÝ   éÞ   éß   éà   éá   éâ   éã   éä   éå   éæ   éç   éè   éé   éê   éë   éì   éí   éî   éï   éð   éñ   éò   éó   éô   éõ   éö   éD   é÷   éø   éù   éú   éû   r   r   é%   é,   é!   é.   é)   é0   é8   é3   é*   é<   é$   é1   é&   é   é"   é#   é-   é    é(   é4   é5   é7   é:   é2   é9   é?   éF   é>   é=   é/   é;   é+   é   é   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é	   é   é   é   é'   é   é   é   é   é   é6   é   é   é   é   é   MacCyrillicIBM855_char_to_order_map¨   éÿ   r   r   r   r   r   r   r   r   r   éþ   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éý   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éü   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   é   é   é   é   é   é   é   é   é   é   éJ   é   éK   é   é   é   é   é   é   é    é¡   é¢   é£   é¤   é¥   r   r   r   r   r   r   éG   é¬   éB   é­   éA   é®   éL   é¯   é@   é°   é±   éM   éH   é²   éE   éC   é³   éN   éI   é´   éµ   éO   é¶   é·   é¸   é¹   r   r   r   r   r   é%   é,   é!   é.   é)   é0   é8   é3   é*   é<   é$   é1   é&   é   é"   é#   é-   é    é(   é4   é5   é7   é:   é2   é9   é?   éF   é>   é=   é/   é;   é+   é¿   éÀ   éÁ   éÂ   éÃ   éÄ   éÅ   éÆ   éÇ   éÈ   éÉ   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   éÑ   éÒ   éÓ   éÔ   éÕ   éÖ   é×   éØ   éÙ   éÚ   éÛ   éÜ   éÝ   éÞ   éß   éà   éá   éâ   éã   éä   éå   éæ   éç   éè   éé   éê   éë   éì   éí   éî   éï   éð   éñ   éò   éó   éô   éõ   éö   é÷   éø   éù   éú   éû   r   éD   é   é   é   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é	   é   é   é   é'   é   é   é   é   é   é6   é   é   é   é   r   ¨   éÿ   r   r   r   r   r   r   r   r   r   éþ   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éý   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éü   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   é   é   é   é   é   é   é   é   é   é   éJ   é   éK   é   é   é   é   é   é   é    é¡   é¢   é£   é¤   é¥   r   r   r   r   r   r   éG   é¬   éB   é­   éA   é®   éL   é¯   é@   é°   é±   éM   éH   é²   éE   éC   é³   éN   éI   é´   éµ   éO   é¶   é·   é¸   é¹   r   r   r   r   r   é¿   éÀ   éÁ   éÂ   éÃ   éÄ   éÅ   éÆ   éÇ   éÈ   éÉ   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   éÑ   éÒ   éÓ   éÔ   éÕ   éÖ   é×   éØ   éÙ   éÚ   éÛ   éÜ   éÝ   éÞ   éß   éà   éá   éâ   éã   éä   éå   éæ   éç   éè   éé   éê   éë   éì   éí   éî   é%   é,   é!   é.   é)   é0   é8   é3   é*   é<   é$   é1   é&   é   é"   é#   é-   é    é(   é4   é5   é7   é:   é2   é9   é?   éF   é>   é=   é/   é;   é+   é   é   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é	   é   é   é   é'   é   é   é   é   é   é6   é   é   é   é   é   éï   éD   éð   éñ   éò   éó   éô   éõ   éö   é÷   éø   éù   éú   éû   r   r   latin5_char_to_order_mapC:\code\venv\callllama\lib\site-packages\chardet\langcyrillicmodel.pyKOI8R_char_to_order_mapmacCyrillic_char_to_order_mapC:\code\venv\callllama\lib\site-packages\chardet\langgreekmodel.pywindows-1253¨   é    r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   é   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   chardet.langgreekmodelwin1253_char_to_order_map¨   éÿ   r   r   r   r   r   r   r   r   r   éþ   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éý   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éü   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éR   éd   éh   é^   éb   ée   ét   éf   éo   é»   éu   é\   éX   éq   éU   éO   év   éi   éS   éC   ér   éw   é_   éc   ém   é¼   r   r   r   r   r   r   éH   éF   éP   éQ   é<   é`   é]   éY   éD   éx   éa   éM   éV   éE   é7   éN   és   éA   éB   é:   éL   éj   ég   éW   ék   ép   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éé   é=   r   r   r   r   r   r   r   r   r   r   éJ   r   r   r   r   r   r   é÷   r   r   é$   é.   éG   éI   r   é6   r   él   é{   én   é   é3   é+   é)   é"   é[   é(   é4   é/   é,   é5   é&   é1   é;   é'   é#   é0   éú   é%   é!   é-   é8   é2   éT   é9   r(   éy   é   é   é   é   é|   é   é   é   é   é   é    é   é   é   é   é   é
   é   é   é   é	   é   é   é   é   é   é   é   é*   é   é@   éK   é   é   é   r   ¨   éÿ   r   r   r   r   r   r   r   r   r   éþ   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éý   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éü   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éR   éd   éh   é^   éb   ée   ét   éf   éo   é»   éu   é\   éX   éq   éU   éO   év   éi   éS   éC   ér   éw   é_   éc   ém   é¼   r   r   r   r   r   r   éH   éF   éP   éQ   é<   é`   é]   éY   éD   éx   éa   éM   éV   éE   é7   éN   és   éA   éB   é:   éL   éj   ég   éW   ék   ép   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éé   éZ   r   r   r   r   r   r   r   r   r   r   éJ   r   r   r   r   r   r   é÷   éø   é=   é$   é.   éG   éI   r   é6   r   él   é{   én   é   é3   é+   é)   é"   é[   é(   é4   é/   é,   é5   é&   é1   é;   é'   é#   é0   éú   é%   é!   é-   é8   é2   éT   é9   r(   éy   é   é   é   é   é|   é   é   é   é   é   é    é   é   é   é   é   é
   é   é   é   é	   é   é   é   é   é   é   é   é*   é   é@   éK   é   é   é   r   Latin7_char_to_order_mapISO-8859-7GreekLangModelèºðsï?C:\code\venv\callllama\lib\site-packages\chardet\langhebrewmodel.py¨   éÿ   r   r   r   r   r   r   r   r   r   éþ   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éý   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éü   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éE   é[   éO   éP   é\   éY   éa   éZ   éD   éo   ép   éR   éI   é_   éU   éN   éy   éV   éG   éC   éf   ék   éT   ér   ég   és   r   r   r   r   r   r   é2   éJ   é<   é=   é*   éL   éF   é@   é5   éi   é]   é8   éA   é6   é1   éB   én   é3   é+   é,   é?   éQ   éM   éb   éK   él   r   r   r   r   r   é|   éÊ   éË   éÌ   éÍ   é(   é:   éÎ   éÏ   éÐ   éÑ   éÒ   éÓ   éÔ   éÕ   éÖ   é×   éS   é4   é/   é.   éH   é    é^   éØ   éq   éÙ   ém   éÚ   éÛ   éÜ   éÝ   é"   ét   éÞ   év   éd   éß   éà   éu   éw   éh   é}   éá   éâ   éW   éc   éã   éj   éz   é{   éä   é7   éå   éæ   ée   éç   éè   éx   éé   é0   é'   é9   éê   é   é;   é)   éX   é!   é%   é$   é   é   é#   éë   é>   é   éì   é~   éí   éî   é&   é-   éï   éð   éñ   éò   éó   é   éô   éõ   éö   é÷   éø   éù   éú   é	   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é
   é   éû   r   é   é`   r   Cäôõ|ï?HEBREW_LANG_MODELWIN1255_CHAR_TO_ORDER_MAPchardet.langhebrewmodel¨   é    é   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   ThaiLangModelTIS620CharToOrderMapC:\code\venv\callllama\lib\site-packages\chardet\langthaimodel.py¹¯@ô¤í?chardet.langthaimodelTIS-620¨   éÿ   r   r   r   r   r   r   r   r   r   éþ   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éý   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   éü   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é¶   éj   ék   éd   é·   é¸   é¹   ée   é^   éº   é»   él   ém   én   éo   é¼   é½   é¾   éY   é_   ép   éq   é¿   éÀ   éÁ   éÂ   r   r   r   r   r   r   é@   éH   éI   ér   éJ   és   ét   éf   éQ   éÉ   éu   éZ   ég   éN   éR   é`   éÊ   é[   éO   éT   éh   éi   éa   éb   é\   éË   r   r   r   r   r   éÑ   éÒ   éÓ   éÔ   éÕ   éX   éÖ   é×   éØ   éÙ   éÚ   éÛ   éÜ   év   éÝ   éÞ   éß   éà   éc   éU   éS   éá   éâ   éã   éä   éå   éæ   éç   éè   éé   éê   éë   éì   é   é   éí   é   éî   éK   é   é   é4   é"   é3   éw   é/   é:   é9   é1   é5   é7   é+   é   é   é,   é   é0   é   é   é   é'   é>   é   é6   é-   é	   é   é   é=   é   éï   é   é*   é.   é   é   éL   é   éB   é?   é   é
   é   é$   é   é   é(   é   é    é#   éV   éð   éñ   éò   éó   éô   é   é   é)   é   é!   éõ   é2   é%   é   é   éC   éM   é&   é]   éö   é÷   éD   é8   é;   éA   éE   é<   éF   éP   éG   éW   éø   éù   éú   éû   r   r   ¨   é    é   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   ¨   éÿ   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   é%   é/   é'   é   é4   é$   é-   é5   é<   é   é1   é   é.   é*   é0   éE   é,   é#   é   é3   é&   é>   éA   é+   é8   r   r   r   r   r   r   é   é   é   é   é   é   é   é   é   é   é
   é   é   é   é   é   é@   é   é   é	   é   é    é9   é:   é   é   r   r   r   r   r   é´   é³   é²   é±   é°   é¯   é®   é­   é¬   é«   éª   é©   é¨   é§   é¦   é¥   é¤   é£   é¢   é¡   é    é   ée   é   é   é   é   é   é   é   é   éj   é   é   é   é   é   é   é   éd   é   é   é   é   é   é   é   é   é^   éP   é]   é   éi   é   é   é?   é   é   é   é   é   é   é~   é}   é|   éh   éI   éc   éO   éU   é{   é6   éz   éb   é\   éy   éx   é[   ég   éw   éD   év   éu   éa   ét   és   é2   éZ   ér   éq   ép   éo   é7   é)   é(   éV   éY   éF   é;   éN   éG   éR   éX   é!   éM   éB   éT   éS   én   éK   é=   é`   é   éC   ém   éJ   éW   éf   é"   é_   éQ   él   éL   éH   é   é   é   ék   C:\code\venv\callllama\lib\site-packages\chardet\langturkishmodel.pyTurkishLatin5_TurkishCharToOrderMapTurkishLangModel¨   é   é   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é    r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   chardet.langturkishmodelÍX4ï?ISO-8859-9Latin1Prober.languageC:\code\venv\callllama\lib\site-packages\chardet\latin1prober.pyLatin1Prober.reset<module chardet.latin1prober>ASVLatin1_CharToClassLatin1Prober.__init___last_char_class©@é    r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   \Âõ(\ç?Latin1Prober.charset_nameCLASS_NUMLatin1Prober.feedASO      4@ACOACVFREQ_CAT_NUMOTHLatin1ClassModelLatin1Prober.get_confidence_freq_counterUDFC:\code\venv\callllama\lib\site-packages\chardet\mbcharsetprober.pyMultiByteCharSetProber.language
    MultiByteCharSetProber
    MultiByteCharSetProber.resetMultiByteCharSetProber.get_confidenceMultiByteCharSetProber.feedMultiByteCharSetProber.__init__MultiByteCharSetProber.charset_name<module chardet.mbcharsetprober>MBCSGroupProber.__init__<module chardet.mbcsgroupprober>sjisproberC:\code\venv\callllama\lib\site-packages\chardet\mbcsgroupprober.pyutf8proberGB2312_STUTF8_STUCS2LE_CLSx-euc-twUCS2BE_SM_MODELUTF-16BEEUCTW_CLSEUCKR_CLSUCS2BE_CHAR_LEN_TABLE¨   é   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é    r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   ¨   é   r   r   r   r   r   r   r   r   r   r   r   r   r   é    r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   ¨   é   r   r   r   r   r   r   r   r   r   r   r   r   r   é    r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   C:\code\venv\callllama\lib\site-packages\chardet\mbcssm.pyBIG5_CHAR_LEN_TABLEShift_JIS¨   é   r   r   r   r   r   r   r   r   r   r   r   r   r   é    r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   é   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   UTF8_CLSSJIS_STSJIS_CLS¨   é    r   r   r   r   r   r   r   r   r   é   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   é   CP949_CHAR_LEN_TABLECP949_ST¨   é   r   r   r   r   r   r   r   r   r   r   r   r   r   é    r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   GB2312_CHAR_LEN_TABLE<module chardet.mbcssm>CP949_CLSUTF8_CHAR_LEN_TABLEUCS2LE_STSJIS_CHAR_LEN_TABLEEUCKR_CHAR_LEN_TABLEEUCTW_STUCS2BE_CLS¨   é   r   r   r   r   r   r   r   r   r   r   r   r   r   é    r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   é   r   r   r   r   r   é   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   BIG5_CLSUCS2LE_CHAR_LEN_TABLEBIG5_STUTF-16LEEUCJP_STUCS2BE_STEUCTW_CHAR_LEN_TABLEEUCJP_CLS¨   é   r   r   r   r   r   r   r   r   r   r   r   r   r   é    r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   é   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   é   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   é	   r	   r	   é
   é   r   r   r   r   r   r   é   é   r   r   é   é   r   r   EUCJP_CHAR_LEN_TABLE¨   é   r   r   r   r   r   r   r   r   r   r   r   r   r   é    r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é	   é   r	   é   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r	   r   UCS2LE_SM_MODELGB2312_CLSEUCKR_ST_last_order_seq_countersSingleByteCharSetProber.get_confidenceSingleByteCharSetProber.languageSingleByteCharSetProber.__init__SingleByteCharSetProber.charset_name_name_proberNEGATIVE_SHORTCUT_THRESHOLD_reversedchardet.sbcharsetprober_total_seqsPOSITIVE_SHORTCUT_THRESHOLDSingleByteCharSetProber.reset%s confidence = %s, we have a winner<module chardet.sbcharsetprober>C:\code\venv\callllama\lib\site-packages\chardet\sbcharsetprober.py%s confidence = %s, below negative shortcut threshhold %sSAMPLE_SIZESB_ENOUGH_REL_THRESHOLDSingleByteCharSetProber.feedC:\code\venv\callllama\lib\site-packages\chardet\sbcsgroupprober.pyhebrew_proberlogical_hebrew_probervisual_hebrew_proberchardet.sbcsgroupprober<module chardet.sbcsgroupprober>SBCSGroupProber.__init__SJISProber.resetSJISProber.charset_namechardet.sjisproberSJISProber.__init__SJISProber.languageSJISProber.get_confidenceSJISProber.feed<module chardet.sjisprober>C:\code\venv\callllama\lib\site-packages\chardet\sjisprober.pyWindows-1255Windows-1250iso-8859-5Windows-1251iso-8859-6Windows-1256iso-8859-7Windows-1253iso-8859-9Windows-1254iso-8859-13Windows-1257<module chardet.universaldetector>_input_stategetEffectiveLevel
        Stop analyzing the current document and come up with a final
        prediction.

        :returns:  The ``result`` attribute, a ``dict`` with the keys
                   `encoding`, `confidence`, and `language`.
        (|~{)max_proberUTF-8-SIGWIN_BYTE_DETECTORX-ISO-10646-UCS-4-2143no probers hit minimum threshold  ÿþUniversalDetector.__init__X-ISO-10646-UCS-4-3412MINIMUM_THRESHOLDBOM_LEUniversalDetector.resetprober_confidencemax_prober_confidencelower_charset_namegroup_proberUniversalDetector.feed
Module containing the UniversalDetector detector class, which is the primary
class a user of ``chardet`` should use.

:author: Mark Pilgrim (initial port to Python)
:author: Shy Shalom (original C code)
:author: Dan Blanchard (major refactoring for 3.0)
:author: Ian Cordasco
BOM_BEno data received!_got_data_has_win_bytesÉ?HIGH_BYTE_DETECTORC:\code\venv\callllama\lib\site-packages\chardet\universaldetector.pyUTF-32_charset_probersþÿ  ESC_DETECTOR_esc_charset_prober
        Takes a chunk of a document and feeds it through all of the relevant
        charset probers.

        After calling ``feed``, you can check the value of the ``done``
        attribute to see if you need to continue feeding the
        ``UniversalDetector`` more data, or if it has made a prediction
        (in the ``result`` attribute).

        .. note::
           You should always call ``close`` when you're done feeding in your
           document if ``done`` is not already ``True``.
        ISO_WIN_MAP
        Reset the UniversalDetector and all of its probers back to their
        initial states.  This is called by ``__init__``, so you only need to
        call this directly in between analyses of different documents.
        
    The ``UniversalDetector`` class underlies the ``chardet.detect`` function
    and coordinates all of the different charset probers.

    To get a ``dict`` containing an encoding and its confidence, you can simply
    run:

    .. code::

            u = UniversalDetector()
            u.feed(some_bytes)
            u.close()
            detected = u.result

    UniversalDetector.closeunlikeUTF8Prober.charset_name      à?UTF8Prober.resetUTF8Prober.__init__<module chardet.utf8prober>UTF8Prober.get_confidenceUTF8Prober.languageC:\code\venv\callllama\lib\site-packages\chardet\utf8prober.pyUTF8Prober.feed_num_mb_charsONE_CHAR_PROBchardet.versionC:\code\venv\callllama\lib\site-packages\chardet\version.py<module chardet.version>3.0.4
This module exists only to simplify retrieving the version number of chardet
from within setup.py and from chardet subpackages.

:author: Dan Blanchard (dan.blanchard@gmail.com)
<module dateutil>_versionC:\code\venv\callllama\lib\site-packages\dateutilC:\code\venv\callllama\lib\site-packages\dateutil\__init__.pyweekday.__eq__%s(%+d)weekday.__hash__
Common code used in multiple modules.
C:\code\venv\callllama\lib\site-packages\dateutil\_common.pyweekday.__repr__weekday.__call__weekday.__ne__<module dateutil._common>C:\code\venv\callllama\lib\site-packages\dateutil\_version.pydateutil._version2.7.3<module dateutil.easter>
This module offers a generic easter computing method for any given year, using
Western, Orthodox or Julian algorithms.
invalid methodEASTER_JULIANEASTER_ORTHODOXEASTER_WESTERNC:\code\venv\callllama\lib\site-packages\dateutil\easter.py
    This method was ported from the work done by GM Arts,
    on top of the algorithm by Claus Tondering, which was
    based in part on the algorithm of Ouding (1940), as
    quoted in "Explanatory Supplement to the Astronomical
    Almanac", P.  Kenneth Seidelmann, editor.

    This algorithm implements three different easter
    calculation methods:

    1 - Original calculation in Julian calendar, valid in
        dates after 326 AD
    2 - Original method, with date converted to Gregorian
        calendar, valid in years 1583 to 4099
    3 - Revised method, in Gregorian calendar, valid in
        years 1583 to 4099 as well

    These methods are represented by the constants:

    * ``EASTER_JULIAN   = 1``
    * ``EASTER_ORTHODOX = 2``
    * ``EASTER_WESTERN  = 3``

    The default method is method 3.

    More about the algorithm may be found at:

    `GM Arts: Easter Algorithms <http://www.gmarts.org/index.php?go=415>`_

    and

    `The Calendar FAQ: Easter <https://www.tondering.dk/claus/cal/easter.php>`_

    __deprecated_private_funcdeprecated_func__deprecate_private_class.<locals>.private_class.__init__<module dateutil.parser>__deprecated_private_func.<locals>.deprecated_funcC:\code\venv\callllama\lib\site-packages\dateutil\parserC:\code\venv\callllama\lib\site-packages\dateutil\parser\__init__.py{name} is a private class and may break without warning, it will be moved and or renamed in future versions.{name} is a private function and may break without warning, it will be moved and or renamed in future versions.
        Converts two-digit years to year within [-50, 49]
        range of self._year (current local time)
        naiveskipped_idxsskipped_tokensSaturdayparserinfo.convertyearparserinfo.weekdayparser._could_be_tzname.<locals>.<genexpr>tokenstackjumphms_idxnew_idxampmlen_lMondayWedWednesdaytzname {tzname} identified but not understood.  Pass `tzinfos` argument in order to correctly return a timezone-aware datetime.  In a future version, this will raise an exception.No hour specified with AM or PM flag. Whether the next character is part of a number _ymdtzdata_ymd.append_tzparser.parseparserinfo.__init__parser.__init__century_specified_resultbase._repr
        Parse the date/time string into a :class:`datetime.datetime` object.

        :param timestr:
            Any date/time string using the supported formats.

        :param default:
            The default datetime object, if this is a datetime object and not
            ``None``, elements specified in ``timestr`` replace elements in the
            default object.

        :param ignoretz:
            If set ``True``, time zones in parsed strings are ignored and a
            naive :class:`datetime.datetime` object is returned.

        :param tzinfos:
            Additional time zone names / aliases which may be present in the
            string. This argument maps time zone names (and optionally offsets
            from those time zones) to time zones. This parameter can be a
            dictionary with timezone aliases mapping time zone names to time
            zones or a function taking two parameters (``tzname`` and
            ``tzoffset``) and returning a time zone.

            The timezones to which the names are mapped can be an integer
            offset from UTC in seconds or a :class:`tzinfo` object.

            .. doctest::
               :options: +NORMALIZE_WHITESPACE

                >>> from dateutil.parser import parse
                >>> from dateutil.tz import gettz
                >>> tzinfos = {"BRST": -7200, "CST": gettz("America/Chicago")}
                >>> parse("2012-01-19 17:21:00 BRST", tzinfos=tzinfos)
                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))
                >>> parse("2012-01-19 17:21:00 CST", tzinfos=tzinfos)
                datetime.datetime(2012, 1, 19, 17, 21,
                                  tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))

            This parameter is ignored if ``ignoretz`` is set.

        :param \*\*kwargs:
            Keyword arguments as passed to ``_parse()``.

        :return:
            Returns a :class:`datetime.datetime` object or, if the
            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the
            first element being a :class:`datetime.datetime` object, the second
            a tuple containing the fuzzy tokens.

        :raises ValueError:
            Raised for invalid or unknown string format, if the provided
            :class:`tzinfo` is not in a valid format, or if an invalid date
            would be created.

        :raises TypeError:
            Raised for non-string or character stream input.

        :raises OverflowError:
            Raised if the parsed date exceeds the largest valid C integer on
            your system.
        val_is_ampm_parse_numeric_tokendecimal_value
        This function breaks the time string into lexical units (tokens), which
        can be parsed by the parser. Lexical units are demarcated by changes in
        the character set, so any continuous string of letters is considered
        one unit, any continuous string of numbers is considered one unit.

        The main complication arises from the fact that dots ('.') can be used
        both as separators (e.g. "Sep.20.2009") or decimal points (e.g.
        "4:30:21.447"). As such, it is necessary to read the full context of
        any dot-separated strings before breaking it into tokens; as such, this
        function maintains a "token stack", for when the ambiguous context
        demands that multiple tokens be parsed at once.
        Invalid hour specified for 12-hour clock._assign_tznameallow_jumpparser._build_tzinfoThuThursday_ymd.resolve_ymdTZOFFSETis in a non-standard dateutil-specific format, which get_tokencmonthparserinfo.hmsdifferencenextcharÛ   )zJanzJanuary)zFebzFebruary)zMarzMarch)zAprzApril)zMayzMay)zJunzJune)zJulzJuly)zAugzAugust)zSepzSeptz	September)zOctzOctober)zNovzNovember)zDeczDecember_timelex.nextparser._parsemsvalue_reprparserinfo.tzoffsetstridsPERTAINString does not contain a date:yearfirstdayfirstlen_ymdmstridxutczone_parse_hmsinstreamparser._assign_tznamelen_liparserinfo.utczone_tzparser._resultDay is already set([.,])_split_decimal_resolve_from_stridxs
        >>> tokens = ["foo", " ", "bar", " ", "19June2000", "baz"]
        >>> skipped_idxs = [0, 1, 2, 5]
        >>> _recombine_skipped(tokens, skipped_idxs)
        ["foo bar", "baz"]
        has_monthparser._build_tzaware_timelex.__next__eoflst_find_hms_idxhas_dayDecimalAMPM_resultbase.__init___ampm_validcyearisspaceRaised when the parser finds a timezone it cannot parse into a tzinfo_to_decimalnew_dt_resultbase.__len___ymd.has_dayparserinfo.month_ymd.__init__Unknown numeric tokentm_year_timelex.get_tokenMore than three YMD valuesTueTuesdayFridaySunSundayHMS_ymd._resolve_from_stridxsparserinfo.ampmparser._adjust_ampmcday_utczoneparser._parse_numeric_tokenis now deprecated; support for parsing this format unused_idxsdateutil.parser._parserC:\code\venv\callllama\lib\site-packages\dateutil\parser\_parser.pyparserinfo.validateparser._assign_hms
        Try to resolve the identities of year/month/day elements using
        ystridx, mstridx, and dstridx, if enough of these are specified.
        Year is already setoffattr_tzparser._result._attrisword_pertainseenlettersdct_weekdaysparserinfo.jumphas_year<module dateutil.parser._parser>
    Class which handles what inputs are accepted. Subclass this to customize
    the language and acceptable values for each parameter.

    :param dayfirst:
        Whether to interpret the first value in an ambiguous 3-integer date
        (e.g. 01/05/09) as the day (``True``) or month (``False``). If
        ``yearfirst`` is set to ``True``, this distinguishes between YDM
        and YMD. Default is ``False``.

    :param yearfirst:
        Whether to interpret the first value in an ambiguous 3-integer date
        (e.g. 01/05/09) as the year. If ``True``, the first number is taken
        to be the year, otherwise the last number is taken to be the year.
        Default is ``False``.
    
        Private method which performs the heavy lifting of parsing, called from
        ``parse()``, which passes on its ``kwargs`` to this function.

        :param timestr:
            The string to parse.

        :param dayfirst:
            Whether to interpret the first value in an ambiguous 3-integer date
            (e.g. 01/05/09) as the day (``True``) or month (``False``). If
            ``yearfirst`` is set to ``True``, this distinguishes between YDM
            and YMD. If set to ``None``, this value is retrieved from the
            current :class:`parserinfo` object (which itself defaults to
            ``False``).

        :param yearfirst:
            Whether to interpret the first value in an ambiguous 3-integer date
            (e.g. 01/05/09) as the year. If ``True``, the first number is taken
            to be the year, otherwise the last number is taken to be the year.
            If this is set to ``None``, the value is retrieved from the current
            :class:`parserinfo` object (which itself defaults to ``False``).

        :param fuzzy:
            Whether to allow fuzzy parsing, allowing for string like "Today is
            January 1, 2047 at 8:21:00AM".

        :param fuzzy_with_tokens:
            If ``True``, ``fuzzy`` is automatically set to True, and the parser
            will return a tuple where the first element is the parsed
            :class:`datetime.datetime` datetimestamp and the second element is
            a tuple containing the portions of the string which were ignored:

            .. doctest::

                >>> from dateutil.parser import parse
                >>> parse("Today is January 1, 2047 at 8:21:00AM", fuzzy_with_tokens=True)
                (datetime.datetime(2047, 1, 1, 8, 21), (u'Today is ', u' ', u'at '))

        Parsed time zone "%s"ljust_timelex.__init__isnumCould not convert %s to decimalparser._to_decimalwill be removed in future versions. It is recommended  Whether or not the next character is part of a word WEEKDAYS©ÚselfÚtimestrÚdayfirstÚ	yearfirstÚfuzzyÚfuzzy_with_tokensÚinfoÚresÚlÚskipped_idxsÚymdÚlen_lÚiÚ
value_reprÚvalueÚsepÚyearÚval_is_ampmÚsignalÚlen_liÚhour_offsetÚ
min_offsetÚmonthÚdayÚskipped_tokens
This module offers a generic date/time string parser which is able to parse
most known formats to represent a date and/or time.

This module attempts to be forgiving with regards to unlikely input formats,
returning a datetime object even for dates which are ambiguous. If an element
of a date/time stamp is omitted, the following rules are applied:

- If AM or PM is left unspecified, a 24-hour clock is assumed, however, an hour
  on a 12-hour clock (``0 <= hour <= 12``) *must* be specified if AM or PM is
  specified.
- If a time zone is omitted, a timezone-naive datetime is returned.

If any other elements are missing, they are taken from the
:class:`datetime.datetime` object passed to the parameter ``default``. If this
results in a day number exceeding the valid number of days per month, the
value falls back to the end of the month.

Additional resources about date/time string formats can be found below:

- `A summary of the international standard date and time notation
  <http://www.cl.cam.ac.uk/~mgk25/iso-time.html>`_
- `W3C Date and Time Formats <http://www.w3.org/TR/NOTE-datetime>`_
- `Time Formats (Planetary Rings Node) <https://pds-rings.seti.org:443/tools/time_formats.html>`_
- `CPAN ParseDate module
  <http://search.cpan.org/~muir/Time-modules-2013.0912/lib/Time/ParseDate.pm>`_
- `Java SimpleDateFormat Class
  <https://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html>`_
_ymd.has_year_build_naiveUnknown string format:

    Parse a string in one of the supported formats, using the
    ``parserinfo`` parameters.

    :param timestr:
        A string containing a date/time stamp.

    :param parserinfo:
        A :class:`parserinfo` object containing parameters for the parser.
        If ``None``, the default arguments to the :class:`parserinfo`
        constructor are used.

    The ``**kwargs`` parameter takes the following keyword arguments:

    :param default:
        The default datetime object, if this is a datetime object and not
        ``None``, elements specified in ``timestr`` replace elements in the
        default object.

    :param ignoretz:
        If set ``True``, time zones in parsed strings are ignored and a naive
        :class:`datetime` object is returned.

    :param tzinfos:
        Additional time zone names / aliases which may be present in the
        string. This argument maps time zone names (and optionally offsets
        from those time zones) to time zones. This parameter can be a
        dictionary with timezone aliases mapping time zone names to time
        zones or a function taking two parameters (``tzname`` and
        ``tzoffset``) and returning a time zone.

        The timezones to which the names are mapped can be an integer
        offset from UTC in seconds or a :class:`tzinfo` object.

        .. doctest::
           :options: +NORMALIZE_WHITESPACE

            >>> from dateutil.parser import parse
            >>> from dateutil.tz import gettz
            >>> tzinfos = {"BRST": -7200, "CST": gettz("America/Chicago")}
            >>> parse("2012-01-19 17:21:00 BRST", tzinfos=tzinfos)
            datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))
            >>> parse("2012-01-19 17:21:00 CST", tzinfos=tzinfos)
            datetime.datetime(2012, 1, 19, 17, 21,
                              tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))

        This parameter is ignored if ``ignoretz`` is set.

    :param dayfirst:
        Whether to interpret the first value in an ambiguous 3-integer date
        (e.g. 01/05/09) as the day (``True``) or month (``False``). If
        ``yearfirst`` is set to ``True``, this distinguishes between YDM and
        YMD. If set to ``None``, this value is retrieved from the current
        :class:`parserinfo` object (which itself defaults to ``False``).

    :param yearfirst:
        Whether to interpret the first value in an ambiguous 3-integer date
        (e.g. 01/05/09) as the year. If ``True``, the first number is taken to
        be the year, otherwise the last number is taken to be the year. If
        this is set to ``None``, the value is retrieved from the current
        :class:`parserinfo` object (which itself defaults to ``False``).

    :param fuzzy:
        Whether to allow fuzzy parsing, allowing for string like "Today is
        January 1, 2047 at 8:21:00AM".

    :param fuzzy_with_tokens:
        If ``True``, ``fuzzy`` is automatically set to True, and the parser
        will return a tuple where the first element is the parsed
        :class:`datetime.datetime` datetimestamp and the second element is
        a tuple containing the portions of the string which were ignored:

        .. doctest::

            >>> from dateutil.parser import parse
            >>> parse("Today is January 1, 2047 at 8:21:00AM", fuzzy_with_tokens=True)
            (datetime.datetime(2047, 1, 1, 8, 21), (u'Today is ', u' ', u'at '))

    :return:
        Returns a :class:`datetime.datetime` object or, if the
        ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the
        first element being a :class:`datetime.datetime` object, the second
        a tuple containing the fuzzy tokens.

    :raises ValueError:
        Raised for invalid or unknown string format, if the provided
        :class:`tzinfo` is not in a valid format, or if an invalid date
        would be created.

    :raises OverflowError:
        Raised if the parsed date exceeds the largest valid C integer on
        your system.
    _resultbase.__len__.<locals>.<genexpr>_timelex.isnum_tzparser._result.__init__Converted decimal value is infinite or NaNparser._ampm_validTZ variable format.parser._build_naive_timelex.isword0123456789+-sec_remainder_timelex.isspaceis_finite
        For fuzzy parsing, 'a' or 'am' (both valid English words)
        may erroneously trigger the AM/PM flag. Deal with that
        here.
        parserinfo.pertainUTCZONEMONTHS_resultbase.__repr___ymd.has_monthitypeparser._parse_min_secJUMP0123456789:,-+_monthscould_be_dayparser._find_hms_idxMonth is already set_ymd.could_be_day_timelex.split_timelex.__iter__charstack Whether the next character is whitespace Parser must be a string or character stream, not {itype}_tzparser._result.__repr__parser._recombine_skippedParse a I[.F] seconds value into (seconds, microseconds).([,:.]|[a-zA-Z]+|[0-9]+)parserinfo._convertthat you switch to a standard format like the GNU parser._parse_hms
        Parse the time portion of an ISO string.

        :param timestr:
            The time portion of an ISO string, without a separator

        :return:
            Returns a :class:`datetime.time` object
        ordinal_day_calculate_weekdateInvalid common daydt_strhas_sepweeknodaynobase_datecomponents[-+Z]+isocalendarString contains unknown ISO componentsInvalid minutes in time zone offset
        Parse the date portion of an ISO string.

        :param datestr:
            The string portion of an ISO string, without a separator

        :return:
            Returns a :class:`datetime.date` object
        DEFAULT_ISOPARSER<module dateutil.parser.isoparser>isoparser.__init__
This module offers a parser for ISO-8601 strings

It is intended to support all valid date, time and datetime formats per the
ISO-8601 specification.

..versionadded:: 2.7.0
Invalid week: {}week_1_MICROSECOND_END_REGEXisoparser._parse_isodate_uncommonInconsistent use of dash separatorInvalid hours in time zone offset_MICRO_SEPjan_4week_offsetisoparser._parse_isodate_commonstr_inISO time too shortInvalid ordinal day
        Calculate the day of corresponding to the ISO year-week-day calendar.

        This function is effectively the inverse of
        :func:`datetime.date.isocalendar`.

        :param year:
            The year in the ISO calendar

        :param week:
            The week in the ISO calendar - range is [1, 53]

        :param day:
            The day in the ISO calendar - range is [1 (MON), 7 (SUN)]

        :return:
            Returns a :class:`datetime.date`
        Unused components in ISO stringTime zone offset requires signISO-8601 strings should contain only ASCII characterscomponents: {}_TIME_SEPisoparser.parse_tzstrus_strInvalid separator in ISO stringisoparser._parse_isotime.<locals>.<genexpr>zero_as_utc_takes_ascii.<locals>.func.<locals>.<lambda>Invalid common monthisoparser._parse_tzstr
        :param sep:
            A single character that separates date and time portions. If
            ``None``, the parser will accept any single character.
            For strict ISO-8601 adherence, pass ``'T'``.
        _DATE_SEPISO string too shortisoparser._calculate_weekdateInvalid ISO formatHour may only be 24 at 24:00:00.000
        Parse a valid ISO time zone string.

        See :func:`isoparser.isoparse` for details on supported formats.

        :param tzstr:
            A string representing an ISO time zone offset

        :param zero_as_utc:
            Whether to return :class:`dateutil.tz.tzutc` for zero-offset zones

        :return:
            Returns :class:`dateutil.tz.tzoffset` for offsets and
            :class:`dateutil.tz.tzutc` for ``Z`` and (if ``zero_as_utc`` is
            specified) offsets equivalent to UTC.
        Invalid weekday: {}C:\code\venv\callllama\lib\site-packages\dateutil\parser\isoparser.py {} for year {}isoparser.parse_isotimeisoparser.parse_isodateSeparator must be a single, non-numeric ASCII characterTime zone offset must be 1, 3, 5 or 6 characters
        Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.

        An ISO-8601 datetime string consists of a date portion, followed
        optionally by a time portion - the date and time portions are separated
        by a single character separator, which is ``T`` in the official
        standard. Incomplete date formats (such as ``YYYY-MM``) may *not* be
        combined with a time portion.

        Supported date formats are:

        Common:

        - ``YYYY``
        - ``YYYY-MM`` or ``YYYYMM``
        - ``YYYY-MM-DD`` or ``YYYYMMDD``

        Uncommon:

        - ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)
        - ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day

        The ISO week and day numbering follows the same logic as
        :func:`datetime.date.isocalendar`.

        Supported time formats are:

        - ``hh``
        - ``hh:mm`` or ``hhmm``
        - ``hh:mm:ss`` or ``hhmmss``
        - ``hh:mm:ss.sss`` or ``hh:mm:ss.ssssss`` (3-6 sub-second digits)

        Midnight is a special case for `hh`, as the standard supports both
        00:00 and 24:00 as a representation.

        .. caution::

            Support for fractional components other than seconds is part of the
            ISO-8601 standard, but is not currently implemented in this parser.

        Supported time zone offset formats are:

        - `Z` (UTC)
        - `Â±HH:MM`
        - `Â±HHMM`
        - `Â±HH`

        Offsets will be represented as :class:`dateutil.tz.tzoffset` objects,
        with the exception of UTC, which will be represented as
        :class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such
        as `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.

        :param dt_str:
            A string or stream containing only an ISO-8601 datetime string

        :return:
            Returns a :class:`datetime.datetime` representing the string.
            Unspecified components default to their lowest value.

        .. warning::

            As of version 2.7.0, the strictness of the parser should not be
            considered a stable part of the contract. Any valid ISO-8601 string
            that parses correctly with the default settings will continue to
            parse correctly in future versions, but invalid strings that
            currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not
            guaranteed to continue failing in future versions if they encode
            a valid date.

        .. versionadded:: 2.7.0
        relativedelta._set_monthsseconds_frelativedelta.__sub__relativedelta.__abs__{classname}({attrs})
    The relativedelta type is based on the specification of the excellent
    work done by M.-A. Lemburg in his
    `mx.DateTime <https://www.egenix.com/products/python/mxBase/mxDateTime/>`_ extension.
    However, notice that this type does *NOT* implement the same algorithm as
    his work. Do *NOT* expect it to behave like mx.DateTime's counterpart.

    There are two different ways to build a relativedelta instance. The
    first one is passing it two date/datetime classes::

        relativedelta(datetime1, datetime2)

    The second one is passing it any number of the following keyword arguments::

        relativedelta(arg1=x,arg2=y,arg3=z...)

        year, month, day, hour, minute, second, microsecond:
            Absolute information (argument is singular); adding or subtracting a
            relativedelta with absolute information does not perform an arithmetic
            operation, but rather REPLACES the corresponding value in the
            original datetime with the value(s) in relativedelta.

        years, months, weeks, days, hours, minutes, seconds, microseconds:
            Relative information, may be negative (argument is plural); adding
            or subtracting a relativedelta with relative information performs
            the corresponding aritmetic operation on the original datetime value
            with the information in the relativedelta.

        weekday: 
            One of the weekday instances (MO, TU, etc). These
            instances may receive a parameter N, specifying the Nth
            weekday, which could be positive or negative (like MO(+1)
            or MO(-2). Not specifying it is the same as specifying
            +1. You can also use an integer, where 0=MO. Notice that
            if the calculated date is already Monday, for example,
            using MO(1) or MO(-1) won't change the day.

        leapdays:
            Will add given days to the date found, if year is a leap
            year, and the date found is post 28 of february.

        yearday, nlyearday:
            Set the yearday or the non-leap year day (jump leap days).
            These are converted to day/month/leapdays information.

    There are relative and absolute forms of the keyword
    arguments. The plural is relative, and the singular is
    absolute. For each argument in the order below, the absolute form
    is applied first (by setting each attribute to that value) and
    then the relative form (by adding the value to the attribute).

    The order of attributes considered when this relativedelta is
    added to a datetime is:

    1. Year
    2. Month
    3. Day
    4. Hours
    5. Minutes
    6. Seconds
    7. Microseconds

    Finally, weekday is applied, using the rule described above.

    For example

    >>> dt = datetime(2018, 4, 9, 13, 37, 0)
    >>> delta = relativedelta(hours=25, day=1, weekday=MO(1))
    datetime(2018, 4, 2, 14, 37, 0)

    First, the day is set to 1 (the first of the month), then 25 hours
    are added, to get to the 2nd day and 14th hour, finally the
    weekday is applied, but since the 2nd is already a Monday there is
    no effect.

    relativedelta.__hash__relativedelta.__init__.<locals>.<genexpr>{attr}={value:+g}copysignrelativedelta.__div____mul__
        Return a version of this object represented entirely using integer
        values for the relative attributes.

        >>> relativedelta(days=1.5, hours=2).normalized()
        relativedelta(days=1, hours=14)

        :return:
            Returns a :class:`dateutil.relativedelta.relativedelta` object.
        reciprocal_fix__radd____rmul__relativedelta.__rsub__<module dateutil.relativedelta>hours_fminutes_f©ÚselfÚdt1Údt2ÚyearsÚmonthsÚdaysÚleapdaysÚweeksÚhoursÚminutesÚsecondsÚmicrosecondsÚyearÚmonthÚdayÚweekdayÚyeardayÚ	nlyeardayÚhourÚminuteÚsecondÚmicrosecondÚdtmÚcompareÚ	incrementÚdeltaÚydayÚydayidxÚidxÚydays__neg__relativedelta.__add__relativedelta.normalized_signrelativedelta.__eq___has_time    .ANon-integer years and months are ambiguous and not currently supported.relativedelta.__repr____truediv__      @jumpdays©NNé    r   r   r   r   r   r   r   r   NNNNNNNNNNinvalid year day (%d)relativedelta.__bool__relativedelta._fixNon-integer value passed as absolute information. This is not a well-defined condition and will raise errors in future versions.relativedelta.__radd__relativedelta.__mul__{attr}={value}C:\code\venv\callllama\lib\site-packages\dateutil\relativedelta.pyrelativedelta.__neg__relativedelta only diffs datetime/daterelativedelta.weeksrelativedelta.__ne____mod_distancebysecondrruleset.rdate_bysecondbyxxxcseti_gcdbymonthday_bysetposÛ   é
   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   unsupported RDATE parm: exdatedateutil.rruleYEARLYMONTHLYWEEKLYDAILYHOURLYMINUTELYSECONDLYddaysetMDAY366MASKtzids must be a callable, mapping, or None, _rdate
    That's the base of the rrule operation. It accepts all the keywords
    defined in the RFC as its constructor parameters (except byday,
    which was renamed to byweekday) and more. The constructor prototype is::

            rrule(freq)

    Where freq must be one of YEARLY, MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY,
    or SECONDLY.

    .. note::
        Per RFC section 3.3.10, recurrence instances falling on invalid dates
        and times are ignored rather than coerced:

            Recurrence rules may generate recurrence instances with an invalid
            date (e.g., February 30) or nonexistent local time (e.g., 1:30 AM
            on a day where the local time is moved forward by an hour at 1:00
            AM).  Such recurrence instances MUST be ignored and MUST NOT be
            counted as part of the recurrence set.

        This can lead to possibly surprising behavior when, for example, the
        start date occurs at the end of the month:

        >>> from dateutil.rrule import rrule, MONTHLY
        >>> from datetime import datetime
        >>> start_date = datetime(2014, 12, 31)
        >>> list(rrule(freq=MONTHLY, count=4, dtstart=start_date))
        ... # doctest: +NORMALIZE_WHITESPACE
        [datetime.datetime(2014, 12, 31, 0, 0),
         datetime.datetime(2015, 1, 31, 0, 0),
         datetime.datetime(2015, 3, 31, 0, 0),
         datetime.datetime(2015, 5, 31, 0, 0)]

    Additionally, it supports the following keyword arguments:

    :param dtstart:
        The recurrence start. Besides being the base for the recurrence,
        missing parameters in the final recurrence instances will also be
        extracted from this date. If not given, datetime.now() will be used
        instead.
    :param interval:
        The interval between each freq iteration. For example, when using
        YEARLY, an interval of 2 means once every two years, but with HOURLY,
        it means once every two hours. The default interval is 1.
    :param wkst:
        The week start day. Must be one of the MO, TU, WE constants, or an
        integer, specifying the first day of the week. This will affect
        recurrences based on weekly periods. The default week start is got
        from calendar.firstweekday(), and may be modified by
        calendar.setfirstweekday().
    :param count:
        How many occurrences will be generated.

        .. note::
            As of version 2.5.0, the use of the ``until`` keyword together
            with the ``count`` keyword is deprecated per RFC-5545 Sec. 3.3.10.
    :param until:
        If given, this must be a datetime instance, that will specify the
        limit of the recurrence. The last recurrence in the rule is the greatest
        datetime that is less than or equal to the value specified in the
        ``until`` parameter.

        .. note::
            As of version 2.5.0, the use of the ``until`` keyword together
            with the ``count`` keyword is deprecated per RFC-5545 Sec. 3.3.10.
    :param bysetpos:
        If given, it must be either an integer, or a sequence of integers,
        positive or negative. Each given integer will specify an occurrence
        number, corresponding to the nth occurrence of the rule inside the
        frequency period. For example, a bysetpos of -1 if combined with a
        MONTHLY frequency, and a byweekday of (MO, TU, WE, TH, FR), will
        result in the last work day of every month.
    :param bymonth:
        If given, it must be either an integer, or a sequence of integers,
        meaning the months to apply the recurrence to.
    :param bymonthday:
        If given, it must be either an integer, or a sequence of integers,
        meaning the month days to apply the recurrence to.
    :param byyearday:
        If given, it must be either an integer, or a sequence of integers,
        meaning the year days to apply the recurrence to.
    :param byeaster:
        If given, it must be either an integer, or a sequence of integers,
        positive or negative. Each integer will define an offset from the
        Easter Sunday. Passing the offset 0 to byeaster will yield the Easter
        Sunday itself. This is an extension to the RFC specification.
    :param byweekno:
        If given, it must be either an integer, or a sequence of integers,
        meaning the week numbers to apply the recurrence to. Week numbers
        have the meaning described in ISO8601, that is, the first week of
        the year is that containing at least four days of the new year.
    :param byweekday:
        If given, it must be either an integer (0 == MO), a sequence of
        integers, one of the weekday constants (MO, TU, etc), or a sequence
        of these constants. When given, these variables will define the
        weekdays where the recurrence will be applied. It's also possible to
        use an argument n for the weekday instances, which will mean the nth
        occurrence of this weekday in the period. For example, with MONTHLY,
        or with YEARLY and BYMONTH, using FR(+1) in byweekday will specify the
        first friday of the month where the recurrence happens. Notice that in
        the RFC documentation, this is specified as BYDAY, but was renamed to
        avoid the ambiguity of that keyword.
    :param byhour:
        If given, it must be either an integer, or a sequence of integers,
        meaning the hours to apply the recurrence to.
    :param byminute:
        If given, it must be either an integer, or a sequence of integers,
        meaning the minutes to apply the recurrence to.
    :param bysecond:
        If given, it must be either an integer, or a sequence of integers,
        meaning the seconds to apply the recurrence to.
    :param cache:
        If given, it must be a boolean value specifying to enable or disable
        caching of results. If you will use the same rrule instance multiple
        times, enabling caching will improve the performance considerably.
     _handle_BYWEEKNO_wkst_handle_BYMONTHDAY_iterinfo.stimesetC:\code\venv\callllama\lib\site-packages\dateutil\rrule.pyrrkwargs Include the given :py:class:`datetime` instance in the recurrence
            set generation. UNTIL=%Y%m%dT%H%M%S_rrulestr._handle_BYWEEKDAYRRULE UNTIL values must be specified in UTC when DTSTART is timezone-awarebysetpos must be between 1 and 366, or between -366 and -1_untilrrulebase.afterMDAY365MASKlastdt
The rrule module offers a small, complete, and very fast, implementation of
the recurrence rules documented in the
`iCalendar RFC <https://tools.ietf.org/html/rfc5545>`_,
including support for caching of results.
rruleset._genitem.__ne__
    This version of weekday does not allow n = 0.
    rrule.__init__NMDAY366MASKunknown parameter namerrulebase._invalidate_cacherrule.__init__.<locals>.<genexpr>rrule.replace_rrulestr.__call__ The rruleset type allows more complex recurrence setups, mixing
    multiple rules, dates, exclusion rules, and exclusion dates. The type
    constructor takes the following keyword arguments:

    :param cache: If True, caching of results will be enabled, improving
                  performance of multiple queries considerably. _handle_BYYEARDAY{name}={vals}©5ÚselfÚyearÚmonthÚdayÚhourÚminuteÚsecondÚweekdayÚyeardayÚ_ÚfreqÚintervalÚwkstÚuntilÚbymonthÚbyweeknoÚ	byyeardayÚ	byweekdayÚbyeasterÚ
bymonthdayÚbynmonthdayÚbysetposÚbyhourÚbyminuteÚbysecondÚiiÚ	getdaysetÚtimesetÚ
gettimesetÚtotalÚcountÚdaysetÚstartÚendÚfilteredÚiÚposlistÚposÚdayposÚtimeposÚtimeÚdateÚresÚfixdayÚdivÚmodÚndaysÚvalidÚrep_rateÚjÚnhoursÚnminutesÚdaysinmonth_invalidates_cache.<locals>.inner_funcxafterDuplicate value parameter found in DTSTART: yearordinalWDAYMASKM366RANGE_handle_FREQrrule.__str__.<locals>.<genexpr>_rrulestr._handle_int_list_freq_mappartfmt©ÚselfÚyearÚmonthÚrrÚ	firstydayÚwdayÚno1wkstÚ	firstwkstÚwyearlenÚdivÚmodÚnumweeksÚnÚiÚjÚlyearweekdayÚlno1wkstÚlyearlenÚ	lnumweeksÚrangesÚfirstÚlastÚeydayÚoffsetVALUE=DATE_iter_cachedrruleset._genitem.__lt__nmdaymask_rrulestr._handle_UNTILmdaysetTZID=rrulebase.countydaysetweekdaybase_handle_BYEASTER_cache_completeRRULE:FREQNAMES_original_rule
        Generator which yields up to `count` recurrences after the given
        datetime instance, equivalent to `after`.

        :param dt:
            The datetime at which to start generating recurrences.

        :param count:
            The maximum number of recurrences to generate. If `None` (default),
            dates are generated until the recurrence rule is exhausted.

        :param inc:
            If `dt` is an instance of the rule and `inc` is `True`, it is
            included in the output.

        :yields: Yields a sequence of `datetime` objects.
        rruleset.exdatespltheapifygenlist_exdate_handle_BYMINUTEexlist
        Calculates the next value in a sequence where the `FREQ` parameter is
        specified along with a `BYXXX` parameter at the same "level"
        (e.g. `HOURLY` specified with `BYHOUR`).

        :param value:
            The old value of the component.
        :param byxxx:
            The `BYXXX` set, which should have been generated by
            `rrule._construct_byset`, or something else which checks that a
            valid rule is present.
        :param base:
            The largest allowable value for the specified frequency (e.g.
            24 hours, 60 minutes).

        If a valid value is not found after `base` iterations (the maximum
        number before the sequence would start to repeat), this raises a
        :exception:`ValueError`, as no valid values were found.

        This returns a tuple of `divmod(n*interval, base)`, where `n` is the
        smallest number of `interval` repetitions until the next specified
        value in `byxxx` is found.
        slice_byweekno
        If a `BYXXX` sequence is passed to the constructor at the same level as
        `FREQ` (e.g. `FREQ=HOURLY,BYHOUR={2,4,7},INTERVAL=3`), there are some
        specifications which cannot be reached given some starting conditions.

        This occurs whenever the interval is not coprime with the base of a
        given unit and the difference between the starting position and the
        ending position is not coprime with the greatest common denominator
        between the interval and the base. For example, with a FREQ of hourly
        starting at 17:00 and an interval of 4, the only valid values for
        BYHOUR would be {21, 1, 5, 9, 13, 17}, because 4 and 24 are not
        coprime.

        :param start:
            Specifies the starting position.
        :param byxxx:
            An iterable containing the list of allowed values.
        :param base:
            The largest allowable value for the specified frequency (e.g.
            24 hours, 60 minutes).

        This does not preserve the type of the iterable, returning a set, since
        the values should be unique and the order is irrelevant, this will
        speed up later lookups.

        In the event of an empty set, raises a :exception:`ValueError`, as this
        results in an empty rrule.
        wkdaylastyearlastmonthnextyearlenmmaskmrangewdaymaskwnomasknwdaymaskeastermask_rrulestr._parse_rfc_rruleUsing both 'count' and 'until' is inconsistent with RFC 5545 and has been deprecated in dateutil. Future versions will raise an error.rruleset.__init___iterinfo.mdaysetrrulebase.xafter.<locals>.<lambda>dtcrrulebase.__contains___byminuteInvalid rrule byxxx generates an empty set.rlistritemexitem+-0123456789exrule_bymonthdayrrulebase.before_weekday_maprrule.__construct_bysetinvalid '%s': %sunsupported EXRULE parm: 
        Output a string that would generate this RRULE if passed to rrulestr.
        This is mostly compatible with RFC5545, except for the
        dateutil-specific extension BYEASTER.
        _handle_BYDAY_iterinfo.rebuildÛô   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   _byhourrruleset._genitem.__next__heapreplacewday_stringsrrulebase.__init__rruleset._genitem.__init__rruleset.exrule_byeaster_handle_INTERVAL_rrulestr._parse_rfc.<locals>.<lambda>rruleset._genitem.__gt__invalid until date©ÚselfÚfreqÚdtstartÚintervalÚwkstÚcountÚuntilÚbysetposÚbymonthÚ
bymonthdayÚ	byyeardayÚbyeasterÚbyweeknoÚ	byweekdayÚbyhourÚbyminuteÚbysecondÚcacheÚposÚwdayÚorig_byweekdayÚorig_bynweekdayÚhourÚminuteÚsecondÚ	__class__tset_handle_COUNTlockedrruleset._iter©ÚselfÚsÚdtstartÚcacheÚunfoldÚforcesetÚ
compatibleÚignoretzÚtzidsÚtzinfosÚ
TZID_NAMESÚlinesÚiÚlineÚ	rrulevalsÚ	rdatevalsÚ
exrulevalsÚ
exdatevalsÚnameÚvalueÚparmsÚparmÚvalue_foundÚTZIDÚvalid_valuesÚtzkeyÚtzÚtzlookupÚmsgÚrsetÚdatestrÛ   é	   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   DTSTART:%Y%m%dT%H%M%S_cache_gen Returns the first recurrence after the given datetime instance. The
            inc keyword defines what happens if dt is an occurrence. With
            inc=True, if dt itself is an occurrence, it will be returned.  rrulebase._iter_cached©
)zBYSETPOSzbysetpos)zBYMONTHzbymonth)z
BYMONTHDAYz
bymonthday)z	BYYEARDAYz	byyearday)zBYWEEKNOzbyweekno)zBYDAYz	byweekday)zBYHOURzbyhour)zBYMINUTEzbyminute)zBYSECONDzbysecond)zBYEASTERzbyeaster_exrule_iterinfo.mtimeset_rrulestr._handle_FREQislice_handle_BYHOURaccumulatorReturn new rrule with same attributes except for those attributes given new
           values by whichever keyword arguments are specified.
    Decorator for rruleset methods which may invalidate the
    cached length.
    rruleset.rrule{n:+d}{wday}_bynmonthday Include the given rrule instance in the recurrence set exclusion
            list. Dates which are part of the given recurrence rules will not
            be generated, even if some inclusive rrule or rdate matches them.
        _rrule__construct_bysetCan't create weekday with n==0_rrulestr._handle_WKSTrrulebase.__iter___iterinfo.ddayset Include the given :py:class:`rrule` instance in the recurrence set
            generation. _rrule__mod_distanceM366MASKCOUNT=_byyeardayunknown parameter '%s'chainnew_kwargsInvalid combination of interval, byhour and byminute resulting in empty rule. Include the given datetime instance in the recurrence set
            exclusion list. Dates included that way will not be generated,
            even if some inclusive rrule or rdate matches them. sortstartedrrule._iterInvalid (empty) BYDAY specification.Û   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r    Returns the number of recurrences in this set. It will have go
            trough the whole recurrence, if this hasn't been done before. htimesetM365MASK_iterinfo.htimeset_iterinfo.ydayset_iterinfo.__init__rrulebase.__getitem__not %sNMDAY365MASKrrulebase.betweenwdaysetM29_handle_BYSECONDTZID=(?P<name>[^:]+):DTSTART specifies multiple timezones_handle_BYSETPOSInvalid combination of interval and byhour resulting in empty rule.Û   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   _timeset<module dateutil.rrule> Returns all the occurrences of the rrule between after and before.
        The inc keyword defines what happens if after and/or before are
        themselves occurrences. With inc=True, they will be included in the
        list, if they are found in the recurrence set. rrule.__mod_distance_dtstartM30_iterinfo.wdayset Returns the last recurrence before the given datetime instance. The
            inc keyword defines what happens if dt is an occurrence. With
            inc=True, if dt itself is an occurrence, it will be returned. M31rruleset._genitem.__eq__
        Two ways to specify this: +1MO or MO(+1)
        heappopunsupported RRULE parm: unsupported EXDATE parm: MAXYEARunsupported DTSTART parm: WKST=M365RANGEheapq_intervalWarning raised when time zones are parsed from deprecated formats.C:\code\venv\callllama\lib\site-packages\dateutil\tzC:\code\venv\callllama\lib\site-packages\dateutil\tz\__init__.py<module dateutil.tz>fromutc() requires a non-None utcoffset() result<module dateutil.tz._common>argnamesdtdstDuplicate argument: {}_DatetimeWithFold_naive_isdst_tzinfo.fromutc%s(...)
        Given a timezone-aware datetime in a given timezone, calculates a
        timezone-aware datetime in a new timezone.

        Since this is the one time that we *know* we have an unambiguous
        datetime object, we take this opportunity to determine whether the
        datetime is ambiguous and in a "fold" state (e.g. if it's the first
        occurance, chronologically, of the ambiguous datetime).

        :param dt:
            A timezone-aware :class:`datetime.datetime` object.
        C:\code\venv\callllama\lib\site-packages\dateutil\tz\_common.py_DatetimeWithFold.foldtzrangebase.tzname
            Return a datetime with the same attributes, except for those
            attributes given new values by whichever keyword arguments are
            specified. Note that tzinfo=None can be specified to create a naive
            datetime from an aware datetime with no conversion of date and time
            data.

            This is reimplemented in ``_DatetimeWithFold`` because pypy3 will
            return a ``datetime.datetime`` even if ``fold`` is unchanged.
            namefuncdtoff Given a datetime in UTC, return local time delta_walltzrangebase.fromutctzrangebase._isdstutc_transitions
    The CPython version of ``fromutc`` checks that the input is a ``datetime``
    object and that ``self`` is attached as its ``tzinfo``.
    _validate_fromutc_inputs.<locals>.fromutcdt_classfromutc() requires a non-None dst() resultfromutc(): dt.dst gave inconsistent results; cannot convert_tzinfo._fromutc_tzinfo._fold_statusdt_walltzrangebase.__init__same_dttzname_in_python2.<locals>.adjust_encodingtzrangebase.is_ambiguous
    Base class for all ``dateutil`` ``tzinfo`` objects.
    
        Provides a unified interface for assigning the ``fold`` attribute to
        datetimes both before and after the implementation of PEP-495.

        :param fold:
            The value for the ``fold`` attribute in the returned datetime. This
            should be either 0 or 1.

        :return:
            Returns an object for which ``getattr(dt, 'fold', 0)`` returns
            ``fold`` for all versions of Python. In versions prior to
            Python 3.6, this is a ``_DatetimeWithFold`` object, which is a
            subclass of :py:class:`datetime.datetime` with the ``fold``
            attribute added, if ``fold`` is 1.

        .. versionadded:: 2.6.0
        
    This is an abstract base class for time zones represented by an annual
    transition into and out of DST. Child classes should implement the following
    methods:

        * ``__init__(self, *args, **kwargs)``
        * ``transitions(self, year)`` - this is expected to return a tuple of
          datetimes representing the DST on and off transitions in standard
          time.

    A fully initialized ``tzrangebase`` subclass should also provide the
    following attributes:
        * ``hasdst``: Boolean whether or not the zone uses DST.
        * ``_dst_offset`` / ``_std_offset``: :class:`datetime.timedelta` objects
          representing the respective UTC offsets.
        * ``_dst_abbr`` / ``_std_abbr``: Strings representing the timezone short
          abbreviations in DST and STD, respectively.
        * ``_hasdst``: Whether or not the zone has DST.

    .. versionadded:: 2.6.0
    
        This is a class designed to provide a PEP 495-compliant interface for
        Python versions before 3.6. It is used only for dates in a fold, so
        the ``fold`` attribute is fixed at ``1``.

        .. versionadded:: 2.6.0
        dt_utc_DatetimeWithFold.replacetzrangebase is an abstract base classtzrangebase.dsttzrangebase.__ne__tzrangebase.utcoffset
        Given a timezone-aware datetime in a given timezone, calculates a
        timezone-aware datetime in a new timezone.

        Since this is the one time that we *know* we have an unambiguous
        datetime object, we take this opportunity to determine whether the
        datetime is ambiguous and in a "fold" state (e.g. if it's the first
        occurence, chronologically, of the ambiguous datetime).

        :param dt:
            A timezone-aware :class:`datetime.datetime` object.
        Change unicode output into bytestrings in Python 2

    tzname() API changed in Python 3. It used to return bytes, but was changed
    to unicode strings
    tzrangebase.__repr___tzinfo.is_ambiguoustzrangebase._dst_base_offsettzrangebase._naive_isdst
        Determine the fold status of a "wall" datetime, given a representation
        of the same datetime as a (naive) UTC datetime. This is calculated based
        on the assumption that ``dt.utcoffset() - dt.dst()`` is constant for all
        datetimes, and that this offset is the actual number of hours separating
        ``dt_utc`` and ``dt_wall``.

        :param dt_utc:
            Representation of the datetime as UTC

        :param dt_wall:
            Representation of the datetime as "wall time". This parameter must
            either have a `fold` attribute or have a fold-naive
            :class:`datetime.tzinfo` attached, otherwise the calculation may
            fail.
        _TzStrFactory.__call___TzSingleton__instance_TzSingleton.__init__Alternate constructor that returns a fresh instance_TzStrFactory__instances_TzSingleton.__call___TzOffsetFactory__instances_TzOffsetFactory.__call__C:\code\venv\callllama\lib\site-packages\dateutil\tz\_factories.py<module dateutil.tz._factories>_TzOffsetFactory.__init___TzStrFactory.__init___TzFactory_TzFactory.instancetzoffsetfrom>%dB__get_gettz.<locals>.GettzFunc.__init___set_tzdata_naive_is_dstmandatory DTSTART not founddaylight_tzicalvtz._find_compdttzfile._set_tzdata
    Given a datetime and a time zone, determine whether or not a given datetime
    would fall in a gap.

    :param dt:
        A :class:`datetime.datetime` (whose time zone will be ignored if ``tz``
        is provided.)

    :param tz:
        A :class:`datetime.tzinfo` with support for the ``fold`` attribute. If
        ``None`` or not provided, the datetime's own time zone will be used.

    :return:
        Returns a boolean value whether or not the "wall time" exists in
        ``tz``.

    .. versionadded:: 2.7.0
    _end_delta__get_gettz.<locals>.GettzFunc.nocache/usr/lib/zoneinfo/usr/share/lib/zoneinfo/etc/zoneinfoEPOCHORDINALlastcompttinfo_dst©ÚselfÚsÚlinesÚiÚlineÚtzidÚcompsÚinvtzÚcomptypeÚnameÚvalueÚparmsÚfounddtstartÚtzoffsetfromÚ
tzoffsettoÚ
rrulelinesÚtznameÚrrÚcompÚparmÚmsgtzical.__repr___ttinfo.__setstate__isstd
    Given a datetime and a time zone, determine whether or not a given datetime
    is ambiguous (i.e if there are two times differentiated only by their DST
    status).

    :param dt:
        A :class:`datetime.datetime` (whose time zone will be ignored if ``tz``
        is provided.)

    :param tz:
        A :class:`datetime.tzinfo` with support for the ``fold`` attribute. If
        ``None`` or not provided, the datetime's own time zone will be used.

    :return:
        Returns a boolean value whether or not the "wall time" is ambiguous in
        ``tz``.

    .. versionadded:: 2.6.0
    LAST-MODIFIEDttinfo_list
    This is a tzinfo object that represents the UTC time zone.

    **Examples:**

    .. doctest::

        >>> from datetime import *
        >>> from dateutil.tz import *

        >>> datetime.now()
        datetime.datetime(2003, 9, 27, 9, 40, 1, 521290)

        >>> datetime.now(tzutc())
        datetime.datetime(2003, 9, 27, 12, 40, 12, 156379, tzinfo=tzutc())

        >>> datetime.now(tzutc()).tzname()
        'UTC'

    .. versionchanged:: 2.7.0
        ``tzutc()`` is now a singleton, so the result of ``tzutc()`` will
        always return the same object.

        .. doctest::

            >>> from dateutil.tz import tzutc, UTC
            >>> tzutc() is tzutc()
            True
            >>> tzutc() is UTC
            True
    tzutc.__repr__trans_listVTIMEZONEtzfile._read_tzfile>lbb_tzicalvtzcomp<module dateutil.tz.tz>tzutc.__eq__SEEK_CURmore than one timezone availabletzutc.is_ambiguousin_utctzfile._find_last_transitiontm_isdst
        The ``tzfile`` implementation of :py:func:`datetime.tzinfo.fromutc`.

        :param dt:
            A :py:class:`datetime.datetime` object.

        :raises TypeError:
            Raised if ``dt`` is not a :py:class:`datetime.datetime` object.

        :raises ValueError:
            Raised if this is called with a ``dt`` which does not have this
            ``tzinfo`` attached.

        :return:
            Returns a :py:class:`datetime.datetime` object representing the
            wall time in ``self``'s time zone.
        TZOFFSETFROMtzoffset.tzname_ttinfo_dstDatetime is naive and no time zone provided._ContextWrapperTZNAME_vtz
    ``tzstr`` objects are time zone objects specified by a time-zone string as
    it would be passed to a ``TZ`` variable on POSIX-style systems (see
    the `GNU C Library: TZ Variable`_ for more details).

    There is one notable exception, which is that POSIX-style time zones use an
    inverted offset format, so normally ``GMT+3`` would be parsed as an offset
    3 hours *behind* GMT. The ``tzstr`` time zone object will parse this as an
    offset 3 hours *ahead* of GMT. If you would like to maintain the POSIX
    behavior, pass a ``True`` value to ``posix_offset``.

    The :class:`tzrange` object provides the same functionality, but is
    specified using :class:`relativedelta.relativedelta` objects. rather than
    strings.

    :param s:
        A time zone string in ``TZ`` variable format. This can be a
        :class:`bytes` (2.x: :class:`str`), :class:`str` (2.x:
        :class:`unicode`) or a stream emitting unicode characters
        (e.g. :class:`StringIO`).

    :param posix_offset:
        Optional. If set to ``True``, interpret strings such as ``GMT+3`` or
        ``UTC+3`` as being 3 hours *behind* UTC rather than ahead, per the
        POSIX standard.

    .. caution::

        Prior to version 2.7.0, this function also supported time zones
        in the format:

            * ``EST5EDT,4,0,6,7200,10,0,26,7200,3600``
            * ``EST5EDT,4,1,0,7200,10,-1,0,7200,3600``

        This format is non-standard and has been deprecated; this function
        will raise a :class:`DeprecatedTZFormatWarning` until
        support is removed in a future version.

    .. _`GNU C Library: TZ Variable`:
        https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html
    tzlocal.dstttinfo_first_ttinfo_stdfobj>6l__get_gettz.<locals>.GettzFunc.__call__curr_offsetold_offset_parse_offset_trans_idxtzical.keys/etc/localtime_ttinfo.__init__
    This object is designed to parse an iCalendar-style ``VTIMEZONE`` structure
    as set out in `RFC 5545`_ Section 4.6.5 into one or more `tzinfo` objects.

    :param `fileobj`:
        A file or stream in iCalendar format, which should be UTF-8 encoded
        with CRLF endings.

    .. _`RFC 5545`: https://tools.ietf.org/html/rfc5545
    <tzicalvtz %s>%s(%s, %s)tzoffset.dstdt_outnaive_dst
        Retrieve a time zone object from a string representation

        This function is intended to retrieve the :py:class:`tzinfo` subclass
        that best represents the time zone that would be used if a POSIX
        `TZ variable`_ were set to the same value.

        If no argument or an empty string is passed to ``gettz``, local time
        is returned:

        .. code-block:: python3

            >>> gettz()
            tzfile('/etc/localtime')

        This function is also the preferred way to map IANA tz database keys
        to :class:`tzfile` objects:

        .. code-block:: python3

            >>> gettz('Pacific/Kiritimati')
            tzfile('/usr/share/zoneinfo/Pacific/Kiritimati')

        On Windows, the standard is extended to include the Windows-specific
        zone names provided by the operating system:

        .. code-block:: python3

            >>> gettz('Egypt Standard Time')
            tzwin('Egypt Standard Time')

        Passing a GNU ``TZ`` style string time zone specification returns a
        :class:`tzstr` object:

        .. code-block:: python3

            >>> gettz('AEST-10AEDT-11,M10.1.0/2,M4.1.0/3')
            tzstr('AEST-10AEDT-11,M10.1.0/2,M4.1.0/3')

        :param name:
            A time zone name (IANA, or, on Windows, Windows keys), location of
            a ``tzfile(5)`` zoneinfo file or ``TZ`` variable style time zone
            specifier. An empty string, no argument or ``None`` is interpreted
            as local time.

        :return:
            Returns an instance of one of ``dateutil``'s :py:class:`tzinfo`
            subclasses.

        .. versionchanged:: 2.7.0

            After version 2.7.0, any two calls to ``gettz`` using the same
            input strings will return the same object:

            .. code-block:: python3

                >>> tz.gettz('America/Chicago') is tz.gettz('America/Chicago')
                True

            In addition to improving performance, this ensures that
            `"same zone" semantics`_ are used for datetimes in the same zone.


        .. _`TZ variable`:
            https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html

        .. _`"same zone" semantics`:
            https://blog.ganssle.io/articles/2018/02/aware-datetime-arithmetic.html
        tzfile.__reduce_ex__tzical._parse_offset
    Class for wrapping contexts so that they are passed through in a
    with statement.
    tzlocal.utcoffsetTZURLTZOFFSETTO
    Convert a :class:`datetime.datetime` object to an epoch timestamp in
    seconds since January 1, 1970, ignoring the time zone.
    is_ambiguous_fnsame_dsttzfile.fromutc_ttinfo_listtzstr.__init__isendmandatory TZOFFSETFROM not foundinvalid component end: tzlocal.is_ambiguousSTANDARDDAYLIGHTtzutc.dst_ttinfo.__ne___get_ttinfofold_naivetzfile.is_ambiguous_ContextWrapper.__exit__tzoffsetdifftzfile.__init__lastcompdtisgmttzfile.dstunsupported TZOFFSETTO parm: tzutc.fromutc©ÚselfÚfileobjÚoutÚ
ttisgmtcntÚ
ttisstdcntÚleapcntÚtimecntÚtypecntÚcharcntÚttinfoÚiÚabbrÚisstdÚisgmtÚgmtoffÚisdstÚabbrindÚttiÚlaststdoffsetÚoffsetttinfo_beforedt_rttzlocal_classes_ttinfo_before_dst_savedUnsupported DTSTART param in VTIMEZONE: tzlocal.tznametzlocal.__repr__tzlocal.__eq___tzfile.__init__tzical.__init__dstvalfile_streamtzoffset.is_ambiguoustzutc.utcoffset_compsunsupported TZID parm: tzrange.transitionstzobjat least one component is neededfile_opened_heretzical.get_tzidmagic not foundcache_cleartzical._parse_rfctzfile.__ne__tzfile._get_ttinfotzfile.utcoffsetcomponent not closed: tzoffset.__repr___trans_list_utc
    A :class:`tzinfo` subclass built around the ``time`` timezone functions.
    filepathtzutc.__ne__tzstr.__repr__A non-cached version of gettztzlocal._isdst_tznames_tzicalvtz.utcoffset_ttinfo.__getstate__
    The ``tzrange`` object is a time zone specified by a set of offsets and
    abbreviations, equivalent to the way the ``TZ`` variable can be specified
    in POSIX-like systems, but using Python delta objects to specify DST
    start, end and offsets.

    :param stdabbr:
        The abbreviation for standard time (e.g. ``'EST'``).

    :param stdoffset:
        An integer or :class:`datetime.timedelta` object or equivalent
        specifying the base offset from UTC.

        If unspecified, +00:00 is used.

    :param dstabbr:
        The abbreviation for DST / "Summer" time (e.g. ``'EDT'``).

        If specified, with no other DST information, DST is assumed to occur
        and the default behavior or ``dstoffset``, ``start`` and ``end`` is
        used. If unspecified and no other DST information is specified, it
        is assumed that this zone has no DST.

        If this is unspecified and other DST information is *is* specified,
        DST occurs in the zone but the time zone abbreviation is left
        unchanged.

    :param dstoffset:
        A an integer or :class:`datetime.timedelta` object or equivalent
        specifying the UTC offset during DST. If unspecified and any other DST
        information is specified, it is assumed to be the STD offset +1 hour.

    :param start:
        A :class:`relativedelta.relativedelta` object or equivalent specifying
        the time and time of year that daylight savings time starts. To
        specify, for example, that DST starts at 2AM on the 2nd Sunday in
        March, pass:

            ``relativedelta(hours=2, month=3, day=1, weekday=SU(+2))``

        If unspecified and any other DST information is specified, the default
        value is 2 AM on the first Sunday in April.

    :param end:
        A :class:`relativedelta.relativedelta` object or equivalent
        representing the time and time of year that daylight savings time
        ends, with the same specification method as in ``start``. One note is
        that this should point to the first time in the *standard* zone, so if
        a transition occurs at 2AM in the DST zone and the clocks are set back
        1 hour to 1AM, set the ``hours`` parameter to +1.


    **Examples:**

    .. testsetup:: tzrange

        from dateutil.tz import tzrange, tzstr

    .. doctest:: tzrange

        >>> tzstr('EST5EDT') == tzrange("EST", -18000, "EDT")
        True

        >>> from dateutil.relativedelta import *
        >>> range1 = tzrange("EST", -18000, "EDT")
        >>> range2 = tzrange("EST", -18000, "EDT", -14400,
        ...                  relativedelta(hours=+2, month=4, day=1,
        ...                                weekday=SU(+1)),
        ...                  relativedelta(hours=+1, month=10, day=31,
        ...                                weekday=SU(-1)))
        >>> tzstr('EST5EDT') == range1 == range2
        True

    tzstr._deltatzfile.__repr__
        Retrieves the available time zones as a list.
        tzoffset.__init___start_deltamandatory TZID not foundtzoffset.utcoffsetisabs_tzicalvtzcomp.__init__
    Lightweight class for holding the relevant transition and time zone
    information read from binary tzfiles.
    _resolve_ambiguous_timetzfile._resolve_ambiguous_timetzoffset.__eq__tzrange.__eq__C:\code\venv\callllama\lib\site-packages\dateutil\tz\tz.py
        Whether or not the "wall time" of a given datetime is ambiguous in this
        zone.

        :param dt:
            A :py:class:`datetime.datetime`, naive or time zone aware.
        :return:
            Returns ``True`` if ambiguous, ``False`` otherwise.

        .. versionadded:: 2.6.0
        
        Retrieve a :py:class:`datetime.tzinfo` object by its ``tzid``.

        :param tzid:
            If there is exactly one time zone available, omitting ``tzid``
            or passing :py:const:`None` value returns it. Otherwise a valid
            key (which can be retrieved from :func:`keys`) is required.

        :raises ValueError:
            Raised if ``tzid`` is not specified but there are either more
            or fewer than 1 zone defined.

        :returns:
            Returns either a :py:class:`datetime.tzinfo` object representing
            the relevant time zone or :py:const:`None` if the ``tzid`` was
            not found.
        _ttinfo.__eq__invalid offset: tzoffset.fromutctzrange.__init___cachecomp
    A simple class for representing a fixed offset from UTC.

    :param name:
        The timezone name, to be returned when ``tzname()`` is called.
    :param offset:
        The time zone offset in seconds, or (since version 2.6.0, represented
        as a :py:class:`datetime.timedelta` object).
    empty offset_ttinfo.__repr__TZFILES_tzicalvtz.__repr___tzicalvtz.__init__tzfile._find_ttinfotzlocal._naive_is_dst>%dl_tzicalvtz.tzname
        Fast track version of fromutc() returns the original ``dt`` object for
        any valid :py:class:`datetime.datetime` object.
        tzrange._dst_base_offsetaltzonetzoffset.__ne___tzicalvtz.dstTZPATHSno timezones defined
This module offers timezone implementations subclassing the abstract
:py:class:`datetime.tzinfo` type. There are classes to handle tzfile format
files (usually are in :file:`/etc/localtime`, :file:`/usr/share/zoneinfo`,
etc), TZ environment string (in all known formats), given ranges (with help
from relative deltas), local machine timezone, fixed offset timezone, and UTC
timezone.
_datetime_to_timestamptzutc.tznamebase_year
    Given a datetime that may be imaginary, return an existing datetime.

    This function assumes that an imaginary datetime represents what the
    wall time would be in a zone had the offset transition not occurred, so
    it will always fall forward by the transition's change in offset.

    .. doctest::

        >>> from dateutil import tz
        >>> from datetime import datetime
        >>> NYC = tz.gettz('America/New_York')
        >>> print(tz.resolve_imaginary(datetime(2017, 3, 12, 2, 30, tzinfo=NYC)))
        2017-03-12 03:30:00-04:00

        >>> KIR = tz.gettz('Pacific/Kiritimati')
        >>> print(tz.resolve_imaginary(datetime(1995, 1, 1, 12, 30, tzinfo=KIR)))
        1995-01-02 12:30:00+14:00

    As a note, :func:`datetime.astimezone` is guaranteed to produce a valid,
    existing datetime, so a round-trip to and from UTC is sufficient to get
    an extant datetime, however, this generally "falls back" to an earlier time
    rather than falling forward to the STD side (though no guarantees are made
    about this behavior).

    :param dt:
        A :class:`datetime.datetime` which may or may not exist.

    :return:
        Returns an existing :class:`datetime.datetime`. If ``dt`` was not
        imaginary, the datetime returned is guaranteed to be the same object
        passed to the function.

    .. versionadded:: 2.7.0
    unknown component: tzfile.tznameidx_offsettzlocal.__init__>%dbtzlocal.__ne___ContextWrapper.__init__ Set the time zone data of this object from a _tzfile object tzfile.__eq___cachedate_ContextWrapper.__enter__unsupported TZNAME parm: BEGINunsupported %s parm: %s __get_gettz.<locals>.GettzFunc.cache_clear
    This is a ``tzinfo`` subclass thant allows one to use the ``tzfile(5)``
    format timezone files to extract current and historical zone information.

    :param fileobj:
        This can be an opened file stream or a file name that the time zone
        information can be read from.

    :param filename:
        This is an optional parameter specifying the source of the time zone
        information in the event that ``fileobj`` is a file object. If omitted
        and ``fileobj`` is a file stream, this parameter will be set either to
        ``fileobj``'s ``name`` attribute or to ``repr(fileobj)``.

    See `Sources for Time Zone and Daylight Saving Time Data
    <https://data.iana.org/time-zones/tz-link.html>`_ for more information.
    Time zone files can be compiled from the `IANA Time Zone database files
    <https://www.iana.org/time-zones>`_ with the `zic time zone compiler
    <https://www.freebsd.org/cgi/man.cgi?query=zic&sektion=8>`_

    .. note::

        Only construct a ``tzfile`` directly if you have a specific timezone
        file on disk that you want to read into a Python ``tzinfo`` object.
        If you want to get a ``tzfile`` representing a specific IANA zone,
        (e.g. ``'America/New_York'``), you should call
        :func:`dateutil.tz.gettz` with the zone identifier.


    **Examples:**

    Using the US Eastern time zone as an example, we can see that a ``tzfile``
    provides time zone information for the standard Daylight Saving offsets:

    .. testsetup:: tzfile

        from dateutil.tz import gettz
        from datetime import datetime

    .. doctest:: tzfile

        >>> NYC = gettz('America/New_York')
        >>> NYC
        tzfile('/usr/share/zoneinfo/America/New_York')

        >>> print(datetime(2016, 1, 3, tzinfo=NYC))     # EST
        2016-01-03 00:00:00-05:00

        >>> print(datetime(2016, 7, 7, tzinfo=NYC))     # EDT
        2016-07-07 00:00:00-04:00


    The ``tzfile`` structure contains a fully history of the time zone,
    so historical dates will also have the right offsets. For example, before
    the adoption of the UTC standards, New York used local solar  mean time:

    .. doctest:: tzfile

       >>> print(datetime(1901, 4, 12, tzinfo=NYC))    # LMT
       1901-04-12 00:00:00-04:56

    And during World War II, New York was on "Eastern War Time", which was a
    state of permanent daylight saving time:

    .. doctest:: tzfile

        >>> print(datetime(1944, 2, 7, tzinfo=NYC))    # EWT
        1944-02-07 00:00:00-04:00

    _GettzFunc__instancestzwin(%s)DaylightBiaskey_name{kn}\{sn}user32tzinfo class based on win32's timezones available in the registry.Running tzwin on non-Windows systemtz_resREG_SZì        tzwinbase.listname_splttzwinbase.transitionswintypesDaylightName_dstminuteONEWEEKtzwinlocal.__reduce__SOFTWARE\Microsoft\Windows\CurrentVersion\Time ZonesWinDLLStandardBias
    Class for accessing `tzres.dll`, which contains timezone name related
    resources.

    .. versionadded:: 2.5.0
    _stddayofweekHINSTANCEtzres.name_from_stringtzwinlocal.__str__whichweektzwinlocal()POINTERTZKEYNAME9Xtzwinbase is an abstract base classtzname_str_dsthour<module dateutil.tz.win>
        Parse strings as returned from the Windows registry into the time zone
        name as defined in the registry.

        >>> from dateutil.tzwin import tzres
        >>> tzr = tzres()
        >>> print(tzr.name_from_string('@tzres.dll,-251'))
        'Dateline Daylight Time'
        >>> print(tzr.name_from_string('Eastern Standard Time'))
        'Eastern Standard Time'

        :param tzname_str:
            A timezone name string as returned from a Windows registry key.

        :return:
            Returns the localized timezone string from tzres.dll if the string
            is of the form `@tzres.dll,-offset`, else returns the input string.
        C:\code\venv\callllama\lib\site-packages\dateutil\tz\win.py_displayargtypesbyreftzwin.__repr__tzres.__init__{kn}\{name}Dltkeydict_stdminutetzwinlocal.__repr__c_intReturn a list of all time zones known to the system.Malformed timezone string._stdmonthDaylightStarttzwin.__reduce__tzwinlocal.__init__LoadStringWtzwinlocal(%s)TZKEYNAMENT_get_hasdst dayofweek == 0 means Sunday, whichweek 5 means last instance lpBufferisoweekdaytzwinbase.__init___dstweeknumberctypestzwin.__init__weekdayone_keydictWCHARtzlocalkeycastLPWSTRtzwinbase._get_hasdsttzres_loc_dstmonth_dstdayofweek=3l16h_stdhourtzres.load_nametzwinbase.displaydtype_stdweeknumber
        Load a timezone name from a DLL offset (integer).

        >>> from dateutil.tzwin import tzres
        >>> tzr = tzres()
        >>> print(tzr.load_name(112))
        'Eastern Standard Time'

        :param offset:
            A positive integer value referring to a string from the tzres dll.

        ..note:
            Offsets found in the registry are generally of the form
            `@tzres.dll,-114`. The offset in this case if 114, not -114.

        StandardStartpicknthweekday=8hUINT_settzkeynameREG_DWORD_LITTLE_ENDIANtzwinbase.__eq__p_wchartzwinbase._dst_base_offsetC:\code\venv\callllama\lib\site-packages\dateutil\zoneinfolinkname Get the zonefile metadata

    See `zonefile_metadata`_

    :returns:
        A dictionary with the database metadata

    .. deprecated:: 2.6
        See deprecation warning in :func:`zoneinfo.gettz`. To get metadata,
        query the attribute ``zoneinfo.ZoneInfoFile.metadata``.
    ZoneInfoFile.__init__islnk
    This retrieves a time zone from the local zoneinfo tarball that is packaged
    with dateutil.

    :param name:
        An IANA-style time zone name, as found in the zoneinfo file.

    :return:
        Returns a :class:`dateutil.tz.tzfile` time zone object.

    .. warning::
        It is generally inadvisable to use this function, and it is only
        provided for API compatibility with earlier versions. This is *not*
        equivalent to ``dateutil.tz.gettz()``, which selects an appropriate
        time zone based on the inputs, favoring system zoneinfo. This is ONLY
        for accessing the dateutil-specific zoneinfo (which may be out of
        date compared to the system zoneinfo).

    .. deprecated:: 2.6
        If you need to use a specific zoneinfofile over the system zoneinfo,
        instantiate a :class:`dateutil.zoneinfo.ZoneInfoFile` object and call
        :func:`dateutil.zoneinfo.ZoneInfoFile.get(name)` instead.

        Use :func:`get_zonefile_instance` to retrieve an instance of the
        dateutil-provided zoneinfo.
    C:\code\venv\callllama\lib\site-packages\dateutil\zoneinfo\__init__.pyMETADATA_FN<module dateutil.zoneinfo>_cached_instanceextractfileTarFilenew_instancezifzonefile_streammetadata_jsonmetadata_strgettz_db_metadataget_datazoneinfo.gettz_db_metadata() will be removed in future versions, to use the dateutil-provided zoneinfo files, ZoneInfoFile object and query the 'metadata' attribute instead. See the documentation for details.pkgutilissymgetmemberstrerrorZONEFILENAMEgetzoneinfofile_stream_CLASS_ZONE_INSTANCE
        Wrapper for :func:`ZoneInfoFile.zones.get`. This is a convenience method
        for retrieving zones from the zone dictionary.

        :param name:
            The name of the zone to retrieve. (Generally IANA zone names)

        :param default:
            The value to return in the event of a missing key.

        .. versionadded:: 2.6.0

        dateutil-zoneinfo.tar.gz
    This is a convenience function which provides a :class:`ZoneInfoFile`
    instance using the data provided by the ``dateutil`` package. By default, it
    caches a single instance of the ZoneInfoFile object and returns that.

    :param new_instance:
        If ``True``, a new instance of :class:`ZoneInfoFile` is instantiated and
        used as the cached instance for the next call. Otherwise, new instances
        are created only as necessary.

    :return:
        Returns a :class:`ZoneInfoFile` object.

    .. versionadded:: 2.6
    I/O error({0}): {1}tarfilezoneinfo.gettz() will be removed in future versions, to use the dateutil-provided zoneinfo files, instantiate a ZoneInfoFile object and use ZoneInfoFile.zones.get() instead. See the documentation for details.
HTML parsing library based on the `WHATWG HTML specification
<https://whatwg.org/html>`_. The parser is designed to be compatible with
existing HTML found in the wild and implements well-defined error recovery that
is largely compatible with modern desktop web browsers.

Example usage::

    import html5lib
    with open("my_document.html", "rb") as f:
        tree = html5lib.parse(f)

For convenience, this module re-exports the following names:

* :func:`~.html5parser.parse`
* :func:`~.html5parser.parseFragment`
* :class:`~.html5parser.HTMLParser`
* :func:`~.treebuilders.getTreeBuilder`
* :func:`~.treewalkers.getTreeWalker`
* :func:`~.serializer.serialize`
<module html5lib>C:\code\venv\callllama\lib\site-packages\html5libC:\code\venv\callllama\lib\site-packages\html5lib\__init__.py1.0.1#x([\d|A-F]{4,4})nonPubidCharRegexp- -toXmlName<module html5lib._ihatexml>[ -@\[-\^`\{-Â¿ÃÃ·Ä²-Ä³Ä¿-ÅÅÅ¿Ç-ÇÇ±-Ç³Ç¶-Ç¹È-ÉÊ©-ÊºË-ÎÎÎÎÎ¢ÏÏ-ÏÏÏÏÏ¡Ï´-ÐÐÑÑÒ-ÒÓ-ÓÓ-ÓÓ-ÓÓ¬-Ó­Ó¶-Ó·Óº-Ô°Õ-ÕÕ-Õ Ö-××«-×¯×³-Ø Ø»-ÙÙ-Ù°Ú¸-Ú¹Ú¿ÛÛÛ-Û¤Û§-à¤à¤º-à¤¼à¤¾-à¥à¥¢-à¦à¦-à¦à¦-à¦à¦©à¦±à¦³-à¦µà¦º-à§à§à§¢-à§¯à§²-à¨à¨-à¨à¨-à¨à¨©à¨±à¨´à¨·à¨º-à©à©à©-à©±à©µ-àªàªàªàªàª©àª±àª´àªº-àª¼àª¾-à«à«¡-à¬à¬-à¬à¬-à¬à¬©à¬±à¬´-à¬µà¬º-à¬¼à¬¾-à­à­à­¢-à®à®-à®à®à®-à®à®à®à® -à®¢à®¥-à®§à®«-à®­à®¶à®º-à°à°à°à°©à°´à°º-à±à±¢-à²à²à²à²©à²´à²º-à³à³à³¢-à´à´à´à´©à´º-àµàµ¢-à¸à¸¯à¸±à¸´-à¸¿à¹-àºàºàº-àºàºàº-àºàº-àºàºàº àº¤àº¦àº¨-àº©àº¬àº¯àº±àº´-àº¼àº¾-àº¿à»-à¼¿à½à½ª-áá-áá·-á¿áááááá-á»á½á¿á-áááá-áá-áá-áá¢á¤á¦á¨áª-á¬á¯-á±á´á¶-áá-á§á©-áªá¬-á­á°-á¶á¹á»á-áªá¬-á¯á±-á¸áº-á·¿áº-áºá»º-á»¿á¼-á¼á¼-á¼á½-á½á½-á½á½á½á½á½á½¾-á½¿á¾µá¾½á¾¿-á¿á¿á¿-á¿á¿-á¿á¿-á¿á¿­-á¿±á¿µá¿½-â¥â§-â©â¬-â­â¯-â¿â-ãã-ã ãª-ãã-ã ã»-ãã­-ä·¿é¾¦-ê¯¿í¤-ï¿¿]charListInfosetFilter.coerceAttributedropXmlnsLocalName
[#x0300-#x0345] | [#x0360-#x0361] | [#x0483-#x0486] | [#x0591-#x05A1] |
[#x05A3-#x05B9] | [#x05BB-#x05BD] | #x05BF | [#x05C1-#x05C2] | #x05C4 |
[#x064B-#x0652] | #x0670 | [#x06D6-#x06DC] | [#x06DD-#x06DF] |
[#x06E0-#x06E4] | [#x06E7-#x06E8] | [#x06EA-#x06ED] | [#x0901-#x0903] |
#x093C | [#x093E-#x094C] | #x094D | [#x0951-#x0954] | [#x0962-#x0963] |
[#x0981-#x0983] | #x09BC | #x09BE | #x09BF | [#x09C0-#x09C4] |
[#x09C7-#x09C8] | [#x09CB-#x09CD] | #x09D7 | [#x09E2-#x09E3] | #x0A02 |
#x0A3C | #x0A3E | #x0A3F | [#x0A40-#x0A42] | [#x0A47-#x0A48] |
[#x0A4B-#x0A4D] | [#x0A70-#x0A71] | [#x0A81-#x0A83] | #x0ABC |
[#x0ABE-#x0AC5] | [#x0AC7-#x0AC9] | [#x0ACB-#x0ACD] | [#x0B01-#x0B03] |
#x0B3C | [#x0B3E-#x0B43] | [#x0B47-#x0B48] | [#x0B4B-#x0B4D] |
[#x0B56-#x0B57] | [#x0B82-#x0B83] | [#x0BBE-#x0BC2] | [#x0BC6-#x0BC8] |
[#x0BCA-#x0BCD] | #x0BD7 | [#x0C01-#x0C03] | [#x0C3E-#x0C44] |
[#x0C46-#x0C48] | [#x0C4A-#x0C4D] | [#x0C55-#x0C56] | [#x0C82-#x0C83] |
[#x0CBE-#x0CC4] | [#x0CC6-#x0CC8] | [#x0CCA-#x0CCD] | [#x0CD5-#x0CD6] |
[#x0D02-#x0D03] | [#x0D3E-#x0D43] | [#x0D46-#x0D48] | [#x0D4A-#x0D4D] |
#x0D57 | #x0E31 | [#x0E34-#x0E3A] | [#x0E47-#x0E4E] | #x0EB1 |
[#x0EB4-#x0EB9] | [#x0EBB-#x0EBC] | [#x0EC8-#x0ECD] | [#x0F18-#x0F19] |
#x0F35 | #x0F37 | #x0F39 | #x0F3E | #x0F3F | [#x0F71-#x0F84] |
[#x0F86-#x0F8B] | [#x0F90-#x0F95] | #x0F97 | [#x0F99-#x0FAD] |
[#x0FB1-#x0FB7] | #x0FB9 | [#x20D0-#x20DC] | #x20E1 | [#x302A-#x302F] |
#x3099 | #x309ApreventDashAtCommentEndnameRestOutputnameFirstOutput
[#x0041-#x005A] | [#x0061-#x007A] | [#x00C0-#x00D6] | [#x00D8-#x00F6] |
[#x00F8-#x00FF] | [#x0100-#x0131] | [#x0134-#x013E] | [#x0141-#x0148] |
[#x014A-#x017E] | [#x0180-#x01C3] | [#x01CD-#x01F0] | [#x01F4-#x01F5] |
[#x01FA-#x0217] | [#x0250-#x02A8] | [#x02BB-#x02C1] | #x0386 |
[#x0388-#x038A] | #x038C | [#x038E-#x03A1] | [#x03A3-#x03CE] |
[#x03D0-#x03D6] | #x03DA | #x03DC | #x03DE | #x03E0 | [#x03E2-#x03F3] |
[#x0401-#x040C] | [#x040E-#x044F] | [#x0451-#x045C] | [#x045E-#x0481] |
[#x0490-#x04C4] | [#x04C7-#x04C8] | [#x04CB-#x04CC] | [#x04D0-#x04EB] |
[#x04EE-#x04F5] | [#x04F8-#x04F9] | [#x0531-#x0556] | #x0559 |
[#x0561-#x0586] | [#x05D0-#x05EA] | [#x05F0-#x05F2] | [#x0621-#x063A] |
[#x0641-#x064A] | [#x0671-#x06B7] | [#x06BA-#x06BE] | [#x06C0-#x06CE] |
[#x06D0-#x06D3] | #x06D5 | [#x06E5-#x06E6] | [#x0905-#x0939] | #x093D |
[#x0958-#x0961] | [#x0985-#x098C] | [#x098F-#x0990] | [#x0993-#x09A8] |
[#x09AA-#x09B0] | #x09B2 | [#x09B6-#x09B9] | [#x09DC-#x09DD] |
[#x09DF-#x09E1] | [#x09F0-#x09F1] | [#x0A05-#x0A0A] | [#x0A0F-#x0A10] |
[#x0A13-#x0A28] | [#x0A2A-#x0A30] | [#x0A32-#x0A33] | [#x0A35-#x0A36] |
[#x0A38-#x0A39] | [#x0A59-#x0A5C] | #x0A5E | [#x0A72-#x0A74] |
[#x0A85-#x0A8B] | #x0A8D | [#x0A8F-#x0A91] | [#x0A93-#x0AA8] |
[#x0AAA-#x0AB0] | [#x0AB2-#x0AB3] | [#x0AB5-#x0AB9] | #x0ABD | #x0AE0 |
[#x0B05-#x0B0C] | [#x0B0F-#x0B10] | [#x0B13-#x0B28] | [#x0B2A-#x0B30] |
[#x0B32-#x0B33] | [#x0B36-#x0B39] | #x0B3D | [#x0B5C-#x0B5D] |
[#x0B5F-#x0B61] | [#x0B85-#x0B8A] | [#x0B8E-#x0B90] | [#x0B92-#x0B95] |
[#x0B99-#x0B9A] | #x0B9C | [#x0B9E-#x0B9F] | [#x0BA3-#x0BA4] |
[#x0BA8-#x0BAA] | [#x0BAE-#x0BB5] | [#x0BB7-#x0BB9] | [#x0C05-#x0C0C] |
[#x0C0E-#x0C10] | [#x0C12-#x0C28] | [#x0C2A-#x0C33] | [#x0C35-#x0C39] |
[#x0C60-#x0C61] | [#x0C85-#x0C8C] | [#x0C8E-#x0C90] | [#x0C92-#x0CA8] |
[#x0CAA-#x0CB3] | [#x0CB5-#x0CB9] | #x0CDE | [#x0CE0-#x0CE1] |
[#x0D05-#x0D0C] | [#x0D0E-#x0D10] | [#x0D12-#x0D28] | [#x0D2A-#x0D39] |
[#x0D60-#x0D61] | [#x0E01-#x0E2E] | #x0E30 | [#x0E32-#x0E33] |
[#x0E40-#x0E45] | [#x0E81-#x0E82] | #x0E84 | [#x0E87-#x0E88] | #x0E8A |
#x0E8D | [#x0E94-#x0E97] | [#x0E99-#x0E9F] | [#x0EA1-#x0EA3] | #x0EA5 |
#x0EA7 | [#x0EAA-#x0EAB] | [#x0EAD-#x0EAE] | #x0EB0 | [#x0EB2-#x0EB3] |
#x0EBD | [#x0EC0-#x0EC4] | [#x0F40-#x0F47] | [#x0F49-#x0F69] |
[#x10A0-#x10C5] | [#x10D0-#x10F6] | #x1100 | [#x1102-#x1103] |
[#x1105-#x1107] | #x1109 | [#x110B-#x110C] | [#x110E-#x1112] | #x113C |
#x113E | #x1140 | #x114C | #x114E | #x1150 | [#x1154-#x1155] | #x1159 |
[#x115F-#x1161] | #x1163 | #x1165 | #x1167 | #x1169 | [#x116D-#x116E] |
[#x1172-#x1173] | #x1175 | #x119E | #x11A8 | #x11AB | [#x11AE-#x11AF] |
[#x11B7-#x11B8] | #x11BA | [#x11BC-#x11C2] | #x11EB | #x11F0 | #x11F9 |
[#x1E00-#x1E9B] | [#x1EA0-#x1EF9] | [#x1F00-#x1F15] | [#x1F18-#x1F1D] |
[#x1F20-#x1F45] | [#x1F48-#x1F4D] | [#x1F50-#x1F57] | #x1F59 | #x1F5B |
#x1F5D | [#x1F5F-#x1F7D] | [#x1F80-#x1FB4] | [#x1FB6-#x1FBC] | #x1FBE |
[#x1FC2-#x1FC4] | [#x1FC6-#x1FCC] | [#x1FD0-#x1FD3] | [#x1FD6-#x1FDB] |
[#x1FE0-#x1FEC] | [#x1FF2-#x1FF4] | [#x1FF6-#x1FFC] | #x2126 |
[#x212A-#x212B] | #x212E | [#x2180-#x2182] | [#x3041-#x3094] |
[#x30A1-#x30FA] | [#x3105-#x312C] | [#xAC00-#xD7A3]Comments cannot end in a dashdataOutputCoercing non-XML nameAttributes cannot be in the xml namespaceInfosetFilter.coerceComment
[#x0030-#x0039] | [#x0660-#x0669] | [#x06F0-#x06F9] | [#x0966-#x096F] |
[#x09E6-#x09EF] | [#x0A66-#x0A6F] | [#x0AE6-#x0AEF] | [#x0B66-#x0B6F] |
[#x0BE7-#x0BEF] | [#x0C66-#x0C6F] | [#x0CE6-#x0CEF] | [#x0D66-#x0D6F] |
[#x0E50-#x0E59] | [#x0ED0-#x0ED9] | [#x0F20-#x0F29]charcodeC:\code\venv\callllama\lib\site-packages\html5lib\_ihatexml.pygetReplacementCharacterU[\dA-F]{5,5}Text cannot contain U+000CdropXmlnsAttrNsfoundMatchCoercing non-XML pubid[ -,/:-@\[-\^`\{-Â¶Â¸-Â¿ÃÃ·Ä²-Ä³Ä¿-ÅÅÅ¿Ç-ÇÇ±-Ç³Ç¶-Ç¹È-ÉÊ©-ÊºË-ËË-Ë¿Í-ÍÍ¢-ÎÎÎÎ¢ÏÏ-ÏÏÏÏÏ¡Ï´-ÐÐÑÑÒÒ-ÒÓ-ÓÓ-ÓÓ-ÓÓ¬-Ó­Ó¶-Ó·Óº-Ô°Õ-ÕÕ-Õ Ö-ÖÖ¢ÖºÖ¾×××-××«-×¯×³-Ø Ø»-Ø¿Ù-ÙÙª-Ù¯Ú¸-Ú¹Ú¿ÛÛÛ©Û®-Û¯Ûº-à¤à¤à¤º-à¤»à¥-à¥à¥-à¥à¥¤-à¥¥à¥°-à¦à¦à¦-à¦à¦-à¦à¦©à¦±à¦³-à¦µà¦º-à¦»à¦½à§-à§à§-à§à§-à§à§-à§à§à§¤-à§¥à§²-à¨à¨-à¨à¨-à¨à¨-à¨à¨©à¨±à¨´à¨·à¨º-à¨»à¨½à©-à©à©-à©à©-à©à©à©-à©¥à©µ-àªàªàªàªàªàª©àª±àª´àªº-àª»à«à«à«-à«à«¡-à«¥à«°-à¬à¬à¬-à¬à¬-à¬à¬©à¬±à¬´-à¬µà¬º-à¬»à­-à­à­-à­à­-à­à­-à­à­à­¢-à­¥à­°-à®à®à®-à®à®à®-à®à®à®à® -à®¢à®¥-à®§à®«-à®­à®¶à®º-à®½à¯-à¯à¯à¯-à¯à¯-à¯¦à¯°-à°à°à°à°à°©à°´à°º-à°½à±à±à±-à±à±-à±à±¢-à±¥à±°-à²à²à²à²à²©à²´à²º-à²½à³à³à³-à³à³-à³à³à³¢-à³¥à³°-à´à´à´à´à´©à´º-à´½àµ-àµàµàµ-àµàµ-àµàµ¢-àµ¥àµ°-à¸à¸¯à¸»-à¸¿à¹à¹-àºàºàº-àºàºàº-àºàº-àºàºàº àº¤àº¦àº¨-àº©àº¬àº¯àººàº¾-àº¿à»à»à»-à»à»-à¼à¼-à¼à¼ª-à¼´à¼¶à¼¸à¼º-à¼½à½à½ª-à½°à¾à¾-à¾à¾à¾à¾®-à¾°à¾¸à¾º-áá-áá·-á¿áááááá-á»á½á¿á-áááá-áá-áá-áá¢á¤á¦á¨áª-á¬á¯-á±á´á¶-áá-á§á©-áªá¬-á­á°-á¶á¹á»á-áªá¬-á¯á±-á¸áº-á·¿áº-áºá»º-á»¿á¼-á¼á¼-á¼á½-á½á½-á½á½á½á½á½á½¾-á½¿á¾µá¾½á¾¿-á¿á¿á¿-á¿á¿-á¿á¿-á¿á¿­-á¿±á¿µá¿½-ââ-â â¢-â¥â§-â©â¬-â­â¯-â¿â-ããã-ã ã°ã¶-ãã-ãã-ãã-ã ã»ã¿-ãã­-ä·¿é¾¦-ê¯¿í¤-ï¿¿]InfosetFilter.__init__\[#x([\d|A-F]{4,4})-#x([\d|A-F]{4,4})\]combiningCharacterInfosetFilter.coercePubidmax_unicodereplaceFormFeedCharactersspecialCharactershex_strreplaceCharsComments cannot contain adjacent dashesInfosetFilter.coerceElementnonXmlNameBMPRegexpreCharRangeInfosetFilter.fromXmlNamereplaceCachemissingRangesregexpnonXmlNameFirstBMPRegexp[^ 
a-zA-Z0-9\-'()+,./:=?;!*#@$_%]extenderInfosetFilter.coerceCharactersInfosetFilter.escapeCharpreventSingleQuotePubidInfosetFilter.toXmlNamecharRangesAttributes cannot begin with xmlnsxmlns:replacementRegexpnormaliseCharListbaseChar[#x4E00-#x9FA5] | #x3007 | [#x3021-#x3029]
#x00B7 | #x02D0 | #x02D1 | #x0387 | #x0640 | #x0E46 | #x0EC6 | #x3005 |
#[#x3031-#x3035] | [#x309D-#x309E] | [#x30FC-#x30FE]charStringToListInfosetFilter.getReplacementCharacterPubid cannot contain single quoteU%05XlistToRegexpStrInfosetFilter.unescapeCharhexToIntescapeRegexptransport_encodingpendingEncodingattrValuequoteCharSkip past a list of charactersrawStreamchunkOffsetchunkSizeProvides a unicode stream of characters to the HTMLTokenizer.

    This class takes care of character encoding and removing or replacing
    incorrect byte-sequences and also provides column and line tracking.

    same_origin_parent_encodingquoteMarkoldPositionEncodingParser.handlePossibleEndTagReturn the python codec name corresponding to an encoding or None if the
    string doesn't correspond to a valid encoding.HTMLBinaryInputStream.detectEncodingMetanewEncodingremainingBytescurrentByteContentAttrParser.parseSkip over commentscharsUntilRegExlikely_encodingdefault_encodinguseChardetBufferedStream.seekLook for the next sequence of bytes matching a given sequence. If
        a match is found advance the position to the last byte of the matchEncodingBytes.__iter__dataStreamHTMLUnicodeInputStream.characterErrorsUCS2openStreamInitialises the HTMLInputStream.

        HTMLInputStream(source, [encoding]) -> Normalized stream from source
        for use by html5lib.

        source can be either a file-object, local filename or a string.

        The optional encoding parameter must be a string that indicates
        the encoding.  If specified, that encoding will be used,
        regardless of any BOM or later declaration (such as in a meta
        element)

        skipUntilString-like object with an associated position and various extra methods
    If the position is ever greater than the string length then an exception is
    raiseddetermineEncodingHTMLUnicodeInputStream._positionEncodingBytes.matchByteshandlePossibleTagBuffering for streams that do not have buffering of their own

    The buffer is implemented as a list of chunks on the assumption that
    joining many strings will be slow since it is O(n**2)
    keepParsingHTMLUnicodeInputStream.characterErrorsUCS4getPositionMini parser for detecting character encoding from meta elements_readStreamattrNameReport the encoding declared by the meta element
        BufferedStream.tellgetCurrentByteHTMLUnicodeInputStream.openStreamLook for a sequence of bytes at the start of a string. If the bytes
        are found return True and advance the position to the byte after the
        match. Otherwise return False and leave the position aloneEncodingBytes.previousEncodingParser.__init__prevNumColsHTMLBinaryInputStream.determineEncodingHTMLUnicodeInputStream.positionHTMLBinaryInputStream.resetHTMLBinaryInputStream.changeEncodingEncodingBytes.__new___defaultChunkSizepositionLinespaceCharactersBytes Returns a string of characters from the stream up to but not
        including any character in 'characters' or EOF. 'characters' must be
        a container that supports the 'in' method and iteration over its
        characters.
        EncodingParser.handleMeta<module html5lib._inputstream>Returns (line, col) of the current position in the stream.buffersEncodingBytes.setPosition[---Âï·-ï·¯ï¿¾ï¿¿ð¿¾ð¿¿ð¯¿¾ð¯¿¿ð¿¿¾ð¿¿¿ñ¿¾ñ¿¿ñ¿¾ñ¿¿ñ¯¿¾ñ¯¿¿ñ¿¿¾ñ¿¿¿ò¿¾ò¿¿ò¿¾ò¿¿ò¯¿¾ò¯¿¿ò¿¿¾ò¿¿¿ó¿¾ó¿¿ó¿¾ó¿¿ó¯¿¾ó¯¿¿ó¿¿¾ó¿¿¿ô¿¾ô¿¿]contentParser[	- -/:-@\[-`{-~]EncodingParser.handleOtherBufferedStream._readStreamasciiLettersBytesfinditerlastLinePospositionColumnEncoding changed from %s to %s¼    éþÿ éþÿ éþÿ éþÿ éþÿ éÿÿ éÿÿ éÿÿ éÿÿ
 éÿÿ éÿÿ éÿÿ éþÿ éþÿ éþÿ éÿÿ éÿÿ éÿÿ	 éÿÿ éÿÿ éÿÿ éÿÿ éþÿ
 éþÿ éþÿ éþÿ éþÿ éÿÿ éþÿ éþÿ éþÿ	 éÿÿ bytesToReadEncodingParser.handleCommenthasPragmaEncodingBytes.__init__\x%02x_readFromBuffernewPositionjumpTobomDictreportCharacterErrorsnumBytesChardetlastvstring - the data to work on for encoding detectionnewLinesHTMLUnicodeInputStream.__init__ Read one character from the stream or queue if available. Return
            EOF when EOF is reached.
        bufferedDataasciiUppercaseBytesEncodingBytes.skipUntilHTMLUnicodeInputStream.ungetdetectBOMEncodingParser.handlePossibleTag"\uD800-\uDFFF"Cannot set an encoding with a unicode input, set %rReturn a name,value pair for the next attribute in the stream,
        if one is found, or NonehandlePossibleStartTagBufferedStream._readFromBuffernon_bmp_invalid_codepointsEncodingBytes.jumpToEncodingBytes.__next__HTMLBinaryInputStream.detectBOMBufferedStream.readgetEncodingbufferIndexoppositeHTMLBinaryInputStream.openStreamAttempts to detect at BOM at the start of the stream. If
        an encoding can be determined from the BOM return the name of the
        encoding otherwise return NonebufferOffsetnumBytesMetalookupEncodingHTMLUnicodeInputStream.resetEncodingBytes.getCurrentByteEncodingBytes.nextC:\code\venv\callllama\lib\site-packages\html5lib\_inputstream.pyEncodingParser.getAttribute_bufferedBytesBufferedStream.__init__spacesAngleBracketsreadChunkBufferedStream._bufferedBytesprevNumLinesHTMLUnicodeInputStream.readChunktentativeEncodinginvalid_unicode_reHTMLBinaryInputStream.__init__ContentAttrParser.__init__isUnicodeEncodingParser.handlePossibleStartTaginvalid_unicode_no_surrogate^%sascii_punctuation_reHTMLUnicodeInputStream.charsUntilProduces a file object from source.

        source can be either a file object, local filename or a string.

        _bufferedCharactermethodDispatchEncodingParser.getEncodingEncodingBytes.getPositioncommentEndStatenullCountHTMLTokenizer.scriptDataDoubleEscapedDashStatescriptDataEscapedDashStatescriptDataLessThanSignStatecommentEndBangStateallowedCharfromAttributecharStackentityNameentityLengthtokenTypeHTMLTokenizer.selfClosingStartTagStatecommentStartDashStatecommentEndDashStateafterDoctypeNameStateHTMLTokenizer.tagOpenStatescriptDataEndTagOpenStateHTMLTokenizer.scriptDataDoubleEscapedDashDashStateHTMLTokenizer.scriptDataEscapedDashDashStateunexpected-end-of-doctypeHTMLTokenizer.afterDoctypeSystemIdentifierState--!ï¿½-ï¿½eof-in-attribute-nameThis method replaces the need for "entityInAttributeValueState".
        expected-closing-tag-but-got-right-bracketdoctypeSystemIdentifierDoubleQuotedStatecdataSectionStateunexpected-character-in-unquoted-attribute-valueHTMLTokenizer.commentEndStateattributeValueDoubleQuotedStateattributeValueUnQuotedStateThis function returns either U+FFFD or the character based on the
        decimal or hexadecimal representation. It also discards ";" if present.
        If not present self.tokenQueue.append({"type": tokenTypes["ParseError"]}) is invoked.
        scriptDataDoubleEscapedLessThanSignStatelastFourCharsscriptDataEscapedEndTagOpenStateconsumeEntityHTMLTokenizer.scriptDataEscapeStartDashStateHTMLTokenizer.rawtextEndTagNameStateHTMLTokenizer.beforeDoctypeNameStatescriptDataEscapedEndTagNameStateattributes-in-end-tagdataStateHTMLTokenizer.scriptDataEscapedDashStateHTMLTokenizer.characterReferenceInRcdataentityDataStatetagNameStateeof-in-doctypeexpected-doctype-name-but-got-right-bracketHTMLTokenizer.doctypePublicIdentifierDoubleQuotedStateequals-in-unquoted-attribute-valueunexpected-EOF-after-solidus-in-tagHTMLTokenizer.betweenDoctypePublicAndSystemIdentifiersStateHTMLTokenizer.scriptDataEscapeStartStateHTMLTokenizer.entityDataStateHTMLTokenizer.scriptDataEscapedStateescapeFlagHTMLTokenizer.__init__This method is a generic handler for emitting the tags. It also sets
        the state to "data" because that's what's needed after a token has been
        emitted.
        afterAttributeNameStaterawtextEndTagOpenStateHTMLTokenizer.emitCurrentTokenHTMLTokenizer.rcdataEndTagNameStatepopleftprocessEntityInAttributeHTMLTokenizer.doctypeSystemIdentifierDoubleQuotedStateafterDoctypePublicIdentifierStateeof-in-attribute-value-no-quotesHTMLTokenizer.afterAttributeNameState This is where the magic happens.

        We do our usually processing through the states and when we have a token
        to return we yield the token which pauses processing until the next token
        is requested.
        HTMLTokenizer.scriptDataEndTagNameStateHTMLTokenizer.attributeValueSingleQuotedStateisHexeof-in-commenteof-in-comment-double-dashafterAttributeValueStateHTMLTokenizer.beforeAttributeValueStateHTMLTokenizer.commentEndDashStateHTMLTokenizer.afterDoctypeNameStateHTMLTokenizer.attributeValueUnQuotedStatebeforeDoctypePublicIdentifierStateHTMLTokenizer.afterAttributeValueStateduplicate-attributebogusCommentStateHTMLTokenizer.scriptDataEscapedLessThanSignStateHTMLTokenizer.dataStateexpected-end-of-tag-but-got-eofneed-space-after-doctypeemitTokenunexpected-EOF-after-attribute-valueeof-in-comment-end-bang-stateHTMLTokenizer.scriptDataLessThanSignStateHTMLTokenizer.commentStartDashStateradixexpected-attribute-value-but-got-right-bracketHTMLTokenizer.commentStateunexpected-char-in-commentexpected-named-entityHTMLTokenizer.afterDoctypePublicKeywordStateexpected-space-or-right-bracket-in-doctypeHTMLTokenizer.commentStartStateHTMLTokenizer.attributeNameStateHTMLTokenizer.markupDeclarationOpenStateHTMLTokenizer.rcdataEndTagOpenStateself-closing-flag-on-end-tagscriptDataDoubleEscapeStartStatedoctypeNameStateconsumeNumberEntitybogusDoctypeStateillegal-codepoint-for-numeric-entityHTMLTokenizer.scriptDataDoubleEscapedLessThanSignStateHTMLTokenizer.afterDoctypePublicIdentifierStateHTMLTokenizer.rawtextEndTagOpenState--ï¿½HTMLTokenizer.bogusCommentStateHTMLTokenizer.rcdataStateeof-in-attribute-value-double-quoteunexpected-character-after-solidus-in-tagHTMLTokenizer.tagNameStateHTMLTokenizer.rcdataLessThanSignStateunexpected-char-in-doctypecharAsIntHTMLTokenizer.__iter__incorrect-commentexpected-tag-name-but-got-right-bracketHTMLTokenizer.scriptDataDoubleEscapeStartStateHTMLTokenizer.attributeValueDoubleQuotedStateC:\code\venv\callllama\lib\site-packages\html5lib\_tokenizer.pyHTMLTokenizer.commentEndBangStateafterDoctypeSystemKeywordStateeof-in-script-in-scriptunexpected-character-after-attribute-valuecloseTagOpenStateHTMLTokenizer.processEntityInAttributeunexpected-dash-after-double-dash-in-commentHTMLTokenizer.rawtextStateeof-in-attribute-value-single-quotematchedleavingThisStatehtml5lib._tokenizerHTMLTokenizer.beforeDoctypePublicIdentifierStatenumeric-entity-without-semicoloneof-in-comment-end-dasheof-in-tag-name This class takes care of tokenizing HTML.

    * self.currentToken
      Holds the token that is currently being processed.

    * self.state
      Holds a reference to the method to be invoked... XXX

    * self.stream
      Points to HTMLInputStream object.
    HTMLTokenizer.consumeEntityHTMLTokenizer.doctypeNameStateHTMLTokenizer.scriptDataEndTagOpenStateHTMLTokenizer.afterDoctypeSystemKeywordStatescriptDataDoubleEscapedStatenamed-entity-without-semicolonbeforeAttributeNameStateexpected-tag-name-but-got-question-markexpected-numeric-entityHTMLTokenizer.scriptDataStateHTMLTokenizer.doctypeSystemIdentifierSingleQuotedStateHTMLTokenizer.bogusDoctypeStatetemporaryBufferunexpected-bang-after-double-dash-in-commentHTMLTokenizer.cdataSectionStaterawtextLessThanSignStateeof-in-doctype-nameHTMLTokenizer.rawtextLessThanSignStateHTMLTokenizer.beforeDoctypeSystemIdentifierStateexpected-dashes-or-doctypeHTMLTokenizer.scriptDataDoubleEscapedStateHTMLTokenizer.consumeNumberEntityexpected-doctype-name-but-got-eofdoctypePublicIdentifierSingleQuotedStateHTMLTokenizer.doctypePublicIdentifierSingleQuotedStatedoctypeState<module html5lib._tokenizer>entitiesTrie¾#   é   éþÿ
 éþÿ éþÿ éþÿ éÿÿ éÿÿ éÿÿ éÿÿ  éÿÿ
 éÿÿ éÿÿ éÿÿ éþÿ éþÿ	 éþÿ éþÿ éþÿ éÿÿ éÿÿ éÿÿ éÿÿ	 éÿÿ éÿÿ éÿÿ éþÿ  éþÿ éþÿ éþÿ éþÿ éÿÿ éþÿ éþÿ éþÿ éÿÿ HTMLTokenizer.beforeAttributeNameStateinvalid-character-after-attribute-nameHTMLTokenizer.closeTagOpenStateHTMLTokenizer.scriptDataEscapedEndTagOpenStateinvalid-character-in-attribute-nameHTMLTokenizer.scriptDataDoubleEscapeEndStateexpected-closing-tag-but-got-charexpected-attribute-name-but-got-eofHTMLTokenizer.scriptDataEscapedEndTagNameStateHTMLTokenizer.plaintextStateexpected-attribute-value-but-got-eofHTMLTokenizer.doctypeStateC:\code\venv\callllama\lib\site-packages\html5lib\_triePyTrieC:\code\venv\callllama\lib\site-packages\html5lib\_trie\__init__.pyhtml5lib._trie<module html5lib._trie>lprefix<module html5lib._trie._base>Abstract base class for triesC:\code\venv\callllama\lib\site-packages\html5lib\_trie\_base.pyhtml5lib._trie.datrieC:\code\venv\callllama\lib\site-packages\html5lib\_trie\datrie.py<module html5lib._trie.datrie>Trie.__init__.<locals>.<genexpr><module html5lib._trie.py>_keysC:\code\venv\callllama\lib\site-packages\html5lib\_trie\py.py_cachepoints_cachestrmoduleFactoryFactory.<locals>.moduleFactoryhtml5lib._utilsC:\code\venv\callllama\lib\site-packages\html5lib\_utils.pybaseModule"\uD800"_%s_factory_dictEntrieskwargs_tupleobjsmoduleCacheu"\uD800"<module html5lib._utils>Dict with 2 special properties:

    On initiation, keys that are lists, sets or tuples are converted to
    multiple keys so accessing any one of the items in the original
    list-like object returns the matching value

    md = MethodDispatcher({("foo", "bar"):"baz"})
    md["foo"] == "baz"

    A default value which can be set through the default attribute.
    memoize.<locals>.wrappedMethodDispatcher.__init__xml.etree.ElementTreeMethodDispatcher.__getitem__cElementTreexml.etree.cElementTreehttp://www.w3.org/1999/xlinkxml:baseUserWarningxlink:roleasciiLowercaseqnameformattingElementsdefinitionurldefinitionURLûé    u   ï¿½é   úé   u   â¬é   õ   Âé   u   âé   u   Æé   u   âé   u   â¦é   u   â é   u   â¡é   u   Ëé   u   â°é   u   Å é   u   â¹é   u   Åé   õ   Âé   u   Å½é   õ   Âé   õ   Âé   u   âé   u   âé   u   âé   u   âé   u   â¢é   u   âé   u   âé   u   Ëé   u   â¢é   u   Å¡é   u   âºé   u   Åé   õ   Âé   u   Å¾é   u   Å¸0xlink:actuatexlink:showhttp://www.w3.org/2000/svgxml:langunadjustForeignAttributesûzattributenamezattributeNamezattributetypezattributeTypezbasefrequencyzbaseFrequencyzbaseprofilezbaseProfilezcalcmodezcalcModezclippathunitszclipPathUnitszcontentscripttypezcontentScriptTypezcontentstyletypezcontentStyleTypezdiffuseconstantzdiffuseConstantzedgemodezedgeModezexternalresourcesrequiredzexternalResourcesRequiredz	filterresz	filterReszfilterunitszfilterUnitszglyphrefzglyphRefzgradienttransformzgradientTransformzgradientunitszgradientUnitszkernelmatrixzkernelMatrixzkernelunitlengthzkernelUnitLengthz	keypointsz	keyPointsz
keysplinesz
keySplineszkeytimeszkeyTimeszlengthadjustzlengthAdjustzlimitingconeanglezlimitingConeAnglezmarkerheightzmarkerHeightzmarkerunitszmarkerUnitszmarkerwidthzmarkerWidthzmaskcontentunitszmaskContentUnitsz	maskunitsz	maskUnitsz
numoctavesz
numOctavesz
pathlengthz
pathLengthzpatterncontentunitszpatternContentUnitszpatterntransformzpatternTransformzpatternunitszpatternUnitsz	pointsatxz	pointsAtXz	pointsatyz	pointsAtYz	pointsatzz	pointsAtZzpreservealphazpreserveAlphazpreserveaspectratiozpreserveAspectRatiozprimitiveunitszprimitiveUnitszrefxzrefXzrefyzrefYzrepeatcountzrepeatCountz	repeatdurz	repeatDurzrequiredextensionszrequiredExtensionszrequiredfeatureszrequiredFeatureszspecularconstantzspecularConstantzspecularexponentzspecularExponentzspreadmethodzspreadMethodzstartoffsetzstartOffsetzstddeviationzstdDeviationzstitchtileszstitchTileszsurfacescalezsurfaceScalezsystemlanguagezsystemLanguageztablevaluesztableValuesztargetxztargetXztargetyztargetYz
textlengthz
textLengthzviewboxzviewBoxz
viewtargetz
viewTargetzxchannelselectorzxChannelSelectorzychannelselectorzyChannelSelectorz
zoomandpanz
zoomAndPan0apos;C:\code\venv\callllama\lib\site-packages\html5lib\constants.py<module html5lib.constants>ascii_lettersûznull-characterz5Null character in input stream, replaced with U+FFFD.zinvalid-codepointzInvalid codepoint in stream.zincorrectly-placed-solidusz&Solidus (/) incorrectly placed in tag.zincorrect-cr-newline-entityz.Incorrect CR newline entity, replaced with LF.zillegal-windows-1252-entityz9Entity used with illegal number (windows-1252 reference).zcant-convert-numeric-entityzPNumeric entity couldn't be converted to character (codepoint U+%(charAsInt)08x).z$illegal-codepoint-for-numeric-entityzBNumeric entity represents an illegal codepoint: U+%(charAsInt)08x.z numeric-entity-without-semicolonz#Numeric entity didn't end with ';'.z#expected-numeric-entity-but-got-eofz1Numeric entity expected. Got end of file instead.zexpected-numeric-entityz'Numeric entity expected but none found.znamed-entity-without-semicolonz!Named entity didn't end with ';'.zexpected-named-entityz Named entity expected. Got none.zattributes-in-end-tagz'End tag contains unexpected attributes.zself-closing-flag-on-end-tagz.End tag contains unexpected self-closing flag.z'expected-tag-name-but-got-right-bracketz#Expected tag name. Got '>' instead.z'expected-tag-name-but-got-question-markzSExpected tag name. Got '?' instead. (HTML doesn't support processing instructions.)zexpected-tag-namez-Expected tag name. Got something else insteadz*expected-closing-tag-but-got-right-bracketz6Expected closing tag. Got '>' instead. Ignoring '</>'.z expected-closing-tag-but-got-eofz-Expected closing tag. Unexpected end of file.z!expected-closing-tag-but-got-charz<Expected closing tag. Unexpected character '%(data)s' found.zeof-in-tag-namez'Unexpected end of file in the tag name.z#expected-attribute-name-but-got-eofz8Unexpected end of file. Expected attribute name instead.zeof-in-attribute-namez)Unexpected end of file in attribute name.z#invalid-character-in-attribute-namez#Invalid character in attribute namezduplicate-attributez#Dropped duplicate attribute on tag.z$expected-end-of-tag-name-but-got-eofz1Unexpected end of file. Expected = or end of tag.z$expected-attribute-value-but-got-eofz1Unexpected end of file. Expected attribute value.z.expected-attribute-value-but-got-right-bracketz*Expected attribute value. Got '>' instead.z"equals-in-unquoted-attribute-valuez"Unexpected = in unquoted attributez0unexpected-character-in-unquoted-attribute-valuez*Unexpected character in unquoted attributez&invalid-character-after-attribute-namez*Unexpected character after attribute name.z*unexpected-character-after-attribute-valuez+Unexpected character after attribute value.z#eof-in-attribute-value-double-quotez.Unexpected end of file in attribute value (").z#eof-in-attribute-value-single-quotez.Unexpected end of file in attribute value (').z eof-in-attribute-value-no-quotesz*Unexpected end of file in attribute value.z#unexpected-EOF-after-solidus-in-tagz)Unexpected end of file in tag. Expected >z)unexpected-character-after-solidus-in-tagz/Unexpected character after / in tag. Expected >zexpected-dashes-or-doctypez&Expected '--' or 'DOCTYPE'. Not found.z,unexpected-bang-after-double-dash-in-commentz Unexpected ! after -- in commentz-unexpected-space-after-double-dash-in-commentz$Unexpected space after -- in commentzincorrect-commentzIncorrect comment.zeof-in-commentz"Unexpected end of file in comment.zeof-in-comment-end-dashz%Unexpected end of file in comment (-)z,unexpected-dash-after-double-dash-in-commentz+Unexpected '-' after '--' found in comment.zeof-in-comment-double-dashz'Unexpected end of file in comment (--).zeof-in-comment-end-space-statez"Unexpected end of file in comment.zeof-in-comment-end-bang-statez"Unexpected end of file in comment.zunexpected-char-in-commentz&Unexpected character in comment found.zneed-space-after-doctypez(No space after literal string 'DOCTYPE'.z+expected-doctype-name-but-got-right-bracketz.Unexpected > character. Expected DOCTYPE name.z!expected-doctype-name-but-got-eofz.Unexpected end of file. Expected DOCTYPE name.zeof-in-doctype-namez'Unexpected end of file in DOCTYPE name.zeof-in-doctypez"Unexpected end of file in DOCTYPE.z*expected-space-or-right-bracket-in-doctypez%Expected space or '>'. Got '%(data)s'zunexpected-end-of-doctypezUnexpected end of DOCTYPE.zunexpected-char-in-doctypez Unexpected character in DOCTYPE.zeof-in-innerhtmlzXXX innerHTML EOFzunexpected-doctypezUnexpected DOCTYPE. Ignored.znon-html-rootz%html needs to be the first start tag.zexpected-doctype-but-got-eofz)Unexpected End of file. Expected DOCTYPE.zunknown-doctypezErroneous DOCTYPE.zexpected-doctype-but-got-charsz2Unexpected non-space characters. Expected DOCTYPE.z"expected-doctype-but-got-start-tagz2Unexpected start tag (%(name)s). Expected DOCTYPE.z expected-doctype-but-got-end-tagz0Unexpected end tag (%(name)s). Expected DOCTYPE.zend-tag-after-implied-rootz?Unexpected end tag (%(name)s) after the (implied) root element.z&expected-named-closing-tag-but-got-eofz4Unexpected end of file. Expected end tag (%(name)s).z!two-heads-are-not-better-than-onez4Unexpected start tag head in existing head. Ignored.zunexpected-end-tagz'Unexpected end tag (%(name)s). Ignored.z#unexpected-start-tag-out-of-my-headz;Unexpected start tag (%(name)s) that can be in head. Moved.zunexpected-start-tagz Unexpected start tag (%(name)s).zmissing-end-tagzMissing end tag (%(name)s).zmissing-end-tagszMissing end tags (%(name)s).z$unexpected-start-tag-implies-end-tagzCUnexpected start tag (%(startName)s) implies end tag (%(endName)s).zunexpected-start-tag-treated-asz@Unexpected start tag (%(originalName)s). Treated as %(newName)s.zdeprecated-tagz,Unexpected start tag %(name)s. Don't use it!zunexpected-start-tag-ignoredz'Unexpected start tag %(name)s. Ignored.z$expected-one-end-tag-but-got-anotherzEUnexpected end tag (%(gotName)s). Missing end tag (%(expectedName)s).zend-tag-too-earlyz:End tag (%(name)s) seen too early. Expected other end tag.zend-tag-too-early-namedzFUnexpected end tag (%(gotName)s). Expected end tag (%(expectedName)s).zend-tag-too-early-ignoredz+End tag (%(name)s) seen too early. Ignored.zadoption-agency-1.1zQEnd tag (%(name)s) violates step 1, paragraph 1 of the adoption agency algorithm.zadoption-agency-1.2zQEnd tag (%(name)s) violates step 1, paragraph 2 of the adoption agency algorithm.zadoption-agency-1.3zQEnd tag (%(name)s) violates step 1, paragraph 3 of the adoption agency algorithm.zadoption-agency-4.4zQEnd tag (%(name)s) violates step 4, paragraph 4 of the adoption agency algorithm.zunexpected-end-tag-treated-asz>Unexpected end tag (%(originalName)s). Treated as %(newName)s.z
no-end-tagz'This element (%(name)s) has no end tag.z#unexpected-implied-end-tag-in-tablez9Unexpected implied end tag (%(name)s) in the table phase.z(unexpected-implied-end-tag-in-table-bodyz>Unexpected implied end tag (%(name)s) in the table body phase.z$unexpected-char-implies-table-voodoozDUnexpected non-space characters in table context caused voodoo mode.z unexpected-hidden-input-in-tablez3Unexpected input with type hidden in table context.zunexpected-form-in-tablez!Unexpected form in table context.z)unexpected-start-tag-implies-table-voodoozDUnexpected start tag (%(name)s) in table context caused voodoo mode.z'unexpected-end-tag-implies-table-voodoozBUnexpected end tag (%(name)s) in table context caused voodoo mode.zunexpected-cell-in-table-bodyzCUnexpected table cell start tag (%(name)s) in the table body phase.zunexpected-cell-end-tagzFGot table cell end tag (%(name)s) while required end tags are missing.z unexpected-end-tag-in-table-bodyz?Unexpected end tag (%(name)s) in the table body phase. Ignored.z'unexpected-implied-end-tag-in-table-rowz=Unexpected implied end tag (%(name)s) in the table row phase.zunexpected-end-tag-in-table-rowz>Unexpected end tag (%(name)s) in the table row phase. Ignored.zunexpected-select-in-selectzJUnexpected select start tag in the select phase treated as select end tag.zunexpected-input-in-selectz/Unexpected input start tag in the select phase.zunexpected-start-tag-in-selectzBUnexpected start tag token (%(name)s in the select phase. Ignored.zunexpected-end-tag-in-selectz;Unexpected end tag (%(name)s) in the select phase. Ignored.z5unexpected-table-element-start-tag-in-select-in-tablezKUnexpected table element start tag (%(name)s) in the select in table phase.z3unexpected-table-element-end-tag-in-select-in-tablezIUnexpected table element end tag (%(name)s) in the select in table phase.zunexpected-char-after-bodyz8Unexpected non-space characters in the after body phase.zunexpected-start-tag-after-bodyz>Unexpected start tag token (%(name)s) in the after body phase.zunexpected-end-tag-after-bodyz<Unexpected end tag token (%(name)s) in the after body phase.zunexpected-char-in-framesetz@Unexpected characters in the frameset phase. Characters ignored.z unexpected-start-tag-in-framesetzEUnexpected start tag token (%(name)s) in the frameset phase. Ignored.z)unexpected-frameset-in-frameset-innerhtmlzFUnexpected end tag token (frameset) in the frameset phase (innerHTML).zunexpected-end-tag-in-framesetzCUnexpected end tag token (%(name)s) in the frameset phase. Ignored.zunexpected-char-after-framesetzEUnexpected non-space characters in the after frameset phase. Ignored.z#unexpected-start-tag-after-framesetzEUnexpected start tag (%(name)s) in the after frameset phase. Ignored.z!unexpected-end-tag-after-framesetzCUnexpected end tag (%(name)s) in the after frameset phase. Ignored.z'unexpected-end-tag-after-body-innerhtmlz(Unexpected end tag after body(innerHtml)zexpected-eof-but-got-charz6Unexpected non-space characters. Expected end of file.zexpected-eof-but-got-start-tagz6Unexpected start tag (%(name)s). Expected end of file.zexpected-eof-but-got-end-tagz4Unexpected end tag (%(name)s). Expected end of file.zeof-in-tablez/Unexpected end of file. Expected table content.zeof-in-selectz0Unexpected end of file. Expected select content.zeof-in-framesetz2Unexpected end of file. Expected frameset content.zeof-in-script-in-scriptz0Unexpected end of file. Expected script content.zeof-in-foreign-landsz0Unexpected end of file. Expected foreign contentz&non-void-element-with-trailing-solidusz0Trailing solidus not allowed on element %(name)sz*unexpected-html-element-in-foreign-contentz2Element %(name)s not allowed in a non-html contextzunexpected-end-tag-before-htmlz*Unexpected end tag (%(name)s) before html.zunexpected-inhead-noscript-tagz9Element %(name)s not allowed in a inhead-noscript contextzeof-in-head-noscriptz8Unexpected end of file. Expected inhead-noscript contentzchar-in-head-noscriptz@Unexpected non-space character. Expected inhead-noscript contentzXXX-undefined-errorz0Undefined error (this sucks and should be fixed)0xmlns:xlinkRaised when the current tree is unable to represent the input datahttp://www.w3.org/1998/Math/MathMLhexdigitsxlink:hrefxlink:arcroleûzAEligõ   ÃzAElig;r   zAMPú&zAMP;r   zAacuteõ   ÃzAacute;r   zAbreve;u   ÄzAcircõ   ÃzAcirc;r   zAcy;u   ÐzAfr;u   ðzAgraveõ   ÃzAgrave;r   zAlpha;u   ÎzAmacr;u   ÄzAnd;u   â©zAogon;u   ÄzAopf;u   ð¸zApplyFunction;u   â¡zAringõ   ÃzAring;r   zAscr;u   ðzAssign;u   âzAtildeõ   ÃzAtilde;r   zAumlõ   ÃzAuml;r   z
Backslash;u   âzBarv;u   â«§zBarwed;u   âzBcy;u   ÐzBecause;u   âµzBernoullis;u   â¬zBeta;u   ÎzBfr;u   ðzBopf;u   ð¹zBreve;u   ËzBscr;u   â¬zBumpeq;u   âzCHcy;u   Ð§zCOPYõ   Â©zCOPY;r	   zCacute;u   ÄzCap;u   âzCapitalDifferentialD;u   âzCayleys;u   â­zCcaron;u   ÄzCcedilõ   ÃzCcedil;r
   zCcirc;u   ÄzCconint;u   â°zCdot;u   ÄzCedilla;õ   Â¸z
CenterDot;õ   Â·zCfr;u   â­zChi;u   Î§z
CircleDot;u   âzCircleMinus;u   âzCirclePlus;u   âzCircleTimes;u   âzClockwiseContourIntegral;u   â²zCloseCurlyDoubleQuote;u   âzCloseCurlyQuote;u   âzColon;u   â·zColone;u   â©´z
Congruent;u   â¡zConint;u   â¯zContourIntegral;u   â®zCopf;u   âz
Coproduct;u   âz CounterClockwiseContourIntegral;u   â³zCross;u   â¨¯zCscr;u   ðzCup;u   âzCupCap;u   âzDD;u   âz	DDotrahd;u   â¤zDJcy;u   ÐzDScy;u   ÐzDZcy;u   ÐzDagger;u   â¡zDarr;u   â¡zDashv;u   â«¤zDcaron;u   ÄzDcy;u   ÐzDel;u   âzDelta;u   ÎzDfr;u   ðzDiacriticalAcute;õ   Â´zDiacriticalDot;u   ËzDiacriticalDoubleAcute;u   ËzDiacriticalGrave;ú`zDiacriticalTilde;u   ËzDiamond;u   âzDifferentialD;u   âzDopf;u   ð»zDot;õ   Â¨zDotDot;u   âz	DotEqual;u   âzDoubleContourIntegral;u   â¯z
DoubleDot;r   zDoubleDownArrow;u   âzDoubleLeftArrow;u   âzDoubleLeftRightArrow;u   âzDoubleLeftTee;u   â«¤zDoubleLongLeftArrow;u   â¸zDoubleLongLeftRightArrow;u   âºzDoubleLongRightArrow;u   â¹zDoubleRightArrow;u   âzDoubleRightTee;u   â¨zDoubleUpArrow;u   âzDoubleUpDownArrow;u   âzDoubleVerticalBar;u   â¥z
DownArrow;u   âzDownArrowBar;u   â¤zDownArrowUpArrow;u   âµz
DownBreve;u   ÌzDownLeftRightVector;u   â¥zDownLeftTeeVector;u   â¥zDownLeftVector;u   â½zDownLeftVectorBar;u   â¥zDownRightTeeVector;u   â¥zDownRightVector;u   âzDownRightVectorBar;u   â¥zDownTee;u   â¤zDownTeeArrow;u   â§z
Downarrow;u   âzDscr;u   ðzDstrok;u   ÄzENG;u   ÅzETHõ   ÃzETH;r   zEacuteõ   ÃzEacute;r   zEcaron;u   ÄzEcircõ   ÃzEcirc;r   zEcy;u   Ð­zEdot;u   ÄzEfr;u   ðzEgraveõ   ÃzEgrave;r   zElement;u   âzEmacr;u   ÄzEmptySmallSquare;u   â»zEmptyVerySmallSquare;u   â«zEogon;u   ÄzEopf;u   ð¼zEpsilon;u   ÎzEqual;u   â©µzEqualTilde;u   âzEquilibrium;u   âzEscr;u   â°zEsim;u   â©³zEta;u   ÎzEumlõ   ÃzEuml;r   zExists;u   âzExponentialE;u   âzFcy;u   Ð¤zFfr;u   ðzFilledSmallSquare;u   â¼zFilledVerySmallSquare;u   âªzFopf;u   ð½zForAll;u   âzFouriertrf;u   â±zFscr;u   â±zGJcy;u   ÐzGTú>zGT;r   zGamma;u   ÎzGammad;u   ÏzGbreve;u   ÄzGcedil;u   Ä¢zGcirc;u   ÄzGcy;u   ÐzGdot;u   Ä zGfr;u   ðzGg;u   âzGopf;u   ð¾zGreaterEqual;u   â¥zGreaterEqualLess;u   âzGreaterFullEqual;u   â§zGreaterGreater;u   âª¢zGreaterLess;u   â·zGreaterSlantEqual;u   â©¾zGreaterTilde;u   â³zGscr;u   ð¢zGt;u   â«zHARDcy;u   ÐªzHacek;u   ËzHat;ú^zHcirc;u   Ä¤zHfr;u   âzHilbertSpace;u   âzHopf;u   âzHorizontalLine;u   âzHscr;u   âzHstrok;u   Ä¦zHumpDownHump;u   âz
HumpEqual;u   âzIEcy;u   ÐzIJlig;u   Ä²zIOcy;u   ÐzIacuteõ   ÃzIacute;r   zIcircõ   ÃzIcirc;r   zIcy;u   ÐzIdot;u   Ä°zIfr;u   âzIgraveõ   ÃzIgrave;r   zIm;u   âzImacr;u   ÄªzImaginaryI;u   âzImplies;u   âzInt;u   â¬z	Integral;u   â«zIntersection;u   âzInvisibleComma;u   â£zInvisibleTimes;u   â¢zIogon;u   Ä®zIopf;u   ðzIota;u   ÎzIscr;u   âzItilde;u   Ä¨zIukcy;u   ÐzIumlõ   ÃzIuml;r   zJcirc;u   Ä´zJcy;u   ÐzJfr;u   ðzJopf;u   ðzJscr;u   ð¥zJsercy;u   ÐzJukcy;u   ÐzKHcy;u   Ð¥zKJcy;u   ÐzKappa;u   ÎzKcedil;u   Ä¶zKcy;u   ÐzKfr;u   ðzKopf;u   ðzKscr;u   ð¦zLJcy;u   ÐzLTú<zLT;r   zLacute;u   Ä¹zLambda;u   ÎzLang;u   âªzLaplacetrf;u   âzLarr;u   âzLcaron;u   Ä½zLcedil;u   Ä»zLcy;u   ÐzLeftAngleBracket;u   â¨z
LeftArrow;u   âzLeftArrowBar;u   â¤zLeftArrowRightArrow;u   âzLeftCeiling;u   âzLeftDoubleBracket;u   â¦zLeftDownTeeVector;u   â¥¡zLeftDownVector;u   âzLeftDownVectorBar;u   â¥z
LeftFloor;u   âzLeftRightArrow;u   âzLeftRightVector;u   â¥zLeftTee;u   â£zLeftTeeArrow;u   â¤zLeftTeeVector;u   â¥zLeftTriangle;u   â²zLeftTriangleBar;u   â§zLeftTriangleEqual;u   â´zLeftUpDownVector;u   â¥zLeftUpTeeVector;u   â¥ zLeftUpVector;u   â¿zLeftUpVectorBar;u   â¥zLeftVector;u   â¼zLeftVectorBar;u   â¥z
Leftarrow;u   âzLeftrightarrow;u   âzLessEqualGreater;u   âzLessFullEqual;u   â¦zLessGreater;u   â¶z	LessLess;u   âª¡zLessSlantEqual;u   â©½z
LessTilde;u   â²zLfr;u   ðzLl;u   âzLleftarrow;u   âzLmidot;u   Ä¿zLongLeftArrow;u   âµzLongLeftRightArrow;u   â·zLongRightArrow;u   â¶zLongleftarrow;u   â¸zLongleftrightarrow;u   âºzLongrightarrow;u   â¹zLopf;u   ðzLowerLeftArrow;u   âzLowerRightArrow;u   âzLscr;u   âzLsh;u   â°zLstrok;u   ÅzLt;u   âªzMap;u   â¤zMcy;u   ÐzMediumSpace;u   âz
Mellintrf;u   â³zMfr;u   ðz
MinusPlus;u   âzMopf;u   ðzMscr;u   â³zMu;u   ÎzNJcy;u   ÐzNacute;u   ÅzNcaron;u   ÅzNcedil;u   ÅzNcy;u   ÐzNegativeMediumSpace;u   âzNegativeThickSpace;u   âzNegativeThinSpace;u   âzNegativeVeryThinSpace;u   âzNestedGreaterGreater;u   â«zNestedLessLess;u   âªzNewLine;Ú
zNfr;u   ðzNoBreak;u   â zNonBreakingSpace;õ   Â zNopf;u   âzNot;u   â«¬zNotCongruent;u   â¢z
NotCupCap;u   â­zNotDoubleVerticalBar;u   â¦zNotElement;u   âz	NotEqual;u   â zNotEqualTilde;u   âÌ¸z
NotExists;u   âzNotGreater;u   â¯zNotGreaterEqual;u   â±zNotGreaterFullEqual;u   â§Ì¸zNotGreaterGreater;u   â«Ì¸zNotGreaterLess;u   â¹zNotGreaterSlantEqual;u   â©¾Ì¸zNotGreaterTilde;u   âµzNotHumpDownHump;u   âÌ¸zNotHumpEqual;u   âÌ¸zNotLeftTriangle;u   âªzNotLeftTriangleBar;u   â§Ì¸zNotLeftTriangleEqual;u   â¬zNotLess;u   â®zNotLessEqual;u   â°zNotLessGreater;u   â¸zNotLessLess;u   âªÌ¸zNotLessSlantEqual;u   â©½Ì¸zNotLessTilde;u   â´zNotNestedGreaterGreater;u   âª¢Ì¸zNotNestedLessLess;u   âª¡Ì¸zNotPrecedes;u   âzNotPrecedesEqual;u   âª¯Ì¸zNotPrecedesSlantEqual;u   â zNotReverseElement;u   âzNotRightTriangle;u   â«zNotRightTriangleBar;u   â§Ì¸zNotRightTriangleEqual;u   â­zNotSquareSubset;u   âÌ¸zNotSquareSubsetEqual;u   â¢zNotSquareSuperset;u   âÌ¸zNotSquareSupersetEqual;u   â£z
NotSubset;u   ââzNotSubsetEqual;u   âzNotSucceeds;u   âzNotSucceedsEqual;u   âª°Ì¸zNotSucceedsSlantEqual;u   â¡zNotSucceedsTilde;u   â¿Ì¸zNotSuperset;u   ââzNotSupersetEqual;u   âz	NotTilde;u   âzNotTildeEqual;u   âzNotTildeFullEqual;u   âzNotTildeTilde;u   âzNotVerticalBar;u   â¤zNscr;u   ð©zNtildeõ   ÃzNtilde;r   zNu;u   ÎzOElig;u   ÅzOacuteõ   ÃzOacute;r   zOcircõ   ÃzOcirc;r    zOcy;u   ÐzOdblac;u   ÅzOfr;u   ðzOgraveõ   ÃzOgrave;r!   zOmacr;u   ÅzOmega;u   Î©zOmicron;u   ÎzOopf;u   ðzOpenCurlyDoubleQuote;u   âzOpenCurlyQuote;u   âzOr;u   â©zOscr;u   ðªzOslashõ   ÃzOslash;r"   zOtildeõ   ÃzOtilde;r#   zOtimes;u   â¨·zOumlõ   ÃzOuml;r$   zOverBar;u   â¾z
OverBrace;u   âzOverBracket;u   â´zOverParenthesis;u   âz	PartialD;u   âzPcy;u   ÐzPfr;u   ðzPhi;u   Î¦zPi;u   Î z
PlusMinus;õ   Â±zPoincareplane;u   âzPopf;u   âzPr;u   âª»z	Precedes;u   âºzPrecedesEqual;u   âª¯zPrecedesSlantEqual;u   â¼zPrecedesTilde;u   â¾zPrime;u   â³zProduct;u   âzProportion;u   â·zProportional;u   âzPscr;u   ð«zPsi;u   Î¨zQUOTú"zQUOT;r&   zQfr;u   ðzQopf;u   âzQscr;u   ð¬zRBarr;u   â¤zREGõ   Â®zREG;r'   zRacute;u   ÅzRang;u   â«zRarr;u   â zRarrtl;u   â¤zRcaron;u   ÅzRcedil;u   ÅzRcy;u   Ð zRe;u   âzReverseElement;u   âzReverseEquilibrium;u   âzReverseUpEquilibrium;u   â¥¯zRfr;u   âzRho;u   Î¡zRightAngleBracket;u   â©zRightArrow;u   âzRightArrowBar;u   â¥zRightArrowLeftArrow;u   âzRightCeiling;u   âzRightDoubleBracket;u   â§zRightDownTeeVector;u   â¥zRightDownVector;u   âzRightDownVectorBar;u   â¥zRightFloor;u   âz	RightTee;u   â¢zRightTeeArrow;u   â¦zRightTeeVector;u   â¥zRightTriangle;u   â³zRightTriangleBar;u   â§zRightTriangleEqual;u   âµzRightUpDownVector;u   â¥zRightUpTeeVector;u   â¥zRightUpVector;u   â¾zRightUpVectorBar;u   â¥zRightVector;u   âzRightVectorBar;u   â¥zRightarrow;u   âzRopf;u   âzRoundImplies;u   â¥°zRrightarrow;u   âzRscr;u   âzRsh;u   â±zRuleDelayed;u   â§´zSHCHcy;u   Ð©zSHcy;u   Ð¨zSOFTcy;u   Ð¬zSacute;u   ÅzSc;u   âª¼zScaron;u   Å zScedil;u   ÅzScirc;u   ÅzScy;u   Ð¡zSfr;u   ðzShortDownArrow;u   âzShortLeftArrow;u   âzShortRightArrow;u   âzShortUpArrow;u   âzSigma;u   Î£zSmallCircle;u   âzSopf;u   ðzSqrt;u   âzSquare;u   â¡zSquareIntersection;u   âzSquareSubset;u   âzSquareSubsetEqual;u   âzSquareSuperset;u   âzSquareSupersetEqual;u   âzSquareUnion;u   âzSscr;u   ð®zStar;u   âzSub;u   âzSubset;u   âzSubsetEqual;u   âz	Succeeds;u   â»zSucceedsEqual;u   âª°zSucceedsSlantEqual;u   â½zSucceedsTilde;u   â¿z	SuchThat;u   âzSum;u   âzSup;u   âz	Superset;u   âzSupersetEqual;u   âzSupset;u   âzTHORNõ   ÃzTHORN;r(   zTRADE;u   â¢zTSHcy;u   ÐzTScy;u   Ð¦zTab;ú	zTau;u   Î¤zTcaron;u   Å¤zTcedil;u   Å¢zTcy;u   Ð¢zTfr;u   ðz
Therefore;u   â´zTheta;u   ÎzThickSpace;u   ââz
ThinSpace;u   âzTilde;u   â¼zTildeEqual;u   âzTildeFullEqual;u   âzTildeTilde;u   âzTopf;u   ðz
TripleDot;u   âzTscr;u   ð¯zTstrok;u   Å¦zUacuteõ   ÃzUacute;r*   zUarr;u   âz	Uarrocir;u   â¥zUbrcy;u   ÐzUbreve;u   Å¬zUcircõ   ÃzUcirc;r+   zUcy;u   Ð£zUdblac;u   Å°zUfr;u   ðzUgraveõ   ÃzUgrave;r,   zUmacr;u   Åªz	UnderBar;Ú_zUnderBrace;u   âzUnderBracket;u   âµzUnderParenthesis;u   âzUnion;u   âz
UnionPlus;u   âzUogon;u   Å²zUopf;u   ðzUpArrow;u   âzUpArrowBar;u   â¤zUpArrowDownArrow;u   âzUpDownArrow;u   âzUpEquilibrium;u   â¥®zUpTee;u   â¥zUpTeeArrow;u   â¥zUparrow;u   âzUpdownarrow;u   âzUpperLeftArrow;u   âzUpperRightArrow;u   âzUpsi;u   ÏzUpsilon;u   Î¥zUring;u   Å®zUscr;u   ð°zUtilde;u   Å¨zUumlõ   ÃzUuml;r.   zVDash;u   â«zVbar;u   â««zVcy;u   ÐzVdash;u   â©zVdashl;u   â«¦zVee;u   âzVerbar;u   âzVert;u   âzVerticalBar;u   â£zVerticalLine;ú|zVerticalSeparator;u   âzVerticalTilde;u   âzVeryThinSpace;u   âzVfr;u   ðzVopf;u   ðzVscr;u   ð±zVvdash;u   âªzWcirc;u   Å´zWedge;u   âzWfr;u   ðzWopf;u   ðzWscr;u   ð²zXfr;u   ðzXi;u   ÎzXopf;u   ðzXscr;u   ð³zYAcy;u   Ð¯zYIcy;u   ÐzYUcy;u   Ð®zYacuteõ   ÃzYacute;r0   zYcirc;u   Å¶zYcy;u   Ð«zYfr;u   ðzYopf;u   ðzYscr;u   ð´zYuml;u   Å¸zZHcy;u   ÐzZacute;u   Å¹zZcaron;u   Å½zZcy;u   ÐzZdot;u   Å»zZeroWidthSpace;u   âzZeta;u   ÎzZfr;u   â¨zZopf;u   â¤zZscr;u   ðµzaacuteõ   Ã¡zaacute;r1   zabreve;u   Äzac;u   â¾zacE;u   â¾Ì³zacd;u   â¿zacircõ   Ã¢zacirc;r2   zacuter   zacute;r   zacy;u   Ð°zaeligõ   Ã¦zaelig;r3   zaf;u   â¡zafr;u   ðzagraveõ   Ã zagrave;r4   zalefsym;u   âµzaleph;u   âµzalpha;u   Î±zamacr;u   Äzamalg;u   â¨¿zampr   zamp;r   zand;u   â§zandand;u   â©zandd;u   â©z	andslope;u   â©zandv;u   â©zang;u   â zange;u   â¦¤zangle;u   â zangmsd;u   â¡z	angmsdaa;u   â¦¨z	angmsdab;u   â¦©z	angmsdac;u   â¦ªz	angmsdad;u   â¦«z	angmsdae;u   â¦¬z	angmsdaf;u   â¦­z	angmsdag;u   â¦®z	angmsdah;u   â¦¯zangrt;u   âzangrtvb;u   â¾z	angrtvbd;u   â¦zangsph;u   â¢zangst;r   zangzarr;u   â¼zaogon;u   Äzaopf;u   ðzap;u   âzapE;u   â©°zapacir;u   â©¯zape;u   âzapid;u   âzapos;ú'zapprox;u   âz	approxeq;u   âzaringõ   Ã¥zaring;r6   zascr;u   ð¶zast;Ú*zasymp;u   âzasympeq;u   âzatildeõ   Ã£zatilde;r8   zaumlõ   Ã¤zauml;r9   z	awconint;u   â³zawint;u   â¨zbNot;u   â«­z	backcong;u   âzbackepsilon;u   Ï¶z
backprime;u   âµzbacksim;u   â½z
backsimeq;u   âzbarvee;u   â½zbarwed;u   âz	barwedge;u   âzbbrk;u   âµz	bbrktbrk;u   â¶zbcong;u   âzbcy;u   Ð±zbdquo;u   âzbecaus;u   âµzbecause;u   âµzbemptyv;u   â¦°zbepsi;u   Ï¶zbernou;u   â¬zbeta;u   Î²zbeth;u   â¶zbetween;u   â¬zbfr;u   ðzbigcap;u   âzbigcirc;u   â¯zbigcup;u   âzbigodot;u   â¨z	bigoplus;u   â¨z
bigotimes;u   â¨z	bigsqcup;u   â¨zbigstar;u   âzbigtriangledown;u   â½zbigtriangleup;u   â³z	biguplus;u   â¨zbigvee;u   âz	bigwedge;u   âzbkarow;u   â¤zblacklozenge;u   â§«zblacksquare;u   âªzblacktriangle;u   â´zblacktriangledown;u   â¾zblacktriangleleft;u   âzblacktriangleright;u   â¸zblank;u   â£zblk12;u   âzblk14;u   âzblk34;u   âzblock;u   âzbne;u   =â¥zbnequiv;u   â¡â¥zbnot;u   âzbopf;u   ðzbot;u   â¥zbottom;u   â¥zbowtie;u   âzboxDL;u   âzboxDR;u   âzboxDl;u   âzboxDr;u   âzboxH;u   âzboxHD;u   â¦zboxHU;u   â©zboxHd;u   â¤zboxHu;u   â§zboxUL;u   âzboxUR;u   âzboxUl;u   âzboxUr;u   âzboxV;u   âzboxVH;u   â¬zboxVL;u   â£zboxVR;u   â zboxVh;u   â«zboxVl;u   â¢zboxVr;u   âzboxbox;u   â§zboxdL;u   âzboxdR;u   âzboxdl;u   âzboxdr;u   âzboxh;u   âzboxhD;u   â¥zboxhU;u   â¨zboxhd;u   â¬zboxhu;u   â´z	boxminus;u   âzboxplus;u   âz	boxtimes;u   â zboxuL;u   âzboxuR;u   âzboxul;u   âzboxur;u   âzboxv;u   âzboxvH;u   âªzboxvL;u   â¡zboxvR;u   âzboxvh;u   â¼zboxvl;u   â¤zboxvr;u   âzbprime;u   âµzbreve;u   Ëzbrvbarõ   Â¦zbrvbar;r:   zbscr;u   ð·zbsemi;u   âzbsim;u   â½zbsime;u   âzbsol;ú\zbsolb;u   â§z	bsolhsub;u   âzbull;u   â¢zbullet;u   â¢zbump;u   âzbumpE;u   âª®zbumpe;u   âzbumpeq;u   âzcacute;u   Äzcap;u   â©zcapand;u   â©z	capbrcup;u   â©zcapcap;u   â©zcapcup;u   â©zcapdot;u   â©zcaps;u   â©ï¸zcaret;u   âzcaron;u   Ëzccaps;u   â©zccaron;u   Äzccedilõ   Ã§zccedil;r<   zccirc;u   Äzccups;u   â©zccupssm;u   â©zcdot;u   Äzcedilr   zcedil;r   zcemptyv;u   â¦²zcentõ   Â¢zcent;r=   z
centerdot;r   zcfr;u   ð zchcy;u   Ñzcheck;u   âz
checkmark;u   âzchi;u   Ïzcir;u   âzcirE;u   â§zcirc;u   Ëzcirceq;u   âzcirclearrowleft;u   âºzcirclearrowright;u   â»z	circledR;r'   z	circledS;u   âzcircledast;u   âzcircledcirc;u   âzcircleddash;u   âzcire;u   âz	cirfnint;u   â¨zcirmid;u   â«¯zcirscir;u   â§zclubs;u   â£z	clubsuit;u   â£zcolon;ú:zcolone;u   âzcoloneq;u   âzcomma;ú,zcommat;ú@zcomp;u   âzcompfn;u   âzcomplement;u   âz
complexes;u   âzcong;u   âzcongdot;u   â©­zconint;u   â®zcopf;u   ðzcoprod;u   âzcopyr	   zcopy;r	   zcopysr;u   âzcrarr;u   âµzcross;u   âzcscr;u   ð¸zcsub;u   â«zcsube;u   â«zcsup;u   â«zcsupe;u   â«zctdot;u   â¯zcudarrl;u   â¤¸zcudarrr;u   â¤µzcuepr;u   âzcuesc;u   âzcularr;u   â¶zcularrp;u   â¤½zcup;u   âªz	cupbrcap;u   â©zcupcap;u   â©zcupcup;u   â©zcupdot;u   âzcupor;u   â©zcups;u   âªï¸zcurarr;u   â·zcurarrm;u   â¤¼zcurlyeqprec;u   âzcurlyeqsucc;u   âz	curlyvee;u   âzcurlywedge;u   âzcurrenõ   Â¤zcurren;rA   zcurvearrowleft;u   â¶zcurvearrowright;u   â·zcuvee;u   âzcuwed;u   âz	cwconint;u   â²zcwint;u   â±zcylcty;u   â­zdArr;u   âzdHar;u   â¥¥zdagger;u   â zdaleth;u   â¸zdarr;u   âzdash;u   âzdashv;u   â£zdbkarow;u   â¤zdblac;u   Ëzdcaron;u   Äzdcy;u   Ð´zdd;u   âzddagger;u   â¡zddarr;u   âzddotseq;u   â©·zdegõ   Â°zdeg;rB   zdelta;u   Î´zdemptyv;u   â¦±zdfisht;u   â¥¿zdfr;u   ð¡zdharl;u   âzdharr;u   âzdiam;u   âzdiamond;u   âzdiamondsuit;u   â¦zdiams;u   â¦zdie;r   zdigamma;u   Ïzdisin;u   â²zdiv;õ   Ã·zdividerC   zdivide;rC   zdivideontimes;u   âzdivonx;u   âzdjcy;u   Ñzdlcorn;u   âzdlcrop;u   âzdollar;ú$zdopf;u   ðzdot;u   Ëzdoteq;u   âz	doteqdot;u   âz	dotminus;u   â¸zdotplus;u   âz
dotsquare;u   â¡zdoublebarwedge;u   âz
downarrow;u   âzdowndownarrows;u   âzdownharpoonleft;u   âzdownharpoonright;u   âz	drbkarow;u   â¤zdrcorn;u   âzdrcrop;u   âzdscr;u   ð¹zdscy;u   Ñzdsol;u   â§¶zdstrok;u   Äzdtdot;u   â±zdtri;u   â¿zdtrif;u   â¾zduarr;u   âµzduhar;u   â¥¯zdwangle;u   â¦¦zdzcy;u   Ñz	dzigrarr;u   â¿zeDDot;u   â©·zeDot;u   âzeacuteõ   Ã©zeacute;rE   zeaster;u   â©®zecaron;u   Äzecir;u   âzecircõ   Ãªzecirc;rF   zecolon;u   âzecy;u   Ñzedot;u   Äzee;u   âzefDot;u   âzefr;u   ð¢zeg;u   âªzegraveõ   Ã¨zegrave;rG   zegs;u   âªzegsdot;u   âªzel;u   âªz	elinters;u   â§zell;u   âzels;u   âªzelsdot;u   âªzemacr;u   Äzempty;u   âz	emptyset;u   âzemptyv;u   âzemsp13;u   âzemsp14;u   âzemsp;u   âzeng;u   Åzensp;u   âzeogon;u   Äzeopf;u   ðzepar;u   âzeparsl;u   â§£zeplus;u   â©±zepsi;u   Îµzepsilon;u   Îµzepsiv;u   Ïµzeqcirc;u   âzeqcolon;u   âzeqsim;u   âzeqslantgtr;u   âªzeqslantless;u   âªzequals;ú=zequest;u   âzequiv;u   â¡zequivDD;u   â©¸z	eqvparsl;u   â§¥zerDot;u   âzerarr;u   â¥±zescr;u   â¯zesdot;u   âzesim;u   âzeta;u   Î·zethõ   Ã°zeth;rI   zeumlõ   Ã«zeuml;rJ   zeuro;u   â¬zexcl;ú!zexist;u   âzexpectation;u   â°zexponentiale;u   âzfallingdotseq;u   âzfcy;u   Ñzfemale;u   âzffilig;u   ï¬zfflig;u   ï¬zffllig;u   ï¬zffr;u   ð£zfilig;u   ï¬zfjlig;zfjzflat;u   â­zfllig;u   ï¬zfltns;u   â±zfnof;u   Æzfopf;u   ðzforall;u   âzfork;u   âzforkv;u   â«z	fpartint;u   â¨zfrac12õ   Â½zfrac12;rL   zfrac13;u   âzfrac14õ   Â¼zfrac14;rM   zfrac15;u   âzfrac16;u   âzfrac18;u   âzfrac23;u   âzfrac25;u   âzfrac34õ   Â¾zfrac34;rN   zfrac35;u   âzfrac38;u   âzfrac45;u   âzfrac56;u   âzfrac58;u   âzfrac78;u   âzfrasl;u   âzfrown;u   â¢zfscr;u   ð»zgE;u   â§zgEl;u   âªzgacute;u   Çµzgamma;u   Î³zgammad;u   Ïzgap;u   âªzgbreve;u   Äzgcirc;u   Äzgcy;u   Ð³zgdot;u   Ä¡zge;u   â¥zgel;u   âzgeq;u   â¥zgeqq;u   â§z	geqslant;u   â©¾zges;u   â©¾zgescc;u   âª©zgesdot;u   âªzgesdoto;u   âªz	gesdotol;u   âªzgesl;u   âï¸zgesles;u   âªzgfr;u   ð¤zgg;u   â«zggg;u   âzgimel;u   â·zgjcy;u   Ñzgl;u   â·zglE;u   âªzgla;u   âª¥zglj;u   âª¤zgnE;u   â©zgnap;u   âªz	gnapprox;u   âªzgne;u   âªzgneq;u   âªzgneqq;u   â©zgnsim;u   â§zgopf;u   ðzgrave;r   zgscr;u   âzgsim;u   â³zgsime;u   âªzgsiml;u   âªzgtr   zgt;r   zgtcc;u   âª§zgtcir;u   â©ºzgtdot;u   âzgtlPar;u   â¦zgtquest;u   â©¼z
gtrapprox;u   âªzgtrarr;u   â¥¸zgtrdot;u   âz
gtreqless;u   âzgtreqqless;u   âªzgtrless;u   â·zgtrsim;u   â³z
gvertneqq;u   â©ï¸zgvnE;u   â©ï¸zhArr;u   âzhairsp;u   âzhalf;rL   zhamilt;u   âzhardcy;u   Ñzharr;u   âzharrcir;u   â¥zharrw;u   â­zhbar;u   âzhcirc;u   Ä¥zhearts;u   â¥z
heartsuit;u   â¥zhellip;u   â¦zhercon;u   â¹zhfr;u   ð¥z	hksearow;u   â¤¥z	hkswarow;u   â¤¦zhoarr;u   â¿zhomtht;u   â»zhookleftarrow;u   â©zhookrightarrow;u   âªzhopf;u   ðzhorbar;u   âzhscr;u   ð½zhslash;u   âzhstrok;u   Ä§zhybull;u   âzhyphen;u   âziacuteõ   Ã­ziacute;rO   zic;u   â£zicircõ   Ã®zicirc;rP   zicy;u   Ð¸ziecy;u   Ðµziexclõ   Â¡ziexcl;rQ   ziff;u   âzifr;u   ð¦zigraveõ   Ã¬zigrave;rR   zii;u   âziiiint;u   â¨ziiint;u   â­ziinfin;u   â§ziiota;u   â©zijlig;u   Ä³zimacr;u   Ä«zimage;u   âz	imagline;u   âz	imagpart;u   âzimath;u   Ä±zimof;u   â·zimped;u   Æµzin;u   âzincare;u   âzinfin;u   âz	infintie;u   â§zinodot;u   Ä±zint;u   â«zintcal;u   âºz	integers;u   â¤z	intercal;u   âºz	intlarhk;u   â¨zintprod;u   â¨¼ziocy;u   Ñziogon;u   Ä¯ziopf;u   ðziota;u   Î¹ziprod;u   â¨¼ziquestõ   Â¿ziquest;rS   ziscr;u   ð¾zisin;u   âzisinE;u   â¹zisindot;u   âµzisins;u   â´zisinsv;u   â³zisinv;u   âzit;u   â¢zitilde;u   Ä©ziukcy;u   Ñziumlõ   Ã¯ziuml;rT   zjcirc;u   Äµzjcy;u   Ð¹zjfr;u   ð§zjmath;u   È·zjopf;u   ðzjscr;u   ð¿zjsercy;u   Ñzjukcy;u   Ñzkappa;u   Îºzkappav;u   Ï°zkcedil;u   Ä·zkcy;u   Ðºzkfr;u   ð¨zkgreen;u   Ä¸zkhcy;u   Ñzkjcy;u   Ñzkopf;u   ðzkscr;u   ðzlAarr;u   âzlArr;u   âzlAtail;u   â¤zlBarr;u   â¤zlE;u   â¦zlEg;u   âªzlHar;u   â¥¢zlacute;u   Äºz	laemptyv;u   â¦´zlagran;u   âzlambda;u   Î»zlang;u   â¨zlangd;u   â¦zlangle;u   â¨zlap;u   âªzlaquoõ   Â«zlaquo;rU   zlarr;u   âzlarrb;u   â¤zlarrbfs;u   â¤zlarrfs;u   â¤zlarrhk;u   â©zlarrlp;u   â«zlarrpl;u   â¤¹zlarrsim;u   â¥³zlarrtl;u   â¢zlat;u   âª«zlatail;u   â¤zlate;u   âª­zlates;u   âª­ï¸zlbarr;u   â¤zlbbrk;u   â²zlbrace;Ú{zlbrack;ú[zlbrke;u   â¦zlbrksld;u   â¦zlbrkslu;u   â¦zlcaron;u   Ä¾zlcedil;u   Ä¼zlceil;u   âzlcub;rV   zlcy;u   Ð»zldca;u   â¤¶zldquo;u   âzldquor;u   âzldrdhar;u   â¥§z	ldrushar;u   â¥zldsh;u   â²zle;u   â¤z
leftarrow;u   âzleftarrowtail;u   â¢zleftharpoondown;u   â½zleftharpoonup;u   â¼zleftleftarrows;u   âzleftrightarrow;u   âzleftrightarrows;u   âzleftrightharpoons;u   âzleftrightsquigarrow;u   â­zleftthreetimes;u   âzleg;u   âzleq;u   â¤zleqq;u   â¦z	leqslant;u   â©½zles;u   â©½zlescc;u   âª¨zlesdot;u   â©¿zlesdoto;u   âªz	lesdotor;u   âªzlesg;u   âï¸zlesges;u   âªzlessapprox;u   âªzlessdot;u   âz
lesseqgtr;u   âzlesseqqgtr;u   âªzlessgtr;u   â¶zlesssim;u   â²zlfisht;u   â¥¼zlfloor;u   âzlfr;u   ð©zlg;u   â¶zlgE;u   âªzlhard;u   â½zlharu;u   â¼zlharul;u   â¥ªzlhblk;u   âzljcy;u   Ñzll;u   âªzllarr;u   âz	llcorner;u   âzllhard;u   â¥«zlltri;u   âºzlmidot;u   Åzlmoust;u   â°zlmoustache;u   â°zlnE;u   â¨zlnap;u   âªz	lnapprox;u   âªzlne;u   âªzlneq;u   âªzlneqq;u   â¨zlnsim;u   â¦zloang;u   â¬zloarr;u   â½zlobrk;u   â¦zlongleftarrow;u   âµzlongleftrightarrow;u   â·zlongmapsto;u   â¼zlongrightarrow;u   â¶zlooparrowleft;u   â«zlooparrowright;u   â¬zlopar;u   â¦zlopf;u   ðzloplus;u   â¨­zlotimes;u   â¨´zlowast;u   âzlowbar;r-   zloz;u   âzlozenge;u   âzlozf;u   â§«zlpar;ú(zlparlt;u   â¦zlrarr;u   âz	lrcorner;u   âzlrhar;u   âzlrhard;u   â¥­zlrm;u   âzlrtri;u   â¿zlsaquo;u   â¹zlscr;u   ðzlsh;u   â°zlsim;u   â²zlsime;u   âªzlsimg;u   âªzlsqb;rW   zlsquo;u   âzlsquor;u   âzlstrok;u   Åzltr   zlt;r   zltcc;u   âª¦zltcir;u   â©¹zltdot;u   âzlthree;u   âzltimes;u   âzltlarr;u   â¥¶zltquest;u   â©»zltrPar;u   â¦zltri;u   âzltrie;u   â´zltrif;u   âz	lurdshar;u   â¥zluruhar;u   â¥¦z
lvertneqq;u   â¨ï¸zlvnE;u   â¨ï¸zmDDot;u   âºzmacrõ   Â¯zmacr;rY   zmale;u   âzmalt;u   â zmaltese;u   â zmap;u   â¦zmapsto;u   â¦zmapstodown;u   â§zmapstoleft;u   â¤z	mapstoup;u   â¥zmarker;u   â®zmcomma;u   â¨©zmcy;u   Ð¼zmdash;u   âzmeasuredangle;u   â¡zmfr;u   ðªzmho;u   â§zmicroõ   Âµzmicro;rZ   zmid;u   â£zmidast;r7   zmidcir;u   â«°zmiddotr   zmiddot;r   zminus;u   âzminusb;u   âzminusd;u   â¸zminusdu;u   â¨ªzmlcp;u   â«zmldr;u   â¦zmnplus;u   âzmodels;u   â§zmopf;u   ðzmp;u   âzmscr;u   ðzmstpos;u   â¾zmu;u   Î¼z	multimap;u   â¸zmumap;u   â¸znGg;u   âÌ¸znGt;u   â«âznGtv;u   â«Ì¸znLeftarrow;u   âznLeftrightarrow;u   âznLl;u   âÌ¸znLt;u   âªâznLtv;u   âªÌ¸znRightarrow;u   âznVDash;u   â¯znVdash;u   â®znabla;u   âznacute;u   Åznang;u   â âznap;u   âznapE;u   â©°Ì¸znapid;u   âÌ¸znapos;u   Åznapprox;u   âznatur;u   â®znatural;u   â®z	naturals;u   âznbspr   znbsp;r   znbump;u   âÌ¸znbumpe;u   âÌ¸zncap;u   â©zncaron;u   Åzncedil;u   Åzncong;u   âz	ncongdot;u   â©­Ì¸zncup;u   â©zncy;u   Ð½zndash;u   âzne;u   â zneArr;u   âznearhk;u   â¤¤znearr;u   âznearrow;u   âznedot;u   âÌ¸znequiv;u   â¢znesear;u   â¤¨znesim;u   âÌ¸znexist;u   âznexists;u   âznfr;u   ð«zngE;u   â§Ì¸znge;u   â±zngeq;u   â±zngeqq;u   â§Ì¸z
ngeqslant;u   â©¾Ì¸znges;u   â©¾Ì¸zngsim;u   âµzngt;u   â¯zngtr;u   â¯znhArr;u   âznharr;u   â®znhpar;u   â«²zni;u   âznis;u   â¼znisd;u   âºzniv;u   âznjcy;u   ÑznlArr;u   âznlE;u   â¦Ì¸znlarr;u   âznldr;u   â¥znle;u   â°znleftarrow;u   âznleftrightarrow;u   â®znleq;u   â°znleqq;u   â¦Ì¸z
nleqslant;u   â©½Ì¸znles;u   â©½Ì¸znless;u   â®znlsim;u   â´znlt;u   â®znltri;u   âªznltrie;u   â¬znmid;u   â¤znopf;u   ðznotõ   Â¬znot;r[   znotin;u   âznotinE;u   â¹Ì¸z	notindot;u   âµÌ¸znotinva;u   âznotinvb;u   â·znotinvc;u   â¶znotni;u   âznotniva;u   âznotnivb;u   â¾znotnivc;u   â½znpar;u   â¦z
nparallel;u   â¦znparsl;u   â«½â¥znpart;u   âÌ¸znpolint;u   â¨znpr;u   âznprcue;u   â znpre;u   âª¯Ì¸znprec;u   âznpreceq;u   âª¯Ì¸znrArr;u   âznrarr;u   âznrarrc;u   â¤³Ì¸znrarrw;u   âÌ¸znrightarrow;u   âznrtri;u   â«znrtrie;u   â­znsc;u   âznsccue;u   â¡znsce;u   âª°Ì¸znscr;u   ðz
nshortmid;u   â¤znshortparallel;u   â¦znsim;u   âznsime;u   âznsimeq;u   âznsmid;u   â¤znspar;u   â¦znsqsube;u   â¢znsqsupe;u   â£znsub;u   âznsubE;u   â«Ì¸znsube;u   âznsubset;u   ââz
nsubseteq;u   âznsubseteqq;u   â«Ì¸znsucc;u   âznsucceq;u   âª°Ì¸znsup;u   âznsupE;u   â«Ì¸znsupe;u   âznsupset;u   ââz
nsupseteq;u   âznsupseteqq;u   â«Ì¸zntgl;u   â¹zntildeõ   Ã±zntilde;r\   zntlg;u   â¸zntriangleleft;u   âªzntrianglelefteq;u   â¬zntriangleright;u   â«zntrianglerighteq;u   â­znu;u   Î½znum;ú#znumero;u   âznumsp;u   âznvDash;u   â­znvHarr;u   â¤znvap;u   ââznvdash;u   â¬znvge;u   â¥âznvgt;u   >âznvinfin;u   â§znvlArr;u   â¤znvle;u   â¤âznvlt;u   <âznvltrie;u   â´âznvrArr;u   â¤znvrtrie;u   âµâznvsim;u   â¼âznwArr;u   âznwarhk;u   â¤£znwarr;u   âznwarrow;u   âznwnear;u   â¤§zoS;u   âzoacuteõ   Ã³zoacute;r^   zoast;u   âzocir;u   âzocircõ   Ã´zocirc;r_   zocy;u   Ð¾zodash;u   âzodblac;u   Åzodiv;u   â¨¸zodot;u   âzodsold;u   â¦¼zoelig;u   Åzofcir;u   â¦¿zofr;u   ð¬zogon;u   Ëzograveõ   Ã²zograve;r`   zogt;u   â§zohbar;u   â¦µzohm;u   Î©zoint;u   â®zolarr;u   âºzolcir;u   â¦¾zolcross;u   â¦»zoline;u   â¾zolt;u   â§zomacr;u   Åzomega;u   Ïzomicron;u   Î¿zomid;u   â¦¶zominus;u   âzoopf;u   ð zopar;u   â¦·zoperp;u   â¦¹zoplus;u   âzor;u   â¨zorarr;u   â»zord;u   â©zorder;u   â´zorderof;u   â´zordfõ   Âªzordf;ra   zordmõ   Âºzordm;rb   zorigof;u   â¶zoror;u   â©zorslope;u   â©zorv;u   â©zoscr;u   â´zoslashõ   Ã¸zoslash;rc   zosol;u   âzotildeõ   Ãµzotilde;rd   zotimes;u   âz	otimesas;u   â¨¶zoumlõ   Ã¶zouml;re   zovbar;u   â½zpar;u   â¥zparaõ   Â¶zpara;rf   z	parallel;u   â¥zparsim;u   â«³zparsl;u   â«½zpart;u   âzpcy;u   Ð¿zpercnt;ú%zperiod;Ú.zpermil;u   â°zperp;u   â¥zpertenk;u   â±zpfr;u   ð­zphi;u   Ïzphiv;u   Ïzphmmat;u   â³zphone;u   âzpi;u   Ïz
pitchfork;u   âzpiv;u   Ïzplanck;u   âzplanckh;u   âzplankv;u   âzplus;ú+z	plusacir;u   â¨£zplusb;u   âzpluscir;u   â¨¢zplusdo;u   âzplusdu;u   â¨¥zpluse;u   â©²zplusmnr%   zplusmn;r%   zplussim;u   â¨¦zplustwo;u   â¨§zpm;r%   z	pointint;u   â¨zpopf;u   ð¡zpoundõ   Â£zpound;rj   zpr;u   âºzprE;u   âª³zprap;u   âª·zprcue;u   â¼zpre;u   âª¯zprec;u   âºzprecapprox;u   âª·zpreccurlyeq;u   â¼zpreceq;u   âª¯zprecnapprox;u   âª¹z	precneqq;u   âªµz	precnsim;u   â¨zprecsim;u   â¾zprime;u   â²zprimes;u   âzprnE;u   âªµzprnap;u   âª¹zprnsim;u   â¨zprod;u   âz	profalar;u   â®z	profline;u   âz	profsurf;u   âzprop;u   âzpropto;u   âzprsim;u   â¾zprurel;u   â°zpscr;u   ðzpsi;u   Ïzpuncsp;u   âzqfr;u   ð®zqint;u   â¨zqopf;u   ð¢zqprime;u   âzqscr;u   ðzquaternions;u   âzquatint;u   â¨zquest;ú?zquesteq;u   âzquotr&   zquot;r&   zrAarr;u   âzrArr;u   âzrAtail;u   â¤zrBarr;u   â¤zrHar;u   â¥¤zrace;u   â½Ì±zracute;u   Åzradic;u   âz	raemptyv;u   â¦³zrang;u   â©zrangd;u   â¦zrange;u   â¦¥zrangle;u   â©zraquoõ   Â»zraquo;rl   zrarr;u   âzrarrap;u   â¥µzrarrb;u   â¥zrarrbfs;u   â¤ zrarrc;u   â¤³zrarrfs;u   â¤zrarrhk;u   âªzrarrlp;u   â¬zrarrpl;u   â¥zrarrsim;u   â¥´zrarrtl;u   â£zrarrw;u   âzratail;u   â¤zratio;u   â¶z
rationals;u   âzrbarr;u   â¤zrbbrk;u   â³zrbrace;Ú}zrbrack;ú]zrbrke;u   â¦zrbrksld;u   â¦zrbrkslu;u   â¦zrcaron;u   Åzrcedil;u   Åzrceil;u   âzrcub;rm   zrcy;u   Ñzrdca;u   â¤·zrdldhar;u   â¥©zrdquo;u   âzrdquor;u   âzrdsh;u   â³zreal;u   âzrealine;u   âz	realpart;u   âzreals;u   âzrect;u   â­zregr'   zreg;r'   zrfisht;u   â¥½zrfloor;u   âzrfr;u   ð¯zrhard;u   âzrharu;u   âzrharul;u   â¥¬zrho;u   Ïzrhov;u   Ï±zrightarrow;u   âzrightarrowtail;u   â£zrightharpoondown;u   âzrightharpoonup;u   âzrightleftarrows;u   âzrightleftharpoons;u   âzrightrightarrows;u   âzrightsquigarrow;u   âzrightthreetimes;u   âzring;u   Ëzrisingdotseq;u   âzrlarr;u   âzrlhar;u   âzrlm;u   âzrmoust;u   â±zrmoustache;u   â±zrnmid;u   â«®zroang;u   â­zroarr;u   â¾zrobrk;u   â§zropar;u   â¦zropf;u   ð£zroplus;u   â¨®zrotimes;u   â¨µzrpar;ú)zrpargt;u   â¦z	rppolint;u   â¨zrrarr;u   âzrsaquo;u   âºzrscr;u   ðzrsh;u   â±zrsqb;rn   zrsquo;u   âzrsquor;u   âzrthree;u   âzrtimes;u   âzrtri;u   â¹zrtrie;u   âµzrtrif;u   â¸z	rtriltri;u   â§zruluhar;u   â¥¨zrx;u   âzsacute;u   Åzsbquo;u   âzsc;u   â»zscE;u   âª´zscap;u   âª¸zscaron;u   Å¡zsccue;u   â½zsce;u   âª°zscedil;u   Åzscirc;u   ÅzscnE;u   âª¶zscnap;u   âªºzscnsim;u   â©z	scpolint;u   â¨zscsim;u   â¿zscy;u   Ñzsdot;u   âzsdotb;u   â¡zsdote;u   â©¦zseArr;u   âzsearhk;u   â¤¥zsearr;u   âzsearrow;u   âzsectõ   Â§zsect;rp   zsemi;ú;zseswar;u   â¤©z	setminus;u   âzsetmn;u   âzsext;u   â¶zsfr;u   ð°zsfrown;u   â¢zsharp;u   â¯zshchcy;u   Ñzshcy;u   Ñz	shortmid;u   â£zshortparallel;u   â¥zshyõ   Â­zshy;rr   zsigma;u   Ïzsigmaf;u   Ïzsigmav;u   Ïzsim;u   â¼zsimdot;u   â©ªzsime;u   âzsimeq;u   âzsimg;u   âªzsimgE;u   âª zsiml;u   âªzsimlE;u   âªzsimne;u   âzsimplus;u   â¨¤zsimrarr;u   â¥²zslarr;u   âzsmallsetminus;u   âzsmashp;u   â¨³z	smeparsl;u   â§¤zsmid;u   â£zsmile;u   â£zsmt;u   âªªzsmte;u   âª¬zsmtes;u   âª¬ï¸zsoftcy;u   Ñzsol;ú/zsolb;u   â§zsolbar;u   â¿zsopf;u   ð¤zspades;u   â z
spadesuit;u   â zspar;u   â¥zsqcap;u   âzsqcaps;u   âï¸zsqcup;u   âzsqcups;u   âï¸zsqsub;u   âzsqsube;u   âz	sqsubset;u   âzsqsubseteq;u   âzsqsup;u   âzsqsupe;u   âz	sqsupset;u   âzsqsupseteq;u   âzsqu;u   â¡zsquare;u   â¡zsquarf;u   âªzsquf;u   âªzsrarr;u   âzsscr;u   ðzssetmn;u   âzssmile;u   â£zsstarf;u   âzstar;u   âzstarf;u   âzstraightepsilon;u   Ïµzstraightphi;u   Ïzstrns;rY   zsub;u   âzsubE;u   â«zsubdot;u   âª½zsube;u   âzsubedot;u   â«zsubmult;u   â«zsubnE;u   â«zsubne;u   âzsubplus;u   âª¿zsubrarr;u   â¥¹zsubset;u   âz	subseteq;u   âz
subseteqq;u   â«z
subsetneq;u   âzsubsetneqq;u   â«zsubsim;u   â«zsubsub;u   â«zsubsup;u   â«zsucc;u   â»zsuccapprox;u   âª¸zsucccurlyeq;u   â½zsucceq;u   âª°zsuccnapprox;u   âªºz	succneqq;u   âª¶z	succnsim;u   â©zsuccsim;u   â¿zsum;u   âzsung;u   âªzsup1õ   Â¹zsup1;rt   zsup2õ   Â²zsup2;ru   zsup3õ   Â³zsup3;rv   zsup;u   âzsupE;u   â«zsupdot;u   âª¾zsupdsub;u   â«zsupe;u   âzsupedot;u   â«zsuphsol;u   âzsuphsub;u   â«zsuplarr;u   â¥»zsupmult;u   â«zsupnE;u   â«zsupne;u   âzsupplus;u   â«zsupset;u   âz	supseteq;u   âz
supseteqq;u   â«z
supsetneq;u   âzsupsetneqq;u   â«zsupsim;u   â«zsupsub;u   â«zsupsup;u   â«zswArr;u   âzswarhk;u   â¤¦zswarr;u   âzswarrow;u   âzswnwar;u   â¤ªzszligõ   Ãzszlig;rw   ztarget;u   âztau;u   Ïztbrk;u   â´ztcaron;u   Å¥ztcedil;u   Å£ztcy;u   Ñztdot;u   âztelrec;u   âztfr;u   ð±zthere4;u   â´z
therefore;u   â´ztheta;u   Î¸z	thetasym;u   Ïzthetav;u   Ïzthickapprox;u   âz	thicksim;u   â¼zthinsp;u   âzthkap;u   âzthksim;u   â¼zthornõ   Ã¾zthorn;rx   ztilde;u   Ëztimesõ   Ãztimes;ry   ztimesb;u   â z	timesbar;u   â¨±ztimesd;u   â¨°ztint;u   â­ztoea;u   â¤¨ztop;u   â¤ztopbot;u   â¶ztopcir;u   â«±ztopf;u   ð¥ztopfork;u   â«ztosa;u   â¤©ztprime;u   â´ztrade;u   â¢z	triangle;u   âµztriangledown;u   â¿ztriangleleft;u   âztrianglelefteq;u   â´z
triangleq;u   âztriangleright;u   â¹ztrianglerighteq;u   âµztridot;u   â¬ztrie;u   âz	triminus;u   â¨ºztriplus;u   â¨¹ztrisb;u   â§ztritime;u   â¨»z	trpezium;u   â¢ztscr;u   ðztscy;u   Ñztshcy;u   Ñztstrok;u   Å§ztwixt;u   â¬ztwoheadleftarrow;u   âztwoheadrightarrow;u   â zuArr;u   âzuHar;u   â¥£zuacuteõ   Ãºzuacute;rz   zuarr;u   âzubrcy;u   Ñzubreve;u   Å­zucircõ   Ã»zucirc;r{   zucy;u   Ñzudarr;u   âzudblac;u   Å±zudhar;u   â¥®zufisht;u   â¥¾zufr;u   ð²zugraveõ   Ã¹zugrave;r|   zuharl;u   â¿zuharr;u   â¾zuhblk;u   âzulcorn;u   âz	ulcorner;u   âzulcrop;u   âzultri;u   â¸zumacr;u   Å«zumlr   zuml;r   zuogon;u   Å³zuopf;u   ð¦zuparrow;u   âzupdownarrow;u   âzupharpoonleft;u   â¿zupharpoonright;u   â¾zuplus;u   âzupsi;u   Ïzupsih;u   Ïzupsilon;u   Ïzupuparrows;u   âzurcorn;u   âz	urcorner;u   âzurcrop;u   âzuring;u   Å¯zurtri;u   â¹zuscr;u   ðzutdot;u   â°zutilde;u   Å©zutri;u   âµzutrif;u   â´zuuarr;u   âzuumlõ   Ã¼zuuml;r}   zuwangle;u   â¦§zvArr;u   âzvBar;u   â«¨zvBarv;u   â«©zvDash;u   â¨zvangrt;u   â¦zvarepsilon;u   Ïµz	varkappa;u   Ï°zvarnothing;u   âzvarphi;u   Ïzvarpi;u   Ïz
varpropto;u   âzvarr;u   âzvarrho;u   Ï±z	varsigma;u   Ïzvarsubsetneq;u   âï¸zvarsubsetneqq;u   â«ï¸zvarsupsetneq;u   âï¸zvarsupsetneqq;u   â«ï¸z	vartheta;u   Ïzvartriangleleft;u   â²zvartriangleright;u   â³zvcy;u   Ð²zvdash;u   â¢zvee;u   â¨zveebar;u   â»zveeeq;u   âzvellip;u   â®zverbar;r/   zvert;r/   zvfr;u   ð³zvltri;u   â²zvnsub;u   ââzvnsup;u   ââzvopf;u   ð§zvprop;u   âzvrtri;u   â³zvscr;u   ðzvsubnE;u   â«ï¸zvsubne;u   âï¸zvsupnE;u   â«ï¸zvsupne;u   âï¸zvzigzag;u   â¦zwcirc;u   Åµzwedbar;u   â©zwedge;u   â§zwedgeq;u   âzweierp;u   âzwfr;u   ð´zwopf;u   ð¨zwp;u   âzwr;u   âzwreath;u   âzwscr;u   ðzxcap;u   âzxcirc;u   â¯zxcup;u   âzxdtri;u   â½zxfr;u   ðµzxhArr;u   âºzxharr;u   â·zxi;u   Î¾zxlArr;u   â¸zxlarr;u   âµzxmap;u   â¼zxnis;u   â»zxodot;u   â¨zxopf;u   ð©zxoplus;u   â¨zxotime;u   â¨zxrArr;u   â¹zxrarr;u   â¶zxscr;u   ðzxsqcup;u   â¨zxuplus;u   â¨zxutri;u   â³zxvee;u   âzxwedge;u   âzyacuteõ   Ã½zyacute;r~   zyacy;u   Ñzycirc;u   Å·zycy;u   Ñzyenõ   Â¥zyen;r   zyfr;u   ð¶zyicy;u   Ñzyopf;u   ðªzyscr;u   ðzyucy;u   Ñzyumlõ   Ã¿zyuml;r   zzacute;u   Åºzzcaron;u   Å¾zzcy;u   Ð·zzdot;u   Å¼zzeetrf;u   â¨zzeta;u   Î¶zzfr;u   ð·zzhcy;u   Ð¶zzigrarr;u   âzzopf;u   ð«zzscr;u   ðzzwj;u   âzzwnj;u   â0entitiesWindows1252xlink:titlexlink:typeascii_lowercaseûÚ >   ú
irrelevantú	itemscopezstyle>   úscopedzimg>   úismapzaudio>   úcontrolsúautoplayzvideo>   úcontrolsúautoplayzscript>   údeferúasynczdetails>   úopenzdatagrid>   údisabledúmultiplezcommand>   údisabledúdefaultúcheckedúhiddenzhr>   únoshadezmenu>   ú
autosubmitzfieldset>   údisabledúreadonlyzoption>   údisabledúreadonlyúselectedzoptgroup>   údisabledúreadonlyzbutton>   údisabledú	autofocuszinput>   úismapú	autofocusúcheckedúrequiredúdisabledúreadonlyzselect>   údisabledúmultipleú	autofocusúreadonlyzoutput>   údisabledúreadonlyziframe>   úseamless0© i¬   iýÿ  i   i  i   i&   i    i!   iÆ  i0   i`  i9   iR  iýÿ  i}  iýÿ  iýÿ  i   i   i   i   i"   i   i   iÜ  i"!  ia  i:   iS  iýÿ  i~  ix  xml:spaceforeignObjectC:\code\venv\callllama\lib\site-packages\html5lib\filtersC:\code\venv\callllama\lib\site-packages\html5lib\filters\__init__.pyhtml5lib.filtersAlphabetizes attributes for elementsC:\code\venv\callllama\lib\site-packages\html5lib\filters\alphabeticalattributes.py_attr_key<module html5lib.filters.alphabeticalattributes>Return an appropriate key for an attribute for sorting

    Attributes have a namespace that can be either ``None`` or a string. We
    can't compare the two because they're different types, so we convert
    ``None`` to an empty string first.

    C:\code\venv\callllama\lib\site-packages\html5lib\filters\base.py<module html5lib.filters.base>Filter.__getattr__in_headmeta_foundpost_headpre_headhas_http_equiv_content_typeCreates a Filter

        :arg source: the source token stream

        :arg encoding: the encoding to set

        C:\code\venv\callllama\lib\site-packages\html5lib\filters\inject_meta_charset.pyhtml5lib.filters.inject_meta_charsettext/html; charset=%s<module html5lib.filters.inject_meta_charset>Injects ``<meta charset=ENCODING>`` tag into head of documenttagnameis_optional_endFilter.slideris_optional_startprevious2previous1©zaddresszarticlezasidez
blockquotezdatagridzdialogzdirzdivzdlzfieldsetzfooterzformzh1zh2zh3zh4zh5zh6zheaderzhrzmenuznavzolÚpzprezsectionztablezulhtml5lib.filters.optionaltags<module html5lib.filters.optionaltags>Filter.is_optional_endFilter.is_optional_startRemoves optional tags from the token streamC:\code\venv\callllama\lib\site-packages\html5lib\filters\optionaltags.pystroke-miterlimitmerrornohrefmathbackgroundglyph-nameaccumulate
                                ^
                                # Match a content type <application>/<type>
                                (?P<content_type>[-a-zA-Z0-9.]+/[-a-zA-Z0-9.]+)
                                # Match any character set and encoding
                                (?:(?:;charset=(?:[-a-zA-Z0-9]+)(?:;(?:base64))?)
                                  |(?:;(?:base64))?(?:;charset=(?:[-a-zA-Z0-9]+))?)
                                # Assume the rest is data
                                ,.*
                                $
                                dynsrcallowed_content_typesdraggableurl\s*\(\s*[^\s)]+?\s*\)\s*fill-ruledisplaystylelinethicknessmphantompreloadmfracstop-opacitytoppaddingrotateunselectablecolor-renderingpoint-sizedatafld¾'   úautoúdottedúaquaúblockúgrayúblackúboldúlimeúmaroonúfuchsiaúmediumúpointerúbothúnavyú
!importantútopúblueúnowrapúbrownúleftúnormalúcenterúsolidúcollapseúrightúbottomú	underlineúwhiteúgreenúsilverúoliveúyellowúitalicúpurpleúnoneútransparentútealúredúdashedbalanceunits-per-emmathvariantrepeat-minenctypestretchyunderline-positionarabic-formfont-sizeimage/gifC:\code\venv\callllama\lib\site-packages\html5lib\filters\sanitizer.pyhspacerowlinesallowed_attributesallowed_css_propertiesallowed_css_keywordsallowed_svg_propertiesallowed_protocolsattr_val_is_urisvg_attr_val_allows_refsvg_allow_local_hreffont-variantleftspacingmprescriptsoptimum^([:,;#%.\sa-zA-Z0-9!]|\w-\w|'[\s\w]+'|"[\s\w]+"|\([\d,\s]+\))*$marker-startpolygonchallengefont-stretchcolumnlinesfontweightstroke-dasharraympadded¾   ©Nzfill©Nzcolor-profile©Nzcursor©Nzmarker©Nzmask©Nzfilter©Nzstroke©Nz
marker-end©Nzmarker-start©Nz
marker-mid©Nz	clip-pathcompactvspacerowspan[` - -Â \s]+descentgalleryimginputmodeascentkeytypetoken_typeloopendmrootequalrowsmoverbordercolorbboxdatapagesize¾.   úbackground-colorúclearúwidthúunicode-bidiúfont-variantú	elevationú	font-sizeútext-decorationúcolorúborder-top-colorúspeak-numeralúfontúpause-beforeúfont-familyúpitch-rangeúvertical-alignúrichnessúborder-left-colorúletter-spacingúcursorúheightúvolumeúborder-right-colorúspeak-punctuationúborder-colorúpause-afterúazimuthústressútext-indentúspeak-headerú	directionúwhite-spaceúspeech-rateúfont-weightúfloatúline-heightú
font-styleúborder-bottom-colorúpitchúdisplayúpauseú
text-alignúborder-collapseúoverflowúvoice-familyúspeakstroke-opacityCreates a Filter

        :arg allowed_elements: set of elements to allow--everything else will
            be escaped

        :arg allowed_attributes: set of attributes to allow in
            elements--everything else will be stripped

        :arg allowed_css_properties: set of CSS properties to allow--everything
            else will be stripped

        :arg allowed_css_keywords: set of CSS keywords to allow--everything
            else will be stripped

        :arg allowed_svg_properties: set of SVG properties to allow--everything
            else will be removed

        :arg allowed_protocols: set of allowed protocols for URIs

        :arg allowed_content_types: set of allowed content types for ``data`` URIs.

        :arg attr_val_is_uri: set of attributes that have URI values--values
            that have a scheme not listed in ``allowed_protocols`` are removed

        :arg svg_attr_val_allows_ref: set of SVG attributes that can have
            references

        :arg svg_allow_local_href: set of SVG elements that can have local
            hrefs--these are removed

        shapefontstylemathematicalacronymstrikethrough-positionunderline-thicknessstroke-linejoinstemvwidths¾   ©NzlinearGradient©NzaltGlyph©NzanimateColor©Nztextpath©Nzanimate©Nzcursor©Nzuse©Nzfilter©Nztref©Nzpattern©NzradialGradient©NzanimateTransform©Nzset©NzfeImage©NzanimateMotionstroke-dashoffsethtml5lib.filters.sanitizerlspacebordercolordarkpanose-1^\s*([-\w]+\s*:[^:;]*(;\s*|$))*$multicoloverline-positionmathcolorstop-colorrowspacingu1longdescpostermtrkbdmspacemsuprowalignadditivegutterimage/webpcolumnspanstroke-linecapattr_namestabindextemplatecoordshoriz-adv-xcitemsubsuppqg^(#[0-9a-fA-F]+|rgb\(\d+%?,\d*%?,?\d*%?\)?|\d{0,2}\.?\d{0,2}(cm|em|ex|in|mm|pc|pt|px|%|,|\))?)$visibilityscriptlevel^\s*[^#\s].*hreflanglowsrcval_unescapedradiogroupx-heightfill-opacityallowed_tokenunicode-rangeimage/jpegimage/pngtext/plainimage/bmpFilter.allowed_tokentext-anchorfencehoriz-origin-xcap-heighturl\s*\(\s*[^#\s][^)]+?\)polylinedelayFilter.sanitize_cssvrmlminsizeaccent-heightdisallowed_tokencleanoverline-thicknessbottompaddingcellpaddingchoffcolumnspacingequalcolumnsrspacerightspacingusemapmtdrestartmunderovermmultiscriptsto_removemrowdatasrccontenteditablecolspanmaxlengthbgcolorrepeat-maxmpathu2valignsanitize_tokenfont-face-namestemhmissing-glyphmtableloopcountdataliststrikethrough-thicknesshidefocuscolumnalignhangingactiontype %s="%s"legendstroke-widthFilter.disallowed_tokendfnbordercolorlightdata_content_typebgpropertiesmstyle<module html5lib.filters.sanitizer>cellspacingfont-face-srctspanautocompleteellipse¾   úmailtoúfeedúwebcalúrtspúrsyncúdataúnntpútagúsftpúaimúcalltoúhttpússhúnewsúxmppúhttpsúftpúed2kúircútelnetúurnúafsúgophersuppress([-\w]+)\s*:\s*([^:;]*)<%s%s>defsmsqrtcharoffloopstarthkernaxisSanitizes token stream of XHTML+MathML+SVG and of inline style attributesFilter.sanitize_tokenmactionC:\code\venv\callllama\lib\site-packages\html5lib\filters\whitespace.pyspacePreserveElementscollapse_spaceshtml5lib.filters.whitespaceCollapses whitespace except in pre, textarea, and script elementsSPACES_REGEX<module html5lib.filters.whitespace>-//w3o//dtd w3 html strict 3.0//en//-/w3c/dtd html 4.0 transitional/engetPhases.<locals>.InRowPhase.__init__getPhases.<locals>.AfterBodyPhase.endTagOtherendTagIgnore-//w3c//dtd html 4.01 frameset//getPhases.<locals>.BeforeHeadPhase.startTagHeadEndTagTokengetPhases.<locals>.InTableBodyPhase.clearStackToTableBodyContextStartTagTokeninTableTextmalignmarkstartTagProcessInHeadHTMLParser._parsegetPhases.<locals>.InCellPhase.startTagTableOtherparseErrorgetPhases.<locals>.InSelectPhase.startTagInputgetPhases.<locals>.InCellPhase.endTagOtherstartTagHeadingcurrentNodeNamestartTagStyleScriptgetPhases.<locals>.AfterFramesetPhase.processEOF©ÚdebugÚlogÚgetMetaclassÚPhaseÚInitialPhaseÚBeforeHtmlPhaseÚBeforeHeadPhaseÚInHeadPhaseÚInHeadNoscriptPhaseÚAfterHeadPhaseÚInBodyPhaseÚ	TextPhaseÚInTablePhaseÚInTableTextPhaseÚInCaptionPhaseÚInColumnGroupPhaseÚInTableBodyPhaseÚ
InRowPhaseÚInCellPhaseÚInSelectPhaseÚInSelectInTablePhaseÚInForeignContentPhaseÚAfterBodyPhaseÚInFramesetPhaseÚAfterFramesetPhaseÚAfterAfterBodyPhaseÚAfterAfterFramesetPhasegetPhases.<locals>.BeforeHtmlPhaseendTagFormattingignoreEndTagTrendTagOptgroupgetPhases.<locals>.InCaptionPhase.endTagTableName of the character encoding that was used to decode the input stream, or
        :obj:`None` if that is not determined yet

        newModesnew_phasegetPhases.<locals>.Phase.processCommentgetPhases.<locals>.BeforeHtmlPhase.processCharactersinnerLoopCounterprocessStartTagstartTagScriptgetPhases.<locals>.BeforeHeadPhase.endTagOtherendTagPgetPhases.<locals>.TextPhase.startTagOthergetPhases.<locals>.AfterBodyPhase.__init__startTagTrgetPhases.<locals>.AfterBodyPhase.processCommentgetPhases.<locals>.InCellPhase.endTagIgnorestartTagTableCellrubygetPhases.<locals>.InTableTextPhase.processEndTaggetPhases.<locals>.InTablePhasestartTagMathParse a HTML fragment into a well-formed tree fragment

        :arg container: name of the element we're setting the innerHTML
            property if set to None, default to 'div'

        :arg stream: a file-like object or string containing the HTML to be parsed

            The optional encoding parameter must be a string that indicates
            the encoding.  If specified, that encoding will be used,
            regardless of any BOM or later declaration (such as in a meta
            element)

        :arg scripting: treat noscript elements as if JavaScript was turned on

        :returns: parsed tree

        Example:

        >>> from html5lib.html5libparser import HTMLParser
        >>> parser = HTMLParser()
        >>> parser.parseFragment('<b>this is a fragment</b>')
        <Element u'DOCUMENT_FRAGMENT' at 0x7feac484b090>

        classDictendTagTableRowGroupinTableBodygetPhases.<locals>.AfterAfterBodyPhase.startTagOthergetPhases.<locals>.InFramesetPhase.startTagFramesetendTagCaptionC:\code\venv\callllama\lib\site-packages\html5lib\html5parser.pygetPhases.<locals>.InBodyPhase.startTagParamSourceendTagBrisMathMLTextIntegrationPointDoctypeTokeninSelectInTablecontentTypestopNamesMapstartTagXmpendTagAppletMarqueeObjectgetPhases.<locals>.TextPhase.endTagScriptbookmarkresetInsertionModegetPhases.<locals>.InHeadNoscriptPhase.startTagOthergetPhases.<locals>.InBodyPhase.endTagBodyHTMLParser.normalizedTokensHTMLParser.parseFragmentgetPhases.<locals>.AfterBodyPhase.processCharactersendTagOptioninHeadgetPhases.<locals>.Phase.processDoctypegetPhases.<locals>.InSelectPhase.startTagScriptgetPhases.<locals>.InitialPhase.processStartTaggetPhases.<locals>.AfterHeadPhaseafterHeadafterAfterFramesetmatchingElementsgetPhases.<locals>.BeforeHeadPhase.__init__afeIndexgetPhases.<locals>.InSelectPhase.startTagOther©)7z*+//silmaril//dtd html pro v0r11 19970101//z4-//advasoft ltd//dtd html 3.0 aswedit + extensions//z*-//as//dtd html 3.0 aswedit + extensions//z-//ietf//dtd html 2.0 level 1//z-//ietf//dtd html 2.0 level 2//z&-//ietf//dtd html 2.0 strict level 1//z&-//ietf//dtd html 2.0 strict level 2//z-//ietf//dtd html 2.0 strict//z-//ietf//dtd html 2.0//z-//ietf//dtd html 2.1e//z-//ietf//dtd html 3.0//z-//ietf//dtd html 3.2 final//z-//ietf//dtd html 3.2//z-//ietf//dtd html 3//z-//ietf//dtd html level 0//z-//ietf//dtd html level 1//z-//ietf//dtd html level 2//z-//ietf//dtd html level 3//z"-//ietf//dtd html strict level 0//z"-//ietf//dtd html strict level 1//z"-//ietf//dtd html strict level 2//z"-//ietf//dtd html strict level 3//z-//ietf//dtd html strict//z-//ietf//dtd html//z(-//metrius//dtd metrius presentational//z5-//microsoft//dtd internet explorer 2.0 html strict//z.-//microsoft//dtd internet explorer 2.0 html//z0-//microsoft//dtd internet explorer 2.0 tables//z5-//microsoft//dtd internet explorer 3.0 html strict//z.-//microsoft//dtd internet explorer 3.0 html//z0-//microsoft//dtd internet explorer 3.0 tables//z#-//netscape comm. corp.//dtd html//z*-//netscape comm. corp.//dtd strict html//z*-//o'reilly and associates//dtd html 2.0//z3-//o'reilly and associates//dtd html extended 1.0//z;-//o'reilly and associates//dtd html extended relaxed 1.0//zN-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//zE-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//z$-//spyglass//dtd html 2.0 extended//z+-//sq//dtd html 2.0 hotmetal + extensions//z--//sun microsystems corp.//dtd hotjava html//z4-//sun microsystems corp.//dtd hotjava strict html//z-//w3c//dtd html 3 1995-03-24//z-//w3c//dtd html 3.2 draft//z-//w3c//dtd html 3.2 final//z-//w3c//dtd html 3.2//z-//w3c//dtd html 3.2s draft//z-//w3c//dtd html 4.0 frameset//z#-//w3c//dtd html 4.0 transitional//z(-//w3c//dtd html experimental 19960712//z&-//w3c//dtd html experimental 970421//z-//w3c//dtd w3 html//z-//w3o//dtd w3 html 3.0//z#-//webtechs//dtd mozilla html 2.0//z-//webtechs//dtd mozilla html//getPhases.<locals>.InHeadPhase.startTagNoscriptgetPhases.<locals>.TextPhase.__init__getPhases.<locals>.InCaptionPhase.startTagOthergetPhases.<locals>.InSelectInTablePhase.startTagTableendTagHtmlgetPhases.<locals>.AfterHeadPhase.startTagFromHeadgetPhases.<locals>.InCellPhase.closeCellgetPhases.<locals>.InForeignContentPhase.processCharacters.<locals>.<genexpr>errorcodegetPhases.<locals>.InHeadPhase.startTagNoFramesStylegetPhases.<locals>.InBodyPhase.processCharactersgetPhases.<locals>.InFramesetPhase.processCharactersgetPhases.<locals>.BeforeHeadPhase.processCharactersstartTagTextareagetPhases.<locals>.InBodyPhase.processEOFgetPhases.<locals>.Phase.processEOFgetPhases.<locals>.AfterAfterFramesetPhase.startTagOtherphasesgetPhases.<locals>.InColumnGroupPhase.startTagColDecoratedHTMLParser.normalizeTokenstartTagHtmlstartTagButtongetPhases.<locals>.InCellPhase.processCharactersgetPhases.<locals>.InBodyPhase.endTagListItemgetPhases.<locals>.InForeignContentPhase.processEndTaggetPhases.<locals>.InRowPhase.endTagTrgetPhases.<locals>.InHeadNoscriptPhase.processCommentÛ,   Úbúbigú
blockquoteúbodyúbrúcenterúcodeúddúdivúdlúdtúemúembedúh1úh2úh3úh4úh5úh6úheadúhrÚiúimgúliúlistingúmenuúmetaúnobrúolÚpúpreúrubyÚsúsmallúspanústrongústrikeúsubúsupútableúttÚuúulúvarform_attrsgetPhases.<locals>.InTablePhase.startTagInputgetPhases.<locals>.InCaptionPhase.endTagIgnoreinFramesetgetPhases.<locals>.InHeadPhase.endTagHtmlBodyBr-//w3c//dtd xhtml 1.0 frameset//startTagFormattingfirstStartTagstartTagMetaprocessSpaceCharactersDropNewlineprocessSpaceCharactersNonPreinCellafeAElementreprocessgetPhases.<locals>.InCaptionPhase.endTagOthergetPhases.<locals>.InBodyPhase.startTagXmpgetPhases.<locals>.AfterFramesetPhase.endTagHtmlendTagImplyHeadoriginalPhasegetPhases.<locals>.AfterAfterFramesetPhase.processCharactersuse_metaclassmetaclass_funcgetPhases.<locals>.InColumnGroupPhase.endTagOtherstartTagOptionstartTagRpRtgetPhases.<locals>.InRowPhase.startTagOthergetPhases.<locals>.InHeadNoscriptPhase.processCharacterstype_namesgetPhases.<locals>.InTablePhase.startTagColFunctionTypestartTagNobrgetPhases.<locals>.InColumnGroupPhase.__init__©zaddresszarticlezasidez
blockquotezbuttonzcenterzdetailszdialogzdirzdivzdlzfieldsetz
figcaptionzfigurezfooterzheaderzhgroupzlistingzmainzmenuznavzolzprezsectionzsummaryzulendTagColgroupgetPhases.<locals>.log.<locals>.wrappedgetPhases.<locals>.InFramesetPhase.endTagFramesetgetPhases.<locals>.InHeadPhase.processEOFmglyphstartTagPlaintextgetPhases.<locals>.AfterHeadPhase.endTagOthergetPhases.<locals>.InBodyPhase.endTagFormattingRCDATAgetPhases.<locals>.InCaptionPhase.processEOFouterLoopCounterfurthestBlockcommonAncestorlastNodeendTagHead Elements that should be children of other elements that have a
            different insertion mode; here they are ignored
            "caption", "col", "colgroup", "frame", "frameset", "head",
            "option", "optgroup", "tbody", "td", "tfoot", "th", "thead",
            "tr", "noscript"
            framesetOKRAWTEXTgetPhases.<locals>.BeforeHeadPhase.startTagOthergetPhases.<locals>.InSelectPhase.startTagSelectgetPhases.<locals>.InHeadNoscriptPhase.processEOFgetPhases.<locals>.InitialPhase.processSpaceCharactersstartTagOptgroupgetPhases.<locals>.AfterFramesetPhase.endTagOthergetPhases.<locals>.AfterAfterFramesetPhase.processEOFgetPhases.<locals>.InSelectPhase.endTagOthergetPhases.<locals>.InSelectInTablePhase.startTagOthergetPhases.<locals>.InBodyPhase.processSpaceCharactersDropNewlineapplication/xhtml+xmlreparseTokenNormalgetPhases.<locals>.InTableBodyPhase.endTagTableRowGroupHTMLParser.documentEncodingisMatchingFormattingElementgetPhases.<locals>.InHeadPhase.__init__inColumnGroup-//w3c//dtd html 4.01 transitional//getPhases.<locals>.BeforeHeadPhase.startTagHtmlgetPhases.<locals>.InSelectPhase.startTagOptgroupendTagBlockgetPhases.<locals>.AfterAfterFramesetPhase.processSpaceCharactersstartTagVoidFormattinggetPhases.<locals>.InBodyPhase.endTagBrgetPhases.<locals>.InHeadPhase.endTagHeadendTagHeadinggetPhases.<locals>.Phase.processSpaceCharactersgetPhases.<locals>.InCellPhase.processEOFExpected noscript got %sbeforeRCDataPhasegetPhases.<locals>.TextPhase.endTagOthergetPhases.<locals>.InBodyPhase.startTagSvggetPhases.<locals>.InFramesetPhase.__init__ûzselectzinSelectztdzinCellzthzinCellztrzinRowztbodyzinTableBodyztheadzinTableBodyztfootzinTableBodyzcaptionz	inCaptionzcolgroupzinColumnGroupztablezinTablezheadzinBodyzbodyzinBodyzframesetz
inFramesetzhtmlz
beforeHead0getPhases.<locals>.InSelectInTablePhase.endTagTableCommentTokenstartTagClosePgetPhases.<locals>.InSelectPhase.endTagOptgroupgetPhases.<locals>.AfterFramesetPhase.startTagOtherHTMLParser.resetgetPhases.<locals>.InTablePhase.processCharactersstartTagMisplacedgetPhases.<locals>.InBodyPhase.startTagButtongetPhases.<locals>.InTablePhase.insertTextgetPhases.<locals>.InBodyPhase.startTagInputgetPhases.<locals>.Phase.processStartTaggetPhases.<locals>.AfterBodyPhase.startTagHtmlgetPhases.<locals>.Phase.__init__treebuilders.basegetPhases.<locals>.InColumnGroupPhase.endTagColgetPhases.<locals>.InRowPhase.startTagTableOtherbeforeHtmlstartTagAhtml5lib.html5parsergetPhases.<locals>.InBodyPhase.startTagHeadingstartTagHandlerclearStackToTableContextstartTagHeadNoscriptstartTagImplyTbodygetPhases.<locals>.InTableTextPhase.processEOFgetPhases.<locals>.InBodyPhase.startTagPlaintextgetPhases.<locals>.InRowPhase.startTagTableCellParseErrorTokengetPhases.<locals>.InForeignContentPhase.__init__¾,   úh2úvarÚiúimgúheadúcodeúmetaÚpúh5úrubyúnobrúulúliúsupúdivúdtúhrú
blockquoteúh3úspanúembedúcenterúbigúmenuústrongúttúh4úsubúh6Úuúbodyúdlúh1úpreúsmallústrikeÚbúemúlistingÚsúddútableúbrúolgetPhases.<locals>.AfterAfterFramesetPhase.__init__startTagListItemmethod_decorator_metaclass.<locals>.Decorated.__new__Base class for helper object that implements each phase of processing
        endTagTableCellgetPhases.<locals>.InHeadPhase.startTagMetastartTagBaseLinkCommandError in parsed documentgetPhases.<locals>.BeforeHeadPhase.processEOFnodeIndexnew_tokenflushCharactersgetPhases.<locals>.InBodyPhase.endTagBlockgetPhases.<locals>.InBodyPhase.startTagMisplaced
        :arg tree: a treebuilder class controlling the type of tree that will be
            returned. Built in treebuilders can be accessed through
            html5lib.treebuilders.getTreeBuilder(treeType)

        :arg strict: raise an exception when a parse error is encountered

        :arg namespaceHTMLElements: whether or not to namespace HTML elements

        :arg debug: whether or not to enable debug mode which logs things

        Example:

        >>> from html5lib.html5parser import HTMLParser
        >>> parser = HTMLParser()                     # generates parser with etree builder
        >>> parser = HTMLParser('lxml', strict=True)  # generates parser with lxml builder which is strict

        getPhases.<locals>.InSelectPhase.startTagOptiongetPhases.<locals>.InCaptionPhase.endTagCaptiongetPhases.<locals>.InTablePhase.endTagOtherbr elementgetPhases.<locals>.InBodyPhase.startTagBodygetPhases.<locals>.AfterHeadPhase.startTagBodygetPhases.<locals>.InCaptionPhase.processCharactersHTMLParser.adjustMathMLAttributesgetPhases.<locals>.InSelectInTablePhase.__init__getPhases.<locals>.InBodyPhase.startTagClosePinsertHtmlElementgetPhases.<locals>.InHeadNoscriptPhase.startTagHtmlgetPhases.<locals>.InTableBodyPhase.processSpaceCharactersstartTagColgroupHTMLParser.parseRCDataRawtextThis is a searchable index. Enter search keywords: getPhases.<locals>.InBodyPhase.endTagAppletMarqueeObjectgetPhases.<locals>.BeforeHeadPhase.processSpaceCharactersgetPhases.<locals>.AfterAfterFramesetPhase.processEndTaggetPhases.<locals>.InHeadPhase.startTagScriptgetPhases.<locals>.InBodyPhase.processSpaceCharactersNonPregetPhases.<locals>.InTablePhase.startTagFormgetPhases.<locals>.InTablePhase.processSpaceCharactersgetPhases.<locals>.InitialPhase.processEOFgetPhases.<locals>.InBodyPhase.startTagPreListinggetPhases.<locals>.InTableBodyPhase.startTagTableOtherhttp://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtdgetPhases.<locals>.InTablePhase.startTagOtherParse a HTML document into a well-formed tree

        :arg stream: a file-like object or string containing the HTML to be parsed

            The optional encoding parameter must be a string that indicates
            the encoding.  If specified, that encoding will be used,
            regardless of any BOM or later declaration (such as in a meta
            element).

        :arg scripting: treat noscript elements as if JavaScript was turned on

        :returns: parsed tree

        Example:

        >>> from html5lib.html5parser import HTMLParser
        >>> parser = HTMLParser()
        >>> parser.parse('<html><body><p>This is a doc</p></body></html>')
        <Element u'{http://www.w3.org/1999/xhtml}html' at 0x7feac4909db0>

        startTagTableElementgetPhases.<locals>.InHeadNoscriptPhase.endTagBrgetPhases.<locals>.InBodyPhase.startTagVoidFormattinggetPhases.<locals>.BeforeHtmlPhase.processEndTaggetPhases.<locals>.AfterHeadPhase.anythingElsegetPhases.<locals>.AfterAfterFramesetPhase.processCommentgetPhases.<locals>.InTableTextPhase.flushCharactersgetPhases.<locals>.AfterBodyPhase.processEOFstartTagRawtextgetPhases.<locals>.InHeadNoscriptPhase.__init__getPhases.<locals>.InTableBodyPhase.processCharactersgetPhases.<locals>.InHeadNoscriptPhase.endTagOther©zaddresszarticlezasidez
blockquotezcenterzdetailszdirzdivzdlzfieldsetz
figcaptionzfigurezfooterzheaderzhgroupzmainzmenuznavzolÚpzsectionzsummaryzulgetPhases.<locals>.InBodyPhase.isMatchingFormattingElementgetPhases.<locals>.InTablePhase.startTagColgroupgetPhases.<locals>.AfterHeadPhase.startTagOthergetPhases.<locals>.InBodyPhase.endTagPgetPhases.<locals>.InBodyPhase.startTagHrreplacementsgetPhases.<locals>.InFramesetPhase.startTagNoframesgetPhases.<locals>.BeforeHtmlPhase.processStartTaggetPhases.<locals>.InBodyPhase.startTagListItemgetPhases.<locals>.AfterAfterBodyPhase.startTagHtmlgetPhases.<locals>.InTablePhase.__init__getPhases.<locals>.InSelectPhase.__init__getPhases.<locals>.InSelectPhase.processCharactersgetPhases.<locals>.AfterAfterBodyPhase.processSpaceCharactersgetPhases.<locals>.AfterHeadPhase.startTagHeadHTMLParser.reparseTokenNormalgetPhases.<locals>.InRowPhase.processEOFgetPhases.<locals>.InTableBodyPhase.startTagTableCellgetPhases.<locals>.InBodyPhase.startTagNobrgetPhases.<locals>.InCellPhase.endTagImplygetPhases.<locals>.InBodyPhase.startTagProcessInHeadHTMLParser.parseErrorgetPhases.<locals>.TextPhase.processCharactersiframe, noembed noframes, noscript(if scripting enabled)getPhases.<locals>.InColumnGroupPhase.endTagColgroupgetPhases.<locals>.InTableTextPhase.processCharactersgetPhases.<locals>.InSelectPhase.endTagSelectgetPhases.<locals>.Phase.processCharactersgetPhases.<locals>.AfterAfterFramesetPhase.startTagNoFramesabout:legacy-compatadjustForeignAttributesMapgetPhases.<locals>.InBodyPhase.endTagHtmlgetPhases.<locals>.InBodyPhase.endTagHeadinggetPhases.<locals>.InFramesetPhase.processEOFgetPhases.<locals>.InRowPhase.endTagOthergetPhases.<locals>.InRowPhase.endTagTablegetPhases.<locals>.InBodyPhase.startTagFormattinggetPhases.<locals>.InTablePhase.startTagStyleScriptgetPhases.<locals>.InTableBodyPhase.startTagOthergetPhases.<locals>.InHeadNoscriptPhase.endTagNoscriptgetPhases.<locals>.InBodyPhase.startTagNoscriptisHTMLIntegrationPointgetPhases.<locals>.InTableTextPhase.processStartTaggetPhases.<locals>.InHeadNoscriptPhase.anythingElseSpaceCharactersTokengetPhases.<locals>.InTableBodyPhase.endTagOtherneeds_adjustmentgetPhases.<locals>.AfterAfterFramesetPhase.startTagHtmlgetPhases.<locals>.AfterHeadPhase.startTagHtmlinHeadNoscriptgetPhases.<locals>.BeforeHtmlPhase.processCommentinnerHTMLModeHTMLParser.isHTMLIntegrationPointgetPhases.<locals>.BeforeHtmlPhase.insertHtmlElementcurrentNodeNamespacegetPhases.<locals>.InColumnGroupPhase.processEOFgetPhases.<locals>.InBodyPhase.startTagTablestartTagIFramegetPhases.<locals>.InTablePhase.startTagRowGroupgetPhases.<locals>.InTableBodyPhase.startTagTrTried to process start tag %s in RCDATA/RAWTEXT modegetPhases.<locals>.InBodyPhase.startTagOptstartTagIsIndexgetPhases.<locals>.InBodyPhase.startTagIFramestartTagCaptionlimited quirksgetPhases.<locals>.InColumnGroupPhase.processCharactersgetPhases.<locals>.getMetaclassgetPhases.<locals>.InFramesetPhase.startTagOthergetPhases.<locals>.AfterAfterBodyPhase.processEOFgetPhases.<locals>.log.<locals>.<genexpr>getPhases.<locals>.InSelectInTablePhase.processCharactersgetPhases.<locals>.InHeadNoscriptPhase.processSpaceCharactersafterBodygetPhases.<locals>.InRowPhase.processSpaceCharactersgetPhases.<locals>.AfterFramesetPhase.__init__getPhases.<locals>.BeforeHtmlPhase.processEOFgetPhases.<locals>.InBodyPhase.endTagOthergetPhases.<locals>.InHeadPhase.endTagOtherParse an HTML fragment as a string or file-like object into a tree

    :arg doc: the fragment to parse as a string or file-like object

    :arg container: the container context to parse the fragment in

    :arg treebuilder: the treebuilder to use when parsing

    :arg namespaceHTMLElements: whether or not to namespace HTML elements

    :returns: parsed tree

    Example:

    >>> from html5lib.html5libparser import parseFragment
    >>> parseFragment('<b>this is a fragment</b>')
    <Element u'DOCUMENT_FRAGMENT' at 0x7feac484b090>

    adjust_attributes.<locals>.<genexpr>inScopestartTagTitlegetPhases.<locals>.AfterFramesetPhase.startTagNoframesaddFormattingElementgetPhases.<locals>.AfterAfterBodyPhase.processEndTaggetPhases.<locals>.InTablePhase.endTagTablegetPhases.<locals>.AfterAfterBodyPhase.processCommentgetPhases.<locals>.InitialPhase.processDoctypegetPhases.<locals>.InBodyPhase.startTagAstartTagAppletMarqueeObject-//w3c//dtd xhtml 1.0 transitional//ignoreEndTagCaptiongetPhases.<locals>.InColumnGroupPhase.ignoreEndTagColgroupgetPhases.<locals>.InTableBodyPhase.processEOFgetPhases.<locals>.InCellPhase.__init__getPhases.<locals>.InRowPhase.clearStackToTableRowContextHTMLParser.adjustSVGAttributesgetPhases.<locals>.InColumnGroupPhase.startTagOthergetPhases.<locals>.InitialPhase.anythingElseno quirksgetPhases.<locals>.InBodyPhase.startTagAppletMarqueeObjectgetPhases.<locals>.InTablePhase.processEOFgetPhases.<locals>.InCaptionPhase.__init__getPhases.<locals>.InBodyPhase.startTagMathgetPhases.<locals>.InSelectInTablePhase.processEOFgetPhases.<locals>.InHeadPhase.startTagBaseLinkCommandgetPhases.<locals>.InTableTextPhase.__init__<module html5lib.html5parser>getPhases.<locals>.InTableBodyPhase.endTagIgnoregetPhases.<locals>.InHeadPhase.anythingElsegetPhases.<locals>.AfterHeadPhase.endTagHtmlBodyBrgetPhases.<locals>.InBodyPhase.startTagTextareagetPhases.<locals>.AfterAfterBodyPhase.processCharactersgetPhases.<locals>.Phase.startTagHtmlgetPhases.<locals>.InBodyPhase.startTagSelectmainLoopgetPhases.<locals>.InForeignContentPhase.adjustSVGTagNamesLogger that records which phase processes each tokengetPhases.<locals>.AfterAfterBodyPhase.__init__getPhases.<locals>.InBodyPhase.startTagFramesetgetPhases.<locals>.BeforeHtmlPhase.processSpaceCharactersgetPhases.<locals>.InTablePhase.endTagIgnoregetPhases.<locals>.InRowPhase.processCharactersgetPhases.<locals>.InSelectInTablePhase.endTagOthergetPhases.<locals>.InHeadPhase.startTagHeadgetPhases.<locals>.AfterBodyPhase.startTagOthergetPhases.<locals>.InSelectPhase.endTagOptiongetPhases.<locals>.InTablePhase.startTagTablegetPhases.<locals>.InBodyPhase.__init__getPhases.<locals>.InBodyPhase.startTagRpRtgetPhases.<locals>.AfterHeadPhase.__init__getPhases.<locals>.InHeadPhase.startTagHtmlendTagHandlergetPhases.<locals>.InTablePhase.startTagImplyTbodyHTMLParser.isMathMLTextIntegrationPointHTMLParser.mainLoopgetPhases.<locals>.AfterHeadPhase.processCharactersParse an HTML document as a string or file-like object into a tree

    :arg doc: the document to parse as a string or file-like object

    :arg treebuilder: the treebuilder to use when parsing

    :arg namespaceHTMLElements: whether or not to namespace HTML elements

    :returns: parsed tree

    Example:

    >>> from html5lib.html5parser import parse
    >>> parse('<html><body><p>This is a doc</p></body></html>')
    <Element u'{http://www.w3.org/1999/xhtml}html' at 0x7feac4909db0>

    getPhases.<locals>.InBodyPhase.startTagOthergetPhases.<locals>.InBodyPhase.addFormattingElementgetPhases.<locals>.InTableTextPhase.processSpaceCharactersHTML parser

    Generates a tree structure from a stream of (possibly malformed) HTML.

    lastPhasegetPhases.<locals>.TextPhase.processEOFgetPhases.<locals>.InCellPhase.startTagOthergetPhases.<locals>.InHeadNoscriptPhase.startTagBaseLinkCommandExpected head got %sgetPhases.<locals>.InTableTextPhase.processCommentgetPhases.<locals>.InitialPhase.processEndTaggetPhases.<locals>.AfterHeadPhase.startTagFramesetbreakoutElementsgetPhases.<locals>.InCellPhase.endTagTableCellgetPhases.<locals>.AfterBodyPhase.endTagHtmlafterAfterBodygetPhases.<locals>.InRowPhase.endTagIgnoregetPhases.<locals>.InTablePhase.clearStackToTableContextcompatModegetPhases.<locals>.AfterFramesetPhase.processCharactersgetPhases.<locals>.InSelectPhase.processEOFgetPhases.<locals>.BeforeHeadPhase.endTagImplyHeadprev_tokengetPhases.<locals>.InHeadPhase.processCharactersgetPhases.<locals>.InTableBodyPhase.__init__getPhases.<locals>.InHeadPhase.startTagTitlegetPhases.<locals>.InRowPhase.ignoreEndTagTrgetPhases.<locals>.AfterHeadPhase.processEOFimpliedTagTokengetPhases.<locals>.InBodyPhase.startTagIsIndexgetPhases.<locals>.InHeadNoscriptPhase.startTagHeadNoscriptgetPhases.<locals>.Phase.processEndTaggetPhases.<locals>.InTablePhase.startTagCaptiongetPhases.<locals>.InitialPhase.processCommentûzaltglyphzaltGlyphzaltglyphdefzaltGlyphDefzaltglyphitemzaltGlyphItemzanimatecolorzanimateColorzanimatemotionzanimateMotionzanimatetransformzanimateTransformzclippathzclipPathzfeblendzfeBlendzfecolormatrixzfeColorMatrixzfecomponenttransferzfeComponentTransferzfecompositezfeCompositezfeconvolvematrixzfeConvolveMatrixzfediffuselightingzfeDiffuseLightingzfedisplacementmapzfeDisplacementMapzfedistantlightzfeDistantLightzfefloodzfeFloodzfefuncazfeFuncAzfefuncbzfeFuncBzfefuncgzfeFuncGzfefuncrzfeFuncRzfegaussianblurzfeGaussianBlurzfeimagezfeImagezfemergezfeMergezfemergenodezfeMergeNodezfemorphologyzfeMorphologyzfeoffsetzfeOffsetzfepointlightzfePointLightzfespecularlightingzfeSpecularLightingzfespotlightzfeSpotLightzfetilezfeTilezfeturbulencezfeTurbulencezforeignobjectzforeignObjectzglyphrefzglyphRefzlineargradientzlinearGradientzradialgradientzradialGradientztextpathztextPath0getPhases.<locals>.InForeignContentPhase.processStartTaggetPhases.<locals>.InFramesetPhase.endTagOtherafterFramesetgetPhases.<locals>.InCaptionPhase.startTagTableElementgetPhases.<locals>.InHeadPhase.startTagOthercharacterTokensstartTagImagegetPhases.<locals>.InBodyPhase.startTagImagegetPhases.<locals>.InBodyPhase.startTagRawtextgetPhases.<locals>.InRowPhase.endTagTableRowGroupinForeignContentHTMLParser.resetInsertionModeThe much-feared adoption agency algorithmgetPhases.<locals>.InCaptionPhase.ignoreEndTagCaptionHTMLParser.adjustForeignAttributesgetPhases.<locals>.InitialPhase.processCharactersquote_attr_valuesquote_charuse_best_quote_charomit_optional_tagsminimize_boolean_attributesuse_trailing_solidusspace_before_trailing_solidusescape_lt_in_attrsescape_rcdataresolve_entitiesalphabetical_attributesstrip_whitespaceInitialize HTMLSerializer

        :arg inject_meta_charset: Whether or not to inject the meta charset.

            Defaults to ``True``.

        :arg quote_attr_values: Whether to quote attribute values that don't
            require quoting per legacy browser behavior (``"legacy"``), when
            required by the standard (``"spec"``), or always (``"always"``).

            Defaults to ``"legacy"``.

        :arg quote_char: Use given quote character for attribute quoting.

            Defaults to ``"`` which will use double quotes unless attribute
            value contains a double quote, in which case single quotes are
            used.

        :arg escape_lt_in_attrs: Whether or not to escape ``<`` in attribute
            values.

            Defaults to ``False``.

        :arg escape_rcdata: Whether to escape characters that need to be
            escaped within normal elements within rcdata elements such as
            style.

            Defaults to ``False``.

        :arg resolve_entities: Whether to resolve named character entities that
            appear in the source tree. The XML predefined entities &lt; &gt;
            &amp; &quot; &apos; are unaffected by this setting.

            Defaults to ``True``.

        :arg strip_whitespace: Whether to remove semantically meaningless
            whitespace. (This compresses all whitespace to a single space
            except within ``pre``.)

            Defaults to ``False``.

        :arg minimize_boolean_attributes: Shortens boolean attributes to give
            just the attribute value, for example::

              <input disabled="disabled">

            becomes::

              <input disabled>

            Defaults to ``True``.

        :arg use_trailing_solidus: Includes a close-tag slash at the end of the
            start tag of void elements (empty elements whose end tag is
            forbidden). E.g. ``<hr/>``.

            Defaults to ``False``.

        :arg space_before_trailing_solidus: Places a space immediately before
            the closing slash in a tag using a trailing solidus. E.g.
            ``<hr />``. Requires ``use_trailing_solidus=True``.

            Defaults to ``True``.

        :arg sanitize: Strip all unsafe or unknown constructs from output.
            See :py:class:`html5lib.filters.sanitizer.Filter`.

            Defaults to ``False``.

        :arg omit_optional_tags: Omit start/end tags that are optional.

            Defaults to ``True``.

        :arg alphabetical_attributes: Reorder attributes to be in alphabetical order.

            Defaults to ``False``.

        register_errorxmlcharrefreplace_errors_is_ucs4&#39;serializer_optsHTMLSerializer.serializeError_quoteAttributeSpecCharsin_cdataEntity %s not recognized_quoteAttributeLegacyhtmlentityreplace_errorsUnexpected </ in CDATAHTMLSerializer.encodeStrictHTMLSerializer.__init__quote_attr_values must be one of: 'always', 'spec', or 'legacy'C:\code\venv\callllama\lib\site-packages\html5lib\serializer.pySystem identifer contains both single and double quote characters 	
 /`Â áá á ââââââââââââ¨â©â¯âã]unexpected_argshtml5lib.serializerHTMLSerializer.renderXXX ERROR MESSAGE NEEDEDSerializes the stream from the treewalker into a string

        :arg treewalker: the treewalker to serialize

        :arg encoding: the string encoding to use

        :returns: the serialized tree

        Example:

        >>> from html5lib import parse, getTreeWalker
        >>> from html5lib.serializer import HTMLSerializer
        >>> token_stream = parse('<html><body>Hi!</body></html>')
        >>> walker = getTreeWalker('etree')
        >>> serializer = HTMLSerializer(omit_optional_tags=False)
        >>> serializer.render(walker(token_stream))
        '<html><head></head><body>Hi!</body></html>'

        <module html5lib.serializer>Error in serialized treeComment contains --_encode_entity_map"'=<>`&#x%s;islowerSerializes the input token stream using the specified treewalker

    :arg input: the token stream to serialize

    :arg tree: the treewalker to use

    :arg encoding: the encoding to use

    :arg serializer_opts: any options to pass to the
        :py:class:`html5lib.serializer.HTMLSerializer` that gets created

    :returns: the tree serialized as a string

    Example:

    >>> from html5lib.html5parser import parse
    >>> from html5lib.serializer import serialize
    >>> token_stream = parse('<html><body><p>Hi!</p></body></html>')
    >>> serialize(token_stream, omit_optional_tags=False)
    '<html><head></head><body><p>Hi!</p></body></html>'

    Unexpected child element of a CDATA element %s%s%sGet a TreeBuilder class for various types of trees with built-in support

    :arg treeType: the name of the tree type required (case-insensitive). Supported
        values are:

        * "dom" - A generic builder for DOM implementations, defaulting to a
          xml.dom.minidom based implementation.
        * "etree" - A generic builder for tree implementations exposing an
          ElementTree-like interface, defaulting to xml.etree.cElementTree if
          available and xml.etree.ElementTree if not.
        * "lxml" - A etree-based builder for lxml.etree, handling limitations
          of lxml's implementation.

    :arg implementation: (Currently applies to the "etree" and "dom" tree
        types). A module implementing the tree type e.g. xml.etree.ElementTree
        or xml.etree.cElementTree.

    :arg kwargs: Any additional options to pass to the TreeBuilder when
        creating it.

    Example:

    >>> from html5lib.treebuilders import getTreeBuilder
    >>> builder = getTreeBuilder('etree')

    C:\code\venv\callllama\lib\site-packages\html5lib\treebuildersC:\code\venv\callllama\lib\site-packages\html5lib\treebuilders\__init__.py<module html5lib.treebuilders>A collection of modules for building different kinds of trees from HTML
documents.

To create a treebuilder for a new type of tree, you need to do
implement several things:

1. A set of classes for various types of elements: Document, Doctype, Comment,
   Element. These must implement the interface of ``base.treebuilders.Node``
   (although comment nodes have a different signature for their constructor,
   see ``treebuilders.etree.Comment``) Textual content may also be implemented
   as another node type, or not, as your tree implementation requires.

2. A treebuilder object (called ``TreeBuilder`` by convention) that inherits
   from ``treebuilders.base.TreeBuilder``. This has 4 required attributes:

   * ``documentClass`` - the class to use for the bottommost node of a document
   * ``elementClass`` - the class to use for HTML Elements
   * ``commentClass`` - the class to use for comments
   * ``doctypeClass`` - the class to use for doctypes

   It also has one required method:

   * ``getDocument`` - Returns the root node of the complete document tree

3. If you wish to run the unit tests, you must also create a ``testSerializer``
   method on your treebuilder which accepts a node and returns a string
   containing Node and its children serialized according to the format used in
   the unittests

Unrecognised treebuilder "%s" treeBuilderCacheexactNodeTreeBuilder.insertElementNormalInsert data as text in the current node, positioned before the
        start of node insertBefore or to the end of the node's text.

        :arg data: the data to insert

        :arg insertBefore: True if you want to insert the text before the node
            and False if you want to insert it after the node

        Create an element but don't insert it anywhereActiveFormattingElements.appendElement %s not unicodefosterParentnodesEquallistElementsTreeBuilder.insertElementTableTreeBuilder.generateImpliedEndTagsentryCreates a Node

        :arg name: The tag name associated with the node

        TreeBuilder.elementInScopeRemove node from the children of the current node

        :arg node: the child node to remove

        Insert node as a child of the current node

        :arg node: the node to insert

        TreeBuilder.reconstructActiveFormattingElementshtml5lib.treebuilders.baseNode.hasContentC:\code\venv\callllama\lib\site-packages\html5lib\treebuilders\base.pySwitch the function used to insert an element from the
        normal one to the misnested table one and back againTreeBuilder.clearActiveFormattingElementsReturn the final fragmentequalCountReturn a shallow copy of the current node i.e. a node with the same
        name and attributes but with no parent or child nodes
        lastTable<module html5lib.treebuilders.base>Get the foster parent element, and sibling to insert before
        (or None) when inserting a misnested table nodeTreeBuilder.insertTextSerialize the subtree of node in the format required by unit tests

        :arg node: the node from which to start serializing

        attributesStrTreeBuilder.createElementInsert text data.TreeBuilder._getInsertFromTableReturn the final treeCheck if an element exists between the end of the active
        formatting elements and the last marker. If it does, return it, else
        return falseTreeBuilder._setInsertFromTable_insertFromTableTreeBuilder.elementInActiveFormattingElementsNode.__repr__Create a TreeBuilder

        :arg namespaceHTMLElements: whether or not to namespace HTML elements

        Create an element and insert it into the treeNode.appendChildNode.__str__Move all the children of the current node to newParent.
        This is needed so that trees that don't store text as nodes move the
        text in the correct way

        :arg newParent: the node to move all this node's children to

        Node.reparentChildrenNode.removeChildNode.insertBeforeReturn true if the node has children or text, false otherwise
        TreeBuilder.getTableMisnestedNodePositionNode.insertTextBase treebuilder implementation

    * documentClass - the class to use for the bottommost node of a document
    * elementClass - the class to use for HTML Elements
    * commentClass - the class to use for comments
    * doctypeClass - the class to use for doctypes

    ActiveFormattingElements.nodesEquallistElementsMapTreeBuilder.insertCommentRepresents an item in the treeInsert node as a child of the current node, before refNode in the
        list of child nodes. Raises ValueError if refNode is not a child of
        the current node

        :arg node: the node to insert

        :arg refNode: the child node to insert the node before

        getDomBuilder.<locals>.NodeBuilder.getNameTuplesetAttributeNScreateDocumentgetDomBuilder.<locals>.AttrList.__iter__createAttributegetDomBuilder.<locals>.NodeBuilder.hasContentDomImplementationcreateElementNSqualifiedNamegetDomBuilder.<locals>.TreeBuilder.elementClassC:\code\venv\callllama\lib\site-packages\html5lib\treebuilders\dom.pycreateDocumentFragmentgetDomBuilder.<locals>.testSerializercreateTextNodegetDomBuilder.<locals>.AttrList.valuesgetDomBuilder.<locals>.TreeBuilder.insertDoctypegetDomBuilder.<locals>.TreeBuilder.documentClassgetDomBuilder.<locals>.TreeBuilder.commentClasshtml5lib.treebuilders.domgetDomBuilder.<locals>.NodeBuilder.insertTextcreateCommentownerDocumentgetDomBuilder.<locals>.TreeBuilder.fragmentClassgetDomBuilder.<locals>.NodeBuilder.setAttributesgetDomBuilder.<locals>.TreeBuilder.getDocumentgetDomBuilder.<locals>.testSerializer.<locals>.serializeElementgetDomBuilder.<locals>.TreeBuilder.appendChildgetDomBuilder.<locals>.AttrList.itemscreateDocumentTypeweakrefgetDomBuilder.<locals>.AttrList.__delitem__domimplgetDomBuilder.<locals>.AttrList.__init__getDomBuilder.<locals>.NodeBuilder.removeChildgetDomBuilder.<locals>.TreeBuilder.getFragmentgetDOMImplementationgetDomBuilder.<locals>.NodeBuilder.cloneNodegetDomBuilder.<locals>.NodeBuilder.getAttributes_child_node_typesgetDomBuilder.<locals>.AttrList.__len__<module html5lib.treebuilders.dom>hasAttributesgetDomBuilder.<locals>.NodeBuilder.reparentChildrengetDomBuilder.<locals>.NodeBuilder.insertBeforegetDomBuilder.<locals>.AttrList.__setitem__getDomBuilder.<locals>.NodeBuilder.<lambda>getDomBuilder.<locals>.TreeBuilder.insertTextgetDomBuilder.<locals>.NodeBuilder.__init__getDomBuilder.<locals>.AttrList.__getitem__getDomBuilder.<locals>.NodeBuilder.appendChildgetDomBuilder.<locals>.TreeBuilder.testSerializergetETreeBuilder.<locals>.Element._getNamegetETreeBuilder.<locals>.testSerializer.<locals>.serializeElementgetETreeBuilder.<locals>.Element.removeChildgetETreeBuilder.<locals>.Element.reparentChildrengetETreeBuilder.<locals>.Comment.__init__getETreeBuilder.<locals>.TreeBuilder.testSerializergetETreeBuilder.<locals>.Element._setNamespacegetETreeBuilder.<locals>.Element._setChildNodesgetETreeBuilder.<locals>.DocumentTypegetETreeBuilder.<locals>.tostring<module html5lib.treebuilders.etree>getETreeBuilder.<locals>.Comment._setDatagetETreeBuilder.<locals>.tostring.<locals>.serializeElementgetETreeBuilder.<locals>.DocumentType._setSystemIdgetETreeBuilder.<locals>.Element._setAttributesgetETreeBuilder.<locals>.Element.appendChild_getNamespace{%s}html_getPublicIdgetETreeBuilder.<locals>.Element.insertTextgetETreeBuilder.<locals>.DocumentType._getSystemIdgetETreeBuilder.<locals>.Element.__init__Expected unicode, got %s, %s<!DOCTYPE %s PUBLIC "%s" "%s">_setPublicIdgetETreeBuilder.<locals>.Element._getChildNodesgetETreeBuilder.<locals>.Document.__init__getETreeBuilder.<locals>.TreeBuilder.getDocumentDocument node cannot have attributesinsertChildgetETreeBuilder.<locals>.Element.insertBeforeC:\code\venv\callllama\lib\site-packages\html5lib\treebuilders\etree.pygetETreeBuilder.<locals>.DocumentFragment.__init__getETreeBuilder.<locals>.DocumentType._getPublicIdgetETreeBuilder.<locals>.Element.cloneNodegetETreeBuilder.<locals>.Comment._getDatagetETreeBuilder.<locals>.TreeBuilder.getFragmentgetETreeBuilder.<locals>.DocumentType._setPublicIdDocument node cannot have tailgetETreeBuilder.<locals>.Element.hasContentgetETreeBuilder.<locals>.DocumentType.__init__getETreeBuilder.<locals>.Element._getETreeTaggetETreeBuilder.<locals>.Element._getAttributesgetETreeBuilder.<locals>.Element._getNamespaceaddnextTreeBuilder.__init__.<locals>.Element._setName<module html5lib.treebuilders.etree_lxml>infosetFilterTreeBuilder.insertCommentInitialTreeBuilder.__init__.<locals>.AttributesdocStrTreeBuilder.__init__.<locals>.Attributes.__init__DOCTYPE system cannot contain single and double quotesTreeBuilder.__init__.<locals>.Attributes.__setitem__comment_typecoercedName''TreeBuilder.__init__.<locals>.Comment._getDatainsertCommentMainlxml cannot represent adjacent comments beyond the root elementsTreeBuilder.insertCommentMainTreeBuilder.__init__.<locals>.Element._getNameTreeBuilder.__init__.<locals>.Comment._setDataC:\code\venv\callllama\lib\site-packages\html5lib\treebuilders\etree_lxml.pyU00027TreeBuilder.__init__.<locals>.Element.appendChildDocument._getChildNodesaddpreviousTreeBuilder.__init__.<locals>.Element._setAttributesdtd_strTreeBuilder.__init__.<locals>.Comment.__init__|%s%sTreeBuilder.__init__.<locals>.Element.__init__<THIS_SHOULD_NEVER_APPEAR_PUBLICLY/>Document.appendChildTreeBuilder.__init__.<locals>.Element._getAttributeslxml cannot represent doctype with a different name to the root elementinitial_comments|%s<%s %s>fromstringgetroottreeroot_elementModule for supporting the lxml.etree library. The idea here is to use as much
of the native library as possible, without using fragile hacks like custom element
names that break between releases. The downside of this is that we cannot represent
all possible trees; specifically the following are known to cause problems:

Text or comments as siblings of the root element
Docypes with no name

When any of these things occur, we emit a DataLossWarning
sysidcomment_tokenetree_builderslxml cannot represent empty doctypelxml cannot represent non-xml doctypeTreeBuilder.__init__.<locals>.Element.insertTextconcatenateCharacterTokens should have got rid of all Space tokensC:\code\venv\callllama\lib\site-packages\html5lib\treewalkers<module html5lib.treewalkers>pendingCharacters%s%s="%s"%s<!DOCTYPE %s>pprintgenshiGet a TreeWalker class for various types of tree with built-in support

    :arg str treeType: the name of the tree type required (case-insensitive).
        Supported values are:

        * "dom": The xml.dom.minidom DOM implementation
        * "etree": A generic walker for tree implementations exposing an
          elementtree-like interface (known to work with ElementTree,
          cElementTree and lxml.etree).
        * "lxml": Optimized walker for lxml.etree
        * "genshi": a Genshi stream

    :arg implementation: A module implementing the tree type e.g.
        xml.etree.ElementTree or cElementTree (Currently applies to the "etree"
        tree type only).

    :arg kwargs: keyword arguments passed to the etree walker--for other
        walkers, this has no effect

    :returns: a TreeWalker class

    %s<!-- %s -->A collection of modules for iterating through different kinds of
tree, generating tokens identical to those produced by the tokenizer
module.

To create a tree walker for a new type of tree, you need to do
implement a tree walker object (called TreeWalker by convention) that
implements a 'serialize' method taking a tree as sole argument and
returning an iterator generating tokens.
%s<!DOCTYPE %s "" "%s">%s<!DOCTYPE >Unknown token type, %s%s<!DOCTYPE %s "%s" "%s">C:\code\venv\callllama\lib\site-packages\html5lib\treewalkers\__init__.pyPretty printer for tree walkers

    Takes a TreeWalker instance and pretty prints the output of walking the tree.

    :arg walker: a TreeWalker instance

    %s"%s"%s<%s>treeWalkerCacheGenerates an Entity token

        :arg name: the entity name

        :returns: an Entity token

        <module html5lib.treewalkers.base>TreeWalker.startTagTreeWalker.textUnknown node type: TreeWalker.commentGenerates a Doctype token

        :arg name:

        :arg publicId:

        :arg systemId:

        :returns: the Doctype token

        hasChildrenGenerates a StartTag token

        :arg namespace: the namespace of the token--can be ``None``

        :arg name: the name of the element

        :arg attrs: the attributes of the element as a dict

        :returns: StartTag token

        NonRecursiveTreeWalker.getFirstChildmiddleTreeWalker.emptyTagNonRecursiveTreeWalker.getParentNode<#UNKNOWN#>TreeWalker.errorGenerates a Comment token

        :arg data: the comment

        :returns: Comment token

        TreeWalker.doctypeNonRecursiveTreeWalker.__iter__Generates SpaceCharacters and Characters tokens

        Depending on what's in the data, this generates one or more
        ``SpaceCharacters`` and ``Characters`` tokens.

        For example:

            >>> from html5lib.treewalkers.base import TreeWalker
            >>> # Give it an empty tree just so it instantiates
            >>> walker = TreeWalker([])
            >>> list(walker.text(''))
            []
            >>> list(walker.text('  '))
            [{u'data': '  ', u'type': u'SpaceCharacters'}]
            >>> list(walker.text(' abc '))  # doctest: +NORMALIZE_WHITESPACE
            [{u'data': ' ', u'type': u'SpaceCharacters'},
            {u'data': u'abc', u'type': u'Characters'},
            {u'data': u' ', u'type': u'SpaceCharacters'}]

        :arg data: the text data

        :returns: one or more ``SpaceCharacters`` and ``Characters`` tokens

        TreeWalker.entityC:\code\venv\callllama\lib\site-packages\html5lib\treewalkers\base.pyTreeWalker.endTagCreates a TreeWalker

        :arg tree: the tree to walk

        Void element has childrenWalks a tree yielding tokens

    Tokens are dicts that all have a ``type`` field specifying the type of the
    token.

    TreeWalker.unknownENTITY_NODEGenerates an EndTag token

        :arg namespace: the namespace of the token--can be ``None``

        :arg name: the name of the element

        :returns: EndTag token

        Generates an error token with the given message

        :arg msg: the error message

        :returns: SerializeError token

        Handles unknown node typesGenerates an EmptyTag token

        :arg namespace: the namespace of the token--can be ``None``

        :arg name: the name of the element

        :arg attrs: the attributes of the element as a dict

        :arg hasChildren: whether or not to yield a SerializationError because
            this tag shouldn't have children

        :returns: EmptyTag token

        NonRecursiveTreeWalker.getNodeDetailsNonRecursiveTreeWalker.getNextSibling<module html5lib.treewalkers.dom>C:\code\venv\callllama\lib\site-packages\html5lib\treewalkers\dom.pyCDATA_SECTION_NODEgetAttributeNode<module html5lib.treewalkers.etree>C:\code\venv\callllama\lib\site-packages\html5lib\treewalkers\etree.pygetETreeBuilder.<locals>.TreeWalkerGiven the particular ElementTree representation, this implementation,
        to avoid using recursion, returns "nodes" as tuples with the following
        content:

        1. The current element

        2. The index of the element relative to its parent

        3. A stack of ancestor elements

        4. A flag "text", "tail" or None to indicate if the current node is a
           text node; either the text or tail of the current element (1)
        getETreeBuilder.<locals>.TreeWalker.getFirstChildgetETreeBuilder.<locals>.TreeWalker.getParentNodegetETreeBuilder.<locals>.TreeWalker.getNextSiblinggetETreeBuilder.<locals>.TreeWalker.getNodeDetailsFragmentRoot.getnextfragment_rootDoctype.getnextFragmentWrapper.getparentFragmentWrapper.__len__Doctype.__init__FragmentWrapper.__getattr__FragmentWrapper.__getitem__Node has no childrenText nodes have no childrenFragmentWrapper.getnextroot_nodeText nodes are text or tail, found %sensure_strFragmentWrapper.__str__<module html5lib.treewalkers.etree_lxml>fragmentChildrenRoot.__init__C:\code\venv\callllama\lib\site-packages\html5lib\treewalkers\etree_lxml.pyFragmentRoot.__init__Root.__len__FragmentWrapper.__bool__Root.__getitem__FragmentWrapper.__unicode__FragmentWrapper.__init__<module html5lib.treewalkers.genshi>QNamegenshi.coreEND_CDATAEND_NSSTART_CDATATreeWalker.tokensSTART_NSXML_NAMESPACEC:\code\venv\callllama\lib\site-packages\html5lib\treewalkers\genshi.pyconverted_attribsC:\code\venv\callllama\lib\site-packages\idnaC:\code\venv\callllama\lib\site-packages\idna\__init__.pypackage_data<module idna>valid_contextjstd3_rulestrailing_dotCan not mix numeral types in a right-to-left labelEmpty LabelRe-map the characters in the string according to UTS46 processing.intrangesPVALID Exception when a disallowed or unallocated codepoint is used check_label Exception when the codepoint is not valid in the context it is used Empty labelulabelCodepoint {0} not allowed at position {1} in {2}idnadataLabel must be in Normalization Form C_virama_combining_classalabel[.ãï¼ï½¡]Label begins with an illegal combining characterThe label {0} is not a valid A-labelLabel has disallowed hyphens in 3rd and 4th positionIDNABidiErroruts46_remapKatakanacp_valuejoining_typecheck_nfcbidi_labelInvalid direction for codepoint at position {0} in a right-to-left labelCodepoint {0} at position {1} of {2} not allowedpunycodeDomain too long<module idna.core>bidirectional_is_scriptLabel too longUnknown directionality in label {0} at position {1}Label ends with illegal codepoint directionalityLabel must not start or end with a hyphenInvalid direction for codepoint at position {0} in a left-to-right labelNo Inputvalid_contextocheck_ltrvalid_endingnumber_typeUnknown character in unicodedataJoiner {0} not allowed at position {1} in {2}_unotcheck_bidi_punycodeEmpty domainvalid_string_lengthvalid_label_length_unicode_dots_reCONTEXTJ Exception when bidirectional requirements are not satisfied Unknown codepoint adjacent to joiner {0} at position {1} in {2}_alabel_prefixU+{0:04X}code_pointcheck_hyphen_okFirst codepoint in label {0} must be directionality L, R or ALNFCxn--check_initial_combinerC:\code\venv\callllama\lib\site-packages\idna\core.pyInvalidCodepointHiraganaCONTEXTO Base exception for all IDNA-encoding related problems uts46rowInvalidCodepointContextûzGreek)$l   t  Àl   x  Ôl   ~  èl     ül     l     l      l     0l   ¢  8l   â  l      Àl   +  tl   b  tul   k  ul   À  üvl      |l     `|l   F  |l   N   }l   X  @}l   Z  d}l   \  l}l   ^  t}l   ~  |}l   µ   ~l   Å  Ø~l   Ô  l   Ü  Xl   ð  tl   õ  Èl   ÿ  Øl   '!   l   f+ - l      l   ¡  l   FR  H zHan)l   .   : l   ô.  l: l   Ö/   < l   0  @ l   0  @ l   *0  @ l   <0  à@ l   ¶M   P l   ë  8 l   nz  d l   Úz Ài l   ×&    l   57   l   8  ] l   ¢N ` l   ák À: l   z  ` zHebrew)	l   È  Dl   ë  @l   õ  Àl   7{ tl l   ={ àl l   ?{ øl l   B{  m l   E{ m l   P{ m zHiragana)l   0  A l    0  tB l   1 @ l   r  H zKatakana)l   û0  B l    1  ôC l    2  ÀG l   ÿ2  @K l   X3   L l   p } l    Ä} l   0  @ 0ûzPVALID(]  l   .   ´ l   :   À l   {   l   ÷   |l      àl     l     l     l     l   
  $l     ,l     4l     <l     Dl     Ll     Tl     \l     dl     ll     tl      |l   "  l   $  l   &  l   (  l   *  ¤l   ,  ¬l   .  ´l   0  ¼l   2  Äl   6  Ôl   9  Ül   ;  èl   =  ðl   ?  øl   C  l   E  l   G  l   I   l   L  ,l   N  4l   P  <l   R  Dl   T  Ll   V  Tl   X  \l   Z  dl   \  ll   ^  tl   `  |l   b  l   d  l   f  l   h  l   j  ¤l   l  ¬l   n  ´l   p  ¼l   r  Äl   t  Ìl   v  Ôl   x  Ül   {  èl   }  ðl     øl      l     l     l      l     0l     Hl     Tl     dl     xl   ¢  l   ¤  l   ¦  l   ©   l   ¬  ¨l   ®  ´l   ±  Àl   µ  Ðl   ·  Øl   ¼  äl   Ä  ôl   Ï  8l   Ñ  @l   Ó  Hl   Õ  Pl   ×  Xl   Ù  `l   Û  hl   Þ  pl   à  |l   â  l   ä  l   æ  l   è  l   ê  ¤l   ì  ¬l   î  ´l   ñ  ¼l   ö  Ôl   ú  äl   ü  ìl   þ  ôl      ül     l     l     l     l   
  $l     ,l     4l     <l     Dl     Ll     Tl     \l     dl     ll     tl      |l   "  l   $  l   &  l   (  l   *  ¤l   ,  ¬l   .  ´l   0  ¼l   2  Äl   :  Ìl   =  ðl   A  ül   C  	l   H  	l   J  $	l   L  ,	l   N  4	l   °  <	l   Â  ä
l   Ò  l   í  °l   ï  ¸l   @   l   C  l   O  l   p  @l   r  Äl   t  Ìl   x  Ül   ~  ìl     @l   Ï  °l   Ø  \l   Ú  dl   Ü  ll   Þ  tl   à  |l   â  l   ä  l   æ  l   è  l   ê  ¤l   ì  ¬l   î  ´l   ð  ¼l   ô  Ìl   ù  àl   ý  ìl   `  Àl   b  l   d  l   f  l   h  l   j  ¤l   l  ¬l   n  ´l   p  ¼l   r  Äl   t  Ìl   v  Ôl   x  Ül   z  äl   |  ìl   ~  ôl     ül     l     l     ,l     4l     <l     Dl     Ll     Tl     \l     dl     ll     tl      |l   ¢  l   ¤  l   ¦  l   ¨  l   ª  ¤l   ¬  ¬l   ®  ´l   °  ¼l   ²  Äl   ´  Ìl   ¶  Ôl   ¸  Ül   º  äl   ¼  ìl   ¾  ôl   À  ül   Ã  l   Å  l   Ç  l   É   l   Ë  (l   Í  0l   Ð  8l   Ò  Dl   Ô  Ll   Ö  Tl   Ø  \l   Ú  dl   Ü  ll   Þ  tl   à  |l   â  l   ä  l   æ  l   è  l   ê  ¤l   ì  ¬l   î  ´l   ð  ¼l   ò  Äl   ô  Ìl   ö  Ôl   ø  Ül   ú  äl   ü  ìl   þ  ôl      ül     l     l     l     l   
  $l     ,l     4l     <l     Dl     Ll     Tl     \l     dl     ll     tl      |l   "  l   $  l   &  l   (  l   *  ¤l   ,  ¬l   .  ´l   0  ¼l   Z  dl     l   ¾  Dl   À  ül   Ã  l   Æ  l   È  l   ë  @l   ó  Àl     @l   @  l   `  l   u  ¸l   Ô  äl   Ý  Tl   é  |l   ð  ¨l      èl   K  @l   ²  4l   ö   l   .    l   \   !l   k  !l   µ  "l   ¾  Ø"l   â  P#l   X	  #l   d	  %l   p	  %l   	  Ä%l   	  &l   	  <&l   ©	  L&l   ±	  ¨&l   ³	  È&l   º	  Ø&l   Å	  ð&l   É	  'l   Ï	  ,'l   Ø	  \'l   ä	  'l   ò	  'l   ý	  ð'l   
  (l   
  (l   
  <(l   )
  L(l   1
  ¨(l   3
  È(l   6
  Ô(l   :
  à(l   =
  ð(l   C
  ø(l   I
  )l   N
  ,)l   R
  D)l   ]
  p)l   v
  )l   
  *l   
  *l   
  <*l   ©
  L*l   ±
  ¨*l   ´
  È*l   º
  Ô*l   Æ
  ð*l   Ê
  +l   Î
  ,+l   Ñ
  @+l   ä
  +l   ð
  +l      ä+l     ,l     ,l     <,l   )  L,l   1  ¨,l   4  È,l   :  Ô,l   E  ð,l   I  -l   N  ,-l   X  X-l   d  |-l   p  -l   r  Ä-l     .l     .l     8.l     H.l     d.l     p.l      x.l   ¥  .l   «   .l   º  ¸.l   Ã  ø.l   É  /l   Î  (/l   Ñ  @/l   Ø  \/l   ð  /l      0l     0l     80l   )  H0l   :  ¨0l   E  ô0l   I  1l   N  (1l   W  T1l   [  `1l   d  1l   p  1l      2l     2l     82l   ©  H2l   ´  ¨2l   º  Ô2l   Å  ð2l   É  3l   Î  (3l   ×  T3l   ß  x3l   ä  3l   ð  3l   ó  Ä3l      4l     4l     84l   E  H4l   I  5l   O  (5l   X  P5l   d  |5l   p  5l     è5l     6l     6l   ²  h6l   ¼  Ì6l   ¾  ô6l   Ç   7l   Ë  (7l   Õ  <7l   ×  X7l   à  `7l   ð  7l   ô  È7l   3  8l   ;  Ð8l   O   9l   Z  @9l     :l     :l     :l     (:l     4:l     P:l      d:l   ¤  :l   ¦  :l   ¨  :l   ¬  ¨:l   ³  ´:l   º  Ð:l   ¾  ì:l   Å   ;l   Ç  ;l   Î   ;l   Ú  @;l   à  x;l      <l     ,<l     `<l   *  <l   6  Ô<l   8  Ü<l   :  ä<l   C  ø<l   H  =l   M  $=l   R  8=l   W  L=l   \  `=l   i  t=l   m  ¨=l   s  Ä=l   u  Ð=l     è=l     >l     >l     P>l     d>l   ¢  x>l   §  >l   ¬   >l   ¹  ´>l   ½  è>l   Ç  ?l   J   @l     @Al   û  @Cl      ôCl   I   Hl   N  (Il   W  @Il   Y  `Il   ^  hIl     Il     (Jl   ±  @Jl   ¶  ÈJl   ¿  àJl   Á   Kl   Æ  Kl   ×   Kl     `Kl     HLl   [  `Ll   `  tMl      Nl   ö  Nl   m  Pl     ¼Yl     Zl   ë  Zl   ù  Ä[l      \l     8\l   5  \l   T   ]l   m  ]l   q  ¸]l   t  È]l   ´   ^l   Ô  Ø^l   Ø  \_l   Þ  p_l   ê  _l     @`l   x  `l   «   bl   ö  Àbl      dl   ,  dl   <  Àdl   n  el   u  Àel   ¬   fl   Ê  Àfl   Ú  @gl      hl   _  hl   }  il     üil     @jl   ¨  jl   ¾  Àjl   L   ll   Z  @ml   t  ¬ml   ô   nl   8   pl   J   ql   ~  4ql   Ó  @sl   ú  Psl   ,   tl   0  ¼tl   <  ìtl   O  8ul   x  ¬ul     äul   ú   wl      ìwl     xl     xl     xl     xl   
  $xl     ,xl     4xl     <xl     Dxl     Lxl     Txl     \xl     dxl     lxl     txl      |xl   "  xl   $  xl   &  xl   (  xl   *  ¤xl   ,  ¬xl   .  ´xl   0  ¼xl   2  Äxl   4  Ìxl   6  Ôxl   8  Üxl   :  äxl   <  ìxl   >  ôxl   @  üxl   B  yl   D  yl   F  yl   H  yl   J  $yl   L  ,yl   N  4yl   P  <yl   R  Dyl   T  Lyl   V  Tyl   X  \yl   Z  dyl   \  lyl   ^  tyl   `  |yl   b  yl   d  yl   f  yl   h  yl   j  ¤yl   l  ¬yl   n  ´yl   p  ¼yl   r  Äyl   t  Ìyl   v  Ôyl   x  Üyl   z  äyl   |  ìyl   ~  ôyl     üyl     zl     zl     zl     zl     $zl     ,zl     4zl     <zl     Dzl     Lzl     Tzl     pzl      |zl   ¢  zl   ¤  zl   ¦  zl   ¨  zl   ª  ¤zl   ¬  ¬zl   ®  ´zl   °  ¼zl   ²  Äzl   ´  Ìzl   ¶  Ôzl   ¸  Üzl   º  äzl   ¼  ìzl   ¾  ôzl   À  üzl   Â  {l   Ä  {l   Æ  {l   È  {l   Ê  ${l   Ì  ,{l   Î  4{l   Ð  <{l   Ò  D{l   Ô  L{l   Ö  T{l   Ø  \{l   Ú  d{l   Ü  l{l   Þ  t{l   à  |{l   â  {l   ä  {l   æ  {l   è  {l   ê  ¤{l   ì  ¬{l   î  ´{l   ð  ¼{l   ò  Ä{l   ô  Ì{l   ö  Ô{l   ø  Ü{l   ú  ä{l   ü  ì{l   þ  ô{l     ü{l     @|l   (  |l   8  À|l   F   }l   X  @}l   h  }l   q  À}l   s  È}l   u  Ð}l   w  Ø}l   y  à}l   {  è}l   }  ð}l   ²  À~l   ·  Ø~l   Ç  l   Ó  @l   Ø  Xl   ã  l   è  l   ÷  Øl   O!  8 l   !   l   _,  À0 l   b,  1 l   g,  1 l   i,   1 l   k,  ¨1 l   m,  °1 l   r,  Ä1 l   u,  Ì1 l   |,  Ø1 l   ,  2 l   ,  2 l   ,  2 l   ,  2 l   ,  $2 l   ,  ,2 l   ,  42 l   ,  <2 l   ,  D2 l   ,  L2 l   ,  T2 l   ,  \2 l   ,  d2 l   ,  l2 l   ,  t2 l    ,  |2 l   ¢,  2 l   ¤,  2 l   ¦,  2 l   ¨,  2 l   ª,  ¤2 l   ¬,  ¬2 l   ®,  ´2 l   °,  ¼2 l   ²,  Ä2 l   ´,  Ì2 l   ¶,  Ô2 l   ¸,  Ü2 l   º,  ä2 l   ¼,  ì2 l   ¾,  ô2 l   À,  ü2 l   Â,  3 l   Ä,  3 l   Æ,  3 l   È,  3 l   Ê,  $3 l   Ì,  ,3 l   Î,  43 l   Ð,  <3 l   Ò,  D3 l   Ô,  L3 l   Ö,  T3 l   Ø,  \3 l   Ú,  d3 l   Ü,  l3 l   Þ,  t3 l   à,  |3 l   â,  3 l   å,  3 l   í,  °3 l   ò,  ¸3 l   ô,  Ì3 l   &-   4 l   (-  4 l   .-  ´4 l   h-  À4 l   -  ü5 l   §-  6 l   ¯-   6 l   ·-  À6 l   ¿-  à6 l   Ç-   7 l   Ï-   7 l   ×-  @7 l   ß-  `7 l    .  7 l   0.  ¼8 l   0  @ l   .0  ¨@ l   =0  ð@ l   0  A l   0  dB l   0  tB l   û0  B l   ÿ0  ðC l   /1  D l   »1  F l    2  ÀG l   ¶M   P l   ë  8 l   $    l   þ$ @ l   &   l   ,& @ l   B&  l   D&  l   F&  l   H&  l   J& $ l   L& , l   N& 4 l   P& < l   R& D l   T& L l   V& T l   X& \ l   Z& d l   \& l l   ^& t l   `& | l   b&  l   d&  l   f&  l   h&  l   j& ¤ l   l& ¬ l   p& ´ l   ~& Ð l   & ü l   &  l   &  l   &  l   &  l   & $ l   & , l   & 4 l   & < l   & D l   & L l   & T l   & \ l   & d l   & l l   æ& x l   ò& À l    ' \ l   $'  l   &'  l   ('  l   *' ¤ l   ,' ¬ l   .' ´ l   2' ¼ l   4' Ì l   6' Ô l   8' Ü l   :' ä l   <' ì l   >' ô l   @' ü l   B'  l   D'  l   F'  l   H'  l   J' $ l   L' , l   N' 4 l   P' < l   R' D l   T' L l   V' T l   X' \ l   Z' d l   \' l l   ^' t l   `' | l   b'  l   d'  l   f'  l   h'  l   j' ¤ l   l' ¬ l   n' ´ l   p' ¼ l   y' Ä l   {' è l   }' ð l   ' ü l   '  l   '  l   '  l   '  l   ' 0 l   ' 8 l   ' D l   ' L l   ' \ l   ' d l   ' l l   ' t l    ' | l   ¢'  l   ¤'  l   ¦'  l   ¨'  l   ª' ¤ l   ¶' Ô l   ¸' Ü l   ø' Ü l   (( è l   t(  ! l   Æ(  " l   Ú( @# l   ø( # l   ü( ì# l   þ( ô# l   .)  $ l   T) À$ l   Á)  & l   Ú) <' l   ÿ) ' l   7*  ( l   N*  ) l   Z* @) l   w* ) l   Ã* è) l   Þ* l+ l   ð* + l   ÷* È+ l   + , l   + $, l   + D, l   '+ , l   /+  , l   [+ À, l   f+ - l   ë+  / l   î+ °/ l   ú+ À/ l   ¤W  0 l   z 8h l   z Dh l   z Lh l    z |h l   "z h l   %z h l   *z h l   { xl l   0~ x l   t~ Ìy l        l   '  4  l   ;     l   >  ð  l   N  ü  l   ^  @ l   û    l   þ ô l     
 l   Ñ 
 l   á  l       l   A ´ l   J  l   { @ l      l   Ä  l   Ð   l      l   ª  l   ü ` l   (   l   d À l   7   l   V   l   h  l       l   	    l   6 (  l   9 Ü  l   = ð  l   V ü  l   w ! l     " l   ó # l   ö Ð# l   	  $ l   :	 $ l   ¸	  & l   À	 ø& l   
  ( l   
 ( l   
 0( l   
 T( l   4
 d( l   ;
 à( l   @
 ü( l   }
 ) l   
  * l   È
  + l   ç
 $+ l   6  , l   V  - l   s - l     . l   I  0 l   ó  3 l   G  @ l   p A l   » üA l   é @C l   ú ÀC l   5  D l   @ ØD l   t @E l   w ØE l   Å  F l   Í (G l   Û @G l   Ý pG l     H l   8 LH l   ? øH l     J l     J l    (J l    <J l   © |J l   ë ÀJ l   ú ÀK l     L l    L l    <L l   ) LL l   1 ¨L l   4 ÈL l   : ÔL l   E ðL l   I M l   N ,M l   Q @M l   X \M l   d tM l   m M l   u ÀM l   K  P l   Z @Q l   Æ  R l   È S l   Ú @S l   ¶  V l   Á àV l   Þ `W l   A  X l   E Y l   Z @Y l   ¸  Z l   Ê  [ l     \ l   , t\ l   : À\ l   ê  c l     üc l   ?  h l   H i l    @i l    j l   ù  k l   	  p l   7 (p l   A àp l   Z @q l    Èq l   ¨ Hr l   · ¤r l     t l   
  t l   7 ,t l   ; èt l   > ðt l   H üt l   Z @u l   #   	 l   D%  	 l   /4  @	 l   GF  
 l   9j    l   _j  ) l   jj ) l   îj @+ l   õj À+ l   7k  , l   Dk  - l   Zk @- l   xk - l   k ô- l   Eo  < l   o @= l    o <> l   âo ? l   í  @ l   ó
    l   1  @ l   ü2 ÀE l   k<  p l   }< Àq l   <  r l   < @r l   < tr l   7Z  h l   mZ ìh l   vZ Ôi l   Z j l    Z lj l   °Z j l   `    l   `    l   "` l  l   %`   l   +`   l   Åh    l   ×h @# l   Ki $ l   Zi @% l   ×&    l   57   l   8  ] l   ¢N ` l   ák À: zCONTEXTJ)l      0  zCONTEXTO)l   ¸   Ül   v  Ôl   õ  Ìl   j  l   ú  Àl   ü0  ìC 0ûi   éU   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i   éD   i!  r   i"  éR   i#  r   i$  r   i%  r   i&  r   i'  r   i(  r   i)  r   i*  r   i+  r   i,  r   i-  r   i.  r   i/  r   i0  r   i1  r   i2  r   i3  r   i4  r   i5  r   i6  r   i7  r   i8  r   i9  r   i:  r   i;  r   i<  r   i=  r   i>  r   i?  r   i@  éC   iA  r   iB  r   iC  r   iD  r   iE  r   iF  r   iG  r   iH  r   iI  r   iJ  r   in  r   io  r   iq  r   ir  r   is  r   it  r   iu  r   iv  r   iw  r   ix  r   iy  r   iz  r   i{  r   i|  r   i}  r   i~  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i   r   i¡  r   i¢  r   i£  r   i¤  r   i¥  r   i¦  r   i§  r   i¨  r   i©  r   iª  r   i«  r   i¬  r   i­  r   i®  r   i¯  r   i°  r   i±  r   i²  r   i³  r   i´  r   iµ  r   i¶  r   i·  r   i¸  r   i¹  r   iº  r   i»  r   i¼  r   i½  r   i¾  r   i¿  r   iÀ  r   iÁ  r   iÂ  r   iÃ  r   iÄ  r   iÅ  r   iÆ  r   iÇ  r   iÈ  r   iÉ  r   iÊ  r   iË  r   iÌ  r   iÍ  r   iÎ  r   iÏ  r   iÐ  r   iÑ  r   iÒ  r   iÓ  r   iÕ  r   iÝ  r   iî  r   iï  r   iú  r   iû  r   iü  r   iÿ  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i   r   i!  r   i"  r   i#  r   i$  r   i%  r   i&  r   i'  r   i(  r   i)  r   i*  r   i+  r   i,  r   i-  r   i.  r   i/  r   iM  r   iN  r   iO  r   iP  r   iQ  r   iR  r   iS  r   iT  r   iU  r   iV  r   iW  r   iX  r   iY  r   iZ  r   i[  r   i\  r   i]  r   i^  r   i_  r   i`  r   ia  r   ib  r   ic  r   id  r   ie  r   if  r   ig  r   ih  r   ii  r   ij  r   ik  r   il  r   im  r   in  r   io  r   ip  r   iq  r   ir  r   is  r   it  r   iu  r   iv  r   iw  r   ix  r   iy  r   iz  r   i{  r   i|  r   i}  r   i~  r   i  r   iÊ  r   iË  r   iÌ  r   iÍ  r   iÎ  r   iÏ  r   iÐ  r   iÑ  r   iÒ  r   iÓ  r   iÔ  r   iÕ  r   iÖ  r   i×  r   iØ  r   iÙ  r   iÚ  r   iÛ  r   iÜ  r   iÝ  r   iÞ  r   iß  r   ià  r   iá  r   iâ  r   iã  r   iä  r   iå  r   iæ  r   iç  r   iè  r   ié  r   iê  r   iú  r   i@  r   iA  r   iB  r   iC  r   iD  r   iE  r   iF  r   iG  r   iH  r   iI  r   iJ  r   iK  r   iL  r   iM  r   iN  r   iO  r   iP  r   iQ  r   iR  r   iS  r   iT  r   iU  r   iV  r   iW  r   iX  r   i`  r   ia  r   ib  r   ic  r   id  r   ie  r   if  r   ig  r   ih  r   ii  r   ij  r   i   r   i¡  r   i¢  r   i£  r   i¤  r   i¥  r   i¦  r   i§  r   i¨  r   i©  r   iª  r   i«  r   i¬  r   i­  r   i®  r   i¯  r   i°  r   i±  r   i²  r   i³  r   i´  r   i¶  r   i·  r   i¸  r   i¹  r   iº  r   i»  r   i¼  r   i½  r   iâ  r   i  r   i  r   i
  r   i  r   i   r   i!  r   i"  r   i#  r   i$  r   i%  r   i&  r   i'  r   i(  r   i)  r   i*  r   i+  r   i,  r   i-  r   i.  r   i/  r   i0  r   i1  r   i2  r   i3  r   i4  r   i5  r   i6  r   i7  r   i8  r   i9  r   i:  r   i;  r   i<  r   i=  r   i>  r   i?  r   i@  r   iA  r   iB  r   iC  r   iD  r   iE  r   iF  r   iG  r   iH  r   iI  r   iJ  r   iK  r   iL  r   iM  r   iN  r   iO  r   iP  r   iQ  r   iR  r   iS  r   iT  r   iU  r   iV  r   iW  r   iX  r   iY  r   iZ  r   i[  r   i\  r   i]  r   i^  r   i_  r   i`  r   ia  r   ib  r   ic  r   id  r   ie  r   if  r   ig  r   ih  r   ii  r   ij  r   ik  r   il  r   im  r   in  r   io  r   ip  r   iq  r   ir  r   is  r   it  r   iu  r   iv  r   iw  r   i  r   i  r   i  r   i  r   i  r   i  éT   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i  r   i   r   i¡  r   i¢  r   i£  r   i¤  r   i¥  r   i¦  r   i§  r   i¨  r   iª  r   i   r   i   r   i/   r   if   r   ig   r   ih   r   ii   r   i@¨  r   iA¨  r   iB¨  r   iC¨  r   iD¨  r   iE¨  r   iF¨  r   iG¨  r   iH¨  r   iI¨  r   iJ¨  r   iK¨  r   iL¨  r   iM¨  r   iN¨  r   iO¨  r   iP¨  r   iQ¨  r   iR¨  r   iS¨  r   iT¨  r   iU¨  r   iV¨  r   iW¨  r   iX¨  r   iY¨  r   iZ¨  r   i[¨  r   i\¨  r   i]¨  r   i^¨  r   i_¨  r   i`¨  r   ia¨  r   ib¨  r   ic¨  r   id¨  r   ie¨  r   if¨  r   ig¨  r   ih¨  r   ii¨  r   ij¨  r   ik¨  r   il¨  r   im¨  r   in¨  r   io¨  r   ip¨  r   iq¨  r   ir¨  éL   is¨  r   iÀ
 r   iÁ
 r   iÂ
 r   iÃ
 r   iÄ
 r   iÅ
 r   iÆ
 r   iÇ
 r   iÈ
 r   iÉ
 r   iÊ
 r   iË
 r   iÌ
 r   iÍ
 r   iÎ
 r   iÏ
 r   iÐ
 r   iÑ
 r   iÒ
 r   iÓ
 r   iÔ
 r   iÕ
 r   iÖ
 r   i×
 r   iØ
 r   iÙ
 r   iÚ
 r   iÛ
 r   iÜ
 r   iÝ
 r   iÞ
 r   iß
 r   ià
 r   iá
 r   iâ
 r   iã
 r   iä
 r   ië
 r   iì
 r   ií
 r   iî
 r   iï
 r   i r   i r   i r   i r   i r   i r   i r   i r   i r   i r   i r   i r   i r   i r   i r   i r   i r   i r   i© r   iª r   i« r   i¬ r   i­ r   i® r   i¯ r   i é r   ié r   ié r   ié r   ié r   ié r   ié r   ié r   ié r   i	é r   i
é r   ié r   ié r   ié r   ié r   ié r   ié r   ié r   ié r   ié r   ié r   ié r   ié r   ié r   ié r   ié r   ié r   ié r   ié r   ié r   ié r   ié r   i é r   i!é r   i"é r   i#é r   i$é r   i%é r   i&é r   i'é r   i(é r   i)é r   i*é r   i+é r   i,é r   i-é r   i.é r   i/é r   i0é r   i1é r   i2é r   i3é r   i4é r   i5é r   i6é r   i7é r   i8é r   i9é r   i:é r   i;é r   i<é r   i=é r   i>é r   i?é r   i@é r   iAé r   iBé r   iCé r   0idna.idnadataC:\code\venv\callllama\lib\site-packages\idna\idnadata.pyidna.intranges
Given a list of integers, made up of (hopefully) a small number of long runs
of consecutive integers, compute a representation of the form
((start1, end1), (start2, end2) ...). Then answer the question "was x present
in the original list?" in time O(log(# runs)).
intranges_from_listsorted_listlast_writecurrent_rangeDetermine if `int_` falls into one of the ranges in `ranges`.tuple_<module idna.intranges>Represent a list of integers as a sequence of ranges:
    ((start_0, end_0), (start_1, end_1), ...), such that the original
    integers are exactly those x such that start_i <= x < end_i for some i.

    Ranges are encoded as single integers (start << 32 | end), not as tuples.
    _encode_rangeC:\code\venv\callllama\lib\site-packages\idna\intranges.py_decode_rangeidna.package_dataC:\code\venv\callllama\lib\site-packages\idna\package_data.py_seg_44Ûd   )i½2  ÚMz48)i¾2  r   z49)i¿2  r   z50)iÀ2  r   u   1æ)iÁ2  r   u   2æ)iÂ2  r   u   3æ)iÃ2  r   u   4æ)iÄ2  r   u   5æ)iÅ2  r   u   6æ)iÆ2  r   u   7æ)iÇ2  r   u   8æ)iÈ2  r   u   9æ)iÉ2  r   u   10æ)iÊ2  r   u   11æ)iË2  r   u   12æ)iÌ2  r   zhg)iÍ2  r   zerg)iÎ2  r   zev)iÏ2  r   zltd)iÐ2  r   u   ã¢)iÑ2  r   u   ã¤)iÒ2  r   u   ã¦)iÓ2  r   u   ã¨)iÔ2  r   u   ãª)iÕ2  r   u   ã«)iÖ2  r   u   ã­)i×2  r   u   ã¯)iØ2  r   u   ã±)iÙ2  r   u   ã³)iÚ2  r   u   ãµ)iÛ2  r   u   ã·)iÜ2  r   u   ã¹)iÝ2  r   u   ã»)iÞ2  r   u   ã½)iß2  r   u   ã¿)ià2  r   u   ã)iá2  r   u   ã)iâ2  r   u   ã)iã2  r   u   ã)iä2  r   u   ã)iå2  r   u   ã)iæ2  r   u   ã)iç2  r   u   ã)iè2  r   u   ã)ié2  r   u   ã)iê2  r   u   ã)ië2  r   u   ã)iì2  r   u   ã)ií2  r   u   ã)iî2  r   u   ã)iï2  r   u   ã)ið2  r   u   ã )iñ2  r   u   ã¡)iò2  r   u   ã¢)ió2  r   u   ã¤)iô2  r   u   ã¦)iõ2  r   u   ã¨)iö2  r   u   ã©)i÷2  r   u   ãª)iø2  r   u   ã«)iù2  r   u   ã¬)iú2  r   u   ã­)iû2  r   u   ã¯)iü2  r   u   ã°)iý2  r   u   ã±)iþ2  r   u   ã²)iÿ2  ÚX)i 3  r   u   ã¢ãã¼ã)i3  r   u   ã¢ã«ãã¡)i3  r   u   ã¢ã³ãã¢)i3  r   u	   ã¢ã¼ã«)i3  r   u   ã¤ãã³ã°)i3  r   u	   ã¤ã³ã)i3  r   u	   ã¦ã©ã³)i3  r   u   ã¨ã¹ã¯ã¼ã)i3  r   u   ã¨ã¼ã«ã¼)i	3  r   u	   ãªã³ã¹)i
3  r   u	   ãªã¼ã )i3  r   u	   ã«ã¤ãª)i3  r   u   ã«ã©ãã)i3  r   u   ã«ã­ãªã¼)i3  r   u	   ã¬ã­ã³)i3  r   u	   ã¬ã³ã)i3  r   u   ã®ã¬)i3  r   u	   ã®ãã¼)i3  r   u   ã­ã¥ãªã¼)i3  r   u   ã®ã«ãã¼)i3  r   u   ã­ã­)i3  r   u   ã­ã­ã°ã©ã )i3  r   u   ã­ã­ã¡ã¼ãã«)i3  r   u   ã­ã­ã¯ãã)i3  r   u	   ã°ã©ã )i3  r   u   ã°ã©ã ãã³)i3  r   u   ã¯ã«ã¼ã¤ã­)i3  r   u   ã¯ã­ã¼ã)i3  r   u	   ã±ã¼ã¹)i3  r   u	   ã³ã«ã)i3  r   u	   ã³ã¼ã)i3  r   u   ãµã¤ã¯ã«)i 3  r   u   ãµã³ãã¼ã _seg_14Ûd   )iþ  ÚMu   Ø«)iþ  r   u   Ø¬)i¡þ  r   u   Ø­)i¥þ  r   u   Ø®)i©þ  r   u   Ø¯)i«þ  r   u   Ø°)i­þ  r   u   Ø±)i¯þ  r   u   Ø²)i±þ  r   u   Ø³)iµþ  r   u   Ø´)i¹þ  r   u   Øµ)i½þ  r   u   Ø¶)iÁþ  r   u   Ø·)iÅþ  r   u   Ø¸)iÉþ  r   u   Ø¹)iÍþ  r   u   Øº)iÑþ  r   u   Ù)iÕþ  r   u   Ù)iÙþ  r   u   Ù)iÝþ  r   u   Ù)iáþ  r   u   Ù)iåþ  r   u   Ù)iéþ  r   u   Ù)iíþ  r   u   Ù)iïþ  r   u   Ù)iñþ  r   u   Ù)iõþ  r   u   ÙØ¢)i÷þ  r   u   ÙØ£)iùþ  r   u   ÙØ¥)iûþ  r   u   ÙØ§)iýþ  ÚX)iÿþ  ÚI)i ÿ  r   )iÿ  ú3ú!)iÿ  r   ú")iÿ  r   ú#)iÿ  r   ú$)iÿ  r   ú%)iÿ  r   ú&)iÿ  r   ú')iÿ  r   ú()i	ÿ  r   ú))i
ÿ  r   Ú*)iÿ  r   ú+)iÿ  r   ú,)iÿ  r   ú-)iÿ  r   Ú.)iÿ  r   ú/)iÿ  r   Ú0)iÿ  r   Ú1)iÿ  r   ú2)iÿ  r   r   )iÿ  r   ú4)iÿ  r   ú5)iÿ  r   ú6)iÿ  r   ú7)iÿ  r   ú8)iÿ  r   ú9)iÿ  r   ú:)iÿ  r   ú;)iÿ  r   ú<)iÿ  r   ú=)iÿ  r   ú>)iÿ  r   ú?)i ÿ  r   ú@)i!ÿ  r   Úa)i"ÿ  r   Úb)i#ÿ  r   Úc)i$ÿ  r   Úd)i%ÿ  r   Úe)i&ÿ  r   Úf)i'ÿ  r   Úg)i(ÿ  r   Úh)i)ÿ  r   Úi)i*ÿ  r   Új)i+ÿ  r   Úk)i,ÿ  r   Úl)i-ÿ  r   Úm)i.ÿ  r   Ún)i/ÿ  r   Úo)i0ÿ  r   Úp)i1ÿ  r   Úq)i2ÿ  r   Úr)i3ÿ  r   Ús)i4ÿ  r   Út)i5ÿ  r   Úu)i6ÿ  r   Úv)i7ÿ  r   Úw)i8ÿ  r   Úx)i9ÿ  r   Úy)i:ÿ  r   Úz)i;ÿ  r   ú[)i<ÿ  r   ú\)i=ÿ  r   ú])i>ÿ  r   ú^)i?ÿ  r   Ú_)i@ÿ  r   ú`)iAÿ  r   r$   )iBÿ  r   r%   )iCÿ  r   r&   _seg_11_seg_73_seg_77_seg_35Ûd   )i¡ø ÚMu   ã¤º)i¢ø r   u   ã¤)i£ø r   u   æ)i¤ø r   u   ð¢)i¥ø r   u   æ)i¦ø r   u   æ)i§ø r   u   æ)i¨ø r   u   æ)i©ø r   u   æ)iªø r   u   æº)i«ø r   u   æ)i¬ø r   u   æ²)i­ø r   u   æ¤)i®ø r   u   æ¯)i¯ø r   u   æ)i°ø r   u   æ²)i±ø r   u   æ¶)i²ø r   u   æ)i³ø r   u   æ)i´ø r   u   æ)iµø r   u   æ±)i¶ø r   u   æ)i·ø r   u   æ)i¸ø r   u   ð¢¬)i¹ø r   u   æ½)iºø r   u   æ¼)i»ø r   u   æ¨)i¼ø r   u   æ)i½ø r   u   æ¤)i¾ø r   u   ð¢¯±)i¿ø r   u   æ¢)iÀø r   u   æ)iÁø r   u   æ©)iÂø r   u   ã¨®)iÃø r   u   æ©)iÄø r   u   æ¾)iÅø r   u   æ)iÆø r   u   æ·)iÇø r   u   ã©¬)iÈø r   u   æ)iÉø r   u   æ¬)iÊø r   u   ð£)iËø r   u   æ£)iÌø r   u   æ¸)iÍø r   u   æ)iÎø r   u   ã¬)iÏø r   u   æ)iÐø r   u   ã¬)iÑø r   u   ã«¤)iÒø r   u   å)iÓø r   u   å)iÔø r   u   æ)iÕø r   u   æ)iÖø r   u   è­)i×ø r   u   ä)iØø r   u   æ)iÙø r   u   æ)iÚø r   u   æ¡)iÛø r   u   æ)iÜø r   u   æ)iÝø r   u   ð£)iÞø r   u   ã­)ißø r   u   æº)iàø r   u   æ)iáø r   u   æ¡)iâø r   u   æ¢)iãø r   u   ð£­)iäø r   u   æ¢)iåø r   u   æ )iæø r   u   æ¤)içø r   u   ã®)ièø r   u   æ¥)iéø r   u   æ¦£)iêø r   u   æ§ª)iëø r   u   æª¨)iìø r   u   ð££)iíø r   u   æ«)iîø r   u   ã°)iïø r   u   æ¬¡)iðø r   u   ð£¢§)iñø r   u   æ­)iòø r   u   ã±)ióø r   u   æ­²)iôø r   u   æ®)iõø r   u   æ®º)iöø r   u   æ®»)i÷ø r   u   ð£ª)iøø r   u   ð¡´)iùø r   u   ð£«º)iúø r   u   æ±)iûø r   u   ð£²¼)iüø r   u   æ²¿)iýø r   u   æ³)iþø r   u   æ±§)iÿø r   u   æ´)i ù r   u   æ´¾)iù r   u   æµ·)iù r   u   æµ)iù r   u   æµ©)iù r   u   æµ¸_seg_49Ûd   )i#!  úV)i$!  ÚMÚz)i%!  r   )i&!  r   u   Ï)i'!  r   )i(!  r   r   )i)!  r   )i*!  r   Úk)i+!  r   õ   Ã¥)i,!  r   Úb)i-!  r   Úc)i.!  r   )i/!  r   Úe)i1!  r   Úf)i2!  ÚX)i3!  r   Úm)i4!  r   Úo)i5!  r   u   ×)i6!  r   u   ×)i7!  r   u   ×)i8!  r   u   ×)i9!  r   Úi)i:!  r   )i;!  r   zfax)i<!  r   u   Ï)i=!  r   u   Î³)i?!  r   u   Ï)i@!  r   u   â)iA!  r   )iE!  r   Úd)iG!  r   r   )iH!  r   r   )iI!  r   Új)iJ!  r   )iP!  r   u   1â7)iQ!  r   u   1â9)iR!  r   u   1â10)iS!  r   u   1â3)iT!  r   u   2â3)iU!  r   u   1â5)iV!  r   u   2â5)iW!  r   u   3â5)iX!  r   u   4â5)iY!  r   u   1â6)iZ!  r   u   5â6)i[!  r   u   1â8)i\!  r   u   3â8)i]!  r   u   5â8)i^!  r   u   7â8)i_!  r   u   1â)i`!  r   r   )ia!  r   zii)ib!  r   ziii)ic!  r   ziv)id!  r   Úv)ie!  r   zvi)if!  r   zvii)ig!  r   zviii)ih!  r   zix)ii!  r   Úx)ij!  r   zxi)ik!  r   zxii)il!  r   Úl)im!  r   r   )in!  r   r   )io!  r   r   )ip!  r   r   )iq!  r   zii)ir!  r   ziii)is!  r   ziv)it!  r   r   )iu!  r   zvi)iv!  r   zvii)iw!  r   zviii)ix!  r   zix)iy!  r   r   )iz!  r   zxi)i{!  r   zxii)i|!  r   r   )i}!  r   r   )i~!  r   r   )i!  r   r   )i!  r   )i!  r
   )i!  r   )i!  r   u   0â3)i!  r   )i!  r
   )i!  r   )i,"  r   u   â«â«)i-"  r   u	   â«â«â«)i."  r   )i/"  r   u   â®â®)i0"  r   u	   â®â®â®)i1"  r   )i`"  ú3)ia"  r   )in"  r   )ip"  r   )i)#  r   u   ã_seg_72Ûd   )iù ÚMu   æ¶)iù r   u   ð£´)iù r   u   æ´´)iù r   u   æ¸¯)i	ù r   u   æ¹®)i
ù r   u   ã´³)iù r   u   æ»)iù r   u   æ»)iù r   u   ð£»)iù r   u   æ·¹)iù r   u   æ½®)iù r   u   ð£½)iù r   u   ð£¾)iù r   u   æ¿)iù r   u   ç¹)iù r   u   ç)iù r   u   ç)iù r   u   ã¶)iù r   u   ç)iù r   u   ç½)iù r   u   ç·)iù r   u   ç­)iù r   u   ð ¥)iù r   u   ç)iù r   u   ð¤£)iù r   u   ç)iù ÚX)i ù r   u   ç¨)i!ù r   u   çµ)i"ù r   u   ç)i#ù r   u   ð¤)i$ù r   u   ç)i%ù r   u   ç)i&ù r   u   ð¤µ)i'ù r   u   ð¤ )i(ù r   u   çº)i)ù r   u   ç)i*ù r   u   ãº¬)i+ù r   u   ç¥)i,ù r   u   ãº¸)i.ù r   u   ç)i/ù r   u   ç)i0ù r   u   ç±)i1ù r   u   ç)i2ù r   u   ç)i3ù r   u   ã¼)i4ù r   u   ç¤)i5ù r   u   ð¤°¶)i6ù r   u   ç¾)i7ù r   u   ð¤²)i8ù r   u   ç°)i9ù r   u   ð¢)i:ù r   u   ç)i;ù r   u   ð¤¾¡)i<ù r   u   ð¤¾¸)i=ù r   u   ð¥)i>ù r   u   ã¿¼)i?ù r   u   ä)i@ù r   u   ç´)iAù r   u   ð¥³)iBù r   u   ð¥²)iCù r   u   ð¥)iDù r   u   ð¥³)iEù r   u   ç)iFù r   u   ç)iHù r   u   ç)iIù r   u   ä¹)iJù r   u   ç)iKù r   u   ä)iLù r   u   ä)iMù r   u   ð¥)iNù r   u   ç¡)iOù r   u   ç¢)iPù r   u   ç£)iQù r   u   ä£)iRù r   u   ð¥¦)iSù r   u   ç¥)iTù r   u   ð¥)iUù r   u   ð¥)iVù r   u   ç¦)iWù r   u   ç§«)iXù r   u   ä¯)iYù r   u   ç©)iZù r   u   ç©)i[ù r   u   ç©)i\ù r   u   ð¥¥¼)i]ù r   u   ð¥ª§)i_ù r   )i`ù r   u   ä)iaù r   u   ð¥®«)ibù r   u   ç¯)icù r   u   ç¯)idù r   u   ä§)ieù r   u   ð¥²)ifù r   u   ç³)igù r   u   ä )ihù r   u   ç³¨)iiù r   u   ç³£)ijù r   u   ç´)ikù r   u   ð¥¾C:\code\venv\callllama\lib\site-packages\idna\uts46data.pyÛd   )i  ÚMu   Ò)i  úV)i   r   u   Ò¡)i¡  r   )i¢  r   u   Ò£)i£  r   )i¤  r   u   Ò¥)i¥  r   )i¦  r   u   Ò§)i§  r   )i¨  r   u   Ò©)i©  r   )iª  r   u   Ò«)i«  r   )i¬  r   u   Ò­)i­  r   )i®  r   u   Ò¯)i¯  r   )i°  r   u   Ò±)i±  r   )i²  r   u   Ò³)i³  r   )i´  r   u   Òµ)iµ  r   )i¶  r   u   Ò·)i·  r   )i¸  r   u   Ò¹)i¹  r   )iº  r   u   Ò»)i»  r   )i¼  r   u   Ò½)i½  r   )i¾  r   u   Ò¿)i¿  r   )iÀ  ÚX)iÁ  r   u   Ó)iÂ  r   )iÃ  r   u   Ó)iÄ  r   )iÅ  r   u   Ó)iÆ  r   )iÇ  r   u   Ó)iÈ  r   )iÉ  r   u   Ó)iÊ  r   )iË  r   u   Ó)iÌ  r   )iÍ  r   u   Ó)iÎ  r   )iÐ  r   u   Ó)iÑ  r   )iÒ  r   u   Ó)iÓ  r   )iÔ  r   u   Ó)iÕ  r   )iÖ  r   u   Ó)i×  r   )iØ  r   u   Ó)iÙ  r   )iÚ  r   u   Ó)iÛ  r   )iÜ  r   u   Ó)iÝ  r   )iÞ  r   u   Ó)iß  r   )ià  r   u   Ó¡)iá  r   )iâ  r   u   Ó£)iã  r   )iä  r   u   Ó¥)iå  r   )iæ  r   u   Ó§)iç  r   )iè  r   u   Ó©)ié  r   )iê  r   u   Ó«)ië  r   )iì  r   u   Ó­)ií  r   )iî  r   u   Ó¯)iï  r   )ið  r   u   Ó±)iñ  r   )iò  r   u   Ó³)ió  r   )iô  r   u   Óµ)iõ  r   )iö  r   u   Ó·)i÷  r   )iø  r   u   Ó¹)iù  r   )iú  r   u   Ó»)iû  r   )iü  r   u   Ó½)iý  r   )iþ  r   u   Ó¿)iÿ  r   )i   r   u   Ô)i  r   )i  r   u   Ô_seg_5Ûd   )iü  ÚMu   ÙØ§)iü  r   u   ÙÙ)iü  r   u   ÙÙ)iü  r   u   ÙÙ)iü  r   u   ÙÙ)iü  r   u   ÙÙ)iü  r   u   ÙÙ)iü  r   u   ÙÙ)iü  r   u   ÙØ§)iü  r   u   ÙÙ)iü  r   u   ÙØ±)iü  r   u   ÙØ²)iü  r   u   ÙÙ)iü  r   u   ÙÙ)iü  r   u   ÙÙ)iü  r   u   ÙÙ)iü  r   u   ÙÙ°)iü  r   u   ÙØ±)iü  r   u   ÙØ²)iü  r   u   ÙÙ)iü  r   u   ÙÙ)iü  r   u   ÙÙ)iü  r   u   ÙÙ)iü  r   u   Ø¦Ø¬)iü  r   u   Ø¦Ø­)iü  r   u   Ø¦Ø®)iü  r   u   Ø¦Ù)iü  r   u   Ø¦Ù)iü  r   u   Ø¨Ø¬)iü  r   u   Ø¨Ø­)iü  r   u   Ø¨Ø®)iü  r   u   Ø¨Ù)i ü  r   u   Ø¨Ù)i¡ü  r   u   ØªØ¬)i¢ü  r   u   ØªØ­)i£ü  r   u   ØªØ®)i¤ü  r   u   ØªÙ)i¥ü  r   u   ØªÙ)i¦ü  r   u   Ø«Ù)i§ü  r   u   Ø¬Ø­)i¨ü  r   u   Ø¬Ù)i©ü  r   u   Ø­Ø¬)iªü  r   u   Ø­Ù)i«ü  r   u   Ø®Ø¬)i¬ü  r   u   Ø®Ù)i­ü  r   u   Ø³Ø¬)i®ü  r   u   Ø³Ø­)i¯ü  r   u   Ø³Ø®)i°ü  r   u   Ø³Ù)i±ü  r   u   ØµØ­)i²ü  r   u   ØµØ®)i³ü  r   u   ØµÙ)i´ü  r   u   Ø¶Ø¬)iµü  r   u   Ø¶Ø­)i¶ü  r   u   Ø¶Ø®)i·ü  r   u   Ø¶Ù)i¸ü  r   u   Ø·Ø­)i¹ü  r   u   Ø¸Ù)iºü  r   u   Ø¹Ø¬)i»ü  r   u   Ø¹Ù)i¼ü  r   u   ØºØ¬)i½ü  r   u   ØºÙ)i¾ü  r   u   ÙØ¬)i¿ü  r   u   ÙØ­)iÀü  r   u   ÙØ®)iÁü  r   u   ÙÙ)iÂü  r   u   ÙØ­)iÃü  r   u   ÙÙ)iÄü  r   u   ÙØ¬)iÅü  r   u   ÙØ­)iÆü  r   u   ÙØ®)iÇü  r   u   ÙÙ)iÈü  r   u   ÙÙ)iÉü  r   u   ÙØ¬)iÊü  r   u   ÙØ­)iËü  r   u   ÙØ®)iÌü  r   u   ÙÙ)iÍü  r   u   ÙÙ)iÎü  r   u   ÙØ¬)iÏü  r   u   ÙØ­)iÐü  r   u   ÙØ®)iÑü  r   u   ÙÙ)iÒü  r   u   ÙØ¬)iÓü  r   u   ÙØ­)iÔü  r   u   ÙØ®)iÕü  r   u   ÙÙ)iÖü  r   u   ÙÙ)i×ü  r   u   ÙØ¬)iØü  r   u   ÙÙ)iÙü  r   u   ÙÙ°)iÚü  r   u   ÙØ¬)iÛü  r   u   ÙØ­)iÜü  r   u   ÙØ®)iÝü  r   u   ÙÙ)iÞü  r   u   ÙÙ)ißü  r   u   Ø¦Ù)iàü  r   u   Ø¦Ù)iáü  r   u   Ø¨Ù)iâü  r   u   Ø¨Ù)iãü  r   u   ØªÙÛd   )é    ú3)é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é	   r   )é
   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é   r   )é    r   )é!   r   )é"   r   )é#   r   )é$   r   )é%   r   )é&   r   )é'   r   )é(   r   )é)   r   )é*   r   )é+   r   )é,   r   )é-   úV)é.   r0   )é/   r   )é0   r0   )é1   r0   )é2   r0   )é3   r0   )é4   r0   )é5   r0   )é6   r0   )é7   r0   )é8   r0   )é9   r0   )é:   r   )é;   r   )é<   r   )é=   r   )é>   r   )é?   r   )é@   r   )éA   ÚMÚa)éB   rE   Úb)éC   rE   Úc)éD   rE   Úd)éE   rE   Úe)éF   rE   Úf)éG   rE   Úg)éH   rE   Úh)éI   rE   Úi)éJ   rE   Új)éK   rE   Úk)éL   rE   Úl)éM   rE   Úm)éN   rE   Ún)éO   rE   Úo)éP   rE   Úp)éQ   rE   Úq)éR   rE   Úr)éS   rE   Ús)éT   rE   Út)éU   rE   Úu)éV   rE   Úv)éW   rE   Úw)éX   rE   Úx)éY   rE   Úy)éZ   rE   Úz)é[   r   )é\   r   )é]   r   )é^   r   )é_   r   )é`   r   )éa   r0   )éb   r0   )éc   r0   _seg_2_seg_10Ûd   )i  úV)iZ ÚX)i[ r   )i\ r   )i] r   )i^ r   )i r   )iÈ r   )iÐ r   )iÚ r   )i r   )i¶ r   )i¸ r   )iÞ r   )i  r   )iE r   )iP r   )iZ r   )i` r   )im r   )i r   )i¸ r   )iÀ r   )iÊ r   )i  r   )i r   )i r   )i, r   )i0 r   )i@ r   )i  ÚMu   ð£)i¡ r   u   ð£)i¢ r   u   ð£)i£ r   u   ð£)i¤ r   u   ð£)i¥ r   u   ð£)i¦ r   u   ð£)i§ r   u   ð£)i¨ r   u   ð£)i© r   u   ð£)iª r   u   ð£)i« r   u   ð£)i¬ r   u   ð£)i­ r   u   ð£)i® r   u   ð£)i¯ r   u   ð£)i° r   u   ð£)i± r   u   ð£)i² r   u   ð£)i³ r   u   ð£)i´ r   u   ð£)iµ r   u   ð£)i¶ r   u   ð£)i· r   u   ð£)i¸ r   u   ð£)i¹ r   u   ð£)iº r   u   ð£)i» r   u   ð£)i¼ r   u   ð£)i½ r   u   ð£)i¾ r   u   ð£)i¿ r   u   ð£)iÀ r   )ió r   )iÿ r   )i  r   )i  r   )iH r   )iP r   )i r   )i r   )i r   )i r   )i£ r   )iÀ r   )iù r   )i  r   )i	 r   )i
 r   )i7 r   )i8 r   )iF r   )iP r   )im r   )ip r   )i r   )i r   )i¨ r   )i© r   )i· r   )i  r   )i r   )i r   )i
 r   )i r   )i7 r   )i: r   )i; r   )i< r   )i> r   _seg_57Ûd   )iÕ ÚMÚw)iÕ r   Úx)iÕ r   Úy)iÕ r   Úz)i Õ r   Úa)i¡Õ r   Úb)i¢Õ r   Úc)i£Õ r   Úd)i¤Õ r   Úe)i¥Õ r   Úf)i¦Õ r   Úg)i§Õ r   Úh)i¨Õ r   Úi)i©Õ r   Új)iªÕ r   Úk)i«Õ r   Úl)i¬Õ r   Úm)i­Õ r   Ún)i®Õ r   Úo)i¯Õ r   Úp)i°Õ r   Úq)i±Õ r   Úr)i²Õ r   Ús)i³Õ r   Út)i´Õ r   Úu)iµÕ r   Úv)i¶Õ r   r   )i·Õ r   r   )i¸Õ r   r   )i¹Õ r   r   )iºÕ r   r   )i»Õ r   r   )i¼Õ r   r   )i½Õ r   r	   )i¾Õ r   r
   )i¿Õ r   r   )iÀÕ r   r   )iÁÕ r   r   )iÂÕ r   r   )iÃÕ r   r   )iÄÕ r   r   )iÅÕ r   r   )iÆÕ r   r   )iÇÕ r   r   )iÈÕ r   r   )iÉÕ r   r   )iÊÕ r   r   )iËÕ r   r   )iÌÕ r   r   )iÍÕ r   r   )iÎÕ r   r   )iÏÕ r   r   )iÐÕ r   r   )iÑÕ r   r   )iÒÕ r   r   )iÓÕ r   r   )iÔÕ r   r   )iÕÕ r   r   )iÖÕ r   r   )i×Õ r   r	   )iØÕ r   r
   )iÙÕ r   r   )iÚÕ r   r   )iÛÕ r   r   )iÜÕ r   r   )iÝÕ r   r   )iÞÕ r   r   )ißÕ r   r   )iàÕ r   r   )iáÕ r   r   )iâÕ r   r   )iãÕ r   r   )iäÕ r   r   )iåÕ r   r   )iæÕ r   r   )içÕ r   r   )ièÕ r   r   )iéÕ r   r   )iêÕ r   r   )iëÕ r   r   )iìÕ r   r   )iíÕ r   r   )iîÕ r   r   )iïÕ r   r   )iðÕ r   r   )iñÕ r   r	   )iòÕ r   r
   )ióÕ r   r   )iôÕ r   r   )iõÕ r   r   )iöÕ r   r   )i÷Õ r   r   )iøÕ r   r   )iùÕ r   r   )iúÕ r   r   )iûÕ r   r   )iüÕ r   r   )iýÕ r   r   )iþÕ r   r   )iÿÕ r   r   IDNA Mapping Table from UTS46.Ûd   )iK ÚX)iP úV)i{ r   )i r   )i r   )i r   )iÄ r   )iÈ r   )iÖ r   )i  ÚMu   ð¨)i r   u   ð©)i r   u   ðª)i r   u   ð«)i r   u   ð¬)i r   u   ð­)i r   u   ð®)i r   u   ð¯)i r   u   ð°)i	 r   u   ð±)i
 r   u   ð²)i r   u   ð³)i r   u   ð´)i r   u   ðµ)i r   u   ð¶)i r   u   ð·)i r   u   ð¸)i r   u   ð¹)i r   u   ðº)i r   u   ð»)i r   u   ð¼)i r   u   ð½)i r   u   ð¾)i r   u   ð¿)i r   u   ð)i r   u   ð)i r   u   ð)i r   u   ð)i r   u   ð)i r   u   ð)i r   u   ð)i r   u   ð)i  r   u   ð)i! r   u   ð)i" r   u   ð)i# r   u   ð)i$ r   u   ð)i% r   u   ð)i& r   u   ð)i' r   u   ð)i( r   )i r   )i  r   )iª r   )i° r   u   ð)i± r   u   ð)i² r   u   ð)i³ r   u   ð)i´ r   u   ð)iµ r   u   ð)i¶ r   u   ð)i· r   u   ð)i¸ r   u   ð )i¹ r   u   ð¡)iº r   u   ð¢)i» r   u   ð£)i¼ r   u   ð¤)i½ r   u   ð¥)i¾ r   u   ð¦)i¿ r   u   ð§)iÀ r   u   ð¨)iÁ r   u   ð©)iÂ r   u   ðª)iÃ r   u   ð«)iÄ r   u   ð¬)iÅ r   u   ð­)iÆ r   u   ð®)iÇ r   u   ð¯)iÈ r   u   ð°)iÉ r   u   ð±)iÊ r   u   ð²)iË r   u   ð³)iÌ r   u   ð´)iÍ r   u   ðµ)iÎ r   u   ð¶)iÏ r   u   ð·)iÐ r   u   ð¸)iÑ r   u   ð¹)iÒ r   u   ðº)iÓ r   u   ð»)iÔ r   )iØ r   )iü r   )i  r   )i( r   )i0 r   )id r   )io r   )ip r   )i  r   )i7 r   Ûd   )iÓù  ÚMu   é¸)iÔù  r   u   å«)iÕù  r   u   å´)iÖù  r   u   æ·ª)i×ù  r   u   è¼ª)iØù  r   u   å¾)iÙù  r   u   æ)iÚù  r   u   æ )iÛù  r   u   ç)iÜù  r   u   é)iÝù  r   u   å©)iÞù  r   u   å)ißù  r   u   å±¥)iàù  r   u   æ)iáù  r   u   æ)iâù  r   u   æ¢¨)iãù  r   u   æ³¥)iäù  r   u   ç)iåù  r   u   ç¢)iæù  r   u   ç½¹)içù  r   u   è£)ièù  r   u   è£¡)iéù  r   u   é)iêù  r   u   é¢)iëù  r   u   å¿)iìù  r   u   æºº)iíù  r   u   å)iîù  r   u   ç)iïù  r   u   ç)iðù  r   u   èº)iñù  r   u   é£)iòù  r   u   é±)ióù  r   u   éº)iôù  r   u   æ)iõù  r   u   æ·)iöù  r   u   è¨)i÷ù  r   u   ç«)iøù  r   u   ç¬ )iùù  r   u   ç²)iúù  r   u   ç)iûù  r   u   ç)iüù  r   u   è­)iýù  r   u   ä»)iþù  r   u   è¶)iÿù  r   u   åº)i ú  r   u   å)iú  r   u   åº¦)iú  r   u   æ)iú  r   u   ç³)iú  r   u   å®)iú  r   u   æ´)iú  r   u   æ´)iú  r   u   è¼»)iú  r   u   è¡)i	ú  r   u   é)i
ú  r   u   è¦)iú  r   u   å»)iú  r   u   å)iú  r   u   å)iú  úV)iú  r   u   å¡)iú  r   )iú  r   u   æ´)iú  r   )iú  r   u   å)iú  r   u   çª)iú  r   u   ç)iú  r   u   ç¤¼)iú  r   u   ç¥)iú  r   u   ç¥¥)iú  r   u   ç¦)iú  r   u   é)iú  r   u   ç²¾)iú  r   u   ç¾½)iú  r   )i ú  r   u   è)i!ú  r   )i"ú  r   u   è«¸)i#ú  r   )i%ú  r   u   é¸)i&ú  r   u   é½)i'ú  r   )i*ú  r   u   é£¯)i+ú  r   u   é£¼)i,ú  r   u   é¤¨)i-ú  r   u   é¶´)i.ú  r   u   é)i/ú  r   u   é·)i0ú  r   u   ä¾®)i1ú  r   u   å§)i2ú  r   u   å)i3ú  r   u   å)i4ú  r   u   å¤)i5ú  r   u   å)i6ú  r   u   å)i7ú  r   u   å)i8ú  r   u   å¨)i9ú  r   u   å¡)i:ú  r   u   å¢¨)i;ú  r   u   å±¤_seg_68_seg_60Ûd   )i  ÚMu   Ñ)i  r   u   Ñ)i  r   u   Ñ)i  r   u   Ñ)i  r   u   Ñ)i  r   u   Ñ)i	  r   u   Ñ)i
  r   u   Ñ)i  r   u   Ñ)i  r   u   Ñ)i  r   u   Ñ)i  r   u   Ñ)i  r   u   Ñ)i  r   u   Ð°)i  r   u   Ð±)i  r   u   Ð²)i  r   u   Ð³)i  r   u   Ð´)i  r   u   Ðµ)i  r   u   Ð¶)i  r   u   Ð·)i  r   u   Ð¸)i  r   u   Ð¹)i  r   u   Ðº)i  r   u   Ð»)i  r   u   Ð¼)i  r   u   Ð½)i  r   u   Ð¾)i  r   u   Ð¿)i   r   u   Ñ)i!  r   u   Ñ)i"  r   u   Ñ)i#  r   u   Ñ)i$  r   u   Ñ)i%  r   u   Ñ)i&  r   u   Ñ)i'  r   u   Ñ)i(  r   u   Ñ)i)  r   u   Ñ)i*  r   u   Ñ)i+  r   u   Ñ)i,  r   u   Ñ)i-  r   u   Ñ)i.  r   u   Ñ)i/  r   u   Ñ)i0  úV)i`  r   u   Ñ¡)ia  r   )ib  r   u   Ñ£)ic  r   )id  r   u   Ñ¥)ie  r   )if  r   u   Ñ§)ig  r   )ih  r   u   Ñ©)ii  r   )ij  r   u   Ñ«)ik  r   )il  r   u   Ñ­)im  r   )in  r   u   Ñ¯)io  r   )ip  r   u   Ñ±)iq  r   )ir  r   u   Ñ³)is  r   )it  r   u   Ñµ)iu  r   )iv  r   u   Ñ·)iw  r   )ix  r   u   Ñ¹)iy  r   )iz  r   u   Ñ»)i{  r   )i|  r   u   Ñ½)i}  r   )i~  r   u   Ñ¿)i  r   )i  r   u   Ò)i  r   )i  r   u   Ò)i  r   )i  r   u   Ò)i  r   )i  r   u   Ò)i  r   )i  r   u   Ò)i  r   )i  r   u   Ò)i  r   )i  r   u   Ò)i  r   )i  r   u   Ò)i  r   )i  r   u   Ò)i  r   )i  r   u   Ò)i  r   )i  r   u   Ò)i  r   _seg_76Ûd   )i 1  ÚX)i1  úV)i/1  r   )i11  ÚMu   á)i21  r   u   á)i31  r   u   áª)i41  r   u   á)i51  r   u   á¬)i61  r   u   á­)i71  r   u   á)i81  r   u   á)i91  r   u   á)i:1  r   u   á°)i;1  r   u   á±)i<1  r   u   á²)i=1  r   u   á³)i>1  r   u   á´)i?1  r   u   áµ)i@1  r   u   á)iA1  r   u   á)iB1  r   u   á)iC1  r   u   á)iD1  r   u   á¡)iE1  r   u   á)iF1  r   u   á)iG1  r   u   á)iH1  r   u   á)iI1  r   u   á)iJ1  r   u   á)iK1  r   u   á)iL1  r   u   á)iM1  r   u   á)iN1  r   u   á)iO1  r   u   á¡)iP1  r   u   á¢)iQ1  r   u   á£)iR1  r   u   á¤)iS1  r   u   á¥)iT1  r   u   á¦)iU1  r   u   á§)iV1  r   u   á¨)iW1  r   u   á©)iX1  r   u   áª)iY1  r   u   á«)iZ1  r   u   á¬)i[1  r   u   á­)i\1  r   u   á®)i]1  r   u   á¯)i^1  r   u   á°)i_1  r   u   á±)i`1  r   u   á²)ia1  r   u   á³)ib1  r   u   á´)ic1  r   u   áµ)id1  r   )ie1  r   u   á)if1  r   u   á)ig1  r   u   á)ih1  r   u   á)ii1  r   u   á)ij1  r   u   á)ik1  r   u   á)il1  r   u   á)im1  r   u   á)in1  r   u   á)io1  r   u   á)ip1  r   u   á)iq1  r   u   á)ir1  r   u   á)is1  r   u   á )it1  r   u   á¢)iu1  r   u   á£)iv1  r   u   á§)iw1  r   u   á©)ix1  r   u   á«)iy1  r   u   á¬)iz1  r   u   á­)i{1  r   u   á®)i|1  r   u   á¯)i}1  r   u   á²)i~1  r   u   á¶)i1  r   u   á)i1  r   u   á)i1  r   u   á)i1  r   u   á±)i1  r   u   á²)i1  r   u   á)i1  r   u   á)i1  r   u   á)i1  r   u   á)i1  r   u   á)i1  r   u   á)i1  r   u   á)i1  r   u   á)i1  r   u   á)i1  r   u   á)i1  r   u   á¡)i1  r   )i1  r   )i1  r   u   ä¸Ûd   )i/  ÚMu   è)i/  r   u   è)i/  r   u   è®)i/  r   u   è²)i/  r   u   è¸)i/  r   u   è)i/  r   u   è«)i/  r   u   è¡)i/  r   u   è¡)i/  r   u   è¡£)i/  r   u   è¥¾)i/  r   u   è¦)i/  r   u   è§)i/  r   u   è¨)i/  r   u   è°·)i/  r   u   è±)i/  r   u   è±)i/  r   u   è±¸)i/  r   u   è²)i/  r   u   èµ¤)i/  r   u   èµ°)i/  r   u   è¶³)i/  r   u   èº«)i/  r   u   è»)i/  r   u   è¾)i /  r   u   è¾°)i¡/  r   u   è¾µ)i¢/  r   u   é)i£/  r   u   é)i¤/  r   u   é)i¥/  r   u   é)i¦/  r   u   é)i§/  r   u   é·)i¨/  r   u   é)i©/  r   u   é)iª/  r   u   é¶)i«/  r   u   é¹)i¬/  r   u   é¨)i­/  r   u   é)i®/  r   u   é)i¯/  r   u   é¢)i°/  r   u   é©)i±/  r   u   é)i²/  r   u   é­)i³/  r   u   é³)i´/  r   u   é )iµ/  r   u   é¢¨)i¶/  r   u   é£)i·/  r   u   é£)i¸/  r   u   é¦)i¹/  r   u   é¦)iº/  r   u   é¦¬)i»/  r   u   éª¨)i¼/  r   u   é«)i½/  r   u   é«)i¾/  r   u   é¬¥)i¿/  r   u   é¬¯)iÀ/  r   u   é¬²)iÁ/  r   u   é¬¼)iÂ/  r   u   é­)iÃ/  r   u   é³¥)iÄ/  r   u   é¹µ)iÅ/  r   u   é¹¿)iÆ/  r   u   éº¥)iÇ/  r   u   éº»)iÈ/  r   u   é»)iÉ/  r   u   é»)iÊ/  r   u   é»)iË/  r   u   é»¹)iÌ/  r   u   é»½)iÍ/  r   u   é¼)iÎ/  r   u   é¼)iÏ/  r   u   é¼ )iÐ/  r   u   é¼»)iÑ/  r   u   é½)iÒ/  r   u   é½)iÓ/  r   u   é¾)iÔ/  r   u   é¾)iÕ/  r   u   é¾ )iÖ/  ÚX)i 0  ú3ú )i0  úV)i0  r   Ú.)i0  r   )i60  r   u   ã)i70  r   )i80  r   u   å)i90  r   u   å)i:0  r   u   å)i;0  r   )i@0  r   )iA0  r   )i0  r   )i0  r   )i0  r   u    ã)i0  r   u    ã)i0  r   )i0  r   u   ãã)i 0  r   )iÿ0  r   u   ã³ãÛd   )ie,  úV)ig,  ÚMu   â±¨)ih,  r   )ii,  r   u   â±ª)ij,  r   )ik,  r   u   â±¬)il,  r   )im,  r   u   É)in,  r   u   É±)io,  r   u   É)ip,  r   u   É)iq,  r   )ir,  r   u   â±³)is,  r   )iu,  r   u   â±¶)iv,  r   )i|,  r   Új)i},  r   Úv)i~,  r   u   È¿)i,  r   u   É)i,  r   u   â²)i,  r   )i,  r   u   â²)i,  r   )i,  r   u   â²)i,  r   )i,  r   u   â²)i,  r   )i,  r   u   â²)i,  r   )i,  r   u   â²)i,  r   )i,  r   u   â²)i,  r   )i,  r   u   â²)i,  r   )i,  r   u   â²)i,  r   )i,  r   u   â²)i,  r   )i,  r   u   â²)i,  r   )i,  r   u   â²)i,  r   )i,  r   u   â²)i,  r   )i,  r   u   â²)i,  r   )i,  r   u   â²)i,  r   )i,  r   u   â²)i,  r   )i ,  r   u   â²¡)i¡,  r   )i¢,  r   u   â²£)i£,  r   )i¤,  r   u   â²¥)i¥,  r   )i¦,  r   u   â²§)i§,  r   )i¨,  r   u   â²©)i©,  r   )iª,  r   u   â²«)i«,  r   )i¬,  r   u   â²­)i­,  r   )i®,  r   u   â²¯)i¯,  r   )i°,  r   u   â²±)i±,  r   )i²,  r   u   â²³)i³,  r   )i´,  r   u   â²µ)iµ,  r   )i¶,  r   u   â²·)i·,  r   )i¸,  r   u   â²¹)i¹,  r   )iº,  r   u   â²»)i»,  r   )i¼,  r   u   â²½)i½,  r   )i¾,  r   u   â²¿)i¿,  r   )iÀ,  r   u   â³)iÁ,  r   )iÂ,  r   u   â³)iÃ,  r   )iÄ,  r   u   â³)iÅ,  r   )iÆ,  r   u   â³)iÇ,  r   )iÈ,  r   u   â³)iÉ,  r   )iÊ,  r   u   â³)iË,  r   )iÌ,  r   u   â³)iÍ,  r   )iÎ,  r   u   â³)iÏ,  r   Ûd   )i9  úV)i:  ÚMu   á¸»)i;  r   )i<  r   u   á¸½)i=  r   )i>  r   u   á¸¿)i?  r   )i@  r   u   á¹)iA  r   )iB  r   u   á¹)iC  r   )iD  r   u   á¹)iE  r   )iF  r   u   á¹)iG  r   )iH  r   u   á¹)iI  r   )iJ  r   u   á¹)iK  r   )iL  r   u   á¹)iM  r   )iN  r   u   á¹)iO  r   )iP  r   u   á¹)iQ  r   )iR  r   u   á¹)iS  r   )iT  r   u   á¹)iU  r   )iV  r   u   á¹)iW  r   )iX  r   u   á¹)iY  r   )iZ  r   u   á¹)i[  r   )i\  r   u   á¹)i]  r   )i^  r   u   á¹)i_  r   )i`  r   u   á¹¡)ia  r   )ib  r   u   á¹£)ic  r   )id  r   u   á¹¥)ie  r   )if  r   u   á¹§)ig  r   )ih  r   u   á¹©)ii  r   )ij  r   u   á¹«)ik  r   )il  r   u   á¹­)im  r   )in  r   u   á¹¯)io  r   )ip  r   u   á¹±)iq  r   )ir  r   u   á¹³)is  r   )it  r   u   á¹µ)iu  r   )iv  r   u   á¹·)iw  r   )ix  r   u   á¹¹)iy  r   )iz  r   u   á¹»)i{  r   )i|  r   u   á¹½)i}  r   )i~  r   u   á¹¿)i  r   )i  r   u   áº)i  r   )i  r   u   áº)i  r   )i  r   u   áº)i  r   )i  r   u   áº)i  r   )i  r   u   áº)i  r   )i  r   u   áº)i  r   )i  r   u   áº)i  r   )i  r   u   áº)i  r   )i  r   u   áº)i  r   )i  r   u   áº)i  r   )i  r   u   áº)i  r   )i  r   u   aÊ¾)i  r   u   á¹¡)i  r   )i  r   zss)i  r   )i   r   u   áº¡)i¡  r   Ûd   )ix  ÚX)iz  ú3u    Î¹)i{  úV)i~  r   ú;)i  ÚMu   Ï³)i  r   )i  r   u    Ì)i  r   u    ÌÌ)i  r   u   Î¬)i  r   õ   Â·)i  r   u   Î­)i  r   u   Î®)i  r   u   Î¯)i  r   )i  r   u   Ï)i  r   )i  r   u   Ï)i  r   u   Ï)i  r   )i  r   u   Î±)i  r   u   Î²)i  r   u   Î³)i  r   u   Î´)i  r   u   Îµ)i  r   u   Î¶)i  r   u   Î·)i  r   u   Î¸)i  r   u   Î¹)i  r   u   Îº)i  r   u   Î»)i  r   u   Î¼)i  r   u   Î½)i  r   u   Î¾)i  r   u   Î¿)i   r   u   Ï)i¡  r   u   Ï)i¢  r   )i£  r   u   Ï)i¤  r   u   Ï)i¥  r   u   Ï)i¦  r   u   Ï)i§  r   u   Ï)i¨  r   u   Ï)i©  r   u   Ï)iª  r   u   Ï)i«  r   u   Ï)i¬  r   )iÂ  ÚDu   Ï)iÃ  r   )iÏ  r   u   Ï)iÐ  r   u   Î²)iÑ  r   u   Î¸)iÒ  r   u   Ï)iÓ  r   u   Ï)iÔ  r   u   Ï)iÕ  r   u   Ï)iÖ  r   u   Ï)i×  r   )iØ  r   u   Ï)iÙ  r   )iÚ  r   u   Ï)iÛ  r   )iÜ  r   u   Ï)iÝ  r   )iÞ  r   u   Ï)iß  r   )ià  r   u   Ï¡)iá  r   )iâ  r   u   Ï£)iã  r   )iä  r   u   Ï¥)iå  r   )iæ  r   u   Ï§)iç  r   )iè  r   u   Ï©)ié  r   )iê  r   u   Ï«)ië  r   )iì  r   u   Ï­)ií  r   )iî  r   u   Ï¯)iï  r   )ið  r   u   Îº)iñ  r   u   Ï)iò  r   u   Ï)ió  r   )iô  r   u   Î¸)iõ  r   u   Îµ)iö  r   )i÷  r   u   Ï¸)iø  r   )iù  r   u   Ï)iú  r   u   Ï»)iû  r   )iý  r   u   Í»)iþ  r   u   Í¼)iÿ  r   u   Í½)i   r   u   Ñ)i  r   u   Ñ)i  r   u   ÑÛd   )i¨ÿ  ÚMu   á)i©ÿ  r   u   á)iªÿ  r   u   á°)i«ÿ  r   u   á±)i¬ÿ  r   u   á²)i­ÿ  r   u   á³)i®ÿ  r   u   á´)i¯ÿ  r   u   áµ)i°ÿ  r   u   á)i±ÿ  r   u   á)i²ÿ  r   u   á)i³ÿ  r   u   á)i´ÿ  r   u   á¡)iµÿ  r   u   á)i¶ÿ  r   u   á)i·ÿ  r   u   á)i¸ÿ  r   u   á)i¹ÿ  r   u   á)iºÿ  r   u   á)i»ÿ  r   u   á)i¼ÿ  r   u   á)i½ÿ  r   u   á)i¾ÿ  r   u   á)i¿ÿ  ÚX)iÂÿ  r   u   á¡)iÃÿ  r   u   á¢)iÄÿ  r   u   á£)iÅÿ  r   u   á¤)iÆÿ  r   u   á¥)iÇÿ  r   u   á¦)iÈÿ  r   )iÊÿ  r   u   á§)iËÿ  r   u   á¨)iÌÿ  r   u   á©)iÍÿ  r   u   áª)iÎÿ  r   u   á«)iÏÿ  r   u   á¬)iÐÿ  r   )iÒÿ  r   u   á­)iÓÿ  r   u   á®)iÔÿ  r   u   á¯)iÕÿ  r   u   á°)iÖÿ  r   u   á±)i×ÿ  r   u   á²)iØÿ  r   )iÚÿ  r   u   á³)iÛÿ  r   u   á´)iÜÿ  r   u   áµ)iÝÿ  r   )iàÿ  r   õ   Â¢)iáÿ  r   õ   Â£)iâÿ  r   õ   Â¬)iãÿ  ú3u    Ì)iäÿ  r   õ   Â¦)iåÿ  r   õ   Â¥)iæÿ  r   u   â©)içÿ  r   )ièÿ  r   u   â)iéÿ  r   u   â)iêÿ  r   u   â)iëÿ  r   u   â)iìÿ  r   u   â)iíÿ  r   u   â )iîÿ  r   u   â)iïÿ  r   )i   úV)i  r   )i  r	   )i'  r   )i(  r	   )i;  r   )i<  r	   )i>  r   )i?  r	   )iN  r   )iP  r	   )i^  r   )i  r	   )iû  r   )i  r	   )i r   )i r	   )i4 r   )i7 r	   )i r   )i r	   )i r   )i  r	   )i¡ r   )iÐ r	   )iþ r   )i r	   )i r   )i  r	   )iÑ r   )ià r	   )iü r   )i  r	   )i$ r   )i- r	   Ûd   )iY2  ÚMz29)iZ2  r   z30)i[2  r   z31)i\2  r   z32)i]2  r   z33)i^2  r   z34)i_2  r   z35)i`2  r   u   á)ia2  r   u   á)ib2  r   u   á)ic2  r   u   á)id2  r   u   á)ie2  r   u   á)if2  r   u   á)ig2  r   u   á)ih2  r   u   á)ii2  r   u   á)ij2  r   u   á)ik2  r   u   á)il2  r   u   á)im2  r   u   á)in2  r   u   ê°)io2  r   u   ë)ip2  r   u   ë¤)iq2  r   u   ë¼)ir2  r   u   ë§)is2  r   u   ë°)it2  r   u   ì¬)iu2  r   u   ì)iv2  r   u   ì)iw2  r   u   ì°¨)ix2  r   u   ì¹´)iy2  r   u   í)iz2  r   u   í)i{2  r   u   í)i|2  r   u   ì°¸ê³ )i}2  r   u   ì£¼ì)i~2  r   u   ì°)i2  úV)i2  r   u   ä¸)i2  r   u   äº)i2  r   u   ä¸)i2  r   u   å)i2  r   u   äº)i2  r   u   å­)i2  r   u   ä¸)i2  r   u   å«)i2  r   u   ä¹)i2  r   u   å)i2  r   u   æ)i2  r   u   ç«)i2  r   u   æ°´)i2  r   u   æ¨)i2  r   u   é)i2  r   u   å)i2  r   u   æ¥)i2  r   u   æ ª)i2  r   u   æ)i2  r   u   ç¤¾)i2  r   u   å)i2  r   u   ç¹)i2  r   u   è²¡)i2  r   u   ç¥)i2  r   u   å´)i2  r   u   ç§)i2  r   u   ç·)i2  r   u   å¥³)i2  r   u   é©)i2  r   u   åª)i2  r   u   å°)i2  r   u   æ³¨)i 2  r   u   é )i¡2  r   u   ä¼)i¢2  r   u   å)i£2  r   u   æ­£)i¤2  r   u   ä¸)i¥2  r   u   ä¸­)i¦2  r   u   ä¸)i§2  r   u   å·¦)i¨2  r   u   å³)i©2  r   u   å»)iª2  r   u   å®)i«2  r   u   å­¦)i¬2  r   u   ç£)i­2  r   u   ä¼)i®2  r   u   è³)i¯2  r   u   å)i°2  r   u   å¤)i±2  r   z36)i²2  r   z37)i³2  r   z38)i´2  r   z39)iµ2  r   z40)i¶2  r   z41)i·2  r   z42)i¸2  r   z43)i¹2  r   z44)iº2  r   z45)i»2  r   z46)i¼2  r   z47Ûd   )i¢ú  ÚMu   ç)i£ú  r   u   ç»)i¤ú  r   u   ç)i¥ú  r   u   ç)i¦ú  r   u   ç)i§ú  r   u   ç)i¨ú  r   u   ç´)i©ú  r   u   ç)iªú  r   u   ç)i«ú  r   u   ç£)i¬ú  r   u   çª±)i­ú  r   u   ç¯)i®ú  r   u   ç±»)i¯ú  r   u   çµ)i°ú  r   u   ç·´)i±ú  r   u   ç¼¾)i²ú  r   u   è)i³ú  r   u   è)i´ú  r   u   è¯)iµú  r   u   è¹)i¶ú  r   u   è¥)i·ú  r   u   è¦)i¸ú  r   u   è¦)i¹ú  r   u   èª¿)iºú  r   u   è«¸)i»ú  r   u   è«)i¼ú  r   u   è¬)i½ú  r   u   è«¾)i¾ú  r   u   è«­)i¿ú  r   u   è¬¹)iÀú  r   u   è®)iÁú  r   u   è´)iÂú  r   u   è¼¸)iÃú  r   u   é²)iÄú  r   u   é)iÅú  r   u   é¶)iÆú  r   u   é¼)iÇú  r   u   é£)iÈú  r   u   é)iÉú  r   u   é)iÊú  r   u   é¿)iËú  r   u   é )iÌú  r   u   é »)iÍú  r   u   é¬)iÎú  r   u   é¾)iÏú  r   u   ð¢¡)iÐú  r   u   ð¢¡)iÑú  r   u   ð£)iÒú  r   u   ã®)iÓú  r   u   ä)iÔú  r   u   ä¹)iÕú  r   u   ð¥)iÖú  r   u   ð¥³)i×ú  r   u   ð§»)iØú  r   u   é½)iÙú  r   u   é¾)iÚú  ÚX)i û  r   zff)iû  r   zfi)iû  r   zfl)iû  r   zffi)iû  r   zffl)iû  r   zst)iû  r   )iû  r   u   Õ´Õ¶)iû  r   u   Õ´Õ¥)iû  r   u   Õ´Õ«)iû  r   u   Õ¾Õ¶)iû  r   u   Õ´Õ­)iû  r   )iû  r   u   ×Ö´)iû  úV)iû  r   u   ×²Ö·)i û  r   u   ×¢)i!û  r   u   ×)i"û  r   u   ×)i#û  r   u   ×)i$û  r   u   ×)i%û  r   u   ×)i&û  r   u   ×)i'û  r   u   ×¨)i(û  r   u   ×ª)i)û  ú3ú+)i*û  r   u   ×©×)i+û  r   u   ×©×)i,û  r   u   ×©Ö¼×)i-û  r   u   ×©Ö¼×)i.û  r   u   ×Ö·)i/û  r   u   ×Ö¸)i0û  r   u   ×Ö¼)i1û  r   u   ×Ö¼)i2û  r   u   ×Ö¼)i3û  r   u   ×Ö¼)i4û  r   u   ×Ö¼)i5û  r   u   ×Ö¼)i6û  r   u   ×Ö¼)i7û  r   )i8û  r   u   ×Ö¼)i9û  r   u   ×Ö¼)i:û  r   u   ×Ö¼Ûd   )ioù  ÚMu   èªª)ipù  r   u   æ®º)iqù  r   u   è¾°)irù  r   u   æ²)isù  r   u   æ¾)itù  r   u   è¥)iuù  r   u   æ )ivù  r   u   ç¥)iwù  r   u   äº®)ixù  r   u   å©)iyù  r   u   å)izù  r   u   æ¢)i{ù  r   u   ç³§)i|ù  r   u   è¯)i}ù  r   u   è«)i~ù  r   u   é)iù  r   u   åµ)iù  r   u   å)iù  r   u   å¥³)iù  r   u   å»¬)iù  r   u   æ)iù  r   u   æ¿¾)iù  r   u   ç¤ª)iù  r   u   é­)iù  r   u   é©ª)iù  r   u   éº)iù  r   u   é»)iù  r   u   å)iù  r   u   æ)iù  r   u   æ­·)iù  r   u   è½¢)iù  r   u   å¹´)iù  r   u   æ)iù  r   u   æ)iù  r   u   æ)iù  r   u   æ¼£)iù  r   u   ç)iù  r   u   ç)iù  r   u   ç§)iù  r   u   ç·´)iù  r   u   è¯)iù  r   u   è¼¦)iù  r   u   è®)iù  r   u   é£)iù  r   u   é)iù  r   u   å)iù  r   u   å£)iù  r   u   å½)iù  r   u   ç)i ù  r   u   è£)i¡ù  r   u   èªª)i¢ù  r   u   å»)i£ù  r   u   å¿µ)i¤ù  r   u   æ»)i¥ù  r   u   æ®®)i¦ù  r   u   ç°¾)i§ù  r   u   çµ)i¨ù  r   u   ä»¤)i©ù  r   u   å¹)iªù  r   u   å¯§)i«ù  r   u   å¶º)i¬ù  r   u   æ)i­ù  r   u   ç²)i®ù  r   u   ç©)i¯ù  r   u   ç¾)i°ù  r   u   è)i±ù  r   u   é´)i²ù  r   u   é¶)i³ù  r   u   é)i´ù  r   u   é )iµù  r   u   ä¾)i¶ù  r   u   ç¦®)i·ù  r   u   é´)i¸ù  r   u   é¸)i¹ù  r   u   æ¡)iºù  r   u   äº)i»ù  r   u   å)i¼ù  r   u   å¯®)i½ù  r   u   å°¿)i¾ù  r   u   æ)i¿ù  r   u   æ¨)iÀù  r   u   ç)iÁù  r   u   ç)iÂù  r   u   è¼)iÃù  r   u   é¼)iÄù  r   u   é¾)iÅù  r   u   æ)iÆù  r   u   é®)iÇù  r   u   å)iÈù  r   u   æ»)iÉù  r   u   æ³)iÊù  r   u   æµ)iËù  r   u   æº)iÌù  r   u   ç)iÍù  r   u   ç)iÎù  r   u   ç¡«)iÏù  r   u   ç´)iÐù  r   u   é¡)iÑù  r   u   å­)iÒù  r   u   æ®_seg_9_seg_59Ûd   )ilù ÚMu   çµ£)imù r   u   ä)inù r   u   ç·)ioù r   u   ç¸)ipù r   u   ç¹)iqù r   u   ä´)irù r   u   ð¦¨)isù r   u   ð¦)itù r   u   ä)iuù r   u   ð¦)ivù r   u   ç½º)iwù r   u   ð¦¾)ixù r   u   ç¾)iyù r   u   ç¿º)izù r   u   è)i{ù r   u   ð¦)i|ù r   u   ð¦£)i}ù r   u   è )i~ù r   u   ð¦¨)iù r   u   è°)iù r   u   ð£)iù r   u   ä)iù r   u   è²)iù r   u   è)iù r   u   ä)iù r   u   è¾)iù r   u   åªµ)iù r   u   ð¦§)iù r   u   ð¦µ)iù r   u   ð£)iù r   u   ð£)iù r   u   è)iù r   u   è)iù r   u   è¾)iù r   u   ä«)iù r   u   è)iù r   u   è)iù r   u   è)iù r   u   å³)iù r   u   è±)iù r   u   è³)iù r   u   è½)iù r   u   è¦)iù r   u   ð¦¬¼)iù r   u   è¥)iù r   u   è)iù r   u   è£)iù r   u   è­)iù r   u   è£)iù r   u   è½)iù r   u   è§)iù r   u   è)i ù r   u   è)i¡ù r   u   è)i¢ù r   u   è)i£ù r   u   è)i¤ù r   u   ð¦°¶)i¥ù r   u   ð¦µ«)i¦ù r   u   ð¦³)i§ù r   u   ä«)i¨ù r   u   è±)i©ù r   u   è³)iªù r   u   è)i«ù r   u   ð§)i¬ù r   u   è¤)i­ù r   u   ð¦¼¬)i®ù r   u   ä)i¯ù r   u   ä¡)i°ù r   u   ð¦¾±)i±ù r   u   ð§)i²ù r   u   ä«)i³ù r   u   è)i´ù r   u   è)iµù r   u   è§)i¶ù r   u   è©)i·ù r   u   è©)i¸ù r   u   è)i¹ù r   u   è)iºù r   u   è¢)i»ù r   u   è¹)i¼ù r   u   è¨)i½ù r   u   è«)i¾ù r   u   è)i¿ù ÚX)iÀù r   u   è¡)iÁù r   u   è )iÂù r   u   ä¹)iÃù r   u   è¡ )iÄù r   u   è¡£)iÅù r   u   ð§§)iÆù r   u   è£)iÇù r   u   è£)iÈù r   u   äµ)iÉù r   u   è£º)iÊù r   u   ã»)iËù r   u   ð§¢®)iÌù r   u   ð§¥¦)iÍù r   u   ä¾)iÎù r   u   ä)iÏù r   u   èª _seg_24_seg_75Ûd   )i¢  ÚMu   áº£)i£  úV)i¤  r   u   áº¥)i¥  r   )i¦  r   u   áº§)i§  r   )i¨  r   u   áº©)i©  r   )iª  r   u   áº«)i«  r   )i¬  r   u   áº­)i­  r   )i®  r   u   áº¯)i¯  r   )i°  r   u   áº±)i±  r   )i²  r   u   áº³)i³  r   )i´  r   u   áºµ)iµ  r   )i¶  r   u   áº·)i·  r   )i¸  r   u   áº¹)i¹  r   )iº  r   u   áº»)i»  r   )i¼  r   u   áº½)i½  r   )i¾  r   u   áº¿)i¿  r   )iÀ  r   u   á»)iÁ  r   )iÂ  r   u   á»)iÃ  r   )iÄ  r   u   á»)iÅ  r   )iÆ  r   u   á»)iÇ  r   )iÈ  r   u   á»)iÉ  r   )iÊ  r   u   á»)iË  r   )iÌ  r   u   á»)iÍ  r   )iÎ  r   u   á»)iÏ  r   )iÐ  r   u   á»)iÑ  r   )iÒ  r   u   á»)iÓ  r   )iÔ  r   u   á»)iÕ  r   )iÖ  r   u   á»)i×  r   )iØ  r   u   á»)iÙ  r   )iÚ  r   u   á»)iÛ  r   )iÜ  r   u   á»)iÝ  r   )iÞ  r   u   á»)iß  r   )ià  r   u   á»¡)iá  r   )iâ  r   u   á»£)iã  r   )iä  r   u   á»¥)iå  r   )iæ  r   u   á»§)iç  r   )iè  r   u   á»©)ié  r   )iê  r   u   á»«)ië  r   )iì  r   u   á»­)ií  r   )iî  r   u   á»¯)iï  r   )ið  r   u   á»±)iñ  r   )iò  r   u   á»³)ió  r   )iô  r   u   á»µ)iõ  r   )iö  r   u   á»·)i÷  r   )iø  r   u   á»¹)iù  r   )iú  r   u   á»»)iû  r   )iü  r   u   á»½)iý  r   )iþ  r   u   á»¿)iÿ  r   )i  r   u   á¼)i	  r   u   á¼)i
  r   u   á¼)i  r   u   á¼)i  r   u   á¼)i  r   u   á¼_seg_71Ûd   )i!3  ÚMu   ã·ãªã³ã°)i"3  r   u	   ã»ã³ã)i#3  r   u	   ã»ã³ã)i$3  r   u	   ãã¼ã¹)i%3  r   u   ãã·)i&3  r   u   ãã«)i'3  r   u   ãã³)i(3  r   u   ãã)i)3  r   u	   ããã)i*3  r   u	   ãã¤ã)i+3  r   u   ãã¼ã»ã³ã)i,3  r   u	   ãã¼ã)i-3  r   u   ãã¼ã¬ã«)i.3  r   u   ãã¢ã¹ãã«)i/3  r   u	   ãã¯ã«)i03  r   u   ãã³)i13  r   u   ãã«)i23  r   u   ãã¡ã©ãã)i33  r   u   ãã£ã¼ã)i43  r   u   ããã·ã§ã«)i53  r   u	   ãã©ã³)i63  r   u   ãã¯ã¿ã¼ã«)i73  r   u   ãã½)i83  r   u	   ããã)i93  r   u	   ãã«ã)i:3  r   u	   ãã³ã¹)i;3  r   u	   ãã¼ã¸)i<3  r   u	   ãã¼ã¿)i=3  r   u   ãã¤ã³ã)i>3  r   u	   ãã«ã)i?3  r   u   ãã³)i@3  r   u	   ãã³ã)iA3  r   u	   ãã¼ã«)iB3  r   u	   ãã¼ã³)iC3  r   u   ãã¤ã¯ã­)iD3  r   u	   ãã¤ã«)iE3  r   u	   ããã)iF3  r   u	   ãã«ã¯)iG3  r   u   ãã³ã·ã§ã³)iH3  r   u   ãã¯ã­ã³)iI3  r   u   ããª)iJ3  r   u   ããªãã¼ã«)iK3  r   u   ã¡ã¬)iL3  r   u   ã¡ã¬ãã³)iM3  r   u   ã¡ã¼ãã«)iN3  r   u	   ã¤ã¼ã)iO3  r   u	   ã¤ã¼ã«)iP3  r   u	   ã¦ã¢ã³)iQ3  r   u   ãªããã«)iR3  r   u   ãªã©)iS3  r   u	   ã«ãã¼)iT3  r   u   ã«ã¼ãã«)iU3  r   u   ã¬ã )iV3  r   u   ã¬ã³ãã²ã³)iW3  r   u	   ã¯ãã)iX3  r   u   0ç¹)iY3  r   u   1ç¹)iZ3  r   u   2ç¹)i[3  r   u   3ç¹)i\3  r   u   4ç¹)i]3  r   u   5ç¹)i^3  r   u   6ç¹)i_3  r   u   7ç¹)i`3  r   u   8ç¹)ia3  r   u   9ç¹)ib3  r   u   10ç¹)ic3  r   u   11ç¹)id3  r   u   12ç¹)ie3  r   u   13ç¹)if3  r   u   14ç¹)ig3  r   u   15ç¹)ih3  r   u   16ç¹)ii3  r   u   17ç¹)ij3  r   u   18ç¹)ik3  r   u   19ç¹)il3  r   u   20ç¹)im3  r   u   21ç¹)in3  r   u   22ç¹)io3  r   u   23ç¹)ip3  r   u   24ç¹)iq3  r   zhpa)ir3  r   zda)is3  r   zau)it3  r   zbar)iu3  r   zov)iv3  r   zpc)iw3  r   zdm)ix3  r   zdm2)iy3  r   zdm3)iz3  r   ziu)i{3  r   u   å¹³æ)i|3  r   u   æ­å)i}3  r   u   å¤§æ­£)i~3  r   u   ææ²»)i3  r   u   æ ªå¼ä¼ç¤¾)i3  r   zpa)i3  r   zna)i3  r   u   Î¼a)i3  r   zma)i3  r   zka_seg_43_seg_70_seg_74Ûd   )i  úV)i  ÚX)i  r   )iu  ÚMu   Ø§Ù´)iv  r   u   ÙÙ´)iw  r   u   ÛÙ´)ix  r   u   ÙÙ´)iy  r   )iÝ  r   )iÞ  r   )i  r   )i  r   )iK  r   )iM  r   )i²  r   )iÀ  r   )iû  r   )i   r   )i.  r   )i0  r   )i?  r   )i@  r   )i\  r   )i^  r   )i_  r   )i`  r   )ik  r   )i   r   )iµ  r   )i¶  r   )i¾  r   )iÔ  r   )iâ  r   )iã  r   )iX	  r   u   à¤à¤¼)iY	  r   u   à¤à¤¼)iZ	  r   u   à¤à¤¼)i[	  r   u   à¤à¤¼)i\	  r   u   à¤¡à¤¼)i]	  r   u   à¤¢à¤¼)i^	  r   u   à¤«à¤¼)i_	  r   u   à¤¯à¤¼)i`	  r   )i	  r   )i	  r   )i	  r   )i	  r   )i	  r   )i	  r   )i©	  r   )iª	  r   )i±	  r   )i²	  r   )i³	  r   )i¶	  r   )iº	  r   )i¼	  r   )iÅ	  r   )iÇ	  r   )iÉ	  r   )iË	  r   )iÏ	  r   )i×	  r   )iØ	  r   )iÜ	  r   u   à¦¡à¦¼)iÝ	  r   u   à¦¢à¦¼)iÞ	  r   )iß	  r   u   à¦¯à¦¼)ià	  r   )iä	  r   )iæ	  r   )iþ	  r   )i
  r   )i
  r   )i
  r   )i
  r   )i
  r   )i
  r   )i
  r   )i)
  r   )i*
  r   )i1
  r   )i2
  r   )i3
  r   u   à¨²à¨¼)i4
  r   )i5
  r   )i6
  r   u   à¨¸à¨¼)i7
  r   )i8
  r   )i:
  r   )i<
  r   )i=
  r   )i>
  r   )iC
  r   )iG
  r   )iI
  r   )iK
  r   )iN
  r   )iQ
  r   )iR
  r   _seg_19Ûd   )iöý  ÚMu   Ø±Ø³ÙÙ)i÷ý  r   u   Ø¹ÙÙÙ)iøý  r   u   ÙØ³ÙÙ)iùý  r   u   ØµÙÙ)iúý  ú3u!   ØµÙÙ Ø§ÙÙÙ Ø¹ÙÙÙ ÙØ³ÙÙ)iûý  r   u   Ø¬Ù Ø¬ÙØ§ÙÙ)iüý  r   u   Ø±ÛØ§Ù)iýý  úV)iþý  ÚX)i þ  ÚI)iþ  r   ú,)iþ  r   u   ã)iþ  r   )iþ  r   ú:)iþ  r   ú;)iþ  r   ú!)iþ  r   ú?)iþ  r   u   ã)iþ  r   u   ã)iþ  r   )i þ  r   )i0þ  r   )i1þ  r   u   â)i2þ  r   u   â)i3þ  r   Ú_)i5þ  r   ú()i6þ  r   ú))i7þ  r   Ú{)i8þ  r   Ú})i9þ  r   u   ã)i:þ  r   u   ã)i;þ  r   u   ã)i<þ  r   u   ã)i=þ  r   u   ã)i>þ  r   u   ã)i?þ  r   u   ã)i@þ  r   u   ã)iAþ  r   u   ã)iBþ  r   u   ã)iCþ  r   u   ã)iDþ  r   u   ã)iEþ  r   )iGþ  r   ú[)iHþ  r   ú])iIþ  r   u    Ì)iMþ  r   r   )iPþ  r   r   )iQþ  r   u   ã)iRþ  r   )iTþ  r   r   )iUþ  r   r   )iVþ  r   r
   )iWþ  r   r	   )iXþ  r   u   â)iYþ  r   r   )iZþ  r   r   )i[þ  r   r   )i\þ  r   r   )i]þ  r   u   ã)i^þ  r   u   ã)i_þ  r   ú#)i`þ  r   ú&)iaþ  r   Ú*)ibþ  r   ú+)icþ  r   ú-)idþ  r   ú<)ieþ  r   ú>)ifþ  r   ú=)igþ  r   )ihþ  r   ú\)iiþ  r   ú$)ijþ  r   ú%)ikþ  r   ú@)ilþ  r   )ipþ  r   u    Ù)iqþ  r   u   ÙÙ)irþ  r   u    Ù)isþ  r   )itþ  r   u    Ù)iuþ  r   )ivþ  r   u    Ù)iwþ  r   u   ÙÙ)ixþ  r   u    Ù)iyþ  r   u   ÙÙ)izþ  r   u    Ù)i{þ  r   u   ÙÙ)i|þ  r   u    Ù)i}þ  r   u   ÙÙ)i~þ  r   u    Ù)iþ  r   u   ÙÙ)iþ  r   u   Ø¡)iþ  r   u   Ø¢)iþ  r   u   Ø£)iþ  r   u   Ø¤)iþ  r   u   Ø¥)iþ  r   u   Ø¦)iþ  r   u   Ø§)iþ  r   u   Ø¨)iþ  r   u   Ø©)iþ  r   u   ØªÛd   )i? úV)iH ÚX)iP r   )iZ r   )i   r   )i# r   )i $ r   )io$ r   )ip$ r   )iu$ r   )i$ r   )iD% r   )i 0 r   )i/4 r   )i D r   )iGF r   )i h r   )i9j r   )i@j r   )i_j r   )i`j r   )ijj r   )inj r   )ipj r   )iÐj r   )iîj r   )iðj r   )iöj r   )i k r   )iFk r   )iPk r   )iZk r   )i[k r   )ibk r   )ick r   )ixk r   )i}k r   )ik r   )i o r   )iEo r   )iPo r   )io r   )io r   )i o r   )iào r   )iâo r   )i p r   )ií r   )i  r   )ió r   )i ° r   )i± r   )ip± r   )iü² r   )i ¼ r   )ik¼ r   )ip¼ r   )i}¼ r   )i¼ r   )i¼ r   )i¼ r   )i¼ r   )i¼ r   )i ¼ ÚI)i¤¼ r   )i Ð r   )iöÐ r   )i Ñ r   )i'Ñ r   )i)Ñ r   )i^Ñ ÚMu   ðð¥)i_Ñ r   u   ðð¥)i`Ñ r   u   ðð¥ð®)iaÑ r   u   ðð¥ð¯)ibÑ r   u   ðð¥ð°)icÑ r   u   ðð¥ð±)idÑ r   u   ðð¥ð²)ieÑ r   )isÑ r   )i{Ñ r   )i»Ñ r   u   ð¹ð¥)i¼Ñ r   u   ðºð¥)i½Ñ r   u   ð¹ð¥ð®)i¾Ñ r   u   ðºð¥ð®)i¿Ñ r   u   ð¹ð¥ð¯)iÀÑ r   u   ðºð¥ð¯)iÁÑ r   )iéÑ r   )i Ò r   )iFÒ r   )i Ó r   )iWÓ r   )i`Ó r   )irÓ r   )i Ô r   Úa)iÔ r   Úb)iÔ r   Úc)iÔ r   Úd)iÔ r   Úe)iÔ r   Úf_seg_37Ûd   )iü× ÚMú6)iý× r   ú7)iþ× r   ú8)iÿ× r   ú9)i Ø úV)iÚ ÚX)iÚ r   )i Ú r   )i¡Ú r   )i°Ú r   )i à r   )ià r   )ià r   )ià r   )ià r   )i"à r   )i#à r   )i%à r   )i&à r   )i+à r   )i è r   )iÅè r   )iÇè r   )i×è r   )i é r   u   ð¤¢)ié r   u   ð¤£)ié r   u   ð¤¤)ié r   u   ð¤¥)ié r   u   ð¤¦)ié r   u   ð¤§)ié r   u   ð¤¨)ié r   u   ð¤©)ié r   u   ð¤ª)i	é r   u   ð¤«)i
é r   u   ð¤¬)ié r   u   ð¤­)ié r   u   ð¤®)ié r   u   ð¤¯)ié r   u   ð¤°)ié r   u   ð¤±)ié r   u   ð¤²)ié r   u   ð¤³)ié r   u   ð¤´)ié r   u   ð¤µ)ié r   u   ð¤¶)ié r   u   ð¤·)ié r   u   ð¤¸)ié r   u   ð¤¹)ié r   u   ð¤º)ié r   u   ð¤»)ié r   u   ð¤¼)ié r   u   ð¤½)ié r   u   ð¤¾)ié r   u   ð¤¿)ié r   u   ð¥)ié r   u   ð¥)i é r   u   ð¥)i!é r   u   ð¥)i"é r   )iKé r   )iPé r   )iZé r   )i^é r   )i`é r   )i î r   u   Ø§)iî r   u   Ø¨)iî r   u   Ø¬)iî r   u   Ø¯)iî r   )iî r   u   Ù)iî r   u   Ø²)iî r   u   Ø­)iî r   u   Ø·)i	î r   u   Ù)i
î r   u   Ù)iî r   u   Ù)iî r   u   Ù)iî r   u   Ù)iî r   u   Ø³)iî r   u   Ø¹)iî r   u   Ù)iî r   u   Øµ)iî r   u   Ù)iî r   u   Ø±)iî r   u   Ø´)iî r   u   Øª)iî r   u   Ø«)iî r   u   Ø®)iî r   u   Ø°)iî r   u   Ø¶)iî r   u   Ø¸)iî r   u   Øº)iî r   u   Ù®)iî r   u   Úº)iî r   u   Ú¡)iî r   u   Ù¯)i î r   )i!î r   u   Ø¨)i"î r   u   Ø¬)i#î r   _seg_20Ûd   )i  úV)i_  ÚX)i`  r   )i}  r   )i  r   )i  r   )i  r   )i  r   )i   r   )i®  r   )i°  r   )i¿  r   )i   r   )iL  r   )iP  r   )i}  r   )i  r   )iô  r   )iü  r   )i8  r   )i;  r   )iJ  r   )iM  r   )i  ÚMu   Ð²)i  r   u   Ð´)i  r   u   Ð¾)i  r   u   Ñ)i  r   u   Ñ)i  r   u   Ñ)i  r   u   Ñ£)i  r   u   ê)i  r   )iÀ  r   )iÈ  r   )iÐ  r   )iú  r   )i   r   )i,  r   Úa)i-  r   õ   Ã¦)i.  r   Úb)i/  r   )i0  r   Úd)i1  r   Úe)i2  r   u   Ç)i3  r   Úg)i4  r   Úh)i5  r   Úi)i6  r   Új)i7  r   Úk)i8  r   Úl)i9  r   Úm)i:  r   Ún)i;  r   )i<  r   Úo)i=  r   u   È£)i>  r   Úp)i?  r   Úr)i@  r   Út)iA  r   Úu)iB  r   Úw)iC  r   r   )iD  r   u   É)iE  r   u   É)iF  r   u   á´)iG  r   r   )iH  r   r   )iI  r   r   )iJ  r   u   É)iK  r   u   É)iL  r   u   É)iM  r   r	   )iN  r   )iO  r   r   )iP  r   r   )iQ  r   u   Å)iR  r   r   )iS  r   u   É)iT  r   u   á´)iU  r   u   á´)iV  r   r   )iW  r   r   )iX  r   r   )iY  r   u   á´)iZ  r   u   É¯)i[  r   Úv)i\  r   u   á´¥)i]  r   u   Î²)i^  r   u   Î³)i_  r   u   Î´)i`  r   u   Ï)ia  r   u   Ï)ib  r   r   )ic  r   r   )id  r   r   )ie  r   r   )if  r   u   Î²)ig  r   u   Î³)ih  r   u   Ï)ii  r   u   Ï)ij  r   u   ÏÛd   )ié3  ÚMu   10æ¥)iê3  r   u   11æ¥)ië3  r   u   12æ¥)iì3  r   u   13æ¥)ií3  r   u   14æ¥)iî3  r   u   15æ¥)iï3  r   u   16æ¥)ið3  r   u   17æ¥)iñ3  r   u   18æ¥)iò3  r   u   19æ¥)ió3  r   u   20æ¥)iô3  r   u   21æ¥)iõ3  r   u   22æ¥)iö3  r   u   23æ¥)i÷3  r   u   24æ¥)iø3  r   u   25æ¥)iù3  r   u   26æ¥)iú3  r   u   27æ¥)iû3  r   u   28æ¥)iü3  r   u   29æ¥)iý3  r   u   30æ¥)iþ3  r   u   31æ¥)iÿ3  r   zgal)i 4  úV)i¶M  ÚX)iÀM  r   )ië  r   )i    r   )i¤  r   )i¤  r   )iÇ¤  r   )iÐ¤  r   )i,¦  r   )i@¦  r   u   ê)iA¦  r   )iB¦  r   u   ê)iC¦  r   )iD¦  r   u   ê)iE¦  r   )iF¦  r   u   ê)iG¦  r   )iH¦  r   u   ê)iI¦  r   )iJ¦  r   u   ê)iK¦  r   )iL¦  r   u   ê)iM¦  r   )iN¦  r   u   ê)iO¦  r   )iP¦  r   u   ê)iQ¦  r   )iR¦  r   u   ê)iS¦  r   )iT¦  r   u   ê)iU¦  r   )iV¦  r   u   ê)iW¦  r   )iX¦  r   u   ê)iY¦  r   )iZ¦  r   u   ê)i[¦  r   )i\¦  r   u   ê)i]¦  r   )i^¦  r   u   ê)i_¦  r   )i`¦  r   u   ê¡)ia¦  r   )ib¦  r   u   ê£)ic¦  r   )id¦  r   u   ê¥)ie¦  r   )if¦  r   u   ê§)ig¦  r   )ih¦  r   u   ê©)ii¦  r   )ij¦  r   u   ê«)ik¦  r   )il¦  r   u   ê­)im¦  r   )i¦  r   u   ê)i¦  r   )i¦  r   u   ê)i¦  r   )i¦  r   u   ê)i¦  r   )i¦  r   u   ê)i¦  r   )i¦  r   u   ê)i¦  r   )i¦  r   u   ê)i¦  r   )i¦  r   u   ê)i¦  r   )i¦  r   u   ê)i¦  r   )i¦  r   u   ê)i¦  r   )i¦  r   u   ê)i¦  r   )i¦  r   u   êÛd   )i@ úV)iV ÚX)i` r   )ih r   )i  r   )i r   )i r   )i	 r   )i
 r   )i6 r   )i7 r   )i9 r   )i< r   )i= r   )i? r   )iV r   )iW r   )i r   )i§ r   )i° r   )ià r   )ió r   )iô r   )iö r   )iû r   )i	 r   )i	 r   )i:	 r   )i?	 r   )i@	 r   )i	 r   )i¸	 r   )i¼	 r   )iÐ	 r   )iÒ	 r   )i
 r   )i
 r   )i
 r   )i
 r   )i
 r   )i
 r   )i
 r   )i
 r   )i4
 r   )i8
 r   )i;
 r   )i?
 r   )iH
 r   )iP
 r   )iY
 r   )i`
 r   )i 
 r   )iÀ
 r   )iç
 r   )ië
 r   )i÷
 r   )i  r   )i6 r   )i9 r   )iV r   )iX r   )is r   )ix r   )i r   )i r   )i r   )i© r   )i° r   )i  r   )iI r   )i ÚMu   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³)i r   u   ð³Ûd   )éd   úV)ée   r   )éf   r   )ég   r   )éh   r   )éi   r   )éj   r   )ék   r   )él   r   )ém   r   )én   r   )éo   r   )ép   r   )éq   r   )ér   r   )és   r   )ét   r   )éu   r   )év   r   )éw   r   )éx   r   )éy   r   )éz   r   )é{   ú3)é|   r   )é}   r   )é~   r   )é   r   )é   ÚX)é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é   r    )é    r   ú )é¡   r   )é¢   r   )é£   r   )é¤   r   )é¥   r   )é¦   r   )é§   r   )é¨   r   u    Ì)é©   r   )éª   ÚMÚa)é«   r   )é¬   r   )é­   ÚI)é®   r   )é¯   r   u    Ì)é°   r   )é±   r   )é²   rL   ú2)é³   rL   r   )é´   r   u    Ì)éµ   rL   u   Î¼)é¶   r   )é·   r   )é¸   r   u    Ì§)é¹   rL   Ú1)éº   rL   Úo)é»   r   )é¼   rL   u   1â4)é½   rL   u   1â2)é¾   rL   u   3â4)é¿   r   )éÀ   rL   õ   Ã )éÁ   rL   õ   Ã¡)éÂ   rL   õ   Ã¢)éÃ   rL   õ   Ã£)éÄ   rL   õ   Ã¤)éÅ   rL   õ   Ã¥)éÆ   rL   õ   Ã¦)éÇ   rL   õ   Ã§Ûd   )i  ÚMu   É£)i  úV)i  r   u   É©)i  r   u   É¨)i  r   u   Æ)i  r   )i  r   u   É¯)i  r   u   É²)i  r   )i  r   u   Éµ)i   r   u   Æ¡)i¡  r   )i¢  r   u   Æ£)i£  r   )i¤  r   u   Æ¥)i¥  r   )i¦  r   u   Ê)i§  r   u   Æ¨)i¨  r   )i©  r   u   Ê)iª  r   )i¬  r   u   Æ­)i­  r   )i®  r   u   Ê)i¯  r   u   Æ°)i°  r   )i±  r   u   Ê)i²  r   u   Ê)i³  r   u   Æ´)i´  r   )iµ  r   u   Æ¶)i¶  r   )i·  r   u   Ê)i¸  r   u   Æ¹)i¹  r   )i¼  r   u   Æ½)i½  r   )iÄ  r   u   dÅ¾)iÇ  r   zlj)iÊ  r   znj)iÍ  r   u   Ç)iÎ  r   )iÏ  r   u   Ç)iÐ  r   )iÑ  r   u   Ç)iÒ  r   )iÓ  r   u   Ç)iÔ  r   )iÕ  r   u   Ç)iÖ  r   )i×  r   u   Ç)iØ  r   )iÙ  r   u   Ç)iÚ  r   )iÛ  r   u   Ç)iÜ  r   )iÞ  r   u   Ç)iß  r   )ià  r   u   Ç¡)iá  r   )iâ  r   u   Ç£)iã  r   )iä  r   u   Ç¥)iå  r   )iæ  r   u   Ç§)iç  r   )iè  r   u   Ç©)ié  r   )iê  r   u   Ç«)ië  r   )iì  r   u   Ç­)ií  r   )iî  r   u   Ç¯)iï  r   )iñ  r   zdz)iô  r   u   Çµ)iõ  r   )iö  r   u   Æ)i÷  r   u   Æ¿)iø  r   u   Ç¹)iù  r   )iú  r   u   Ç»)iû  r   )iü  r   u   Ç½)iý  r   )iþ  r   u   Ç¿)iÿ  r   )i   r   u   È)i  r   )i  r   u   È)i  r   )i  r   u   È)i  r   )i  r   u   È)i  r   )i  r   u   È)i	  r   )i
  r   u   È)i  r   )i  r   u   ÈÛd   )ifò ÚX)i ó úV)iÕö r   )iàö r   )iíö r   )iðö r   )iùö r   )i ÷ r   )it÷ r   )i÷ r   )iÕ÷ r   )i ø r   )iø r   )iø r   )iHø r   )iPø r   )iZø r   )i`ø r   )iø r   )iø r   )i®ø r   )i ù r   )iù r   )iù r   )i?ù r   )i@ù r   )iMù r   )iPù r   )ilù r   )iù r   )iù r   )iÀù r   )iÁù r   )iÐù r   )içù r   )i   r   )i×¦ r   )i § r   )i5· r   )i@· r   )i¸ r   )i ¸ r   )i¢Î r   )i°Î r   )iáë r   )i ø ÚMu   ä¸½)iø r   u   ä¸¸)iø r   u   ä¹)iø r   u   ð ¢)iø r   u   ä½ )iø r   u   ä¾®)iø r   u   ä¾»)iø r   u   å)iø r   u   åº)i	ø r   u   å)i
ø r   u   å§)iø r   u   å)iø r   u   ã)iø r   u   ð º)iø r   u   å)iø r   u   å)iø r   u   å¤)iø r   u   å·)iø r   u   ð )iø r   u   ã¹)iø r   u   å§)iø r   u   å)iø r   u   ð )iø r   u   å)iø r   u   å¤)iø r   u   ä»)iø r   u   å¬)iø r   u   åµ)iø r   u   ð©)iø r   u   åµ)iø r   u   å)iø r   u   ã)i ø r   u   å»)i!ø r   u   å)i"ø r   u   å²)i#ø r   u   å·)i$ø r   u   ã)i%ø r   u   å)i&ø r   u   å)i'ø r   u   å¤)i(ø r   u   åº)i)ø r   u   å)i*ø r   u   å)i+ø r   u   å)i,ø r   u   å)i-ø r   u   å)i.ø r   u   å)i/ø r   u   å³)i0ø r   u   å½)i1ø r   u   å¿)i4ø r   u   ð ¨¬)i5ø r   u   ç°)i6ø r   u   å)i7ø r   u   å)i8ø r   u   ð ­£_seg_62Ûd   )i× ÚMu   Î¶)i× r   u   Î·)i× r   u   Î¸)i× r   u   Î¹)i× r   u   Îº)i× r   u   Î»)i× r   u   Î¼)i× r   u   Î½)i× r   u   Î¾)i× r   u   Î¿)i× r   u   Ï)i × r   u   Ï)i¡× r   u   Î¸)i¢× r   u   Ï)i£× r   u   Ï)i¤× r   u   Ï)i¥× r   u   Ï)i¦× r   u   Ï)i§× r   u   Ï)i¨× r   u   Ï)i©× r   u   â)iª× r   u   Î±)i«× r   u   Î²)i¬× r   u   Î³)i­× r   u   Î´)i®× r   u   Îµ)i¯× r   u   Î¶)i°× r   u   Î·)i±× r   u   Î¸)i²× r   u   Î¹)i³× r   u   Îº)i´× r   u   Î»)iµ× r   u   Î¼)i¶× r   u   Î½)i·× r   u   Î¾)i¸× r   u   Î¿)i¹× r   u   Ï)iº× r   u   Ï)i»× r   u   Ï)i½× r   u   Ï)i¾× r   u   Ï)i¿× r   u   Ï)iÀ× r   u   Ï)iÁ× r   u   Ï)iÂ× r   u   Ï)iÃ× r   u   â)iÄ× r   u   Îµ)iÅ× r   u   Î¸)iÆ× r   u   Îº)iÇ× r   u   Ï)iÈ× r   u   Ï)iÉ× r   u   Ï)iÊ× r   u   Ï)iÌ× ÚX)iÎ× r   Ú0)iÏ× r   Ú1)iÐ× r   ú2)iÑ× r   ú3)iÒ× r   ú4)iÓ× r   ú5)iÔ× r   ú6)iÕ× r   ú7)iÖ× r   ú8)i×× r   ú9)iØ× r   r   )iÙ× r   r   )iÚ× r   r   )iÛ× r   r   )iÜ× r   r   )iÝ× r   r   )iÞ× r   r	   )iß× r   r
   )ià× r   r   )iá× r   r   )iâ× r   r   )iã× r   r   )iä× r   r   )iå× r   r   )iæ× r   r   )iç× r   r   )iè× r   r	   )ié× r   r
   )iê× r   r   )ië× r   r   )iì× r   r   )ií× r   r   )iî× r   r   )iï× r   r   )ið× r   r   )iñ× r   r   )iò× r   r	   )ió× r   r
   )iô× r   r   )iõ× r   r   )iö× r   r   )i÷× r   r   )iø× r   r   )iù× r   r   )iú× r   r   )iû× r   r   _seg_54_seg_26Ûd   )iÑÔ ÚMÚb)iÒÔ r   Úc)iÓÔ r   Úd)iÔÔ r   Úe)iÕÔ r   Úf)iÖÔ r   Úg)i×Ô r   Úh)iØÔ r   Úi)iÙÔ r   Új)iÚÔ r   Úk)iÛÔ r   Úl)iÜÔ r   Úm)iÝÔ r   Ún)iÞÔ r   Úo)ißÔ r   Úp)iàÔ r   Úq)iáÔ r   Úr)iâÔ r   Ús)iãÔ r   Út)iäÔ r   Úu)iåÔ r   Úv)iæÔ r   Úw)içÔ r   Úx)ièÔ r   Úy)iéÔ r   Úz)iêÔ r   Úa)iëÔ r   r   )iìÔ r   r   )iíÔ r   r   )iîÔ r   r   )iïÔ r   r   )iðÔ r   r   )iñÔ r   r   )iòÔ r   r	   )ióÔ r   r
   )iôÔ r   r   )iõÔ r   r   )iöÔ r   r   )i÷Ô r   r   )iøÔ r   r   )iùÔ r   r   )iúÔ r   r   )iûÔ r   r   )iüÔ r   r   )iýÔ r   r   )iþÔ r   r   )iÿÔ r   r   )i Õ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ ÚX)iÕ r   r   )iÕ r   r   )i	Õ r   r   )i
Õ r   r   )iÕ r   )iÕ r   r
   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   )iÕ r   r   )iÕ r   r   )i Õ r   r   )i!Õ r   r   )i"Õ r   r   )i#Õ r   r   )i$Õ r   r   )i%Õ r   r   )i&Õ r   r	   )i'Õ r   r
   )i(Õ r   r   )i)Õ r   r   )i*Õ r   r   )i+Õ r   r   )i,Õ r   r   )i-Õ r   r   )i.Õ r   r   )i/Õ r   r   )i0Õ r   r   )i1Õ r   r   )i2Õ r   r   )i3Õ r   r   )i4Õ r   r   )i5Õ r   r   Ûd   )idÖ ÚMÚo)ieÖ r   Úp)ifÖ r   Úq)igÖ r   Úr)ihÖ r   Ús)iiÖ r   Út)ijÖ r   Úu)ikÖ r   Úv)ilÖ r   Úw)imÖ r   Úx)inÖ r   Úy)ioÖ r   Úz)ipÖ r   Úa)iqÖ r   Úb)irÖ r   Úc)isÖ r   Úd)itÖ r   Úe)iuÖ r   Úf)ivÖ r   Úg)iwÖ r   Úh)ixÖ r   Úi)iyÖ r   Új)izÖ r   Úk)i{Ö r   Úl)i|Ö r   Úm)i}Ö r   Ún)i~Ö r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r	   )iÖ r   r
   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r	   )i Ö r   r
   )i¡Ö r   r   )i¢Ö r   r   )i£Ö r   r   )i¤Ö r   u   Ä±)i¥Ö r   u   È·)i¦Ö ÚX)i¨Ö r   u   Î±)i©Ö r   u   Î²)iªÖ r   u   Î³)i«Ö r   u   Î´)i¬Ö r   u   Îµ)i­Ö r   u   Î¶)i®Ö r   u   Î·)i¯Ö r   u   Î¸)i°Ö r   u   Î¹)i±Ö r   u   Îº)i²Ö r   u   Î»)i³Ö r   u   Î¼)i´Ö r   u   Î½)iµÖ r   u   Î¾)i¶Ö r   u   Î¿)i·Ö r   u   Ï)i¸Ö r   u   Ï)i¹Ö r   u   Î¸)iºÖ r   u   Ï)i»Ö r   u   Ï)i¼Ö r   u   Ï)i½Ö r   u   Ï)i¾Ö r   u   Ï)i¿Ö r   u   Ï)iÀÖ r   u   Ï)iÁÖ r   u   â)iÂÖ r   u   Î±)iÃÖ r   u   Î²)iÄÖ r   u   Î³)iÅÖ r   u   Î´)iÆÖ r   u   Îµ)iÇÖ r   u   Î¶)iÈÖ r   u   Î·_seg_17Ûd   )iDÿ  ÚMÚd)iEÿ  r   Úe)iFÿ  r   Úf)iGÿ  r   Úg)iHÿ  r   Úh)iIÿ  r   Úi)iJÿ  r   Új)iKÿ  r   Úk)iLÿ  r   Úl)iMÿ  r   Úm)iNÿ  r   Ún)iOÿ  r   Úo)iPÿ  r   Úp)iQÿ  r   Úq)iRÿ  r   Úr)iSÿ  r   Ús)iTÿ  r   Út)iUÿ  r   Úu)iVÿ  r   Úv)iWÿ  r   Úw)iXÿ  r   Úx)iYÿ  r   Úy)iZÿ  r   Úz)i[ÿ  ú3Ú{)i\ÿ  r   ú|)i]ÿ  r   Ú})i^ÿ  r   ú~)i_ÿ  r   u   â¦)i`ÿ  r   u   â¦)iaÿ  r   Ú.)ibÿ  r   u   ã)icÿ  r   u   ã)idÿ  r   u   ã)ieÿ  r   u   ã»)ifÿ  r   u   ã²)igÿ  r   u   ã¡)ihÿ  r   u   ã£)iiÿ  r   u   ã¥)ijÿ  r   u   ã§)ikÿ  r   u   ã©)ilÿ  r   u   ã£)imÿ  r   u   ã¥)inÿ  r   u   ã§)ioÿ  r   u   ã)ipÿ  r   u   ã¼)iqÿ  r   u   ã¢)irÿ  r   u   ã¤)isÿ  r   u   ã¦)itÿ  r   u   ã¨)iuÿ  r   u   ãª)ivÿ  r   u   ã«)iwÿ  r   u   ã­)ixÿ  r   u   ã¯)iyÿ  r   u   ã±)izÿ  r   u   ã³)i{ÿ  r   u   ãµ)i|ÿ  r   u   ã·)i}ÿ  r   u   ã¹)i~ÿ  r   u   ã»)iÿ  r   u   ã½)iÿ  r   u   ã¿)iÿ  r   u   ã)iÿ  r   u   ã)iÿ  r   u   ã)iÿ  r   u   ã)iÿ  r   u   ã)iÿ  r   u   ã)iÿ  r   u   ã)iÿ  r   u   ã)iÿ  r   u   ã)iÿ  r   u   ã)iÿ  r   u   ã)iÿ  r   u   ã)iÿ  r   u   ã)iÿ  r   u   ã)iÿ  r   u   ã)iÿ  r   u   ã)iÿ  r   u   ã )iÿ  r   u   ã¡)iÿ  r   u   ã¢)iÿ  r   u   ã¤)iÿ  r   u   ã¦)iÿ  r   u   ã¨)iÿ  r   u   ã©)iÿ  r   u   ãª)iÿ  r   u   ã«)iÿ  r   u   ã¬)iÿ  r   u   ã­)iÿ  r   u   ã¯)iÿ  r   u   ã³)iÿ  r   u   ã)iÿ  r   u   ã)i ÿ  ÚX)i¡ÿ  r   u   á)i¢ÿ  r   u   á)i£ÿ  r   u   áª)i¤ÿ  r   u   á)i¥ÿ  r   u   á¬)i¦ÿ  r   u   á­)i§ÿ  r   u   áÛd   )i3  ÚMzkb)i3  r   zmb)i3  r   zgb)i3  r   zcal)i3  r   zkcal)i3  r   zpf)i3  r   znf)i3  r   u   Î¼f)i3  r   u   Î¼g)i3  r   zmg)i3  r   zkg)i3  r   zhz)i3  r   zkhz)i3  r   zmhz)i3  r   zghz)i3  r   zthz)i3  r   u   Î¼l)i3  r   zml)i3  r   zdl)i3  r   zkl)i3  r   zfm)i3  r   znm)i3  r   u   Î¼m)i3  r   zmm)i3  r   zcm)i3  r   zkm)i3  r   zmm2)i 3  r   zcm2)i¡3  r   zm2)i¢3  r   zkm2)i£3  r   zmm3)i¤3  r   zcm3)i¥3  r   zm3)i¦3  r   zkm3)i§3  r   u   mâs)i¨3  r   u   mâs2)i©3  r   zpa)iª3  r   zkpa)i«3  r   zmpa)i¬3  r   zgpa)i­3  r   zrad)i®3  r   u   radâs)i¯3  r   u   radâs2)i°3  r   zps)i±3  r   zns)i²3  r   u   Î¼s)i³3  r   zms)i´3  r   zpv)iµ3  r   znv)i¶3  r   u   Î¼v)i·3  r   zmv)i¸3  r   zkv)i¹3  r   zmv)iº3  r   zpw)i»3  r   znw)i¼3  r   u   Î¼w)i½3  r   zmw)i¾3  r   zkw)i¿3  r   zmw)iÀ3  r   u   kÏ)iÁ3  r   u   mÏ)iÂ3  ÚX)iÃ3  r   zbq)iÄ3  r   zcc)iÅ3  r   zcd)iÆ3  r   u   câkg)iÇ3  r   )iÈ3  r   zdb)iÉ3  r   zgy)iÊ3  r   zha)iË3  r   zhp)iÌ3  r   zin)iÍ3  r   zkk)iÎ3  r   zkm)iÏ3  r   zkt)iÐ3  r   zlm)iÑ3  r   zln)iÒ3  r   zlog)iÓ3  r   zlx)iÔ3  r   zmb)iÕ3  r   zmil)iÖ3  r   zmol)i×3  r   zph)iØ3  r   )iÙ3  r   zppm)iÚ3  r   zpr)iÛ3  r   zsr)iÜ3  r   zsv)iÝ3  r   zwb)iÞ3  r   u   vâm)iß3  r   u   aâm)ià3  r   u   1æ¥)iá3  r   u   2æ¥)iâ3  r   u   3æ¥)iã3  r   u   4æ¥)iä3  r   u   5æ¥)iå3  r   u   6æ¥)iæ3  r   u   7æ¥)iç3  r   u   8æ¥)iè3  r   u   9æ¥Ûd   )iÒ$  ÚMÚc)iÓ$  r   Úd)iÔ$  r   Úe)iÕ$  r   Úf)iÖ$  r   Úg)i×$  r   Úh)iØ$  r   Úi)iÙ$  r   Új)iÚ$  r   Úk)iÛ$  r   Úl)iÜ$  r   Úm)iÝ$  r   Ún)iÞ$  r   Úo)iß$  r   Úp)ià$  r   Úq)iá$  r   Úr)iâ$  r   Ús)iã$  r   Út)iä$  r   Úu)iå$  r   Úv)iæ$  r   Úw)iç$  r   Úx)iè$  r   Úy)ié$  r   Úz)iê$  r   Ú0)ië$  úV)i*  r   u   â«â«â«â«)i*  r   )it*  ú3z::=)iu*  r   z==)iv*  r   z===)iw*  r   )iÜ*  r   u   â«Ì¸)iÝ*  r   )it+  ÚX)iv+  r   )i+  r   )i+  r   )iº+  r   )i½+  r   )iÉ+  r   )iÊ+  r   )iÓ+  r   )iì+  r   )ið+  r   )i ,  r   u   â°°)i,  r   u   â°±)i,  r   u   â°²)i,  r   u   â°³)i,  r   u   â°´)i,  r   u   â°µ)i,  r   u   â°¶)i,  r   u   â°·)i,  r   u   â°¸)i	,  r   u   â°¹)i
,  r   u   â°º)i,  r   u   â°»)i,  r   u   â°¼)i,  r   u   â°½)i,  r   u   â°¾)i,  r   u   â°¿)i,  r   u   â±)i,  r   u   â±)i,  r   u   â±)i,  r   u   â±)i,  r   u   â±)i,  r   u   â±)i,  r   u   â±)i,  r   u   â±)i,  r   u   â±)i,  r   u   â±)i,  r   u   â±)i,  r   u   â±)i,  r   u   â±)i,  r   u   â±)i,  r   u   â±)i,  r   u   â±)i ,  r   u   â±)i!,  r   u   â±)i",  r   u   â±)i#,  r   u   â±)i$,  r   u   â±)i%,  r   u   â±)i&,  r   u   â±)i',  r   u   â±)i(,  r   u   â±)i),  r   u   â±)i*,  r   u   â±)i+,  r   u   â±)i,,  r   u   â±)i-,  r   u   â±)i.,  r   u   â±)i/,  r   )i0,  r   )i_,  r   )i`,  r   u   â±¡)ia,  r   )ib,  r   u   É«)ic,  r   u   áµ½)id,  r   u   É½_seg_31_seg_28_seg_58Ûd   )i9ø ÚMu   å«)i:ø r   u   å±)i;ø r   u   å)i<ø r   u   å)i=ø r   u   å¸)i>ø r   u   å)i?ø r   u   å¨)i@ø r   u   å¢)iAø r   u   å¶)iBø r   u   å)iCø r   u   å)iDø r   u   å£)iEø r   u   å)iGø r   u   å)iHø r   u   å«)iIø r   u   å³)iJø r   u   å)iKø r   u   å)iLø r   u   å)iMø r   u   å)iNø r   u   å)iOø r   u   å´)iPø r   u   å)iQø r   u   å£®)iRø r   u   å)iSø r   u   å´)iTø r   u   å )iUø r   u   å)iVø r   u   å ²)iWø r   u   å ±)iXø r   u   å¢¬)iYø r   u   ð¡¤)iZø r   u   å£²)i[ø r   u   å£·)i\ø r   u   å¤)i]ø r   u   å¤)i^ø r   u   å¤¢)i_ø r   u   å¥¢)i`ø r   u   ð¡¨)iaø r   u   ð¡ª)ibø r   u   å§¬)icø r   u   å¨)idø r   u   å¨§)ieø r   u   å§)ifø r   u   å©¦)igø r   u   ã®)ihø ÚX)iiø r   u   å¬)ijø r   u   å¬¾)ilø r   u   ð¡§)imø r   u   å¯)inø r   u   å¯)ioø r   u   å¯§)ipø r   u   å¯³)iqø r   u   ð¡¬)irø r   u   å¯¿)isø r   u   å°)itø r   )iuø r   u   å°¢)ivø r   u   ã)iwø r   u   å± )ixø r   u   å±®)iyø r   u   å³)izø r   u   å²)i{ø r   u   ð¡·¤)i|ø r   u   åµ)i}ø r   u   ð¡·¦)i~ø r   u   åµ®)iø r   u   åµ«)iø r   u   åµ¼)iø r   u   å·¡)iø r   u   å·¢)iø r   u   ã ¯)iø r   u   å·½)iø r   u   å¸¨)iø r   u   å¸½)iø r   u   å¹©)iø r   u   ã¡¢)iø r   u   ð¢)iø r   u   ã¡¼)iø r   u   åº°)iø r   u   åº³)iø r   u   åº¶)iø r   u   å»)iø r   u   ðª)iø r   u   å»¾)iø r   u   ð¢±)iø r   u   è)iø r   u   å¼¢)iø r   u   ã£)iø r   u   ð£¸)iø r   u   ð¦)iø r   u   å½¢)iø r   u   å½«)iø r   u   ã££)iø r   u   å¾)iø r   u   å¿)iø r   u   å¿)iø r   u   å¿¹)i ø r   u   æ_seg_51_seg_48idna.uts46data_seg_56<module idna.uts46data>Ûd   )i$î ÚMu   Ù)i%î ÚX)i'î r   u   Ø­)i(î r   )i)î r   u   Ù)i*î r   u   Ù)i+î r   u   Ù)i,î r   u   Ù)i-î r   u   Ù)i.î r   u   Ø³)i/î r   u   Ø¹)i0î r   u   Ù)i1î r   u   Øµ)i2î r   u   Ù)i3î r   )i4î r   u   Ø´)i5î r   u   Øª)i6î r   u   Ø«)i7î r   u   Ø®)i8î r   )i9î r   u   Ø¶)i:î r   )i;î r   u   Øº)i<î r   )iBî r   u   Ø¬)iCî r   )iGî r   u   Ø­)iHî r   )iIî r   u   Ù)iJî r   )iKî r   u   Ù)iLî r   )iMî r   u   Ù)iNî r   u   Ø³)iOî r   u   Ø¹)iPî r   )iQî r   u   Øµ)iRî r   u   Ù)iSî r   )iTî r   u   Ø´)iUî r   )iWî r   u   Ø®)iXî r   )iYî r   u   Ø¶)iZî r   )i[î r   u   Øº)i\î r   )i]î r   u   Úº)i^î r   )i_î r   u   Ù¯)i`î r   )iaî r   u   Ø¨)ibî r   u   Ø¬)icî r   )idî r   u   Ù)ieî r   )igî r   u   Ø­)ihî r   u   Ø·)iiî r   u   Ù)ijî r   u   Ù)ikî r   )ilî r   u   Ù)imî r   u   Ù)inî r   u   Ø³)ioî r   u   Ø¹)ipî r   u   Ù)iqî r   u   Øµ)irî r   u   Ù)isî r   )itî r   u   Ø´)iuî r   u   Øª)ivî r   u   Ø«)iwî r   u   Ø®)ixî r   )iyî r   u   Ø¶)izî r   u   Ø¸)i{î r   u   Øº)i|î r   u   Ù®)i}î r   )i~î r   u   Ú¡)iî r   )iî r   u   Ø§)iî r   u   Ø¨)iî r   u   Ø¬)iî r   u   Ø¯)iî r   u   Ù)iî r   u   Ù)iî r   u   Ø²)iî r   u   Ø­)iî r   u   Ø·)iî r   u   Ù)iî r   )iî r   u   Ù)iî r   u   Ù)iî r   u   Ù)iî r   u   Ø³)iî r   u   Ø¹)iî r   u   Ù)iî r   u   Øµ)iî r   u   Ù_seg_45_seg_53Ûd   )i1  ÚMu   äº)i1  r   u   ä¸)i1  r   u   å)i1  r   u   ä¸)i1  r   u   ä¸­)i1  r   u   ä¸)i1  r   u   ç²)i1  r   u   ä¹)i1  r   u   ä¸)i1  r   u   ä¸)i1  r   u   å¤©)i1  r   u   å°)i1  r   u   äºº)i 1  úV)i»1  ÚX)iÀ1  r   )iä1  r   )ið1  r   )i 2  ú3u   (á))i2  r   u   (á))i2  r   u   (á))i2  r   u   (á))i2  r   u   (á))i2  r   u   (á))i2  r   u   (á))i2  r   u   (á))i2  r   u   (á))i	2  r   u   (á))i
2  r   u   (á))i2  r   u   (á))i2  r   u   (á))i2  r   u   (á))i2  r   u   (ê°))i2  r   u   (ë))i2  r   u   (ë¤))i2  r   u   (ë¼))i2  r   u   (ë§))i2  r   u   (ë°))i2  r   u   (ì¬))i2  r   u   (ì))i2  r   u   (ì))i2  r   u   (ì°¨))i2  r   u   (ì¹´))i2  r   u   (í))i2  r   u   (í))i2  r   u   (í))i2  r   u   (ì£¼))i2  r   u   (ì¤ì ))i2  r   u   (ì¤í))i2  r   )i 2  r   u   (ä¸))i!2  r   u   (äº))i"2  r   u   (ä¸))i#2  r   u   (å))i$2  r   u   (äº))i%2  r   u   (å­))i&2  r   u   (ä¸))i'2  r   u   (å«))i(2  r   u   (ä¹))i)2  r   u   (å))i*2  r   u   (æ))i+2  r   u   (ç«))i,2  r   u   (æ°´))i-2  r   u   (æ¨))i.2  r   u   (é))i/2  r   u   (å))i02  r   u   (æ¥))i12  r   u   (æ ª))i22  r   u   (æ))i32  r   u   (ç¤¾))i42  r   u   (å))i52  r   u   (ç¹))i62  r   u   (è²¡))i72  r   u   (ç¥))i82  r   u   (å´))i92  r   u   (ä»£))i:2  r   u   (å¼))i;2  r   u   (å­¦))i<2  r   u   (ç£))i=2  r   u   (ä¼))i>2  r   u   (è³))i?2  r   u   (å))i@2  r   u   (ç¥­))iA2  r   u   (ä¼))iB2  r   u   (èª))iC2  r   u   (è³))iD2  r   u   å)iE2  r   u   å¹¼)iF2  r   u   æ)iG2  r   u   ç®)iH2  r   )iP2  r   zpte)iQ2  r   z21)iR2  r   z22)iS2  r   z23)iT2  r   z24)iU2  r   z25)iV2  r   z26)iW2  r   z27)iX2  r   z28Ûd   )ijÔ ÚMÚc)ikÔ r   Úd)ilÔ r   Úe)imÔ r   Úf)inÔ r   Úg)ioÔ r   Úh)ipÔ r   Úi)iqÔ r   Új)irÔ r   Úk)isÔ r   Úl)itÔ r   Úm)iuÔ r   Ún)ivÔ r   Úo)iwÔ r   Úp)ixÔ r   Úq)iyÔ r   Úr)izÔ r   Ús)i{Ô r   Út)i|Ô r   Úu)i}Ô r   Úv)i~Ô r   Úw)iÔ r   Úx)iÔ r   Úy)iÔ r   Úz)iÔ r   Úa)iÔ r   Úb)iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r	   )iÔ r   r
   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ r   r   )iÔ ÚX)iÔ r   r   )iÔ r   r   )i Ô r   )i¢Ô r   r   )i£Ô r   )i¥Ô r   r	   )i¦Ô r   r
   )i§Ô r   )i©Ô r   r   )iªÔ r   r   )i«Ô r   r   )i¬Ô r   r   )i­Ô r   )i®Ô r   r   )i¯Ô r   r   )i°Ô r   r   )i±Ô r   r   )i²Ô r   r   )i³Ô r   r   )i´Ô r   r   )iµÔ r   r   )i¶Ô r   r   )i·Ô r   r   )i¸Ô r   r   )i¹Ô r   r   )iºÔ r   )i»Ô r   r   )i¼Ô r   )i½Ô r   r   )i¾Ô r   r   )i¿Ô r   r	   )iÀÔ r   r
   )iÁÔ r   r   )iÂÔ r   r   )iÃÔ r   r   )iÄÔ r   )iÅÔ r   r   )iÆÔ r   r   )iÇÔ r   r   )iÈÔ r   r   )iÉÔ r   r   )iÊÔ r   r   )iËÔ r   r   )iÌÔ r   r   )iÍÔ r   r   )iÎÔ r   r   )iÏÔ r   r   )iÐÔ r   r   Ûd   )i ÚMu   ð³)i r   u   ð³)i  r   u   ð³ )i¡ r   u   ð³¡)i¢ r   u   ð³¢)i£ r   u   ð³£)i¤ r   u   ð³¤)i¥ r   u   ð³¥)i¦ r   u   ð³¦)i§ r   u   ð³§)i¨ r   u   ð³¨)i© r   u   ð³©)iª r   u   ð³ª)i« r   u   ð³«)i¬ r   u   ð³¬)i­ r   u   ð³­)i® r   u   ð³®)i¯ r   u   ð³¯)i° r   u   ð³°)i± r   u   ð³±)i² r   u   ð³²)i³ ÚX)iÀ úV)ió r   )iú r   )i  r   )i` r   )i r   )i  r   )iN r   )iR r   )ip r   )i r   )i½ r   )i¾ r   )iÂ r   )iÐ r   )ié r   )ið r   )iú r   )i  r   )i5 r   )i6 r   )iD r   )iP r   )iw r   )i r   )iÎ r   )iÐ r   )ià r   )iá r   )iõ r   )i  r   )i r   )i r   )i? r   )i r   )i r   )i r   )i r   )i r   )i r   )i r   )i r   )i r   )iª r   )i° r   )ië r   )ið r   )iú r   )i  r   )i r   )i r   )i r   )i r   )i r   )i r   )i) r   )i* r   )i1 r   )i2 r   )i4 r   )i5 r   )i: r   )i< r   )iE r   )iG r   )iI r   )iK r   )iN r   )iP r   )iQ r   )iW r   )iX r   )i] r   )id r   )if r   )im r   )ip r   )iu r   _seg_32Ûd   )i  úV)i  ÚX)i  r   )i  r   )i  r   )i)  r   )i*  r   )i:  r   )i=  r   )iE  r   )iF  r   )iI  r   )iJ  r   )iN  r   )iU  r   )iW  r   )iX  r   )i[  r   )i`  r   )id  r   )if  r   )ip  r   )ix  r   )i  r   )i  r   )i  r   )i  r   )i  r   )i  r   )i©  r   )iª  r   )i´  r   )iµ  r   )iº  r   )i¼  r   )iÅ  r   )iÆ  r   )iÉ  r   )iÊ  r   )iÎ  r   )iÕ  r   )i×  r   )iÞ  r   )iß  r   )ià  r   )iä  r   )iæ  r   )ið  r   )iñ  r   )ió  r   )i   r   )i  r   )i  r   )i  r   )i  r   )i  r   )i  r   )iE  r   )iF  r   )iI  r   )iJ  r   )iP  r   )iT  r   )id  r   )if  r   )i  r   )i  r   )i  r   )i  r   )i  r   )i  r   )i²  r   )i³  r   )i¼  r   )i½  r   )i¾  r   )iÀ  r   )iÇ  r   )iÊ  r   )iË  r   )iÏ  r   )iÕ  r   )iÖ  r   )i×  r   )iØ  r   )ià  r   )iæ  r   )ið  r   )iò  r   )iõ  r   )i  r   )i3  ÚMu   à¹à¸²)i4  r   )i;  r   )i?  r   )i\  r   )i  r   )i  r   )i  r   )i  r   Ûd   )i;û  ÚMu   ×Ö¼)i<û  r   u   ×Ö¼)i=û  ÚX)i>û  r   u   ×Ö¼)i?û  r   )i@û  r   u   × Ö¼)iAû  r   u   ×¡Ö¼)iBû  r   )iCû  r   u   ×£Ö¼)iDû  r   u   ×¤Ö¼)iEû  r   )iFû  r   u   ×¦Ö¼)iGû  r   u   ×§Ö¼)iHû  r   u   ×¨Ö¼)iIû  r   u   ×©Ö¼)iJû  r   u   ×ªÖ¼)iKû  r   u   ×Ö¹)iLû  r   u   ×Ö¿)iMû  r   u   ×Ö¿)iNû  r   u   ×¤Ö¿)iOû  r   u   ××)iPû  r   u   Ù±)iRû  r   u   Ù»)iVû  r   u   Ù¾)iZû  r   u   Ú)i^û  r   u   Ùº)ibû  r   u   Ù¿)ifû  r   u   Ù¹)ijû  r   u   Ú¤)inû  r   u   Ú¦)irû  r   u   Ú)ivû  r   u   Ú)izû  r   u   Ú)i~û  r   u   Ú)iû  r   u   Ú)iû  r   u   Ú)iû  r   u   Ú)iû  r   u   Ú)iû  r   u   Ú)iû  r   u   Ú)iû  r   u   Ú©)iû  r   u   Ú¯)iû  r   u   Ú³)iû  r   u   Ú±)iû  r   u   Úº)i û  r   u   Ú»)i¤û  r   u   Û)i¦û  r   u   Û)iªû  r   u   Ú¾)i®û  r   u   Û)i°û  r   u   Û)i²û  úV)iÂû  r   )iÓû  r   u   Ú­)i×û  r   u   Û)iÙû  r   u   Û)iÛû  r   u   Û)iÝû  r   u   ÛÙ´)iÞû  r   u   Û)iàû  r   u   Û)iâû  r   u   Û)iäû  r   u   Û)ièû  r   u   Ù)iêû  r   u   Ø¦Ø§)iìû  r   u   Ø¦Û)iîû  r   u   Ø¦Ù)iðû  r   u   Ø¦Û)iòû  r   u   Ø¦Û)iôû  r   u   Ø¦Û)iöû  r   u   Ø¦Û)iùû  r   u   Ø¦Ù)iüû  r   u   Û)i ü  r   u   Ø¦Ø¬)iü  r   u   Ø¦Ø­)iü  r   u   Ø¦Ù)iü  r   u   Ø¦Ù)iü  r   u   Ø¦Ù)iü  r   u   Ø¨Ø¬)iü  r   u   Ø¨Ø­)iü  r   u   Ø¨Ø®)iü  r   u   Ø¨Ù)i	ü  r   u   Ø¨Ù)i
ü  r   u   Ø¨Ù)iü  r   u   ØªØ¬)iü  r   u   ØªØ­)iü  r   u   ØªØ®)iü  r   u   ØªÙ)iü  r   u   ØªÙ)iü  r   u   ØªÙ)iü  r   u   Ø«Ø¬)iü  r   u   Ø«Ù)iü  r   u   Ø«Ù)iü  r   u   Ø«Ù)iü  r   u   Ø¬Ø­)iü  r   u   Ø¬Ù)iü  r   u   Ø­Ø¬)iü  r   u   Ø­Ù)iü  r   u   Ø®Ø¬)iü  r   u   Ø®Ø­)iü  r   u   Ø®Ù_seg_33_seg_46_seg_64Ûd   )iY
  ÚMu   à¨à¨¼)iZ
  r   u   à¨à¨¼)i[
  r   u   à¨à¨¼)i\
  úV)i]
  ÚX)i^
  r   u   à¨«à¨¼)i_
  r   )if
  r   )iv
  r   )i
  r   )i
  r   )i
  r   )i
  r   )i
  r   )i
  r   )i
  r   )i©
  r   )iª
  r   )i±
  r   )i²
  r   )i´
  r   )iµ
  r   )iº
  r   )i¼
  r   )iÆ
  r   )iÇ
  r   )iÊ
  r   )iË
  r   )iÎ
  r   )iÐ
  r   )iÑ
  r   )ià
  r   )iä
  r   )iæ
  r   )iò
  r   )iù
  r   )i   r   )i  r   )i  r   )i  r   )i  r   )i  r   )i  r   )i  r   )i)  r   )i*  r   )i1  r   )i2  r   )i4  r   )i5  r   )i:  r   )i<  r   )iE  r   )iG  r   )iI  r   )iK  r   )iN  r   )iV  r   )iX  r   )i\  r   u   à¬¡à¬¼)i]  r   u   à¬¢à¬¼)i^  r   )i_  r   )id  r   )if  r   )ix  r   )i  r   )i  r   )i  r   )i  r   )i  r   )i  r   )i  r   )i  r   )i  r   )i  r   )i  r   )i  r   )i  r   )i   r   )i£  r   )i¥  r   )i¨  r   )i«  r   )i®  r   )iº  r   )i¾  r   )iÃ  r   )iÆ  r   )iÉ  r   )iÊ  r   )iÎ  r   )iÐ  r   )iÑ  r   )i×  r   )iØ  r   )iæ  r   )iû  r   )i   r   )i  r   Ûd   )iÉÖ ÚMu   Î¸)iÊÖ r   u   Î¹)iËÖ r   u   Îº)iÌÖ r   u   Î»)iÍÖ r   u   Î¼)iÎÖ r   u   Î½)iÏÖ r   u   Î¾)iÐÖ r   u   Î¿)iÑÖ r   u   Ï)iÒÖ r   u   Ï)iÓÖ r   u   Ï)iÕÖ r   u   Ï)iÖÖ r   u   Ï)i×Ö r   u   Ï)iØÖ r   u   Ï)iÙÖ r   u   Ï)iÚÖ r   u   Ï)iÛÖ r   u   â)iÜÖ r   u   Îµ)iÝÖ r   u   Î¸)iÞÖ r   u   Îº)ißÖ r   u   Ï)iàÖ r   u   Ï)iáÖ r   u   Ï)iâÖ r   u   Î±)iãÖ r   u   Î²)iäÖ r   u   Î³)iåÖ r   u   Î´)iæÖ r   u   Îµ)içÖ r   u   Î¶)ièÖ r   u   Î·)iéÖ r   u   Î¸)iêÖ r   u   Î¹)iëÖ r   u   Îº)iìÖ r   u   Î»)iíÖ r   u   Î¼)iîÖ r   u   Î½)iïÖ r   u   Î¾)iðÖ r   u   Î¿)iñÖ r   u   Ï)iòÖ r   u   Ï)ióÖ r   u   Î¸)iôÖ r   u   Ï)iõÖ r   u   Ï)iöÖ r   u   Ï)i÷Ö r   u   Ï)iøÖ r   u   Ï)iùÖ r   u   Ï)iúÖ r   u   Ï)iûÖ r   u   â)iüÖ r   u   Î±)iýÖ r   u   Î²)iþÖ r   u   Î³)iÿÖ r   u   Î´)i × r   u   Îµ)i× r   u   Î¶)i× r   u   Î·)i× r   u   Î¸)i× r   u   Î¹)i× r   u   Îº)i× r   u   Î»)i× r   u   Î¼)i× r   u   Î½)i	× r   u   Î¾)i
× r   u   Î¿)i× r   u   Ï)i× r   u   Ï)i× r   u   Ï)i× r   u   Ï)i× r   u   Ï)i× r   u   Ï)i× r   u   Ï)i× r   u   Ï)i× r   u   Ï)i× r   u   â)i× r   u   Îµ)i× r   u   Î¸)i× r   u   Îº)i× r   u   Ï)i× r   u   Ï)i× r   u   Ï)i× r   u   Î±)i× r   u   Î²)i× r   u   Î³)i× r   u   Î´)i × r   u   Îµ)i!× r   u   Î¶)i"× r   u   Î·)i#× r   u   Î¸)i$× r   u   Î¹)i%× r   u   Îº)i&× r   u   Î»)i'× r   u   Î¼)i(× r   u   Î½)i)× r   u   Î¾)i*× r   u   Î¿)i+× r   u   Ï)i,× r   u   Ï)i-× r   u   Î¸)i.× r   u   ÏÛd   )iü  ÚMu   Ø³Ø¬)iü  r   u   Ø³Ø­)iü  r   u   Ø³Ø®)iü  r   u   Ø³Ù)i ü  r   u   ØµØ­)i!ü  r   u   ØµÙ)i"ü  r   u   Ø¶Ø¬)i#ü  r   u   Ø¶Ø­)i$ü  r   u   Ø¶Ø®)i%ü  r   u   Ø¶Ù)i&ü  r   u   Ø·Ø­)i'ü  r   u   Ø·Ù)i(ü  r   u   Ø¸Ù)i)ü  r   u   Ø¹Ø¬)i*ü  r   u   Ø¹Ù)i+ü  r   u   ØºØ¬)i,ü  r   u   ØºÙ)i-ü  r   u   ÙØ¬)i.ü  r   u   ÙØ­)i/ü  r   u   ÙØ®)i0ü  r   u   ÙÙ)i1ü  r   u   ÙÙ)i2ü  r   u   ÙÙ)i3ü  r   u   ÙØ­)i4ü  r   u   ÙÙ)i5ü  r   u   ÙÙ)i6ü  r   u   ÙÙ)i7ü  r   u   ÙØ§)i8ü  r   u   ÙØ¬)i9ü  r   u   ÙØ­)i:ü  r   u   ÙØ®)i;ü  r   u   ÙÙ)i<ü  r   u   ÙÙ)i=ü  r   u   ÙÙ)i>ü  r   u   ÙÙ)i?ü  r   u   ÙØ¬)i@ü  r   u   ÙØ­)iAü  r   u   ÙØ®)iBü  r   u   ÙÙ)iCü  r   u   ÙÙ)iDü  r   u   ÙÙ)iEü  r   u   ÙØ¬)iFü  r   u   ÙØ­)iGü  r   u   ÙØ®)iHü  r   u   ÙÙ)iIü  r   u   ÙÙ)iJü  r   u   ÙÙ)iKü  r   u   ÙØ¬)iLü  r   u   ÙØ­)iMü  r   u   ÙØ®)iNü  r   u   ÙÙ)iOü  r   u   ÙÙ)iPü  r   u   ÙÙ)iQü  r   u   ÙØ¬)iRü  r   u   ÙÙ)iSü  r   u   ÙÙ)iTü  r   u   ÙÙ)iUü  r   u   ÙØ¬)iVü  r   u   ÙØ­)iWü  r   u   ÙØ®)iXü  r   u   ÙÙ)iYü  r   u   ÙÙ)iZü  r   u   ÙÙ)i[ü  r   u   Ø°Ù°)i\ü  r   u   Ø±Ù°)i]ü  r   u   ÙÙ°)i^ü  ú3u    ÙÙ)i_ü  r   u    ÙÙ)i`ü  r   u    ÙÙ)iaü  r   u    ÙÙ)ibü  r   u    ÙÙ)icü  r   u    ÙÙ°)idü  r   u   Ø¦Ø±)ieü  r   u   Ø¦Ø²)ifü  r   u   Ø¦Ù)igü  r   u   Ø¦Ù)ihü  r   u   Ø¦Ù)iiü  r   u   Ø¦Ù)ijü  r   u   Ø¨Ø±)ikü  r   u   Ø¨Ø²)ilü  r   u   Ø¨Ù)imü  r   u   Ø¨Ù)inü  r   u   Ø¨Ù)ioü  r   u   Ø¨Ù)ipü  r   u   ØªØ±)iqü  r   u   ØªØ²)irü  r   u   ØªÙ)isü  r   u   ØªÙ)itü  r   u   ØªÙ)iuü  r   u   ØªÙ)ivü  r   u   Ø«Ø±)iwü  r   u   Ø«Ø²)ixü  r   u   Ø«Ù)iyü  r   u   Ø«Ù)izü  r   u   Ø«Ù)i{ü  r   u   Ø«Ù)i|ü  r   u   ÙÙ)i}ü  r   u   ÙÙ)i~ü  r   u   ÙÙ)iü  r   u   ÙÙ_seg_52_seg_25_seg_12_seg_40_seg_55Ûd   )i§  úV)i§  ÚMu   ê)i§  r   )i§  r   u   ê)i§  r   )i§  r   u   ê)i§  r   )i§  r   u   É¥)i§  r   )i§  r   u   ê)i§  r   )i§  r   u   ê)i§  r   )i§  r   u   ê)i§  r   )i§  r   u   ê)i§  r   )i§  r   u   ê)i§  r   )i§  r   u   ê)i§  r   )i§  r   u   ê)i§  r   )i §  r   u   ê¡)i¡§  r   )i¢§  r   u   ê£)i£§  r   )i¤§  r   u   ê¥)i¥§  r   )i¦§  r   u   ê§)i§§  r   )i¨§  r   u   ê©)i©§  r   )iª§  r   u   É¦)i«§  r   u   É)i¬§  r   u   É¡)i­§  r   u   É¬)i®§  r   u   Éª)i¯§  ÚX)i°§  r   u   Ê)i±§  r   u   Ê)i²§  r   u   Ê)i³§  r   u   ê­)i´§  r   u   êµ)iµ§  r   )i¶§  r   u   ê·)i·§  r   )i¸§  r   )i÷§  r   )iø§  r   u   Ä§)iù§  r   u   Å)iú§  r   )i,¨  r   )i0¨  r   )i:¨  r   )i@¨  r   )ix¨  r   )i¨  r   )iÆ¨  r   )iÎ¨  r   )iÚ¨  r   )ià¨  r   )iþ¨  r   )i ©  r   )iT©  r   )i_©  r   )i}©  r   )i©  r   )iÎ©  r   )iÏ©  r   )iÚ©  r   )iÞ©  r   )iÿ©  r   )i ª  r   )i7ª  r   )i@ª  r   )iNª  r   )iPª  r   )iZª  r   )i\ª  r   )iÃª  r   )iÛª  r   )i÷ª  r   )i«  r   )i«  r   )i	«  r   )i«  r   )i«  r   )i«  r   )i «  r   )i'«  r   )i(«  r   )i/«  r   )i0«  r   )i\«  r   u   ê§)i]«  r   u   ê¬·)i^«  r   u   É«)i_«  r   u   ê­)i`«  r   )if«  r   _seg_22Ûd   )ik  úV)ix  ÚMu   Ð½)iy  r   )i  r   u   É)i  r   Úc)i  r   u   É)i  r   õ   Ã°)i  r   u   É)i   r   Úf)i¡  r   u   É)i¢  r   u   É¡)i£  r   u   É¥)i¤  r   u   É¨)i¥  r   u   É©)i¦  r   u   Éª)i§  r   u   áµ»)i¨  r   u   Ê)i©  r   u   É­)iª  r   u   á¶)i«  r   u   Ê)i¬  r   u   É±)i­  r   u   É°)i®  r   u   É²)i¯  r   u   É³)i°  r   u   É´)i±  r   u   Éµ)i²  r   u   É¸)i³  r   u   Ê)i´  r   u   Ê)iµ  r   u   Æ«)i¶  r   u   Ê)i·  r   u   Ê)i¸  r   u   á´)i¹  r   u   Ê)iº  r   u   Ê)i»  r   Úz)i¼  r   u   Ê)i½  r   u   Ê)i¾  r   u   Ê)i¿  r   u   Î¸)iÀ  r   )iú  ÚX)iû  r   )i   r   u   á¸)i  r   )i  r   u   á¸)i  r   )i  r   u   á¸)i  r   )i  r   u   á¸)i  r   )i  r   u   á¸)i	  r   )i
  r   u   á¸)i  r   )i  r   u   á¸)i  r   )i  r   u   á¸)i  r   )i  r   u   á¸)i  r   )i  r   u   á¸)i  r   )i  r   u   á¸)i  r   )i  r   u   á¸)i  r   )i  r   u   á¸)i  r   )i  r   u   á¸)i  r   )i  r   u   á¸)i  r   )i  r   u   á¸)i  r   )i   r   u   á¸¡)i!  r   )i"  r   u   á¸£)i#  r   )i$  r   u   á¸¥)i%  r   )i&  r   u   á¸§)i'  r   )i(  r   u   á¸©)i)  r   )i*  r   u   á¸«)i+  r   )i,  r   u   á¸­)i-  r   )i.  r   u   á¸¯)i/  r   )i0  r   u   á¸±)i1  r   )i2  r   u   á¸³)i3  r   )i4  r   u   á¸µ)i5  r   )i6  r   u   á¸·)i7  r   )i8  r   u   á¸¹_seg_66Ûd   )éÈ   ÚMõ   Ã¨)éÉ   r   õ   Ã©)éÊ   r   õ   Ãª)éË   r   õ   Ã«)éÌ   r   õ   Ã¬)éÍ   r   õ   Ã­)éÎ   r   õ   Ã®)éÏ   r   õ   Ã¯)éÐ   r   õ   Ã°)éÑ   r   õ   Ã±)éÒ   r   õ   Ã²)éÓ   r   õ   Ã³)éÔ   r   õ   Ã´)éÕ   r   õ   Ãµ)éÖ   r   õ   Ã¶)é×   úV)éØ   r   õ   Ã¸)éÙ   r   õ   Ã¹)éÚ   r   õ   Ãº)éÛ   r   õ   Ã»)éÜ   r   õ   Ã¼)éÝ   r   õ   Ã½)éÞ   r   õ   Ã¾)éß   ÚDzss)éà   r!   )éá   r!   )éâ   r!   )éã   r!   )éä   r!   )éå   r!   )éæ   r!   )éç   r!   )éè   r!   )éé   r!   )éê   r!   )éë   r!   )éì   r!   )éí   r!   )éî   r!   )éï   r!   )éð   r!   )éñ   r!   )éò   r!   )éó   r!   )éô   r!   )éõ   r!   )éö   r!   )é÷   r!   )éø   r!   )éù   r!   )éú   r!   )éû   r!   )éü   r!   )éý   r!   )éþ   r!   )éÿ   r!   )é   r   u   Ä)i  r!   )i  r   u   Ä)i  r!   )i  r   u   Ä)i  r!   )i  r   u   Ä)i  r!   )i  r   u   Ä)i	  r!   )i
  r   u   Ä)i  r!   )i  r   u   Ä)i  r!   )i  r   u   Ä)i  r!   )i  r   u   Ä)i  r!   )i  r   u   Ä)i  r!   )i  r   u   Ä)i  r!   )i  r   u   Ä)i  r!   )i  r   u   Ä)i  r!   )i  r   u   Ä)i  r!   )i  r   u   Ä)i  r!   )i  r   u   Ä)i  r!   )i   r   u   Ä¡)i!  r!   )i"  r   u   Ä£)i#  r!   )i$  r   u   Ä¥)i%  r!   )i&  r   u   Ä§)i'  r!   )i(  r   u   Ä©)i)  r!   )i*  r   u   Ä«)i+  r!   Ûd   )i  ÚMu   á¼)i  r   u   á¼)i  úV)i  ÚX)i  r   u   á¼)i  r   u   á¼)i  r   u   á¼)i  r   u   á¼)i  r   u   á¼)i  r   u   á¼)i  r   )i   r   )i(  r   u   á¼ )i)  r   u   á¼¡)i*  r   u   á¼¢)i+  r   u   á¼£)i,  r   u   á¼¤)i-  r   u   á¼¥)i.  r   u   á¼¦)i/  r   u   á¼§)i0  r   )i8  r   u   á¼°)i9  r   u   á¼±)i:  r   u   á¼²)i;  r   u   á¼³)i<  r   u   á¼´)i=  r   u   á¼µ)i>  r   u   á¼¶)i?  r   u   á¼·)i@  r   )iF  r   )iH  r   u   á½)iI  r   u   á½)iJ  r   u   á½)iK  r   u   á½)iL  r   u   á½)iM  r   u   á½)iN  r   )iP  r   )iX  r   )iY  r   u   á½)iZ  r   )i[  r   u   á½)i\  r   )i]  r   u   á½)i^  r   )i_  r   u   á½)i`  r   )ih  r   u   á½ )ii  r   u   á½¡)ij  r   u   á½¢)ik  r   u   á½£)il  r   u   á½¤)im  r   u   á½¥)in  r   u   á½¦)io  r   u   á½§)ip  r   )iq  r   u   Î¬)ir  r   )is  r   u   Î­)it  r   )iu  r   u   Î®)iv  r   )iw  r   u   Î¯)ix  r   )iy  r   u   Ï)iz  r   )i{  r   u   Ï)i|  r   )i}  r   u   Ï)i~  r   )i  r   u   á¼Î¹)i  r   u   á¼Î¹)i  r   u   á¼Î¹)i  r   u   á¼Î¹)i  r   u   á¼Î¹)i  r   u   á¼Î¹)i  r   u   á¼Î¹)i  r   u   á¼Î¹)i  r   u   á¼Î¹)i  r   u   á¼Î¹)i  r   u   á¼Î¹)i  r   u   á¼Î¹)i  r   u   á¼Î¹)i  r   u   á¼Î¹)i  r   u   á¼Î¹)i  r   u   á¼Î¹)i  r   u   á¼ Î¹)i  r   u   á¼¡Î¹)i  r   u   á¼¢Î¹)i  r   u   á¼£Î¹)i  r   u   á¼¤Î¹)i  r   u   á¼¥Î¹)i  r   u   á¼¦Î¹)i  r   u   á¼§Î¹)i  r   u   á¼ Î¹)i  r   u   á¼¡Î¹)i  r   u   á¼¢Î¹)i  r   u   á¼£Î¹)i  r   u   á¼¤Î¹Ûd   )i,  ÚMu   Ä­)i-  úV)i.  r   u   Ä¯)i/  r   )i0  r   u   iÌ)i1  r   )i2  r   zij)i4  r   u   Äµ)i5  r   )i6  r   u   Ä·)i7  r   )i9  r   u   Äº)i:  r   )i;  r   u   Ä¼)i<  r   )i=  r   u   Ä¾)i>  r   )i?  r   u   lÂ·)iA  r   u   Å)iB  r   )iC  r   u   Å)iD  r   )iE  r   u   Å)iF  r   )iG  r   u   Å)iH  r   )iI  r   u   Ê¼n)iJ  r   u   Å)iK  r   )iL  r   u   Å)iM  r   )iN  r   u   Å)iO  r   )iP  r   u   Å)iQ  r   )iR  r   u   Å)iS  r   )iT  r   u   Å)iU  r   )iV  r   u   Å)iW  r   )iX  r   u   Å)iY  r   )iZ  r   u   Å)i[  r   )i\  r   u   Å)i]  r   )i^  r   u   Å)i_  r   )i`  r   u   Å¡)ia  r   )ib  r   u   Å£)ic  r   )id  r   u   Å¥)ie  r   )if  r   u   Å§)ig  r   )ih  r   u   Å©)ii  r   )ij  r   u   Å«)ik  r   )il  r   u   Å­)im  r   )in  r   u   Å¯)io  r   )ip  r   u   Å±)iq  r   )ir  r   u   Å³)is  r   )it  r   u   Åµ)iu  r   )iv  r   u   Å·)iw  r   )ix  r   õ   Ã¿)iy  r   u   Åº)iz  r   )i{  r   u   Å¼)i|  r   )i}  r   u   Å¾)i~  r   )i  r   Ús)i  r   )i  r   u   É)i  r   u   Æ)i  r   )i  r   u   Æ)i  r   )i  r   u   É)i  r   u   Æ)i  r   )i  r   u   É)i  r   u   É)i  r   u   Æ)i  r   )i  r   u   Ç)i  r   u   É)i  r   u   É)i  r   u   Æ)i  r   )i  r   u   É Ûd   )i/   ú3ú )i0   úV)i3   ÚMu   â²â²)i4   r   u	   â²â²â²)i5   r   )i6   r   u   âµâµ)i7   r   u	   âµâµâµ)i8   r   )i<   r   z!!)i=   r   )i>   r   u    Ì)i?   r   )iG   r   z??)iH   r   z?!)iI   r   z!?)iJ   r   )iW   r   u   â²â²â²â²)iX   r   )i_   r   r   )i`   ÚI)ia   ÚX)id   r   )ie   r   )ip   r   Ú0)iq   r   Úi)ir   r   )it   r   ú4)iu   r   ú5)iv   r   ú6)iw   r   ú7)ix   r   ú8)iy   r   ú9)iz   r   ú+)i{   r   u   â)i|   r   ú=)i}   r   ú()i~   r   ú))i   r   Ún)i   r   r   )i   r   Ú1)i   r   ú2)i   r   r   )i   r   r	   )i   r   r
   )i   r   r   )i   r   r   )i   r   r   )i   r   r   )i   r   r   )i   r   u   â)i   r   r   )i   r   r   )i   r   r   )i   r   )i   r   Úa)i   r   Úe)i   r   Úo)i   r   Úx)i   r   u   É)i   r   Úh)i   r   Úk)i   r   Úl)i   r   Úm)i   r   r   )i   r   Úp)i   r   Ús)i   r   Út)i   r   )i    r   )i¨   r   zrs)i©   r   )iÀ   r   )iÐ   r   )iñ   r   )i !  r   za/c)i!  r   za/s)i!  r   Úc)i!  r   u   Â°c)i!  r   )i!  r   zc/o)i!  r   zc/u)i!  r   u   É)i!  r   )i	!  r   u   Â°f)i
!  r   Úg)i!  r   r   )i!  r   u   Ä§)i!  r   r   )i!  r   r   )i!  r   )i!  r   r   )i!  r   zno)i!  r   )i!  r   r   )i!  r   Úq)i!  r   Úr)i!  r   )i !  r   zsm)i!!  r   ztel)i"!  r   ztm_seg_16_seg_8_seg_39Ûd   )iX  úV)iY  ÚX)iZ  r   )i^  r   )i`  r   )i  r   )i  r   )i  r   )i  r   )i±  r   )i²  r   )i¶  r   )i¸  r   )i¿  r   )iÀ  r   )iÁ  r   )iÂ  r   )iÆ  r   )iÈ  r   )i×  r   )iØ  r   )i  r   )i  r   )i  r   )i  r   )i[  r   )i]  r   )i}  r   )i  r   )i  r   )i   r   )iö  r   )iø  ÚMu   á°)iù  r   u   á±)iú  r   u   á²)iû  r   u   á³)iü  r   u   á´)iý  r   u   áµ)iþ  r   )i   r   )i  r   )i  r   )i  r   )i   r   )iù  r   )i   r   )i  r   )i  r   )i  r   )i   r   )i7  r   )i@  r   )iT  r   )i`  r   )im  r   )in  r   )iq  r   )ir  r   )it  r   )i  r   )i´  r   )i¶  r   )iÞ  r   )ià  r   )iê  r   )ið  r   )iú  r   )i   r   )i  r   )i  r   )i  ÚI)i  r   )i  r   )i  r   )i   r   )ix  r   )i  r   )i«  r   )i°  r   )iö  r   )i   r   )i  r   )i   r   )i,  r   )i0  r   )i<  r   )i@  r   )iA  r   )iD  r   )in  r   )ip  r   )iu  r   )i  r   )i¬  r   )i°  r   )iÊ  r   )iÐ  r   )iÛ  r   )iÞ  r   )i  r   Ûd   )i*#  ÚMu   ã)i+#  úV)i'$  ÚX)i@$  r   )iK$  r   )i`$  r   Ú1)ia$  r   ú2)ib$  r   ú3)ic$  r   ú4)id$  r   ú5)ie$  r   ú6)if$  r   ú7)ig$  r   ú8)ih$  r   ú9)ii$  r   z10)ij$  r   z11)ik$  r   z12)il$  r   z13)im$  r   z14)in$  r   z15)io$  r   z16)ip$  r   z17)iq$  r   z18)ir$  r   z19)is$  r   z20)it$  r   z(1))iu$  r   z(2))iv$  r   z(3))iw$  r   z(4))ix$  r   z(5))iy$  r   z(6))iz$  r   z(7))i{$  r   z(8))i|$  r   z(9))i}$  r   z(10))i~$  r   z(11))i$  r   z(12))i$  r   z(13))i$  r   z(14))i$  r   z(15))i$  r   z(16))i$  r   z(17))i$  r   z(18))i$  r   z(19))i$  r   z(20))i$  r   )i$  r   z(a))i$  r   z(b))i$  r   z(c))i$  r   z(d))i $  r   z(e))i¡$  r   z(f))i¢$  r   z(g))i£$  r   z(h))i¤$  r   z(i))i¥$  r   z(j))i¦$  r   z(k))i§$  r   z(l))i¨$  r   z(m))i©$  r   z(n))iª$  r   z(o))i«$  r   z(p))i¬$  r   z(q))i­$  r   z(r))i®$  r   z(s))i¯$  r   z(t))i°$  r   z(u))i±$  r   z(v))i²$  r   z(w))i³$  r   z(x))i´$  r   z(y))iµ$  r   z(z))i¶$  r   Úa)i·$  r   Úb)i¸$  r   Úc)i¹$  r   Úd)iº$  r   Úe)i»$  r   Úf)i¼$  r   Úg)i½$  r   Úh)i¾$  r   Úi)i¿$  r   Új)iÀ$  r   Úk)iÁ$  r   Úl)iÂ$  r   Úm)iÃ$  r   Ún)iÄ$  r   Úo)iÅ$  r   Úp)iÆ$  r   Úq)iÇ$  r   Úr)iÈ$  r   Ús)iÉ$  r   Út)iÊ$  r   Úu)iË$  r   Úv)iÌ$  r   Úw)iÍ$  r   Úx)iÎ$  r   Úy)iÏ$  r   Úz)iÐ$  r   r   )iÑ$  r   r   Ûd   )iäü  ÚMu   ØªÙ)iåü  r   u   Ø«Ù)iæü  r   u   Ø«Ù)içü  r   u   Ø³Ù)ièü  r   u   Ø³Ù)iéü  r   u   Ø´Ù)iêü  r   u   Ø´Ù)iëü  r   u   ÙÙ)iìü  r   u   ÙÙ)iíü  r   u   ÙÙ)iîü  r   u   ÙÙ)iïü  r   u   ÙÙ)iðü  r   u   ÙÙ)iñü  r   u   ÙÙ)iòü  r   u   ÙÙÙ)ióü  r   u   ÙÙÙ)iôü  r   u   ÙÙÙ)iõü  r   u   Ø·Ù)iöü  r   u   Ø·Ù)i÷ü  r   u   Ø¹Ù)iøü  r   u   Ø¹Ù)iùü  r   u   ØºÙ)iúü  r   u   ØºÙ)iûü  r   u   Ø³Ù)iüü  r   u   Ø³Ù)iýü  r   u   Ø´Ù)iþü  r   u   Ø´Ù)iÿü  r   u   Ø­Ù)i ý  r   u   Ø­Ù)iý  r   u   Ø¬Ù)iý  r   u   Ø¬Ù)iý  r   u   Ø®Ù)iý  r   u   Ø®Ù)iý  r   u   ØµÙ)iý  r   u   ØµÙ)iý  r   u   Ø¶Ù)iý  r   u   Ø¶Ù)i	ý  r   u   Ø´Ø¬)i
ý  r   u   Ø´Ø­)iý  r   u   Ø´Ø®)iý  r   u   Ø´Ù)iý  r   u   Ø´Ø±)iý  r   u   Ø³Ø±)iý  r   u   ØµØ±)iý  r   u   Ø¶Ø±)iý  r   u   Ø·Ù)iý  r   u   Ø·Ù)iý  r   u   Ø¹Ù)iý  r   u   Ø¹Ù)iý  r   u   ØºÙ)iý  r   u   ØºÙ)iý  r   u   Ø³Ù)iý  r   u   Ø³Ù)iý  r   u   Ø´Ù)iý  r   u   Ø´Ù)iý  r   u   Ø­Ù)iý  r   u   Ø­Ù)iý  r   u   Ø¬Ù)iý  r   u   Ø¬Ù)iý  r   u   Ø®Ù)i ý  r   u   Ø®Ù)i!ý  r   u   ØµÙ)i"ý  r   u   ØµÙ)i#ý  r   u   Ø¶Ù)i$ý  r   u   Ø¶Ù)i%ý  r   u   Ø´Ø¬)i&ý  r   u   Ø´Ø­)i'ý  r   u   Ø´Ø®)i(ý  r   u   Ø´Ù)i)ý  r   u   Ø´Ø±)i*ý  r   u   Ø³Ø±)i+ý  r   u   ØµØ±)i,ý  r   u   Ø¶Ø±)i-ý  r   u   Ø´Ø¬)i.ý  r   u   Ø´Ø­)i/ý  r   u   Ø´Ø®)i0ý  r   u   Ø´Ù)i1ý  r   u   Ø³Ù)i2ý  r   u   Ø´Ù)i3ý  r   u   Ø·Ù)i4ý  r   u   Ø³Ø¬)i5ý  r   u   Ø³Ø­)i6ý  r   u   Ø³Ø®)i7ý  r   u   Ø´Ø¬)i8ý  r   u   Ø´Ø­)i9ý  r   u   Ø´Ø®)i:ý  r   u   Ø·Ù)i;ý  r   u   Ø¸Ù)i<ý  r   u   Ø§Ù)i>ý  úV)i@ý  ÚX)iPý  r   u   ØªØ¬Ù)iQý  r   u   ØªØ­Ø¬)iSý  r   u   ØªØ­Ù)iTý  r   u   ØªØ®Ù)iUý  r   u   ØªÙØ¬)iVý  r   u   ØªÙØ­)iWý  r   u   ØªÙØ®)iXý  r   u   Ø¬ÙØ­)iZý  r   u   Ø­ÙÙÛP   )iÐù ÚMu   è«­)iÑù r   u   è®)iÒù r   u   è±)iÓù r   u   ð§²¨)iÔù r   u   è²«)iÕù r   u   è³)iÖù r   u   è´)i×ù r   u   èµ·)iØù r   u   ð§¼¯)iÙù r   u   ð  )iÚù r   u   è·)iÛù r   u   è¶¼)iÜù r   u   è·°)iÝù r   u   ð £)iÞù r   u   è»)ißù r   u   è¼¸)iàù r   u   ð¨)iáù r   u   ð¨­)iâù r   u   é)iãù r   u   é±)iäù r   u   é)iåù r   u   ð¨®)iæù r   u   é)içù r   u   é¸)ièù r   u   é)iéù r   u   é)iêù r   u   é¼)iëù r   u   é¹)iìù r   u   é)iíù r   u   ð¨¯º)iîù r   u   é)iïù r   u   ä¦)iðù r   u   é·)iñù r   u   ð¨µ·)iòù r   u   ä§¦)ióù r   u   é)iôù r   u   å¶²)iõù r   u   é£)iöù r   u   ð©)i÷ù r   u   ð©)iøù r   u   ä©®)iùù r   u   ä©¶)iúù r   u   é )iûù r   u   ð©)iüù r   u   äª²)iýù r   u   ð©)iþù r   u   é )i ú r   u   é ©)iú r   u   ð©¶)iú r   u   é£¢)iú r   u   ä¬³)iú r   u   é¤©)iú r   u   é¦§)iú r   u   é§)iú r   u   é§¾)iú r   u   ä¯)i	ú r   u   ð©¬°)i
ú r   u   é¬)iú r   u   é±)iú r   u   é³½)iú r   u   ä³)iú r   u   ä³­)iú r   u   éµ§)iú r   u   ðª)iú r   u   ä³¸)iú r   u   ðª)iú r   u   ðª)iú r   u   ðª)iú r   u   éº»)iú r   u   äµ)iú r   u   é»¹)iú r   u   é»¾)iú r   u   é¼)iú r   u   é¼)iú r   u   é¼)iú r   u   é¼»)iú r   u   ðª)iú ÚX)i  ÚI)ið r   _seg_69_seg_65Ûd   )i#/  ÚMu   å¤)i$/  r   u   å¤§)i%/  r   u   å¥³)i&/  r   u   å­)i'/  r   u   å®)i(/  r   u   å¯¸)i)/  r   u   å°)i*/  r   u   å°¢)i+/  r   u   å°¸)i,/  r   u   å±®)i-/  r   u   å±±)i./  r   u   å·)i//  r   u   å·¥)i0/  r   u   å·±)i1/  r   u   å·¾)i2/  r   u   å¹²)i3/  r   u   å¹º)i4/  r   u   å¹¿)i5/  r   u   å»´)i6/  r   u   å»¾)i7/  r   u   å¼)i8/  r   u   å¼)i9/  r   u   å½)i:/  r   u   å½¡)i;/  r   u   å½³)i</  r   u   å¿)i=/  r   u   æ)i>/  r   u   æ¶)i?/  r   u   æ)i@/  r   u   æ¯)iA/  r   u   æ´)iB/  r   u   æ)iC/  r   u   æ)iD/  r   u   æ¤)iE/  r   u   æ¹)iF/  r   u   æ )iG/  r   u   æ¥)iH/  r   u   æ°)iI/  r   u   æ)iJ/  r   u   æ¨)iK/  r   u   æ¬ )iL/  r   u   æ­¢)iM/  r   u   æ­¹)iN/  r   u   æ®³)iO/  r   u   æ¯)iP/  r   u   æ¯)iQ/  r   u   æ¯)iR/  r   u   æ°)iS/  r   u   æ°)iT/  r   u   æ°´)iU/  r   u   ç«)iV/  r   u   çª)iW/  r   u   ç¶)iX/  r   u   ç»)iY/  r   u   ç¿)iZ/  r   u   ç)i[/  r   u   ç)i\/  r   u   ç)i]/  r   u   ç¬)i^/  r   u   ç)i_/  r   u   ç)i`/  r   u   ç)ia/  r   u   ç¦)ib/  r   u   ç)ic/  r   u   ç)id/  r   u   ç¨)ie/  r   u   ç°)if/  r   u   ç)ig/  r   u   ç)ih/  r   u   ç¶)ii/  r   u   ç½)ij/  r   u   ç®)ik/  r   u   ç¿)il/  r   u   ç®)im/  r   u   ç)in/  r   u   ç¢)io/  r   u   ç³)ip/  r   u   ç¤º)iq/  r   u   ç¦¸)ir/  r   u   ç¦¾)is/  r   u   ç©´)it/  r   u   ç«)iu/  r   u   ç«¹)iv/  r   u   ç±³)iw/  r   u   ç³¸)ix/  r   u   ç¼¶)iy/  r   u   ç½)iz/  r   u   ç¾)i{/  r   u   ç¾½)i|/  r   u   è)i}/  r   u   è)i~/  r   u   è)i/  r   u   è³)i/  r   u   è¿)i/  r   u   è)i/  r   u   è£)i/  r   u   èª)i/  r   u   è³)i/  r   u   è¼)i/  r   u   è_seg_34Ûd   )iÔ ÚMÚg)iÔ r   Úh)iÔ r   Úi)i	Ô r   Új)i
Ô r   Úk)iÔ r   Úl)iÔ r   Úm)iÔ r   Ún)iÔ r   Úo)iÔ r   Úp)iÔ r   Úq)iÔ r   Úr)iÔ r   Ús)iÔ r   Út)iÔ r   Úu)iÔ r   Úv)iÔ r   Úw)iÔ r   Úx)iÔ r   Úy)iÔ r   Úz)iÔ r   Úa)iÔ r   Úb)iÔ r   Úc)iÔ r   Úd)iÔ r   Úe)iÔ r   Úf)i Ô r   r   )i!Ô r   r   )i"Ô r   r   )i#Ô r   r   )i$Ô r   r   )i%Ô r   r   )i&Ô r   r   )i'Ô r   r	   )i(Ô r   r
   )i)Ô r   r   )i*Ô r   r   )i+Ô r   r   )i,Ô r   r   )i-Ô r   r   )i.Ô r   r   )i/Ô r   r   )i0Ô r   r   )i1Ô r   r   )i2Ô r   r   )i3Ô r   r   )i4Ô r   r   )i5Ô r   r   )i6Ô r   r   )i7Ô r   r   )i8Ô r   r   )i9Ô r   r   )i:Ô r   r   )i;Ô r   r   )i<Ô r   r   )i=Ô r   r   )i>Ô r   r   )i?Ô r   r   )i@Ô r   r   )iAÔ r   r	   )iBÔ r   r
   )iCÔ r   r   )iDÔ r   r   )iEÔ r   r   )iFÔ r   r   )iGÔ r   r   )iHÔ r   r   )iIÔ r   r   )iJÔ r   r   )iKÔ r   r   )iLÔ r   r   )iMÔ r   r   )iNÔ r   r   )iOÔ r   r   )iPÔ r   r   )iQÔ r   r   )iRÔ r   r   )iSÔ r   r   )iTÔ r   r   )iUÔ ÚX)iVÔ r   r   )iWÔ r   r   )iXÔ r   r   )iYÔ r   r   )iZÔ r   r   )i[Ô r   r	   )i\Ô r   r
   )i]Ô r   r   )i^Ô r   r   )i_Ô r   r   )i`Ô r   r   )iaÔ r   r   )ibÔ r   r   )icÔ r   r   )idÔ r   r   )ieÔ r   r   )ifÔ r   r   )igÔ r   r   )ihÔ r   r   )iiÔ r   r   _seg_38_seg_13Ûd   )iî ÚMu   Ø±)iî r   u   Ø´)iî r   u   Øª)iî r   u   Ø«)iî r   u   Ø®)iî r   u   Ø°)iî r   u   Ø¶)iî r   u   Ø¸)iî r   u   Øº)iî ÚX)i¡î r   u   Ø¨)i¢î r   u   Ø¬)i£î r   u   Ø¯)i¤î r   )i¥î r   u   Ù)i¦î r   u   Ø²)i§î r   u   Ø­)i¨î r   u   Ø·)i©î r   u   Ù)iªî r   )i«î r   u   Ù)i¬î r   u   Ù)i­î r   u   Ù)i®î r   u   Ø³)i¯î r   u   Ø¹)i°î r   u   Ù)i±î r   u   Øµ)i²î r   u   Ù)i³î r   u   Ø±)i´î r   u   Ø´)iµî r   u   Øª)i¶î r   u   Ø«)i·î r   u   Ø®)i¸î r   u   Ø°)i¹î r   u   Ø¶)iºî r   u   Ø¸)i»î r   u   Øº)i¼î r   )iðî úV)iòî r   )i ð r   )i,ð r   )i0ð r   )ið r   )i ð r   )i¯ð r   )i±ð r   )iÀð r   )iÁð r   )iÐð r   )iÑð r   )iöð r   )iñ ú3z0,)iñ r   z1,)iñ r   z2,)iñ r   z3,)iñ r   z4,)iñ r   z5,)iñ r   z6,)iñ r   z7,)i	ñ r   z8,)i
ñ r   z9,)iñ r   )iñ r   )iñ r   z(a))iñ r   z(b))iñ r   z(c))iñ r   z(d))iñ r   z(e))iñ r   z(f))iñ r   z(g))iñ r   z(h))iñ r   z(i))iñ r   z(j))iñ r   z(k))iñ r   z(l))iñ r   z(m))iñ r   z(n))iñ r   z(o))iñ r   z(p))i ñ r   z(q))i!ñ r   z(r))i"ñ r   z(s))i#ñ r   z(t))i$ñ r   z(u))i%ñ r   z(v))i&ñ r   z(w))i'ñ r   z(x))i(ñ r   z(y))i)ñ r   z(z))i*ñ r   u   ãsã)i+ñ r   Úc)i,ñ r   Úr)i-ñ r   zcd)i.ñ r   zwz)i/ñ r   )i0ñ r   Úa)i1ñ r   Úb)i2ñ r   r   )i3ñ r   ÚdÛd   )i  ÚMu   á¼¥Î¹)i  r   u   á¼¦Î¹)i  r   u   á¼§Î¹)i   r   u   á½ Î¹)i¡  r   u   á½¡Î¹)i¢  r   u   á½¢Î¹)i£  r   u   á½£Î¹)i¤  r   u   á½¤Î¹)i¥  r   u   á½¥Î¹)i¦  r   u   á½¦Î¹)i§  r   u   á½§Î¹)i¨  r   u   á½ Î¹)i©  r   u   á½¡Î¹)iª  r   u   á½¢Î¹)i«  r   u   á½£Î¹)i¬  r   u   á½¤Î¹)i­  r   u   á½¥Î¹)i®  r   u   á½¦Î¹)i¯  r   u   á½§Î¹)i°  úV)i²  r   u   á½°Î¹)i³  r   u   Î±Î¹)i´  r   u   Î¬Î¹)iµ  ÚX)i¶  r   )i·  r   u   á¾¶Î¹)i¸  r   u   á¾°)i¹  r   u   á¾±)iº  r   u   á½°)i»  r   u   Î¬)i¼  r   u   Î±Î¹)i½  ú3u    Ì)i¾  r   u   Î¹)i¿  r   u    Ì)iÀ  r   u    Í)iÁ  r   u    ÌÍ)iÂ  r   u   á½´Î¹)iÃ  r   u   Î·Î¹)iÄ  r   u   Î®Î¹)iÅ  r   )iÆ  r   )iÇ  r   u   á¿Î¹)iÈ  r   u   á½²)iÉ  r   u   Î­)iÊ  r   u   á½´)iË  r   u   Î®)iÌ  r   u   Î·Î¹)iÍ  r   u    ÌÌ)iÎ  r   u    ÌÌ)iÏ  r   u    ÌÍ)iÐ  r   )iÓ  r   u   Î)iÔ  r   )iÖ  r   )iØ  r   u   á¿)iÙ  r   u   á¿)iÚ  r   u   á½¶)iÛ  r   u   Î¯)iÜ  r   )iÝ  r   u    ÌÌ)iÞ  r   u    ÌÌ)iß  r   u    ÌÍ)ià  r   )iã  r   u   Î°)iä  r   )iè  r   u   á¿ )ié  r   u   á¿¡)iê  r   u   á½º)ië  r   u   Ï)iì  r   u   á¿¥)ií  r   u    ÌÌ)iî  r   u    ÌÌ)iï  r   ú`)ið  r   )iò  r   u   á½¼Î¹)ió  r   u   ÏÎ¹)iô  r   u   ÏÎ¹)iõ  r   )iö  r   )i÷  r   u   á¿¶Î¹)iø  r   u   á½¸)iù  r   u   Ï)iú  r   u   á½¼)iû  r   u   Ï)iü  r   u   ÏÎ¹)iý  r   u    Ì)iþ  r   u    Ì)iÿ  r   )i    r   ú )i   ÚI)i   ÚDÚ )i   r   )i   r   )i   r   u   â)i   r   )i   r   u    Ì³)i   r   )i$   r   )i'   r   )i(   r   Ûd   )i4ñ ÚMÚe)i5ñ r   Úf)i6ñ r   Úg)i7ñ r   Úh)i8ñ r   Úi)i9ñ r   Új)i:ñ r   Úk)i;ñ r   Úl)i<ñ r   Úm)i=ñ r   Ún)i>ñ r   Úo)i?ñ r   Úp)i@ñ r   Úq)iAñ r   Úr)iBñ r   Ús)iCñ r   Út)iDñ r   Úu)iEñ r   Úv)iFñ r   Úw)iGñ r   Úx)iHñ r   Úy)iIñ r   Úz)iJñ r   zhv)iKñ r   zmv)iLñ r   zsd)iMñ r   zss)iNñ r   zppv)iOñ r   zwc)iPñ úV)ijñ r   zmc)ikñ r   zmd)ilñ ÚX)ipñ r   )iñ r   zdj)iñ r   )i­ñ r   )iæñ r   )i ò r   u   ã»ã)iò r   u   ã³ã³)iò r   u   ãµ)iò r   )iò r   u   æ)iò r   u   å­)iò r   u   å)iò r   u   ã)iò r   u   äº)iò r   u   å¤)iò r   u   è§£)iò r   u   å¤©)iò r   u   äº¤)iò r   u   æ )iò r   u   ç¡)iò r   u   æ)iò r   u   å)iò r   u   å¾)iò r   u   å)iò r   u   æ°)i ò r   u   å)i!ò r   u   çµ)i"ò r   u   ç)i#ò r   u   è²©)i$ò r   u   å£°)i%ò r   u   å¹)i&ò r   u   æ¼)i'ò r   u   æ)i(ò r   u   æ)i)ò r   u   ä¸)i*ò r   u   ä¸)i+ò r   u   é)i,ò r   u   å·¦)i-ò r   u   ä¸­)i.ò r   u   å³)i/ò r   u   æ)i0ò r   u   èµ°)i1ò r   u   æ)i2ò r   u   ç¦)i3ò r   u   ç©º)i4ò r   u   å)i5ò r   u   æº)i6ò r   u   æ)i7ò r   u   æ)i8ò r   u   ç³)i9ò r   u   å²)i:ò r   u   å¶)i;ò r   u   é)i<ò r   )i@ò r   u	   ãæ¬ã)iAò r   u	   ãä¸ã)iBò r   u	   ãäºã)iCò r   u	   ãå®ã)iDò r   u	   ãç¹ã)iEò r   u	   ãæã)iFò r   u	   ãçã)iGò r   u	   ãåã)iHò r   u	   ãæã)iIò r   )iPò r   u   å¾)iQò r   u   å¯)iRò r   )i`ò r   _seg_29Ûd   )ip«  ÚMu   á )iq«  r   u   á¡)ir«  r   u   á¢)is«  r   u   á£)it«  r   u   á¤)iu«  r   u   á¥)iv«  r   u   á¦)iw«  r   u   á§)ix«  r   u   á¨)iy«  r   u   á©)iz«  r   u   áª)i{«  r   u   á«)i|«  r   u   á¬)i}«  r   u   á­)i~«  r   u   á®)i«  r   u   á¯)i«  r   u   á°)i«  r   u   á±)i«  r   u   á²)i«  r   u   á³)i«  r   u   á´)i«  r   u   áµ)i«  r   u   á¶)i«  r   u   á·)i«  r   u   á¸)i«  r   u   á¹)i«  r   u   áº)i«  r   u   á»)i«  r   u   á¼)i«  r   u   á½)i«  r   u   á¾)i«  r   u   á¿)i«  r   u   á)i«  r   u   á)i«  r   u   á)i«  r   u   á)i«  r   u   á)i«  r   u   á)i«  r   u   á)i«  r   u   á)i«  r   u   á)i«  r   u   á)i«  r   u   á)i«  r   u   á)i«  r   u   á)i«  r   u   á)i«  r   u   á)i«  r   u   á)i «  r   u   á)i¡«  r   u   á)i¢«  r   u   á)i£«  r   u   á)i¤«  r   u   á)i¥«  r   u   á)i¦«  r   u   á)i§«  r   u   á)i¨«  r   u   á)i©«  r   u   á)iª«  r   u   á)i««  r   u   á)i¬«  r   u   á)i­«  r   u   á)i®«  r   u   á)i¯«  r   u   á)i°«  r   u   á )i±«  r   u   á¡)i²«  r   u   á¢)i³«  r   u   á£)i´«  r   u   á¤)iµ«  r   u   á¥)i¶«  r   u   á¦)i·«  r   u   á§)i¸«  r   u   á¨)i¹«  r   u   á©)iº«  r   u   áª)i»«  r   u   á«)i¼«  r   u   á¬)i½«  r   u   á­)i¾«  r   u   á®)i¿«  r   u   á¯)iÀ«  úV)iî«  ÚX)ið«  r   )iú«  r   )i ¬  r   )i¤×  r   )i°×  r   )iÇ×  r   )iË×  r   )iü×  r   )i ù  r   u   è±)iù  r   u   æ´)iù  r   u   è»)iù  r   u   è³)iù  r   u   æ»)iù  r   u   ä¸²)iù  r   u   å¥)iù  r   u   é¾)i	ù  r   u   å¥)i
ù  r   u   éÛd   )i Ö ÚMÚs)iÖ r   Út)iÖ r   Úu)iÖ r   Úv)iÖ r   Úw)iÖ r   Úx)iÖ r   Úy)iÖ r   Úz)iÖ r   Úa)i	Ö r   Úb)i
Ö r   Úc)iÖ r   Úd)iÖ r   Úe)iÖ r   Úf)iÖ r   Úg)iÖ r   Úh)iÖ r   Úi)iÖ r   Új)iÖ r   Úk)iÖ r   Úl)iÖ r   Úm)iÖ r   Ún)iÖ r   Úo)iÖ r   Úp)iÖ r   Úq)iÖ r   Úr)iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )iÖ r   r   )i Ö r   r   )i!Ö r   r	   )i"Ö r   r
   )i#Ö r   r   )i$Ö r   r   )i%Ö r   r   )i&Ö r   r   )i'Ö r   r   )i(Ö r   r   )i)Ö r   r   )i*Ö r   r   )i+Ö r   r   )i,Ö r   r   )i-Ö r   r   )i.Ö r   r   )i/Ö r   r   )i0Ö r   r   )i1Ö r   r   )i2Ö r   r   )i3Ö r   r   )i4Ö r   r   )i5Ö r   r   )i6Ö r   r   )i7Ö r   r   )i8Ö r   r   )i9Ö r   r   )i:Ö r   r   )i;Ö r   r	   )i<Ö r   r
   )i=Ö r   r   )i>Ö r   r   )i?Ö r   r   )i@Ö r   r   )iAÖ r   r   )iBÖ r   r   )iCÖ r   r   )iDÖ r   r   )iEÖ r   r   )iFÖ r   r   )iGÖ r   r   )iHÖ r   r   )iIÖ r   r   )iJÖ r   r   )iKÖ r   r   )iLÖ r   r   )iMÖ r   r   )iNÖ r   r   )iOÖ r   r   )iPÖ r   r   )iQÖ r   r   )iRÖ r   r   )iSÖ r   r   )iTÖ r   r   )iUÖ r   r	   )iVÖ r   r
   )iWÖ r   r   )iXÖ r   r   )iYÖ r   r   )iZÖ r   r   )i[Ö r   r   )i\Ö r   r   )i]Ö r   r   )i^Ö r   r   )i_Ö r   r   )i`Ö r   r   )iaÖ r   r   )ibÖ r   r   )icÖ r   r   Ûd   )i¦  úV)i¦  ÚMu   ê)i¦  r   )i¦  r   u   ê)i¦  r   )i¦  r   u   ê)i¦  r   )i¦  r   u   Ñ)i¦  r   u   Ñ)i¦  r   )iø¦  ÚX)i §  r   )i"§  r   u   ê£)i#§  r   )i$§  r   u   ê¥)i%§  r   )i&§  r   u   ê§)i'§  r   )i(§  r   u   ê©)i)§  r   )i*§  r   u   ê«)i+§  r   )i,§  r   u   ê­)i-§  r   )i.§  r   u   ê¯)i/§  r   )i2§  r   u   ê³)i3§  r   )i4§  r   u   êµ)i5§  r   )i6§  r   u   ê·)i7§  r   )i8§  r   u   ê¹)i9§  r   )i:§  r   u   ê»)i;§  r   )i<§  r   u   ê½)i=§  r   )i>§  r   u   ê¿)i?§  r   )i@§  r   u   ê)iA§  r   )iB§  r   u   ê)iC§  r   )iD§  r   u   ê)iE§  r   )iF§  r   u   ê)iG§  r   )iH§  r   u   ê)iI§  r   )iJ§  r   u   ê)iK§  r   )iL§  r   u   ê)iM§  r   )iN§  r   u   ê)iO§  r   )iP§  r   u   ê)iQ§  r   )iR§  r   u   ê)iS§  r   )iT§  r   u   ê)iU§  r   )iV§  r   u   ê)iW§  r   )iX§  r   u   ê)iY§  r   )iZ§  r   u   ê)i[§  r   )i\§  r   u   ê)i]§  r   )i^§  r   u   ê)i_§  r   )i`§  r   u   ê¡)ia§  r   )ib§  r   u   ê£)ic§  r   )id§  r   u   ê¥)ie§  r   )if§  r   u   ê§)ig§  r   )ih§  r   u   ê©)ii§  r   )ij§  r   u   ê«)ik§  r   )il§  r   u   ê­)im§  r   )in§  r   u   ê¯)io§  r   )ip§  r   u   ê¯)iq§  r   )iy§  r   u   êº)iz§  r   )i{§  r   u   ê¼)i|§  r   )i}§  r   u   áµ¹)i~§  r   u   ê¿)i§  r   )i§  r   u   ê)i§  r   )i§  r   u   ê_seg_0_seg_61_seg_41_seg_27_seg_30_seg_21Ûd   )i<ú  ÚMu   å±®)i=ú  r   u   æ)i>ú  r   u   æ¨)i?ú  r   u   æ)i@ú  r   u   æ²)iAú  r   u   æ)iBú  r   u   æ¢)iCú  r   u   æ)iDú  r   u   æ¢)iEú  r   u   æµ·)iFú  r   u   æ¸)iGú  r   u   æ¼¢)iHú  r   u   ç®)iIú  r   u   ç«)iJú  r   u   ç¢)iKú  r   u   ç¢)iLú  r   u   ç¤¾)iMú  r   u   ç¥)iNú  r   u   ç¥)iOú  r   u   ç¥)iPú  r   u   ç¥)iQú  r   u   ç¥)iRú  r   u   ç¦)iSú  r   u   ç¦)iTú  r   u   ç©)iUú  r   u   çª)iVú  r   u   ç¯)iWú  r   u   ç·´)iXú  r   u   ç¸)iYú  r   u   ç¹)iZú  r   u   ç½²)i[ú  r   u   è)i\ú  r   u   è­)i]ú  r   u   è¹)i_ú  r   u   è)i`ú  r   u   è¤)iaú  r   u   è¦)ibú  r   u   è¬)icú  r   u   è¬¹)idú  r   u   è³)ieú  r   u   è´)ifú  r   u   è¾¶)igú  r   u   é¸)ihú  r   u   é£)iiú  r   u   é¿)ijú  r   u   é »)ikú  r   u   æµ)ilú  r   u   ð¤®)imú  r   u   è)inú  ÚX)ipú  r   u   ä¸¦)iqú  r   u   åµ)irú  r   u   å¨)isú  r   u   ä¾)itú  r   u   å)iuú  r   u   å)ivú  r   u   å)iwú  r   u   åº)ixú  r   u   å)iyú  r   u   å)izú  r   u   å)i{ú  r   u   å¢)i|ú  r   u   å¡)i}ú  r   u   å¢³)i~ú  r   u   å¥)iú  r   u   å¥)iú  r   u   å©¢)iú  r   u   å¬¨)iú  r   u   å»)iú  r   u   å»)iú  r   u   å½©)iú  r   u   å¾­)iú  r   u   æ)iú  r   u   æ)iú  r   u   æ)iú  r   u   æ)iú  r   u   æ )iú  r   u   æ²)iú  r   u   æ´)iú  r   u   æ)iú  r   u   æ)iú  r   u   æ)iú  r   u   æ)iú  r   u   æ´)iú  r   u   æ)iú  r   u   æ)iú  r   u   æ)iú  r   u   æ­¹)iú  r   u   æ®º)iú  r   u   æµ)iú  r   u   æ»)iú  r   u   æ»)iú  r   u   æ¼¢)iú  r   u   ç)iú  r   u   ç®)iú  r   u   ç§)iú  r   u   çµ)iú  r   u   ç¯)i ú  r   u   çª)i¡ú  r   u   ç±Ûd   )i[ý  ÚMu   Ø­ÙÙ)i\ý  r   u   Ø³Ø­Ø¬)i]ý  r   u   Ø³Ø¬Ø­)i^ý  r   u   Ø³Ø¬Ù)i_ý  r   u   Ø³ÙØ­)iaý  r   u   Ø³ÙØ¬)ibý  r   u   Ø³ÙÙ)idý  r   u   ØµØ­Ø­)ifý  r   u   ØµÙÙ)igý  r   u   Ø´Ø­Ù)iiý  r   u   Ø´Ø¬Ù)ijý  r   u   Ø´ÙØ®)ilý  r   u   Ø´ÙÙ)iný  r   u   Ø¶Ø­Ù)ioý  r   u   Ø¶Ø®Ù)iqý  r   u   Ø·ÙØ­)isý  r   u   Ø·ÙÙ)itý  r   u   Ø·ÙÙ)iuý  r   u   Ø¹Ø¬Ù)ivý  r   u   Ø¹ÙÙ)ixý  r   u   Ø¹ÙÙ)iyý  r   u   ØºÙÙ)izý  r   u   ØºÙÙ)i{ý  r   u   ØºÙÙ)i|ý  r   u   ÙØ®Ù)i~ý  r   u   ÙÙØ­)iý  r   u   ÙÙÙ)iý  r   u   ÙØ­Ù)iý  r   u   ÙØ­Ù)iý  r   u   ÙØ­Ù)iý  r   u   ÙØ¬Ø¬)iý  r   u   ÙØ®Ù)iý  r   u   ÙÙØ­)iý  r   u   ÙØ­Ø¬)iý  r   u   ÙØ­Ù)iý  r   u   ÙØ­Ù)iý  r   u   ÙØ¬Ø­)iý  r   u   ÙØ¬Ù)iý  r   u   ÙØ®Ø¬)iý  r   u   ÙØ®Ù)iý  ÚX)iý  r   u   ÙØ¬Ø®)iý  r   u   ÙÙØ¬)iý  r   u   ÙÙÙ)iý  r   u   ÙØ­Ù)iý  r   u   ÙØ­Ù)iý  r   u   ÙØ¬Ù)iý  r   u   ÙØ¬Ù)iý  r   u   ÙÙÙ)iý  r   u   ÙÙÙ)iý  r   u   ÙÙÙ)iý  r   u   Ø¨Ø®Ù)iý  r   u   ØªØ¬Ù)i ý  r   u   ØªØ¬Ù)i¡ý  r   u   ØªØ®Ù)i¢ý  r   u   ØªØ®Ù)i£ý  r   u   ØªÙÙ)i¤ý  r   u   ØªÙÙ)i¥ý  r   u   Ø¬ÙÙ)i¦ý  r   u   Ø¬Ø­Ù)i§ý  r   u   Ø¬ÙÙ)i¨ý  r   u   Ø³Ø®Ù)i©ý  r   u   ØµØ­Ù)iªý  r   u   Ø´Ø­Ù)i«ý  r   u   Ø¶Ø­Ù)i¬ý  r   u   ÙØ¬Ù)i­ý  r   u   ÙÙÙ)i®ý  r   u   ÙØ­Ù)i¯ý  r   u   ÙØ¬Ù)i°ý  r   u   ÙÙÙ)i±ý  r   u   ÙÙÙ)i²ý  r   u   ÙÙÙ)i³ý  r   u   ÙØ­Ù)i´ý  r   u   ÙÙØ­)iµý  r   u   ÙØ­Ù)i¶ý  r   u   Ø¹ÙÙ)i·ý  r   u   ÙÙÙ)i¸ý  r   u   ÙØ¬Ø­)i¹ý  r   u   ÙØ®Ù)iºý  r   u   ÙØ¬Ù)i»ý  r   u   ÙÙÙ)i¼ý  r   u   ÙØ¬Ù)i½ý  r   u   ÙØ¬Ø­)i¾ý  r   u   Ø¬Ø­Ù)i¿ý  r   u   Ø­Ø¬Ù)iÀý  r   u   ÙØ¬Ù)iÁý  r   u   ÙÙÙ)iÂý  r   u   Ø¨Ø­Ù)iÃý  r   u   ÙÙÙ)iÄý  r   u   Ø¹Ø¬Ù)iÅý  r   u   ØµÙÙ)iÆý  r   u   Ø³Ø®Ù)iÇý  r   u   ÙØ¬Ù)iÈý  r   )iðý  r   u   ØµÙÛ)iñý  r   u   ÙÙÛ)iòý  r   u   Ø§ÙÙÙ)ióý  r   u   Ø§ÙØ¨Ø±)iôý  r   u   ÙØ­ÙØ¯)iõý  r   u   ØµÙØ¹ÙÛd   )i6Õ ÚMÚy)i7Õ r   Úz)i8Õ r   Úa)i9Õ r   Úb)i:Õ ÚX)i;Õ r   Úd)i<Õ r   Úe)i=Õ r   Úf)i>Õ r   Úg)i?Õ r   )i@Õ r   Úi)iAÕ r   Új)iBÕ r   Úk)iCÕ r   Úl)iDÕ r   Úm)iEÕ r   )iFÕ r   Úo)iGÕ r   )iJÕ r   Ús)iKÕ r   Út)iLÕ r   Úu)iMÕ r   Úv)iNÕ r   Úw)iOÕ r   Úx)iPÕ r   r   )iQÕ r   )iRÕ r   r   )iSÕ r   r   )iTÕ r   Úc)iUÕ r   r   )iVÕ r   r   )iWÕ r   r	   )iXÕ r   r
   )iYÕ r   Úh)iZÕ r   r   )i[Õ r   r   )i\Õ r   r   )i]Õ r   r   )i^Õ r   r   )i_Õ r   Ún)i`Õ r   r   )iaÕ r   Úp)ibÕ r   Úq)icÕ r   Úr)idÕ r   r   )ieÕ r   r   )ifÕ r   r   )igÕ r   r   )ihÕ r   r   )iiÕ r   r   )ijÕ r   r   )ikÕ r   r   )ilÕ r   r   )imÕ r   r   )inÕ r   r   )ioÕ r   r   )ipÕ r   r   )iqÕ r   r	   )irÕ r   r
   )isÕ r   r   )itÕ r   r   )iuÕ r   r   )ivÕ r   r   )iwÕ r   r   )ixÕ r   r   )iyÕ r   r   )izÕ r   r   )i{Õ r   r   )i|Õ r   r   )i}Õ r   r   )i~Õ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r	   )iÕ r   r
   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   )iÕ r   r   _seg_15_seg_42_seg_18Ûd   )i  úV)i  ÚMu   È)i  r   )i  r   u   È)i  r   )i  r   u   È)i  r   )i  r   u   È)i  r   )i  r   u   È)i  r   )i  r   u   È)i  r   )i  r   u   È)i  r   )i  r   u   È)i  r   )i  r   u   È)i  r   )i   r   u   Æ)i!  r   )i"  r   u   È£)i#  r   )i$  r   u   È¥)i%  r   )i&  r   u   È§)i'  r   )i(  r   u   È©)i)  r   )i*  r   u   È«)i+  r   )i,  r   u   È­)i-  r   )i.  r   u   È¯)i/  r   )i0  r   u   È±)i1  r   )i2  r   u   È³)i3  r   )i:  r   u   â±¥)i;  r   u   È¼)i<  r   )i=  r   u   Æ)i>  r   u   â±¦)i?  r   )iA  r   u   É)iB  r   )iC  r   u   Æ)iD  r   u   Ê)iE  r   u   Ê)iF  r   u   É)iG  r   )iH  r   u   É)iI  r   )iJ  r   u   É)iK  r   )iL  r   u   É)iM  r   )iN  r   u   É)iO  r   )i°  r   Úh)i±  r   u   É¦)i²  r   Új)i³  r   Úr)i´  r   u   É¹)iµ  r   u   É»)i¶  r   u   Ê)i·  r   Úw)i¸  r   Úy)i¹  r   )iØ  ú3u    Ì)iÙ  r   u    Ì)iÚ  r   u    Ì)iÛ  r   u    Ì¨)iÜ  r   u    Ì)iÝ  r   u    Ì)iÞ  r   )ià  r   u   É£)iá  r   Úl)iâ  r   Ús)iã  r   Úx)iä  r   u   Ê)iå  r   )i@  r   u   Ì)iA  r   u   Ì)iB  r   )iC  r   u   Ì)iD  r   u   ÌÌ)iE  r   u   Î¹)iF  r   )iO  ÚI)iP  r   )ip  r   u   Í±)iq  r   )ir  r   u   Í³)is  r   )it  r   u   Ê¹)iu  r   )iv  r   u   Í·)iw  r   Ûd   )i  úV)i  ÚX)i  r   )i  r   )i  r   )i  r   )i  r   )i  r   )i  r   )i   r   )i¡  r   )i¤  r   )i¥  r   )i¦  r   )i§  r   )i¨  r   )iª  r   )i¬  r   )i­  r   )i³  ÚMu   à»àº²)i´  r   )iº  r   )i»  r   )i¾  r   )iÀ  r   )iÅ  r   )iÆ  r   )iÇ  r   )iÈ  r   )iÎ  r   )iÐ  r   )iÚ  r   )iÜ  r   u   àº«àº)iÝ  r   u   àº«àº¡)iÞ  r   )ià  r   )i   r   )i  r   u   à¼)i  r   )iC  r   u   à½à¾·)iD  r   )iH  r   )iI  r   )iM  r   u   à½à¾·)iN  r   )iR  r   u   à½à¾·)iS  r   )iW  r   u   à½à¾·)iX  r   )i\  r   u   à½à¾·)i]  r   )ii  r   u   à½à¾µ)ij  r   )im  r   )iq  r   )is  r   u   à½±à½²)it  r   )iu  r   u   à½±à½´)iv  r   u   à¾²à¾)iw  r   u	   à¾²à½±à¾)ix  r   u   à¾³à¾)iy  r   u	   à¾³à½±à¾)iz  r   )i  r   u   à½±à¾)i  r   )i  r   u   à¾à¾·)i  r   )i  r   )i  r   )i  r   u   à¾à¾·)i  r   )i¢  r   u   à¾¡à¾·)i£  r   )i§  r   u   à¾¦à¾·)i¨  r   )i¬  r   u   à¾«à¾·)i­  r   )i¹  r   u   à¾à¾µ)iº  r   )i½  r   )i¾  r   )iÍ  r   )iÎ  r   )iÛ  r   )i   r   )i   r   )iÇ  r   u   â´§)iÈ  r   )iÍ  r   u   â´­)iÎ  r   )iÐ  r   )iü  r   u   á)iý  r   )i_  r   )ia  r   )iI  r   )iJ  r   )iN  r   )iP  r   )iW  r   Ûd   )i  úV)i  ÚMu   Ô)i  r   )i  r   u   Ô)i  r   )i  r   u   Ô)i	  r   )i
  r   u   Ô)i  r   )i  r   u   Ô)i  r   )i  r   u   Ô)i  r   )i  r   u   Ô)i  r   )i  r   u   Ô)i  r   )i  r   u   Ô)i  r   )i  r   u   Ô)i  r   )i  r   u   Ô)i  r   )i  r   u   Ô)i  r   )i  r   u   Ô)i  r   )i  r   u   Ô)i  r   )i   r   u   Ô¡)i!  r   )i"  r   u   Ô£)i#  r   )i$  r   u   Ô¥)i%  r   )i&  r   u   Ô§)i'  r   )i(  r   u   Ô©)i)  r   )i*  r   u   Ô«)i+  r   )i,  r   u   Ô­)i-  r   )i.  r   u   Ô¯)i/  r   )i0  ÚX)i1  r   u   Õ¡)i2  r   u   Õ¢)i3  r   u   Õ£)i4  r   u   Õ¤)i5  r   u   Õ¥)i6  r   u   Õ¦)i7  r   u   Õ§)i8  r   u   Õ¨)i9  r   u   Õ©)i:  r   u   Õª)i;  r   u   Õ«)i<  r   u   Õ¬)i=  r   u   Õ­)i>  r   u   Õ®)i?  r   u   Õ¯)i@  r   u   Õ°)iA  r   u   Õ±)iB  r   u   Õ²)iC  r   u   Õ³)iD  r   u   Õ´)iE  r   u   Õµ)iF  r   u   Õ¶)iG  r   u   Õ·)iH  r   u   Õ¸)iI  r   u   Õ¹)iJ  r   u   Õº)iK  r   u   Õ»)iL  r   u   Õ¼)iM  r   u   Õ½)iN  r   u   Õ¾)iO  r   u   Õ¿)iP  r   u   Ö)iQ  r   u   Ö)iR  r   u   Ö)iS  r   u   Ö)iT  r   u   Ö)iU  r   u   Ö)iV  r   u   Ö)iW  r   )iY  r   )i`  r   )ia  r   )i  r   u   Õ¥Ö)i  r   )i  r   )i  r   )i  r   )i  r   )i  r   )iÈ  r   )iÐ  r   )ië  r   )ið  r   )iõ  r   _seg_67_seg_50_seg_36_seg_23Ûd   )iÐ,  ÚMu   â³)iÑ,  úV)iÒ,  r   u   â³)iÓ,  r   )iÔ,  r   u   â³)iÕ,  r   )iÖ,  r   u   â³)i×,  r   )iØ,  r   u   â³)iÙ,  r   )iÚ,  r   u   â³)iÛ,  r   )iÜ,  r   u   â³)iÝ,  r   )iÞ,  r   u   â³)iß,  r   )ià,  r   u   â³¡)iá,  r   )iâ,  r   u   â³£)iã,  r   )ië,  r   u   â³¬)iì,  r   )ií,  r   u   â³®)iî,  r   )iò,  r   u   â³³)ió,  r   )iô,  ÚX)iù,  r   )i&-  r   )i'-  r   )i(-  r   )i--  r   )i.-  r   )i0-  r   )ih-  r   )io-  r   u   âµ¡)ip-  r   )iq-  r   )i-  r   )i-  r   )i -  r   )i§-  r   )i¨-  r   )i¯-  r   )i°-  r   )i·-  r   )i¸-  r   )i¿-  r   )iÀ-  r   )iÇ-  r   )iÈ-  r   )iÏ-  r   )iÐ-  r   )i×-  r   )iØ-  r   )iß-  r   )ià-  r   )iJ.  r   )i.  r   )i.  r   )i.  r   )i.  r   u   æ¯)i .  r   )ió.  r   u   é¾)iô.  r   )i /  r   u   ä¸)i/  r   u   ä¸¨)i/  r   u   ä¸¶)i/  r   u   ä¸¿)i/  r   u   ä¹)i/  r   u   äº)i/  r   u   äº)i/  r   u   äº )i/  r   u   äºº)i	/  r   u   å¿)i
/  r   u   å¥)i/  r   u   å«)i/  r   u   å)i/  r   u   å)i/  r   u   å«)i/  r   u   å )i/  r   u   åµ)i/  r   u   å)i/  r   u   å)i/  r   u   å¹)i/  r   u   å)i/  r   u   å)i/  r   u   å¸)i/  r   u   å)i/  r   u   å)i/  r   u   å©)i/  r   u   å)i/  r   u   å¶)i/  r   u   å)i/  r   u   å£)i/  r   u   å)i/  r   u   å)i /  r   u   å£«)i!/  r   u   å¤)i"/  r   u   å¤Ûd   )i/× ÚMu   Ï)i0× r   u   Ï)i1× r   u   Ï)i2× r   u   Ï)i3× r   u   Ï)i4× r   u   Ï)i5× r   u   â)i6× r   u   Î±)i7× r   u   Î²)i8× r   u   Î³)i9× r   u   Î´)i:× r   u   Îµ)i;× r   u   Î¶)i<× r   u   Î·)i=× r   u   Î¸)i>× r   u   Î¹)i?× r   u   Îº)i@× r   u   Î»)iA× r   u   Î¼)iB× r   u   Î½)iC× r   u   Î¾)iD× r   u   Î¿)iE× r   u   Ï)iF× r   u   Ï)iG× r   u   Ï)iI× r   u   Ï)iJ× r   u   Ï)iK× r   u   Ï)iL× r   u   Ï)iM× r   u   Ï)iN× r   u   Ï)iO× r   u   â)iP× r   u   Îµ)iQ× r   u   Î¸)iR× r   u   Îº)iS× r   u   Ï)iT× r   u   Ï)iU× r   u   Ï)iV× r   u   Î±)iW× r   u   Î²)iX× r   u   Î³)iY× r   u   Î´)iZ× r   u   Îµ)i[× r   u   Î¶)i\× r   u   Î·)i]× r   u   Î¸)i^× r   u   Î¹)i_× r   u   Îº)i`× r   u   Î»)ia× r   u   Î¼)ib× r   u   Î½)ic× r   u   Î¾)id× r   u   Î¿)ie× r   u   Ï)if× r   u   Ï)ig× r   u   Î¸)ih× r   u   Ï)ii× r   u   Ï)ij× r   u   Ï)ik× r   u   Ï)il× r   u   Ï)im× r   u   Ï)in× r   u   Ï)io× r   u   â)ip× r   u   Î±)iq× r   u   Î²)ir× r   u   Î³)is× r   u   Î´)it× r   u   Îµ)iu× r   u   Î¶)iv× r   u   Î·)iw× r   u   Î¸)ix× r   u   Î¹)iy× r   u   Îº)iz× r   u   Î»)i{× r   u   Î¼)i|× r   u   Î½)i}× r   u   Î¾)i~× r   u   Î¿)i× r   u   Ï)i× r   u   Ï)i× r   u   Ï)i× r   u   Ï)i× r   u   Ï)i× r   u   Ï)i× r   u   Ï)i× r   u   Ï)i× r   u   Ï)i× r   u   â)i× r   u   Îµ)i× r   u   Î¸)i× r   u   Îº)i× r   u   Ï)i× r   u   Ï)i× r   u   Ï)i× r   u   Î±)i× r   u   Î²)i× r   u   Î³)i× r   u   Î´)i× r   u   Îµ_seg_63Ûd   )iù  ÚMu   å)iù  r   u   å¥)iù  r   u   æ¶)iù  r   u   ç©)iù  r   u   ç¾)iù  r   u   è¿)iù  r   u   èº)iù  r   u   è£¸)iù  r   u   é)iù  r   u   æ¨)iù  r   u   æ´)iù  r   u   ç)iù  r   u   ç)iù  r   u   è½)iù  r   u   éª)iù  r   u   é§±)iù  r   u   äº)iù  r   u   åµ)iù  r   u   æ¬)iù  r   u   ç)iù  r   u   è­)i ù  r   u   é¸)i!ù  r   u   åµ)i"ù  r   u   æ¿«)i#ù  r   u   è)i$ù  r   u   è¥¤)i%ù  r   u   æ)i&ù  r   u   è)i'ù  r   u   è )i(ù  r   u   å»)i)ù  r   u   æ)i*ù  r   u   æµª)i+ù  r   u   ç¼)i,ù  r   u   é)i-ù  r   u   ä¾)i.ù  r   u   å·)i/ù  r   u   å)i0ù  r   u   æ)i1ù  r   u   æ«)i2ù  r   u   ç)i3ù  r   u   ç§)i4ù  r   u   è)i5ù  r   u   è)i6ù  r   u   è)i7ù  r   u   è·¯)i8ù  r   u   é²)i9ù  r   u   é­¯)i:ù  r   u   é·º)i;ù  r   u   ç¢)i<ù  r   u   ç¥¿)i=ù  r   u   ç¶ )i>ù  r   u   è)i?ù  r   u   é)i@ù  r   u   é¹¿)iAù  r   u   è«)iBù  r   u   å£)iCù  r   u   å¼)iDù  r   u   ç± )iEù  r   u   è¾)iFù  r   u   ç¢)iGù  r   u   ç£)iHù  r   u   è³)iIù  r   u   é·)iJù  r   u   å£)iKù  r   u   å±¢)iLù  r   u   æ¨)iMù  r   u   æ·)iNù  r   u   æ¼)iOù  r   u   ç´¯)iPù  r   u   ç¸·)iQù  r   u   é)iRù  r   u   å)iSù  r   u   è)iTù  r   u   å)iUù  r   u   å)iVù  r   u   ç¨)iWù  r   u   ç¶¾)iXù  r   u   è±)iYù  r   u   éµ)iZù  r   u   è®)i[ù  r   u   æ)i\ù  r   u   æ¨)i]ù  r   u   è«¾)i^ù  r   u   ä¸¹)i_ù  r   u   å¯§)i`ù  r   u   æ)iaù  r   u   ç)ibù  r   u   ç°)icù  r   u   å)idù  r   u   ç£»)ieù  r   u   ä¾¿)ifù  r   u   å¾©)igù  r   u   ä¸)ihù  r   u   æ³)iiù  r   u   æ¸)ijù  r   u   ç´¢)ikù  r   u   å)ilù  r   u   å¡)imù  r   u   ç)inù  r   u   è_seg_47
        >>> ascii('Hello')
        'Hello'
        >>> ascii(u'Hello')
        'Hello'
        >>> ascii(u'\N{TRADE MARK SIGN}') #doctest: +IGNORE_EXCEPTION_DETAIL
        Traceback (most recent call last):
            ...
        UnicodeEncodeError: ...
        country_timezonescountry_namesall_timezonesall_timezones_setcommon_timezonescommon_timezones_setUTC

    Optimized UTC implementation. It unpickles using the single module global
    instance defined beneath this class declaration.
    zone.tabÛO  zAfrica/AbidjanzAfrica/AccrazAfrica/Addis_AbabazAfrica/AlgierszAfrica/AsmarazAfrica/AsmerazAfrica/BamakozAfrica/BanguizAfrica/BanjulzAfrica/BissauzAfrica/BlantyrezAfrica/BrazzavillezAfrica/BujumburazAfrica/CairozAfrica/CasablancazAfrica/CeutazAfrica/ConakryzAfrica/DakarzAfrica/Dar_es_SalaamzAfrica/DjiboutizAfrica/DoualazAfrica/El_AaiunzAfrica/FreetownzAfrica/GaboronezAfrica/HararezAfrica/JohannesburgzAfrica/JubazAfrica/KampalazAfrica/KhartoumzAfrica/KigalizAfrica/KinshasazAfrica/LagoszAfrica/LibrevillezAfrica/LomezAfrica/LuandazAfrica/LubumbashizAfrica/LusakazAfrica/MalabozAfrica/MaputozAfrica/MaseruzAfrica/MbabanezAfrica/MogadishuzAfrica/MonroviazAfrica/NairobizAfrica/NdjamenazAfrica/NiameyzAfrica/NouakchottzAfrica/OuagadougouzAfrica/Porto-NovozAfrica/Sao_TomezAfrica/TimbuktuzAfrica/TripolizAfrica/TuniszAfrica/WindhoekzAmerica/AdakzAmerica/AnchoragezAmerica/AnguillazAmerica/AntiguazAmerica/AraguainazAmerica/Argentina/Buenos_AireszAmerica/Argentina/Catamarcaz America/Argentina/ComodRivadaviazAmerica/Argentina/CordobazAmerica/Argentina/JujuyzAmerica/Argentina/La_RiojazAmerica/Argentina/MendozazAmerica/Argentina/Rio_GallegoszAmerica/Argentina/SaltazAmerica/Argentina/San_JuanzAmerica/Argentina/San_LuiszAmerica/Argentina/TucumanzAmerica/Argentina/UshuaiazAmerica/ArubazAmerica/AsuncionzAmerica/AtikokanzAmerica/AtkazAmerica/BahiazAmerica/Bahia_BanderaszAmerica/BarbadoszAmerica/BelemzAmerica/BelizezAmerica/Blanc-SablonzAmerica/Boa_VistazAmerica/BogotazAmerica/BoisezAmerica/Buenos_AireszAmerica/Cambridge_BayzAmerica/Campo_GrandezAmerica/CancunzAmerica/CaracaszAmerica/CatamarcazAmerica/CayennezAmerica/CaymanzAmerica/ChicagozAmerica/ChihuahuazAmerica/Coral_HarbourzAmerica/CordobazAmerica/Costa_RicazAmerica/CrestonzAmerica/CuiabazAmerica/CuracaozAmerica/DanmarkshavnzAmerica/DawsonzAmerica/Dawson_CreekzAmerica/DenverzAmerica/DetroitzAmerica/DominicazAmerica/EdmontonzAmerica/EirunepezAmerica/El_SalvadorzAmerica/EnsenadazAmerica/Fort_NelsonzAmerica/Fort_WaynezAmerica/FortalezazAmerica/Glace_BayzAmerica/GodthabzAmerica/Goose_BayzAmerica/Grand_TurkzAmerica/GrenadazAmerica/GuadeloupezAmerica/GuatemalazAmerica/GuayaquilzAmerica/GuyanazAmerica/HalifaxzAmerica/HavanazAmerica/HermosillozAmerica/Indiana/IndianapoliszAmerica/Indiana/KnoxzAmerica/Indiana/MarengozAmerica/Indiana/PetersburgzAmerica/Indiana/Tell_CityzAmerica/Indiana/VevayzAmerica/Indiana/VincenneszAmerica/Indiana/WinamaczAmerica/IndianapoliszAmerica/InuvikzAmerica/IqaluitzAmerica/JamaicazAmerica/JujuyzAmerica/JuneauzAmerica/Kentucky/LouisvillezAmerica/Kentucky/MonticellozAmerica/Knox_INzAmerica/KralendijkzAmerica/La_PazzAmerica/LimazAmerica/Los_AngeleszAmerica/LouisvillezAmerica/Lower_PrinceszAmerica/MaceiozAmerica/ManaguazAmerica/ManauszAmerica/MarigotzAmerica/MartiniquezAmerica/MatamoroszAmerica/MazatlanzAmerica/MendozazAmerica/MenomineezAmerica/MeridazAmerica/MetlakatlazAmerica/Mexico_CityzAmerica/MiquelonzAmerica/MonctonzAmerica/MonterreyzAmerica/MontevideozAmerica/MontrealzAmerica/MontserratzAmerica/NassauzAmerica/New_YorkzAmerica/NipigonzAmerica/NomezAmerica/NoronhazAmerica/North_Dakota/BeulahzAmerica/North_Dakota/CenterzAmerica/North_Dakota/New_SalemzAmerica/OjinagazAmerica/PanamazAmerica/PangnirtungzAmerica/ParamaribozAmerica/PhoenixzAmerica/Port-au-PrincezAmerica/Port_of_SpainzAmerica/Porto_AcrezAmerica/Porto_VelhozAmerica/Puerto_RicozAmerica/Punta_ArenaszAmerica/Rainy_RiverzAmerica/Rankin_InletzAmerica/RecifezAmerica/ReginazAmerica/ResolutezAmerica/Rio_BrancozAmerica/RosariozAmerica/Santa_IsabelzAmerica/SantaremzAmerica/SantiagozAmerica/Santo_DomingozAmerica/Sao_PaulozAmerica/ScoresbysundzAmerica/ShiprockzAmerica/SitkazAmerica/St_BarthelemyzAmerica/St_JohnszAmerica/St_KittszAmerica/St_LuciazAmerica/St_ThomaszAmerica/St_VincentzAmerica/Swift_CurrentzAmerica/TegucigalpazAmerica/ThulezAmerica/Thunder_BayzAmerica/TijuanazAmerica/TorontozAmerica/TortolazAmerica/VancouverzAmerica/VirginzAmerica/WhitehorsezAmerica/WinnipegzAmerica/YakutatzAmerica/YellowknifezAntarctica/CaseyzAntarctica/DaviszAntarctica/DumontDUrvillezAntarctica/MacquariezAntarctica/MawsonzAntarctica/McMurdozAntarctica/PalmerzAntarctica/RotherazAntarctica/South_PolezAntarctica/SyowazAntarctica/TrollzAntarctica/VostokzArctic/Longyearbyenz	Asia/AdenzAsia/Almatyz
Asia/AmmanzAsia/Anadyrz
Asia/AqtauzAsia/AqtobezAsia/AshgabatzAsia/AshkhabadzAsia/AtyrauzAsia/BaghdadzAsia/Bahrainz	Asia/BakuzAsia/BangkokzAsia/BarnaulzAsia/BeirutzAsia/BishkekzAsia/BruneizAsia/Calcuttaz
Asia/ChitazAsia/ChoibalsanzAsia/ChongqingzAsia/ChungkingzAsia/Colomboz
Asia/DaccazAsia/Damascusz
Asia/Dhakaz	Asia/Diliz
Asia/DubaizAsia/DushanbezAsia/Famagustaz	Asia/GazazAsia/HarbinzAsia/HebronzAsia/Ho_Chi_MinhzAsia/Hong_Kongz	Asia/HovdzAsia/IrkutskzAsia/IstanbulzAsia/JakartazAsia/JayapurazAsia/Jerusalemz
Asia/KabulzAsia/KamchatkazAsia/KarachizAsia/KashgarzAsia/KathmanduzAsia/KatmanduzAsia/KhandygazAsia/KolkatazAsia/KrasnoyarskzAsia/Kuala_LumpurzAsia/KuchingzAsia/Kuwaitz
Asia/Macaoz
Asia/MacauzAsia/MagadanzAsia/MakassarzAsia/ManilazAsia/MuscatzAsia/NicosiazAsia/NovokuznetskzAsia/Novosibirskz	Asia/Omskz	Asia/OralzAsia/Phnom_PenhzAsia/PontianakzAsia/Pyongyangz
Asia/QatarzAsia/QyzylordazAsia/RangoonzAsia/RiyadhzAsia/SaigonzAsia/SakhalinzAsia/Samarkandz
Asia/SeoulzAsia/ShanghaizAsia/SingaporezAsia/SrednekolymskzAsia/TaipeizAsia/TashkentzAsia/TbilisizAsia/TehranzAsia/Tel_AvivzAsia/ThimbuzAsia/Thimphuz
Asia/Tokyoz
Asia/TomskzAsia/Ujung_PandangzAsia/UlaanbaatarzAsia/Ulan_BatorzAsia/UrumqizAsia/Ust-NerazAsia/VientianezAsia/VladivostokzAsia/YakutskzAsia/YangonzAsia/YekaterinburgzAsia/YerevanzAtlantic/AzoreszAtlantic/BermudazAtlantic/CanaryzAtlantic/Cape_VerdezAtlantic/FaeroezAtlantic/FaroezAtlantic/Jan_MayenzAtlantic/MadeirazAtlantic/ReykjavikzAtlantic/South_GeorgiazAtlantic/St_HelenazAtlantic/StanleyzAustralia/ACTzAustralia/AdelaidezAustralia/BrisbanezAustralia/Broken_HillzAustralia/CanberrazAustralia/CurriezAustralia/DarwinzAustralia/EuclazAustralia/HobartzAustralia/LHIzAustralia/LindemanzAustralia/Lord_HowezAustralia/MelbournezAustralia/NSWzAustralia/NorthzAustralia/PerthzAustralia/QueenslandzAustralia/SouthzAustralia/SydneyzAustralia/TasmaniazAustralia/VictoriazAustralia/WestzAustralia/YancowinnazBrazil/AcrezBrazil/DeNoronhazBrazil/EastzBrazil/WestzCETzCST6CDTzCanada/AtlanticzCanada/CentralzCanada/EasternzCanada/MountainzCanada/NewfoundlandzCanada/PacificzCanada/SaskatchewanzCanada/YukonzChile/ContinentalzChile/EasterIslandzCubazEETzESTzEST5EDTzEgyptzEirezEtc/GMTz	Etc/GMT+0z	Etc/GMT+1z
Etc/GMT+10z
Etc/GMT+11z
Etc/GMT+12z	Etc/GMT+2z	Etc/GMT+3z	Etc/GMT+4z	Etc/GMT+5z	Etc/GMT+6z	Etc/GMT+7z	Etc/GMT+8z	Etc/GMT+9z	Etc/GMT-0z	Etc/GMT-1z
Etc/GMT-10z
Etc/GMT-11z
Etc/GMT-12z
Etc/GMT-13z
Etc/GMT-14z	Etc/GMT-2z	Etc/GMT-3z	Etc/GMT-4z	Etc/GMT-5z	Etc/GMT-6z	Etc/GMT-7z	Etc/GMT-8z	Etc/GMT-9zEtc/GMT0zEtc/GreenwichzEtc/UCTzEtc/UTCzEtc/UniversalzEtc/ZuluzEurope/AmsterdamzEurope/AndorrazEurope/AstrakhanzEurope/AthenszEurope/BelfastzEurope/BelgradezEurope/BerlinzEurope/BratislavazEurope/BrusselszEurope/BucharestzEurope/BudapestzEurope/BusingenzEurope/ChisinauzEurope/CopenhagenzEurope/DublinzEurope/GibraltarzEurope/GuernseyzEurope/HelsinkizEurope/Isle_of_ManzEurope/IstanbulzEurope/JerseyzEurope/KaliningradzEurope/KievzEurope/KirovzEurope/LisbonzEurope/LjubljanazEurope/LondonzEurope/LuxembourgzEurope/MadridzEurope/MaltazEurope/MariehamnzEurope/MinskzEurope/MonacozEurope/MoscowzEurope/NicosiazEurope/OslozEurope/PariszEurope/PodgoricazEurope/PraguezEurope/RigazEurope/RomezEurope/SamarazEurope/San_MarinozEurope/SarajevozEurope/SaratovzEurope/SimferopolzEurope/SkopjezEurope/SofiazEurope/StockholmzEurope/TallinnzEurope/TiranezEurope/TiraspolzEurope/UlyanovskzEurope/UzhgorodzEurope/VaduzzEurope/VaticanzEurope/ViennazEurope/VilniuszEurope/VolgogradzEurope/WarsawzEurope/ZagrebzEurope/ZaporozhyezEurope/ZurichzGBzGB-EirezGMTzGMT+0zGMT-0zGMT0z	GreenwichzHSTzHongkongzIcelandzIndian/AntananarivozIndian/ChagoszIndian/ChristmaszIndian/CocoszIndian/ComorozIndian/KerguelenzIndian/MahezIndian/MaldiveszIndian/MauritiuszIndian/MayottezIndian/ReunionzIranzIsraelzJamaicazJapanz	KwajaleinzLibyazMETzMSTzMST7MDTzMexico/BajaNortezMexico/BajaSurzMexico/GeneralzNZzNZ-CHATzNavajozPRCzPST8PDTzPacific/ApiazPacific/AucklandzPacific/BougainvillezPacific/ChathamzPacific/ChuukzPacific/EasterzPacific/EfatezPacific/EnderburyzPacific/FakaofozPacific/FijizPacific/FunafutizPacific/GalapagoszPacific/GambierzPacific/GuadalcanalzPacific/GuamzPacific/HonoluluzPacific/JohnstonzPacific/KiritimatizPacific/KosraezPacific/KwajaleinzPacific/MajurozPacific/MarquesaszPacific/MidwayzPacific/NauruzPacific/NiuezPacific/NorfolkzPacific/NoumeazPacific/Pago_PagozPacific/PalauzPacific/PitcairnzPacific/PohnpeizPacific/PonapezPacific/Port_MoresbyzPacific/RarotongazPacific/SaipanzPacific/SamoazPacific/TahitizPacific/TarawazPacific/TongatapuzPacific/TrukzPacific/WakezPacific/WalliszPacific/YapzPolandzPortugalzROCzROKz	SingaporezTurkeyzUCTz	US/AlaskazUS/Aleutianz
US/Arizonaz
US/CentralzUS/East-Indianaz
US/Easternz	US/HawaiizUS/Indiana-StarkezUS/MichiganzUS/Mountainz
US/PacificzUS/SamoazUTCz	UniversalzW-SUzWETzZuluname_parts_plus_Û·  zAfrica/AbidjanzAfrica/AccrazAfrica/Addis_AbabazAfrica/AlgierszAfrica/AsmarazAfrica/BamakozAfrica/BanguizAfrica/BanjulzAfrica/BissauzAfrica/BlantyrezAfrica/BrazzavillezAfrica/BujumburazAfrica/CairozAfrica/CasablancazAfrica/CeutazAfrica/ConakryzAfrica/DakarzAfrica/Dar_es_SalaamzAfrica/DjiboutizAfrica/DoualazAfrica/El_AaiunzAfrica/FreetownzAfrica/GaboronezAfrica/HararezAfrica/JohannesburgzAfrica/JubazAfrica/KampalazAfrica/KhartoumzAfrica/KigalizAfrica/KinshasazAfrica/LagoszAfrica/LibrevillezAfrica/LomezAfrica/LuandazAfrica/LubumbashizAfrica/LusakazAfrica/MalabozAfrica/MaputozAfrica/MaseruzAfrica/MbabanezAfrica/MogadishuzAfrica/MonroviazAfrica/NairobizAfrica/NdjamenazAfrica/NiameyzAfrica/NouakchottzAfrica/OuagadougouzAfrica/Porto-NovozAfrica/Sao_TomezAfrica/TripolizAfrica/TuniszAfrica/WindhoekzAmerica/AdakzAmerica/AnchoragezAmerica/AnguillazAmerica/AntiguazAmerica/AraguainazAmerica/Argentina/Buenos_AireszAmerica/Argentina/CatamarcazAmerica/Argentina/CordobazAmerica/Argentina/JujuyzAmerica/Argentina/La_RiojazAmerica/Argentina/MendozazAmerica/Argentina/Rio_GallegoszAmerica/Argentina/SaltazAmerica/Argentina/San_JuanzAmerica/Argentina/San_LuiszAmerica/Argentina/TucumanzAmerica/Argentina/UshuaiazAmerica/ArubazAmerica/AsuncionzAmerica/AtikokanzAmerica/BahiazAmerica/Bahia_BanderaszAmerica/BarbadoszAmerica/BelemzAmerica/BelizezAmerica/Blanc-SablonzAmerica/Boa_VistazAmerica/BogotazAmerica/BoisezAmerica/Cambridge_BayzAmerica/Campo_GrandezAmerica/CancunzAmerica/CaracaszAmerica/CayennezAmerica/CaymanzAmerica/ChicagozAmerica/ChihuahuazAmerica/Costa_RicazAmerica/CrestonzAmerica/CuiabazAmerica/CuracaozAmerica/DanmarkshavnzAmerica/DawsonzAmerica/Dawson_CreekzAmerica/DenverzAmerica/DetroitzAmerica/DominicazAmerica/EdmontonzAmerica/EirunepezAmerica/El_SalvadorzAmerica/Fort_NelsonzAmerica/FortalezazAmerica/Glace_BayzAmerica/GodthabzAmerica/Goose_BayzAmerica/Grand_TurkzAmerica/GrenadazAmerica/GuadeloupezAmerica/GuatemalazAmerica/GuayaquilzAmerica/GuyanazAmerica/HalifaxzAmerica/HavanazAmerica/HermosillozAmerica/Indiana/IndianapoliszAmerica/Indiana/KnoxzAmerica/Indiana/MarengozAmerica/Indiana/PetersburgzAmerica/Indiana/Tell_CityzAmerica/Indiana/VevayzAmerica/Indiana/VincenneszAmerica/Indiana/WinamaczAmerica/InuvikzAmerica/IqaluitzAmerica/JamaicazAmerica/JuneauzAmerica/Kentucky/LouisvillezAmerica/Kentucky/MonticellozAmerica/KralendijkzAmerica/La_PazzAmerica/LimazAmerica/Los_AngeleszAmerica/Lower_PrinceszAmerica/MaceiozAmerica/ManaguazAmerica/ManauszAmerica/MarigotzAmerica/MartiniquezAmerica/MatamoroszAmerica/MazatlanzAmerica/MenomineezAmerica/MeridazAmerica/MetlakatlazAmerica/Mexico_CityzAmerica/MiquelonzAmerica/MonctonzAmerica/MonterreyzAmerica/MontevideozAmerica/MontserratzAmerica/NassauzAmerica/New_YorkzAmerica/NipigonzAmerica/NomezAmerica/NoronhazAmerica/North_Dakota/BeulahzAmerica/North_Dakota/CenterzAmerica/North_Dakota/New_SalemzAmerica/OjinagazAmerica/PanamazAmerica/PangnirtungzAmerica/ParamaribozAmerica/PhoenixzAmerica/Port-au-PrincezAmerica/Port_of_SpainzAmerica/Porto_VelhozAmerica/Puerto_RicozAmerica/Punta_ArenaszAmerica/Rainy_RiverzAmerica/Rankin_InletzAmerica/RecifezAmerica/ReginazAmerica/ResolutezAmerica/Rio_BrancozAmerica/SantaremzAmerica/SantiagozAmerica/Santo_DomingozAmerica/Sao_PaulozAmerica/ScoresbysundzAmerica/SitkazAmerica/St_BarthelemyzAmerica/St_JohnszAmerica/St_KittszAmerica/St_LuciazAmerica/St_ThomaszAmerica/St_VincentzAmerica/Swift_CurrentzAmerica/TegucigalpazAmerica/ThulezAmerica/Thunder_BayzAmerica/TijuanazAmerica/TorontozAmerica/TortolazAmerica/VancouverzAmerica/WhitehorsezAmerica/WinnipegzAmerica/YakutatzAmerica/YellowknifezAntarctica/CaseyzAntarctica/DaviszAntarctica/DumontDUrvillezAntarctica/MacquariezAntarctica/MawsonzAntarctica/McMurdozAntarctica/PalmerzAntarctica/RotherazAntarctica/SyowazAntarctica/TrollzAntarctica/VostokzArctic/Longyearbyenz	Asia/AdenzAsia/Almatyz
Asia/AmmanzAsia/Anadyrz
Asia/AqtauzAsia/AqtobezAsia/AshgabatzAsia/AtyrauzAsia/BaghdadzAsia/Bahrainz	Asia/BakuzAsia/BangkokzAsia/BarnaulzAsia/BeirutzAsia/BishkekzAsia/Bruneiz
Asia/ChitazAsia/ChoibalsanzAsia/ColombozAsia/Damascusz
Asia/Dhakaz	Asia/Diliz
Asia/DubaizAsia/DushanbezAsia/Famagustaz	Asia/GazazAsia/HebronzAsia/Ho_Chi_MinhzAsia/Hong_Kongz	Asia/HovdzAsia/IrkutskzAsia/JakartazAsia/JayapurazAsia/Jerusalemz
Asia/KabulzAsia/KamchatkazAsia/KarachizAsia/KathmanduzAsia/KhandygazAsia/KolkatazAsia/KrasnoyarskzAsia/Kuala_LumpurzAsia/KuchingzAsia/Kuwaitz
Asia/MacauzAsia/MagadanzAsia/MakassarzAsia/ManilazAsia/MuscatzAsia/NicosiazAsia/NovokuznetskzAsia/Novosibirskz	Asia/Omskz	Asia/OralzAsia/Phnom_PenhzAsia/PontianakzAsia/Pyongyangz
Asia/QatarzAsia/QyzylordazAsia/RiyadhzAsia/SakhalinzAsia/Samarkandz
Asia/SeoulzAsia/ShanghaizAsia/SingaporezAsia/SrednekolymskzAsia/TaipeizAsia/TashkentzAsia/TbilisizAsia/TehranzAsia/Thimphuz
Asia/Tokyoz
Asia/TomskzAsia/UlaanbaatarzAsia/UrumqizAsia/Ust-NerazAsia/VientianezAsia/VladivostokzAsia/YakutskzAsia/YangonzAsia/YekaterinburgzAsia/YerevanzAtlantic/AzoreszAtlantic/BermudazAtlantic/CanaryzAtlantic/Cape_VerdezAtlantic/FaroezAtlantic/MadeirazAtlantic/ReykjavikzAtlantic/South_GeorgiazAtlantic/St_HelenazAtlantic/StanleyzAustralia/AdelaidezAustralia/BrisbanezAustralia/Broken_HillzAustralia/CurriezAustralia/DarwinzAustralia/EuclazAustralia/HobartzAustralia/LindemanzAustralia/Lord_HowezAustralia/MelbournezAustralia/PerthzAustralia/SydneyzCanada/AtlanticzCanada/CentralzCanada/EasternzCanada/MountainzCanada/NewfoundlandzCanada/PacificzEurope/AmsterdamzEurope/AndorrazEurope/AstrakhanzEurope/AthenszEurope/BelgradezEurope/BerlinzEurope/BratislavazEurope/BrusselszEurope/BucharestzEurope/BudapestzEurope/BusingenzEurope/ChisinauzEurope/CopenhagenzEurope/DublinzEurope/GibraltarzEurope/GuernseyzEurope/HelsinkizEurope/Isle_of_ManzEurope/IstanbulzEurope/JerseyzEurope/KaliningradzEurope/KievzEurope/KirovzEurope/LisbonzEurope/LjubljanazEurope/LondonzEurope/LuxembourgzEurope/MadridzEurope/MaltazEurope/MariehamnzEurope/MinskzEurope/MonacozEurope/MoscowzEurope/OslozEurope/PariszEurope/PodgoricazEurope/PraguezEurope/RigazEurope/RomezEurope/SamarazEurope/San_MarinozEurope/SarajevozEurope/SaratovzEurope/SimferopolzEurope/SkopjezEurope/SofiazEurope/StockholmzEurope/TallinnzEurope/TiranezEurope/UlyanovskzEurope/UzhgorodzEurope/VaduzzEurope/VaticanzEurope/ViennazEurope/VilniuszEurope/VolgogradzEurope/WarsawzEurope/ZagrebzEurope/ZaporozhyezEurope/ZurichzGMTzIndian/AntananarivozIndian/ChagoszIndian/ChristmaszIndian/CocoszIndian/ComorozIndian/KerguelenzIndian/MahezIndian/MaldiveszIndian/MauritiuszIndian/MayottezIndian/ReunionzPacific/ApiazPacific/AucklandzPacific/BougainvillezPacific/ChathamzPacific/ChuukzPacific/EasterzPacific/EfatezPacific/EnderburyzPacific/FakaofozPacific/FijizPacific/FunafutizPacific/GalapagoszPacific/GambierzPacific/GuadalcanalzPacific/GuamzPacific/HonoluluzPacific/KiritimatizPacific/KosraezPacific/KwajaleinzPacific/MajurozPacific/MarquesaszPacific/MidwayzPacific/NauruzPacific/NiuezPacific/NorfolkzPacific/NoumeazPacific/Pago_PagozPacific/PalauzPacific/PitcairnzPacific/PohnpeizPacific/Port_MoresbyzPacific/RarotongazPacific/SaipanzPacific/TahitizPacific/TarawazPacific/TongatapuzPacific/WakezPacific/Wallisz	US/Alaskaz
US/Arizonaz
US/Centralz
US/Easternz	US/HawaiizUS/Mountainz
US/PacificzUTC_tzinfo_cache__safe_for_unpickling__iso3166_code_FixedOffset.utcoffset2018eUTC.utcoffset_minus_<module pytz>open_resource_minutes_CountryTimezoneDictUTC.normalizeUTC.__str__<UTC>UTC.__repr__UTC.dstC:\code\venv\callllama\lib\site-packages\pytz_CountryNameDictUndo the time zone name munging done by older versions of pytz.PYTZ_TZDATADIRUTC.localizeFactory function for utc unpickling.

    Makes sure that unpickling a utc instance always returns the same
    module global.

    These examples belong in the UTC class above, but it is obscured; or in
    the README.txt, but we are not depending on Python 2.4 so integrating
    the README.txt examples with the unit tests is not trivial.

    >>> import datetime, pickle
    >>> dt = datetime.datetime(2005, 3, 1, 14, 13, 21, tzinfo=utc)
    >>> naive = dt.replace(tzinfo=None)
    >>> p = pickle.dumps(dt, 1)
    >>> naive_p = pickle.dumps(naive, 1)
    >>> len(p) - len(naive_p)
    17
    >>> new = pickle.loads(p)
    >>> new == dt
    True
    >>> new is dt
    False
    >>> new.tzinfo is dt.tzinfo
    True
    >>> utc is UTC is timezone('UTC')
    True
    >>> utc is timezone('GMT')
    False
    _unmunge_zoneCorrect the timezone information on the given datetimeBackwards compatibility.Return true if the given resource existsMap ISO 3166 country code to a list of timezone names commonly used
    in that country.

    iso3166_code is the two letter code used to identify the country.

    >>> def print_list(list_of_strings):
    ...     'We use a helper so doctests work under Python 2.3 -> 3.x'
    ...     for s in list_of_strings:
    ...         print(s)

    >>> print_list(country_timezones['nz'])
    Pacific/Auckland
    Pacific/Chatham
    >>> print_list(country_timezones['ch'])
    Europe/Zurich
    >>> print_list(country_timezones['CH'])
    Europe/Zurich
    >>> print_list(country_timezones[unicode('ch')])
    Europe/Zurich
    >>> print_list(country_timezones['XXX'])
    Traceback (most recent call last):
    ...
    KeyError: 'XXX'

    Previously, this information was exposed as a function rather than a
    dictionary. This is still supported::

    >>> print_list(country_timezones('nz'))
    Pacific/Auckland
    Pacific/Chatham
    UTC.fromutczone_tab
datetime.tzinfo timezone definitions generated from the
Olson timezone database:

    ftp://elsie.nci.nih.gov/pub/tz*.tar.gz

See the datetime section of the Python Library Reference for information
on how to use these modules.
resource_stream_CountryNameDict._fill_FixedOffset.localizepytz.FixedOffset(%d)Factory function for unpickling pytz tzinfo instances.

    Just a wrapper around tzinfo.unpickler to save a few bytes in each pickle
    by shortening the path.
    resource_exists Return a datetime.tzinfo implementation for the given timezone

    >>> from datetime import datetime, timedelta
    >>> utc = timezone('UTC')
    >>> eastern = timezone('US/Eastern')
    >>> eastern.zone
    'US/Eastern'
    >>> timezone(unicode('US/Eastern')) is eastern
    True
    >>> utc_dt = datetime(2002, 10, 27, 6, 0, 0, tzinfo=utc)
    >>> loc_dt = utc_dt.astimezone(eastern)
    >>> fmt = '%Y-%m-%d %H:%M:%S %Z (%z)'
    >>> loc_dt.strftime(fmt)
    '2002-10-27 01:00:00 EST (-0500)'
    >>> (loc_dt - timedelta(minutes=10)).strftime(fmt)
    '2002-10-27 00:50:00 EST (-0500)'
    >>> eastern.normalize(loc_dt - timedelta(minutes=10)).strftime(fmt)
    '2002-10-27 01:50:00 EDT (-0400)'
    >>> (loc_dt + timedelta(minutes=10)).strftime(fmt)
    '2002-10-27 01:10:00 EST (-0500)'

    Raises UnknownTimeZoneError if passed an unknown zone.

    >>> try:
    ...     timezone('Asia/Shangri-La')
    ... except UnknownTimeZoneError:
    ...     print('Unknown')
    Unknown

    >>> try:
    ...     timezone(unicode('\N{TRADE MARK SIGN}'))
    ... except UnknownTimeZoneError:
    ...     print('Unknown')
    Unknown

    _CountryTimezoneDict._fill_test2018.5_FixedOffset.tznameDictionary proving ISO3166 code -> English name.

    >>> print(country_names['au'])
    Australia
    _FixedOffset.normalizeOLSEN_VERSIONUTC.__reduce___FixedOffset.__init__Open a resource from the zoneinfo subdir for reading.

    Uses the pkg_resources module if available and no standard file
    found at the calculated location.

    It is possible to specify different location for zoneinfo
    subdir by using the PYTZ_TZDATADIR environment variable.
    iso3166.tabUTC.tzname_FixedOffset.__reduce__return a fixed-offset timezone based off a number of minutes.

        >>> one = FixedOffset(-330)
        >>> one
        pytz.FixedOffset(-330)
        >>> str(one.utcoffset(datetime.datetime.now()))
        '-1 day, 18:30:00'
        >>> str(one.dst(datetime.datetime.now()))
        '0:00:00'

        >>> two = FixedOffset(1380)
        >>> two
        pytz.FixedOffset(1380)
        >>> str(two.utcoffset(datetime.datetime.now()))
        '23:00:00'
        >>> str(two.dst(datetime.datetime.now()))
        '0:00:00'

    The datetime.timedelta must be between the range of -1 and 1 day,
    non-inclusive.

        >>> FixedOffset(1440)
        Traceback (most recent call last):
        ...
        ValueError: ('absolute offset is too large', 1440)

        >>> FixedOffset(-1440)
        Traceback (most recent call last):
        ...
        ValueError: ('absolute offset is too large', -1440)

    An offset of 0 is special-cased to return UTC.

        >>> FixedOffset(0) is UTC
        True

    There should always be only one instance of a FixedOffset per timedelta.
    This should be true for multiple creation calls.

        >>> FixedOffset(-330) is one
        True
        >>> FixedOffset(1380) is two
        True

    It should also be true for pickling.

        >>> import pickle
        >>> pickle.loads(pickle.dumps(one)) is one
        True
        >>> pickle.loads(pickle.dumps(two)) is two
        True
    pardirzoneinfo_dirOLSON_VERSIONBad path segment: %rC:\code\venv\callllama\lib\site-packages\pytz\__init__.py_FixedOffset.__repr__testmod
        >>> ascii('Hello')
        'Hello'
        >>> ascii('\N{TRADE MARK SIGN}') #doctest: +IGNORE_EXCEPTION_DETAIL
        Traceback (most recent call last):
            ...
        UnicodeEncodeError: ...
        _CountryTimezoneDict.__call___FixedOffset.dst
Custom exceptions raised by pytz.
Base class for invalid time exceptions.C:\code\venv\callllama\lib\site-packages\pytz\exceptions.pyException raised when pytz is passed an unknown timezone.

    >>> isinstance(UnknownTimeZoneError(), LookupError)
    True

    This class is actually a subclass of KeyError to provide backwards
    compatibility with code relying on the undocumented behavior of earlier
    pytz releases.

    >>> isinstance(UnknownTimeZoneError(), KeyError)
    True
    <module pytz.exceptions>Exception raised when attempting to create a wallclock time that
    cannot exist.

    At the start of a DST transition period, the wallclock time jumps forward.
    The instants jumped over never occur.
    Exception raised when attempting to create an ambiguous wallclock time.

    At the end of a DST transition period, a particular wallclock time will
    occur twice (once before the clocks are set back, once after). Both
    possibilities may be correct, unless further information is supplied.

    See DstTzInfo.normalize() for more info
    method_namefill_iterlazynew_setDictionary populated on first use.LazyDict.__iter__<module pytz.lazy>new_listLazyList.__new__.<locals>.LazyList_propsLazyDict.__contains__LazySet.__new__.<locals>.LazySetLazyDict.keys_fill_lockDictMixinC:\code\venv\callllama\lib\site-packages\pytz\lazy.pyLazySet.__new__.<locals>.lazy.<locals>._lazyLazyList.__new__.<locals>.lazyLazyDict.__len__Set populated on first use.LazyDict.__getitem__©0z__str__z__repr__z__unicode__z__hash__z
__sizeof__z__cmp__z__lt__z__le__z__eq__z__ne__z__gt__z__ge__z__contains__z__len__z__nonzero__z__getitem__z__setitem__z__delitem__z__iter__z__sub__z__and__z__xor__z__or__z__rsub__z__rand__z__rxor__z__ror__z__isub__z__iand__z__ixor__z__ior__zaddzclearzcopyz
differencezdifference_updatezdiscardzintersectionzintersection_updatez
isdisjointzissubsetz
issupersetzpopzremovezsymmetric_differencezsymmetric_difference_updatezunionzupdateLazyList.__new__.<locals>.lazy.<locals>._lazyÛ&   z__str__z__repr__z__unicode__z__hash__z
__sizeof__z__cmp__z__lt__z__le__z__eq__z__ne__z__gt__z__ge__zappendzcountzindexzextendzinsertzpopzremovezreversezsortz__add__z__radd__z__iadd__z__mul__z__rmul__z__imul__z__contains__z__len__z__nonzero__z__getitem__z__setitem__z__delitem__z__iter__z__reversed__z__getslice__z__setslice__z__delslice__List populated on first use.C:\code\venv\callllama\lib\site-packages\pytz\tzfile.pyGot magic %s_byte_string>4s c 15x 6l<module pytz.tzfile>Cast a string or byte string to an ASCII string.lBB>%(timecnt)dl %(timecnt)dB %(ttinfo)s %(charcnt)dscalcsizeCast a string or byte string to an ASCII byte string._NULL_std_string©!ÚzoneÚfpÚhead_fmtÚ	head_sizeÚmagicÚformatÚ
ttisgmtcntÚ
ttisstdcntÚleapcntÚtimecntÚtypecntÚcharcntÚdata_fmtÚ	data_sizeÚdataÚtransitionsÚlindexesÚ
ttinfo_rawÚtznames_rawÚttinfoÚtznamesÚiÚtzname_offsetÚnulÚclsÚtransition_infoÚinfÚ	utcoffsetÚdstÚjÚprev_infÚstdinfÚtzname
$Id: tzfile.py,v 1.8 2004/06/03 00:15:24 zenzen Exp $
fromutc: dt.tzinfo is not selfSee datetime.tzinfo.tzname

        The is_dst parameter may be used to remove ambiguity during DST
        transitions.

        >>> from pytz import timezone
        >>> tz = timezone('America/St_Johns')

        >>> normal = datetime(2009, 9, 1)

        >>> tz.tzname(normal)
        'NDT'
        >>> tz.tzname(normal, is_dst=False)
        'NDT'
        >>> tz.tzname(normal, is_dst=True)
        'NDT'

        >>> ambiguous = datetime(2009, 10, 31, 23, 30)

        >>> tz.tzname(ambiguous, is_dst=False)
        'NST'
        >>> tz.tzname(ambiguous, is_dst=True)
        'NDT'
        >>> try:
        ...     tz.tzname(ambiguous)
        ... except AmbiguousTimeError:
        ...     print('Ambiguous')
        Ambiguous
        Correct the timezone information on the given datetime.

        This is normally a no-op, as StaticTzInfo timezones never have
        ambiguous cases to correct:

        >>> from pytz import timezone
        >>> gmt = timezone('GMT')
        >>> isinstance(gmt, StaticTzInfo)
        True
        >>> dt = datetime(2011, 5, 8, 1, 2, 3, tzinfo=gmt)
        >>> gmt.normalize(dt) is dt
        True

        The supported method of converting between timezones is to use
        datetime.astimezone(). Currently normalize() also works:

        >>> la = timezone('America/Los_Angeles')
        >>> dt = la.localize(datetime(2011, 5, 7, 1, 2, 3))
        >>> fmt = '%Y-%m-%d %H:%M:%S %Z (%z)'
        >>> gmt.normalize(dt).strftime(fmt)
        '2011-05-07 08:02:03 GMT (+0000)'
        See datetime.tzinfo.utcoffset

        is_dst is ignored for StaticTzInfo, and exists only to
        retain compatibility with DstTzInfo.
        StaticTzInfo.tznameSee datetime.tzinfo.utcoffset

        The is_dst parameter may be used to remove ambiguity during DST
        transitions.

        >>> from pytz import timezone
        >>> tz = timezone('America/St_Johns')
        >>> ambiguous = datetime(2009, 10, 31, 23, 30)

        >>> str(tz.utcoffset(ambiguous, is_dst=False))
        '-1 day, 20:30:00'

        >>> str(tz.utcoffset(ambiguous, is_dst=True))
        '-1 day, 21:30:00'

        >>> try:
        ...     tz.utcoffset(ambiguous)
        ... except AmbiguousTimeError:
        ...     print('Ambiguous')
        Ambiguous

        DstTzInfo.utcoffsetStaticTzInfo.__reduce__<DstTzInfo %r %s%s %s>Convert a timedelta to secondslocalized_tzutc_time_timedelta_cacheDstTzInfo.__init__Base classes and helpers for building zone specific tzinfo classesBaseTzInfo.__str__See datetime.tzinfo.dst

        The is_dst parameter may be used to remove ambiguity during DST
        transitions.

        >>> from pytz import timezone
        >>> tz = timezone('America/St_Johns')

        >>> normal = datetime(2009, 9, 1)

        >>> str(tz.dst(normal))
        '1:00:00'
        >>> str(tz.dst(normal, is_dst=False))
        '1:00:00'
        >>> str(tz.dst(normal, is_dst=True))
        '1:00:00'

        >>> ambiguous = datetime(2009, 10, 31, 23, 30)

        >>> str(tz.dst(ambiguous, is_dst=False))
        '0:00:00'
        >>> str(tz.dst(ambiguous, is_dst=True))
        '1:00:00'
        >>> try:
        ...     tz.dst(ambiguous)
        ... except AmbiguousTimeError:
        ...     print('Ambiguous')
        Ambiguous

        Factory function for unpickling pytz tzinfo instances.

    This is shared for both StaticTzInfo and DstTzInfo instances, because
    database changes could cause a zones implementation to switch between
    these two base classes and we can't break pickles on a pytz version
    upgrade.
    A timezone that has a variable offset from UTC

    The offset might change if daylight saving time comes into effect,
    or at a point in history when the region decides to change their
    timezone definition.
    Correct the timezone information on the given datetime

        If date arithmetic crosses DST boundaries, the tzinfo
        is not magically adjusted. This method normalizes the
        tzinfo to the correct one.

        To test, first we need to do some setup

        >>> from pytz import timezone
        >>> utc = timezone('UTC')
        >>> eastern = timezone('US/Eastern')
        >>> fmt = '%Y-%m-%d %H:%M:%S %Z (%z)'

        We next create a datetime right on an end-of-DST transition point,
        the instant when the wallclocks are wound back one hour.

        >>> utc_dt = datetime(2002, 10, 27, 6, 0, 0, tzinfo=utc)
        >>> loc_dt = utc_dt.astimezone(eastern)
        >>> loc_dt.strftime(fmt)
        '2002-10-27 01:00:00 EST (-0500)'

        Now, if we subtract a few minutes from it, note that the timezone
        information has not changed.

        >>> before = loc_dt - timedelta(minutes=10)
        >>> before.strftime(fmt)
        '2002-10-27 00:50:00 EST (-0500)'

        But we can fix that by calling the normalize method

        >>> before = eastern.normalize(before)
        >>> before.strftime(fmt)
        '2002-10-27 01:50:00 EDT (-0400)'

        The supported method of converting between timezones is to use
        datetime.astimezone(). Currently, normalize() also works:

        >>> th = timezone('Asia/Bangkok')
        >>> am = timezone('Europe/Amsterdam')
        >>> dt = th.localize(datetime(2011, 5, 7, 1, 2, 3))
        >>> fmt = '%Y-%m-%d %H:%M:%S %Z (%z)'
        >>> am.normalize(dt).strftime(fmt)
        '2011-05-06 20:02:03 CEST (+0200)'
        StaticTzInfo.localizeDstTzInfo.tznamelocal_dtDstTzInfo.__repr__StaticTzInfo.utcoffsetA timezone that has a constant offset from UTC

    These timezones are rare, as most locations have changed their
    offset at some point in their history
    DstTzInfo.__reduce__<DstTzInfo %r %s+%s %s>filtered_possible_loc_dt_datetime_cacheStaticTzInfo.dstStaticTzInfo.fromutcDstTzInfo.dstDstTzInfo.fromutc<StaticTzInfo %r><module pytz.tzinfo>StaticTzInfo.__repr__See datetime.tzinfo.tzname

        is_dst is ignored for StaticTzInfo, and exists only to
        retain compatibility with DstTzInfo.
        See datetime.tzinfo.fromutcConvert naive time to local time.

        This method should be used to construct localtimes, rather
        than passing a tzinfo argument to a datetime constructor.

        is_dst is used to determine the correct timezone in the ambigous
        period at the end of daylight saving time.

        >>> from pytz import timezone
        >>> fmt = '%Y-%m-%d %H:%M:%S %Z (%z)'
        >>> amdam = timezone('Europe/Amsterdam')
        >>> dt  = datetime(2004, 10, 31, 2, 0, 0)
        >>> loc_dt1 = amdam.localize(dt, is_dst=True)
        >>> loc_dt2 = amdam.localize(dt, is_dst=False)
        >>> loc_dt1.strftime(fmt)
        '2004-10-31 02:00:00 CEST (+0200)'
        >>> loc_dt2.strftime(fmt)
        '2004-10-31 02:00:00 CET (+0100)'
        >>> str(loc_dt2 - loc_dt1)
        '1:00:00'

        Use is_dst=None to raise an AmbiguousTimeError for ambiguous
        times at the end of daylight saving time

        >>> try:
        ...     loc_dt1 = amdam.localize(dt, is_dst=None)
        ... except AmbiguousTimeError:
        ...     print('Ambiguous')
        Ambiguous

        is_dst defaults to False

        >>> amdam.localize(dt) == amdam.localize(dt, False)
        True

        is_dst is also used to determine the correct timezone in the
        wallclock times jumped over at the start of daylight saving time.

        >>> pacific = timezone('US/Pacific')
        >>> dt = datetime(2008, 3, 9, 2, 0, 0)
        >>> ploc_dt1 = pacific.localize(dt, is_dst=True)
        >>> ploc_dt2 = pacific.localize(dt, is_dst=False)
        >>> ploc_dt1.strftime(fmt)
        '2008-03-09 02:00:00 PDT (-0700)'
        >>> ploc_dt2.strftime(fmt)
        '2008-03-09 02:00:00 PST (-0800)'
        >>> str(ploc_dt2 - ploc_dt1)
        '1:00:00'

        Use is_dst=None to raise a NonExistentTimeError for these skipped
        times.

        >>> try:
        ...     loc_dt1 = pacific.localize(dt, is_dst=None)
        ... except NonExistentTimeError:
        ...     print('Non-existent')
        Non-existent
        Create only one instance of each distinct tupleSee datetime.tzinfo.dst

        is_dst is ignored for StaticTzInfo, and exists only to
        retain compatibility with DstTzInfo.
        C:\code\venv\callllama\lib\site-packages\pytz\tzinfo.py_to_secondsCreate only one instance of each distinct timedelta_epoch_notimeCreate only one instance of each distinct datetimeStaticTzInfo.normalize_ttinfo_cacheDstTzInfo.localizepyopensslOld version of cryptography ({0}) may cause slowdown.urllib3_versioncryptography_version<module requests>_check_cryptographyC:\code\venv\callllama\lib\site-packages\requestschardet_versioncheck_compatibilityurllib3 ({0}) or chardet ({1}) doesn't match a supported version!
Requests HTTP Library
~~~~~~~~~~~~~~~~~~~~~

Requests is an HTTP library, written in Python, for human beings. Basic GET
usage:

   >>> import requests
   >>> r = requests.get('https://www.python.org')
   >>> r.status_code
   200
   >>> 'Python is a programming language' in r.content
   True

... or POST:

   >>> payload = dict(key1='value1', key2='value2')
   >>> r = requests.post('http://httpbin.org/post', data=payload)
   >>> print(r.text)
   {
     ...
     "form": {
       "key2": "value2",
       "key1": "value1"
     },
     ...
   }

The other HTTP methods are supported - see `requests.api`. Full documentation
is at <http://python-requests.org>.

:copyright: (c) 2017 by Kenneth Reitz.
:license: Apache 2.0, see LICENSE for more details.
C:\code\venv\callllama\lib\site-packages\requests\__init__.pyme@kennethreitz.orgPython HTTP for Humans.requests.__version__Copyright 2018 Kenneth Reitzâ¨ ð° â¨2.19.1C:\code\venv\callllama\lib\site-packages\requests\__version__.py<module requests._internal_utils>u_stringC:\code\venv\callllama\lib\site-packages\requests\_internal_utils.py
requests._internal_utils
~~~~~~~~~~~~~~

Provides utility functions that are consumed internally by Requests
which depend on extremely few external helpers (such as compat)
Determine if unicode string only contains ASCII characters.

    :param str u_string: unicode string to check. Must be unicode
        and not Python 2 `str`.
    :rtype: bool
    Given a string object, regardless of type, returns a representation of
    that string in the native string type, encoding and decoding where
    necessary. This assumes ASCII unless told otherwise.
    isdirproxy_managerHTTPAdapter.proxy_manager_forInitializes a urllib3 PoolManager.

        This method should not be called from user code, and is only
        exposed for use when subclassing the
        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

        :param connections: The number of urllib3 connection pools to cache.
        :param maxsize: The maximum number of connections to save in the pool.
        :param block: Block when no free connections are available.
        :param pool_kwargs: Extra keyword arguments used to initialize the Pool Manager.
        build_response_HTTPErrorpool_connectionspool_maxsizemax_retriespool_blockHTTPAdapter.cert_verifyMissing dependencies for SOCKS support.BaseAdapter.sendCleans up adapter specific items.HTTPAdapter.get_connectionReturn urllib3 ProxyManager for the given proxy.

        This method should not be called from user code, and is only
        exposed for use when subclassing the
        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

        :param proxy: The proxy to return a urllib3 ProxyManager for.
        :param proxy_kwargs: Extra keyword arguments used to configure the Proxy Manager.
        :returns: ProxyManager
        :rtype: urllib3.ProxyManager
        HTTPAdapter.build_response©ÚselfÚrequestÚstreamÚtimeoutÚverifyÚcertÚproxiesÚconnÚurlÚchunkedÚconnectÚreadÚeÚerrÚrespÚlow_connÚheaderÚvalueÚiÚrBuilds a :class:`Response <requests.Response>` object from a urllib3
        response. This should not be called from user code, and is only exposed
        for use when subclassing the
        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`

        :param req: The :class:`PreparedRequest <PreparedRequest>` used to generate the response.
        :param resp: The urllib3 response object.
        :rtype: requests.Response
        HTTPAdapter.request_urlDEFAULT_POOLSIZEinit_poolmanagerHTTPAdapter.sendSends PreparedRequest object. Returns Response object.

        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) <timeouts>` tuple.
        :type timeout: float or tuple
        :param verify: (optional) Either a boolean, in which case it controls whether we verify
            the server's TLS certificate, or a string, in which case it must be a path
            to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        Could not find the TLS key file, invalid path: {0}Please check proxy URL. It is malformed and could be missing the host.BaseAdapter.__init___pool_blockDEFAULT_POOLBLOCKusing_socks_proxyTimeoutSauceObtain the url to use when making the final request.

        If the message is being sent through a HTTP proxy, the full URL has to
        be used. Otherwise, we should only use the path portion of the URL.

        This should not be called from user code, and is only exposed for use
        when subclassing the
        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.
        :param proxies: A dictionary of schemes or schemes and hosts to proxy URLs.
        :rtype: str
        HTTPAdapter.__getstate__.<locals>.<genexpr>cert_locCould not find the TLS certificate file, invalid path: {0}Disposes of any internal state.

        Currently, this closes the PoolManager and any active ProxyManager,
        which closes any pooled connections.
        _pool_connections_pool_maxsizeHTTPAdapter.__setstate__Could not find a suitable TLS CA certificate bundle, invalid path: {0}C:\code\venv\callllama\lib\site-packages\requests\adapters.pyReturns a dictionary of the headers to add to any request sent
        through a proxy. This works with urllib3 magic to ensure that they are
        correctly sent to the proxy, rather than in a tunnelled request if
        CONNECT is being used.

        This should not be called from user code, and is only exposed for use
        when subclassing the
        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

        :param proxies: The url of the proxy being used for this request.
        :rtype: dict
        Invalid timeout {0}. Pass a (connect, read) timeout tuple, or a single float to set both timeouts to the same valueDEFAULT_RETRIESDEFAULT_POOL_TIMEOUT_ProxyErrorReturns a urllib3 connection for the given URL. This should not be
        called from user code, and is only exposed for use when subclassing the
        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

        :param url: The URL to connect to.
        :param proxies: (optional) A Requests-style dictionary of proxies used on this request.
        :rtype: urllib3.ConnectionPool
        HTTPAdapter.init_poolmanagerThe Base Transport AdapterHTTPAdapter.__init__proxy_schemeSends PreparedRequest object. Returns Response object.

        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) <timeouts>` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server's TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        HTTPAdapter.closeis_proxied_http_request_SSLErrorHTTPAdapter.add_headersproxy_pool<module requests.adapters>The built-in HTTP Adapter for urllib3.

    Provides a general-case interface for Requests sessions to contact HTTP and
    HTTPS urls by implementing the Transport Adapter interface. This class will
    usually be created by the :class:`Session <Session>` class under the
    covers.

    :param pool_connections: The number of urllib3 connection pools to cache.
    :param pool_maxsize: The maximum number of connections to save in the pool.
    :param max_retries: The maximum number of retries each connection
        should attempt. Note, this applies only to failed DNS lookups, socket
        connections and connection timeouts, never to requests where data has
        made it to the server. By default, Requests does not retry failed
        connections. If you need granular control over the conditions under
        which we retry a request, import urllib3's ``Retry`` class and pass
        that instead.
    :param pool_block: Whether the connection pool should block for connections.

    Usage::

      >>> import requests
      >>> s = requests.Session()
      >>> a = requests.adapters.HTTPAdapter(max_retries=3)
      >>> s.mount('http://', a)
    
requests.adapters
~~~~~~~~~~~~~~~~~

This module contains the transport adapters that Requests uses to define
and maintain connections.
Add any headers needed by the connection. As of v2.0 this does
        nothing by default, but is left for overriding by users that subclass
        the :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

        This should not be called from user code, and is only exposed for use
        when subclassing the
        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

        :param request: The :class:`PreparedRequest <PreparedRequest>` to add headers to.
        :param kwargs: The keyword arguments from the call to send().
        Verify a SSL certificate. This method should not be called from user
        code, and is only exposed for use when subclassing the
        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

        :param conn: The urllib3 connection object associated with the cert.
        :param url: The requested URL.
        :param verify: Either a boolean, in which case it controls whether we verify
            the server's TLS certificate, or a string, in which case it must be a path
            to a CA bundle to use
        :param cert: The SSL certificate to verify.
        BaseAdapter.closeHTTPAdapter.proxy_headersSends a POST request.

    :param url: URL for the new :class:`Request` object.
    :param data: (optional) Dictionary (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.
    :param json: (optional) json data to send in the body of the :class:`Request`.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    Sends an OPTIONS request.

    :param url: URL for the new :class:`Request` object.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    Sends a PATCH request.

    :param url: URL for the new :class:`Request` object.
    :param data: (optional) Dictionary (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.
    :param json: (optional) json data to send in the body of the :class:`Request`.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    Constructs and sends a :class:`Request <Request>`.

    :param method: method for the new :class:`Request` object.
    :param url: URL for the new :class:`Request` object.
    :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.
    :param data: (optional) Dictionary or list of tuples ``[(key, value)]`` (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.
    :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.
    :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.
    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.
    :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.
        ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``
        or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string
        defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers
        to add for the file.
    :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.
    :param timeout: (optional) How many seconds to wait for the server to send data
        before giving up, as a float, or a :ref:`(connect timeout, read
        timeout) <timeouts>` tuple.
    :type timeout: float or tuple
    :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.
    :type allow_redirects: bool
    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.
    :param verify: (optional) Either a boolean, in which case it controls whether we verify
            the server's TLS certificate, or a string, in which case it must be a path
            to a CA bundle to use. Defaults to ``True``.
    :param stream: (optional) if ``False``, the response content will be immediately downloaded.
    :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response

    Usage::

      >>> import requests
      >>> req = requests.request('GET', 'http://httpbin.org/get')
      <Response [200]>
    
requests.api
~~~~~~~~~~~~

This module implements the Requests API.

:copyright: (c) 2012 by Kenneth Reitz.
:license: Apache2, see LICENSE for more details.
Sends a HEAD request.

    :param url: URL for the new :class:`Request` object.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    Sends a DELETE request.

    :param url: URL for the new :class:`Request` object.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    <module requests.api>C:\code\venv\callllama\lib\site-packages\requests\api.pySends a PUT request.

    :param url: URL for the new :class:`Request` object.
    :param data: (optional) Dictionary (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.
    :param json: (optional) json data to send in the body of the :class:`Request`.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    Sends a GET request.

    :param url: URL for the new :class:`Request` object.
    :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    HTTPBasicAuth.__init__handle_401sha512_utf8SHA-512%s:%s:%sHTTPDigestAuth.build_digest_header.<locals>.sha_utf8requests.authHTTPDigestAuth.build_digest_header.<locals>.<lambda>noncedigest 
        Takes the given response and tries digest-auth, if needed.

        :rtype: requests.Response
        authstr, digest="%s"MD5Auth hooks must be callable.opaquehash_utf8, opaque="%s"
requests.auth
~~~~~~~~~~~~~

This module contains the authentication handlers for Requests.
s_auth%s:%s:%s:%s:%s<module requests.auth>hexdigestAuthBaserealmnum_401_callsHTTPDigestAuth.build_digest_header.<locals>.sha256_utf8HTTPBasicAuth.__call__SHA-256Attaches HTTP Basic Authentication to the given Request object.last_noncewww-authenticateC:\code\venv\callllama\lib\site-packages\requests\auth.pyHTTPBasicAuth.__eq__Non-string usernames will no longer be supported in Requests 3.0.0. Please convert the object you've passed in ({0!r}) to a string or bytes object in the near future to avoid problems.md5_utf8AuthBase.__call__HTTPDigestAuth.handle_redirectHTTPBasicAuth.__ne__HTTPDigestAuth.__eq__HTTPDigestAuth.build_digest_header.<locals>.md5_utf8CONTENT_TYPE_FORM_URLENCODEDAttaches HTTP Digest Authentication to the given Request object.CONTENT_TYPE_MULTI_PARTHTTPDigestAuth.build_digest_header.<locals>.sha512_utf8HTTPDigestAuth.init_per_thread_state, qop="auth", nc=%s, cnonce="%s", algorithm="%s"HTTPProxyAuth.__call__Attaches HTTP Proxy Authentication to a given Request object.%08xctime_thread_localBase class that all auth implementations derive fromusername="%s", realm="%s", nonce="%s", uri="%s", response="%s"©ÚselfÚmethodÚurlÚrealmÚnonceÚqopÚ	algorithmÚopaqueÚ	hash_utf8Ú
_algorithmÚmd5_utf8Úsha_utf8Úsha256_utf8Úsha512_utf8ÚKDÚentdigÚp_parsedÚpathÚA1ÚA2ÚHA1ÚHA2ÚncvalueÚsÚcnonceÚrespdigÚnoncebitÚbaseMD5-SESSHTTPDigestAuth.__ne__multipart/form-dataReset num_401_calls counter on redirects.Digest %sReturns a Basic Auth string.HTTPDigestAuth.__init__Non-string passwords will no longer be supported in Requests 3.0.0. Please convert the object you've passed in ({0!r}) to a string or bytes object in the near future to avoid problems.nonce_countHTTPDigestAuth.__call__HTTPDigestAuth.handle_401<module requests.certs>C:\code\venv\callllama\lib\site-packages\requests\certs.py
requests.certs
~~~~~~~~~~~~~~

This module returns the preferred default CA certificate bundle. There is
only one â the one from the certifi package.

If you are packaging Requests, e.g., for a Linux distribution or a managed
environment, you can change the definition of where() to return a separately
packaged CA bundle.
C:\code\venv\callllama\lib\site-packages\requests\compat.py
requests.compat
~~~~~~~~~~~~~~~

This module handles import compatibility issues between Python 2 and
Python 3.
<module requests.compat>simplejsonnumeric_typesname=%r, domain=%r, path=%rcookie_in_jarMockRequest.get_origin_req_hostDeletes a cookie given a name. Wraps ``cookielib.CookieJar``'s
        ``remove_cookie_by_name()``.
        badargsUtility method to list all the domains in the jar.pathsMockRequest.get_hostRequestsCookieJar.setRequestsCookieJar.get_dictRequestsCookieJar.iterkeysUpdates this jar with cookies from another CookieJar or dict-liketime_templateUtility method to list all the paths in the jar.Return a copy of this RequestsCookieJar.get_new_headersExtract the cookies from the response into a CookieJar.

    :param jar: cookielib.CookieJar (not necessarily a RequestsCookieJar)
    :param request: our own requests.Request object
    :param response: urllib3.HTTPResponse object
    rfc2109path_specifiedMockRequest.unverifiableThere are two cookies that meet the criteria specified in the cookie jar.
    Use .get and .set and include domain and path args in order to be more specific.
    Dict-like __setitem__ for compatibility with client code. Throws
        exception if there is already a cookie of that name in the jar. In that
        case, use the more explicit set() method instead.
        MockResponse.__init___cookies_lockCompatibility class; is a cookielib.CookieJar, but exposes a dict
    interface.

    This is the CookieJar we create by default for requests and sessions that
    don't specify one, since some clients may expect response.cookies and
    session.cookies to support dict operations.

    Requests does not use the dict interface internally; it's just for
    compatibility with external client code. All requests code should work
    out of the box with externally provided instances of ``CookieJar``, e.g.
    ``LWPCookieJar`` and ``FileCookieJar``.

    Unlike a regular CookieJar, this class is pickleable.

    .. warning:: dictionary operations that are normally O(1) may be O(n).
    RequestsCookieJar.keysDict-like __getitem__() for compatibility with client code. Throws
        exception if there are more than one cookie with name. In that case,
        use the more explicit get() method instead.

        .. warning:: operation is O(n), not O(1).
        RequestsCookieJar.__getstate__Dict-like values() that returns a list of values of cookies from the
        jar.

        .. seealso:: keys() and items().
        RequestsCookieJar._find_no_duplicatesdummy_threading<module requests.cookies>Dict-like itervalues() that returns an iterator of values of cookies
        from the jar.

        .. seealso:: iterkeys() and iteritems().
        RequestsCookieJar.updateReturn the CookiePolicy instance used.morselexpiresRequestsCookieJar.itervaluesTakes as an argument an optional domain and path and returns a plain
        old Python dict of name-value pairs of cookies that meet the
        requirements.

        :rtype: dict
        get_typeMockRequest.__init__set_cookieMockResponse.infoReturns a CookieJar from a key/value dictionary.

    :param cookie_dict: Dict of key/values to insert into CookieJar.
    :param cookiejar: (optional) A cookiejar to add the cookies to.
    :param overwrite: (optional) If False, will not replace cookies
        already in the jar with new ones.
    MockRequest.origin_req_hostWraps a `requests.Request` to mimic a `urllib2.Request`.

    The code in `cookielib.CookieJar` expects this interface in order to correctly
    manage cookie policies, i.e., determine whether a cookie can be set, given the
    domains of the request and the cookie.

    The original request object is read-only. The client is responsible for collecting
    the new headers via `get_new_headers()` and interpreting them appropriately. You
    probably want `get_cookie_header`, defined below.
    HttpOnlyadd_unredirected_headerMockResponse.getheadersdomain_specifiedtimegm
requests.cookies
~~~~~~~~~~~~~~~~

Compatibility code to be able to use `cookielib.CookieJar` with requests.

requests.utils imports from here, so be careful with imports.
list_domainsMockRequest.has_headernew_cjRequestsCookieJar.copyDict-like iteritems() that returns an iterator of name-value tuples
        from the jar.

        .. seealso:: iterkeys() and itervalues().
        new_jarCookieConflictErrorRequestsCookieJar.__getitem__RequestsCookieJar.set_cookieBoth ``__get_item__`` and ``get`` call this function: it's never
        used elsewhere in Requests.

        :param name: a string containing name of cookie
        :param domain: (optional) string containing domain of cookie
        :param path: (optional) string containing path of cookie
        :raises KeyError: if cookie is not found
        :raises CookieConflictError: if there are multiple cookies
            that match name and optionally domain and path
        :return: cookie.value
        max-age: %s must be integerDict-like items() that returns a list of name-value tuples from the
        jar. Allows client-code to call ``dict(RequestsCookieJar)`` and get a
        vanilla python dict of key value pairs.

        .. seealso:: keys() and values().
        list_pathsset_policyWraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.

    ...what? Basically, expose the parsed HTTP headers from the server response
    the way `cookielib` expects to see them.
    toReturnnames_from_jarRequestsCookieJar.values%a, %d-%b-%Y %H:%M:%S GMThttponlyclearablesC:\code\venv\callllama\lib\site-packages\requests\cookies.pyMockRequest.get_new_headersRequestsCookieJar.iteritemsmorsel_to_cookieDict-like get() that also supports optional domain and path args in
        order to resolve naming collisions from using one cookie jar over
        multiple domains.

        .. warning:: operation is O(n), not O(1).
        RequestsCookieJar.itemsMockRequest.add_headerRequestsCookieJar.__setstate__Unsets a cookie by name, by default over all domains and paths.

    Wraps CookieJar.clear(), is O(n).
    is_unverifiableMake a cookie from underspecified parameters.

    By default, the pair of `name` and `value` will be set for the domain ''
    and sent on every request (this is sometimes called a "supercookie").
    RequestsCookieJar.multiple_domainsMockRequest.hostMockRequest.is_unverifiableRequestsCookieJar.__contains__MockRequest.add_unredirected_headerCookie headers should be added with add_unredirected_header()Convert a Morsel object into a Cookie containing the one k/v pair.comment_urlget_policycookielib has no legitimate use for this method; add it back if you find one.
    Produce an appropriate Cookie header string to be sent with `request`, or None.

    :rtype: str
    MockRequest.get_full_urlextract_cookiesport_specifiedAdd cookies to cookiejar and returns a merged CookieJar.

    :param cookiejar: CookieJar object to add the cookies to.
    :param cookies: Dictionary or CookieJar object to be added.
    RequestsCookieJar.list_domainsDict-like keys() that returns a list of names of cookies from the
        jar.

        .. seealso:: values() and items().
        get_headerdomain_initial_dotcreate_cookiecreate_cookie() got unexpected keyword arguments: %sDict-like set() that also supports optional domain and path args in
        order to resolve naming collisions from using one cookie jar over
        multiple domains.
        Requests uses this method internally to get cookie values.

        If there are conflicting cookies, _find arbitrarily chooses one.
        See _find_no_duplicates if you want an exception thrown if there are
        conflicting cookies.

        :param name: a string containing name of cookie
        :param domain: (optional) string containing domain of cookie
        :param path: (optional) string containing path of cookie
        :return: cookie.value
        strptimeYou can only merge into CookieJaradd_cookie_headerMockRequest.get_headerThere are multiple cookies with name, %rRequestsCookieJar.__delitem__MockRequest.get_typeRequestsCookieJar.list_pathsReturns True if there are multiple domains in the jar.
        Returns False otherwise.

        :rtype: bool
        Unlike a normal CookieJar, this class is pickleable.RequestsCookieJar.__setitem__Dict-like iterkeys() that returns an iterator of names of cookies
        from the jar.

        .. seealso:: itervalues() and iteritems().
        secureRequestsCookieJar.get_policyMake a MockResponse for `cookielib` to read.

        :param headers: a httplib.HTTPMessage or analogous carrying the headers
        A Connection error occurred.The URL provided was somehow invalid.The header value provided was somehow invalid.requests.exceptionsThere was an ambiguous exception that occurred while handling your
    request.
    The server did not send any data in the allotted amount of time.BaseHTTPErrorRequestException.__init__The URL schema (e.g. http or https) is missing.Custom retries logic failedA proxy error occurred.C:\code\venv\callllama\lib\site-packages\requests\exceptions.pyInitialize RequestException with `request` and `response` objects.RequestsWarningThe proxy URL provided is invalid.Requests encountered an error when trying to rewind a bodySee defaults.py for valid schemas.A valid URL is required to make a request.
requests.exceptions
~~~~~~~~~~~~~~~~~~~

This module contains the set of Requests' exceptions.
Base warning for Requests.An HTTP error occurred.An imported dependency doesn't match the expected version range.The request timed out while trying to connect to the remote server.

    Requests that produced this error are safe to retry.
    <module requests.exceptions>Too many redirects.A file was opened in text mode, but Requests determined its binary length.Failed to decode response contentThe server declared chunked encoding but sent an invalid chunk.The request timed out.

    Catching this error will catch both
    :exc:`~requests.exceptions.ConnectTimeout` and
    :exc:`~requests.exceptions.ReadTimeout` errors.
    An SSL error occurred.hook_datarequests.hooksHOOKSC:\code\venv\callllama\lib\site-packages\requests\hooks.py_hook_data
requests.hooks
~~~~~~~~~~~~~~

This module provides the capabilities for the Requests hooks system.

Available hooks:

``response``:
    The response generated from a Request.
Dispatches a hook dictionary on a given piece of data.default_hooks.<locals>.<genexpr>enc_paramsPrepares the entire request with the given parameters.is_streamapparent_encoding<PreparedRequest [%s]>Returns the parsed header links of the response, if any.Invalid URL {0!r}: No schema supplied. Perhaps you meant http://{0}?Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.True if this Response is a well-formed HTTP redirect that could have
        been processed automatically (by :meth:`Session.resolve_redirects`).
        The :class:`Response <Response>` object, which contains a
    server's response to an HTTP request.
    The apparent encoding, provided by the chardet library.Deregister a previously registered hook.
        Returns True if the hook existed, False if not.
        prepare_bodydecode_unicodefdata_encode_paramsUnsupported event specified, with event name "%s"<Response [%s]>deregister_hookITER_CHUNK_SIZEResponse.__bool__raise_for_statusPrepares the given HTTP URL.Prepares the given HTTP method.Iterates over the response data, one line at a time.  When
        stream=True is set on the request, this avoids reading the
        content at once into memory for large responses.

        .. note:: This method is not reentrant safe.
        iter_linesPreparedRequest.prepareCONTENT_CHUNK_SIZEResponse.__exit__Prepares the given hooks.PreparedRequest.copyResponse.raise_for_status<module requests.models>chunk_sizedelimiterRequestEncodingMixin._encode_filesResponse.textResponse.__getstate__.<locals>.<genexpr>A user-created :class:`Request <Request>` object.

    Used to prepare a :class:`PreparedRequest <PreparedRequest>`, which is sent to the server.

    :param method: HTTP method to use.
    :param url: URL to send.
    :param headers: dictionary of headers to send.
    :param files: dictionary of {filename: fileobject} files to multipart upload.
    :param data: the body to attach to the request. If a dictionary is provided, form-encoding will take place.
    :param json: json for the body to attach to the request (if files or data is not specified).
    :param params: dictionary of URL parameters to append to the URL.
    :param auth: Auth handler or (user, pass) tuple.
    :param cookies: dictionary or CookieJar of cookies to attach to this request.
    :param hooks: dictionary of callback hooks, for internal usage.

    Usage::

      >>> import requests
      >>> req = requests.Request('GET', 'http://httpbin.org/get')
      >>> req.prepare()
      <PreparedRequest [GET]>
    _content_consumedPreparedRequest.prepare_urlPreparedRequest.prepare_bodyResponse.is_redirectPrepares the given HTTP headers.RequestEncodingMixin.path_urlRequestHooksMixin.register_hookReleases the connection back to the pool. Once this method has been
        called the underlying ``raw`` object must not be accessed again.

        *Note: Should not normally need to be called explicitly.*
        Returns True if :attr:`status_code` is less than 400, False if not.

        This attribute checks if the status code of the response is between
        400 and 600 to see if there was a client error or a server error. If
        the status code is between 200 and 400, this will return True. This
        is **not** a check to see if the response code is ``200 OK``.
        Response.apparent_encodingstream_chunks%s Client Error: %s for url: %sdoseqIterates over the response data.  When stream=True is set on the
        request, this avoids reading the content at once into memory for
        large responses.  The chunk size is the number of bytes it should
        read into memory.  This is not necessarily the length of each item
        returned as decoding can take place.

        chunk_size must be of type int or None. A value of None will
        function differently depending on the value of `stream`.
        stream=True will read data as it arrives in whatever size the
        chunks are received. If stream=False, data is returned as
        a single chunk.

        If decode_unicode is True, content will be decoded using the best
        available encoding based on the response.
        The fully mutable :class:`PreparedRequest <PreparedRequest>` object,
    containing the exact bytes that will be sent to the server.

    Generated from either a :class:`Request <Request>` object or manually.

    Usage::

      >>> import requests
      >>> req = requests.Request('GET', 'http://httpbin.org/get')
      >>> r = req.prepare()
      <PreparedRequest [GET]>

      >>> s = requests.Session()
      >>> s.send(r)
      <Response [200]>
    chunk_size must be an int, it is instead a %s.Invalid URL %r: No host suppliedurl_authEncode parameters in a piece of data.

        Will successfully encode parameters when passed as a dict or a list of
        2-tuples. Order is retained if data is a list of 2-tuples but arbitrary
        if parameters are supplied as a dict.
        Response.is_permanent_redirectRequestHooksMixin.deregister_hookPrepare Content-Length header based on request method and bodyprepare_methodPreparedRequest.__init__True if this Response one of the permanent versions of redirect.http_error_msgRequestHooksMixin.register_hook.<locals>.<genexpr>new_fieldsPreparedRequest.prepare_headersprepare_hooksRaises stored :class:`HTTPError`, if one occurred.PreparedRequest.__repr__Files must be provided.PreparedRequest.prepare_methodData must not be a string.Prepares the given HTTP cookie data.

        This function eventually generates a ``Cookie`` header from the
        given cookies using cookielib. Due to cookielib's design, the header
        will not be regenerated if it already exists, meaning this function
        can only be called once for the life of the
        :class:`PreparedRequest <PreparedRequest>` object. Any subsequent calls
        to ``prepare_cookies`` will have no actual effect, unless the "Cookie"
        header is removed beforehand.
        Streamed bodies and files are mutually exclusive.Response.__repr__Build the body for a multipart/form-data request.

        Will successfully encode files when passed as a dict or a list of
        tuples. Order is retained if data is a list of tuples but arbitrary
        if parameters are supplied as a dict.
        The tuples may be 2-tuples (filename, fileobj), 3-tuples (filename, fileobj, contentype)
        or 4-tuples (filename, fileobj, contentype, custom_headers).
        <Request [%s]>Response.__iter__fh
requests.models
~~~~~~~~~~~~~~~

This module contains the primary objects that power Requests.
Allows you to use a response as an iterator.reused_chunksProperly register a hook.C:\code\venv\callllama\lib\site-packages\requests\models.pyPreparedRequest.prepare_content_length%s&%sPreparedRequest.prepare_cookiesContent of the response, in bytes.Response.iter_linesResponse.iter_content.<locals>.generateRequestEncodingMixin._encode_params_get_idna_encoded_hostResponse.okcomplexjsonResponse.closeURL has an invalid label.Build the path URL to use.Prepares the given HTTP auth data.Response.__nonzero__%s Server Error: %s for url: %sReturns True if :attr:`status_code` is less than 400.

        This attribute checks if the status code of the response is between
        400 and 600 to see if there was a client error or a server error. If
        the status code, is between 200 and 400, this will return True. This
        is **not** a check to see if the response code is ``200 OK``.
        Response.linksencodings.idnaResponse.__setstate__Response.contentResponse.jsonReturns a PreparedRequest for the next request in a redirect chain, if there is one.Response.__enter__moved_permanentlyapplication/jsonPreparedRequest.prepare_hooksPrepares the given HTTP body data.PreparedRequest.prepare_authPreparedRequest._get_idna_encoded_hostResponse.nextReturns the json-encoded content of a response, if any.

        :param \*\*kwargs: Optional arguments that ``json.loads`` takes.
        :raises ValueError: If the response body does not contain valid json.
        Content of the response, in unicode.

        If Response.encoding is None, encoding will be guessed using
        ``chardet``.

        The encoding of the response content is determined based solely on HTTP
        headers, following RFC 2616 to the letter. If you can take advantage of
        non-HTTP knowledge to make a better guess at the encoding, you should
        set ``r.encoding`` appropriately before accessing this property.
        requests.packagesrequests.packages.<module requests.packages>C:\code\venv\callllama\lib\site-packages\requests\packages.pyYou can only send PreparedRequests.merged_cookiesnew_proxiesbypass_proxyenviron_proxiesSession.getkeys_to_movesee_otherredirect_parsedConstructs a :class:`Request <Request>`, prepares it and sends it.
        Returns :class:`Response <Response>` object.

        :param method: method for the new :class:`Request` object.
        :param url: URL for the new :class:`Request` object.
        :param params: (optional) Dictionary or bytes to be sent in the query
            string for the :class:`Request`.
        :param data: (optional) Dictionary, bytes, or file-like object to send
            in the body of the :class:`Request`.
        :param json: (optional) json to send in the body of the
            :class:`Request`.
        :param headers: (optional) Dictionary of HTTP Headers to send with the
            :class:`Request`.
        :param cookies: (optional) Dict or CookieJar object to send with the
            :class:`Request`.
        :param files: (optional) Dictionary of ``'filename': file-like-objects``
            for multipart encoding upload.
        :param auth: (optional) Auth tuple or callable to enable
            Basic/Digest/Custom HTTP Auth.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) <timeouts>` tuple.
        :type timeout: float or tuple
        :param allow_redirects: (optional) Set to True by default.
        :type allow_redirects: bool
        :param proxies: (optional) Dictionary mapping protocol or protocol and
            hostname to the URL of the proxy.
        :param stream: (optional) whether to immediately download the response
            content. Defaults to ``False``.
        :param verify: (optional) Either a boolean, in which case it controls whether we verify
            the server's TLS certificate, or a string, in which case it must be a path
            to a CA bundle to use. Defaults to ``True``.
        :param cert: (optional) if String, path to ssl client cert file (.pem).
            If Tuple, ('cert', 'key') pair.
        :rtype: requests.Response
        No connection adapters were found for '%s'REQUESTS_CA_BUNDLESends a HEAD request. Returns :class:`Response` object.

        :param url: URL for the new :class:`Request` object.
        :param \*\*kwargs: Optional arguments that ``request`` takes.
        :rtype: requests.Response
        merge_environment_settingsoriginal_parsedA Requests session.

    Provides cookie persistence, connection-pooling, and configuration.

    Basic Usage::

      >>> import requests
      >>> s = requests.Session()
      >>> s.get('http://httpbin.org/get')
      <Response [200]>

    Or as a context manager::

      >>> with requests.Session() as s:
      >>>     s.get('http://httpbin.org/get')
      <Response [200]>
    When being redirected we may want to strip authentication from the
        request to avoid leaking credentials. This method intelligently removes
        and reapplies authentication where possible to avoid credential loss.
        Session.__enter__This method re-evaluates the proxy configuration by considering the
        environment variables. If we are redirected to a URL covered by
        NO_PROXY, we strip the proxy configuration. Otherwise, we set missing
        proxy keys for this URL (in case they were stripped by a previous
        redirect).

        This method also replaces the Proxy-Authorization header where
        necessary.

        :rtype: dict
        CURL_CA_BUNDLEyield_requests
        Check the environment and merge it with some settings.

        :rtype: dict
        Session.requestrebuild_proxiesprepare_requestSends a PATCH request. Returns :class:`Response` object.

        :param url: URL for the new :class:`Request` object.
        :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
        :param \*\*kwargs: Optional arguments that ``request`` takes.
        :rtype: requests.Response
        SessionRedirectMixin.rebuild_authSends a DELETE request. Returns :class:`Response` object.

        :param url: URL for the new :class:`Request` object.
        :param \*\*kwargs: Optional arguments that ``request`` takes.
        :rtype: requests.Response
        preferred_clockSends a POST request. Returns :class:`Response` object.

        :param url: URL for the new :class:`Request` object.
        :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
        :param json: (optional) json to send in the body of the :class:`Request`.
        :param \*\*kwargs: Optional arguments that ``request`` takes.
        :rtype: requests.Response
        Receives a Response. Returns a redirect URI or ``None``Session.__getstate__dict_classmerge_settingrequest_settingsession_settingmerged_settingnone_keysSession.headprefetchtrust_envmax_redirects
requests.session
~~~~~~~~~~~~~~~~

This module provides a Session object to manage and persist settings across
requests (cookies, auth, proxies).
perf_counterrequest_hookssession_hooksSession.patchReceives a Response. Returns a generator of Responses or Requests.Session.put<module requests.sessions>get_redirect_targetSessionRedirectMixin.resolve_redirectsSession.__init__Send a given PreparedRequest.

        :rtype: requests.Response
        Sends a OPTIONS request. Returns :class:`Response` object.

        :param url: URL for the new :class:`Request` object.
        :param \*\*kwargs: Optional arguments that ``request`` takes.
        :rtype: requests.Response
        Sends a GET request. Returns :class:`Response` object.

        :param url: URL for the new :class:`Request` object.
        :param \*\*kwargs: Optional arguments that ``request`` takes.
        :rtype: requests.Response
        new_auth
    Returns a :class:`Session` for context-management.

    :rtype: Session
    get_adapter
        Returns the appropriate connection adapter for the given URL.

        :rtype: requests.adapters.BaseAdapter
        Closes all adapters and as such the sessionSession.postSession.deleteSession.closeSessionRedirectMixin.rebuild_methodSession.optionsSession.prepare_requestC:\code\venv\callllama\lib\site-packages\requests\sessions.pyDetermines appropriate setting for a given request, taking into account
    the explicit setting on that request, and the setting in the session. If a
    setting is a dictionary, they will be merged together using `dict_class`
    Registers a connection adapter to a prefix.

        Adapters are sorted in descending order by prefix length.
        env_proxiesSession.merge_environment_settingsSession.__setstate__Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.

        :param request: :class:`Request` instance to prepare with this
            session's settings.
        :rtype: requests.PreparedRequest
        Session.__exit__When being redirected we may want to change the method of the request
        based on certain specs or browser behavior.
        SessionRedirectMixin.rebuild_proxiesSessionRedirectMixin.get_redirect_targetSession.sendSends a PUT request. Returns :class:`Response` object.

        :param url: URL for the new :class:`Request` object.
        :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
        :param \*\*kwargs: Optional arguments that ``request`` takes.
        :rtype: requests.Response
        merge_hooksSession.mount©ÚselfÚmethodÚurlÚparamsÚdataÚheadersÚcookiesÚfilesÚauthÚtimeoutÚallow_redirectsÚproxiesÚhooksÚstreamÚverifyÚcertÚjsonÚreqÚprepÚsettingsÚsend_kwargsÚrespExceeded %s redirects.Session.get_adapterProperly merges both requests and session hooks.

    This is necessary because when request_hooks == {'response': []}, the
    merge breaks Session hooks entirely.
    ©ÚselfÚrespÚreqÚstreamÚtimeoutÚverifyÚcertÚproxiesÚyield_requestsÚadapter_kwargsÚhistÚurlÚprevious_fragmentÚprepared_requestÚparsed_rurlÚparsedÚpurged_headersÚheaderÚheadersÚ
rewindableSession.__getstate__.<locals>.<genexpr>_codes_init.<locals>.<genexpr>_init.<locals>.doc.<locals>.<genexpr>requests.status_codestitles``%s``
The ``codes`` object defines a mapping from common names for HTTP statuses
to their numerical codes, accessible either as attributes or as dictionary
items.

>>> requests.codes['temporary_redirect']
307
>>> requests.codes.teapot
418
>>> requests.codes['\o/']
200

Some codes have multiple names, and both upper- and lower-case versions of
the names are allowed. For example, ``codes.ok``, ``codes.OK``, and
``codes.okay`` all correspond to the HTTP status code 200.
ûéd   )zcontinueée   )zswitching_protocolséf   )z
processingég   )z
checkpointéz   )zuri_too_longzrequest_uri_too_longéÈ   )zokzokayzall_okzall_okayzall_goodz\o/u   âéÉ   )zcreatedéÊ   )zacceptedéË   )znon_authoritative_infoznon_authoritative_informationéÌ   )z
no_contentéÍ   )zreset_contentzresetéÎ   )zpartial_contentzpartialéÏ   )zmulti_statuszmultiple_statuszmulti_statizmultiple_statiéÐ   )zalready_reportedéâ   )zim_usedi,  )zmultiple_choicesi-  )zmoved_permanentlyzmovedz\o-i.  )zfoundi/  )z	see_otherzotheri0  )znot_modifiedi1  )z	use_proxyi2  )zswitch_proxyi3  )ztemporary_redirectztemporary_movedz	temporaryi4  )zpermanent_redirectzresume_incompletezresumei  )zbad_requestzbadi  )zunauthorizedi  )zpayment_requiredzpaymenti  )z	forbiddeni  )z	not_foundz-o-i  )zmethod_not_allowedznot_allowedi  )znot_acceptablei  )zproxy_authentication_requiredz
proxy_authzproxy_authenticationi  )zrequest_timeoutztimeouti  )zconflicti  )zgonei  )zlength_requiredi  )zprecondition_failedzpreconditioni  )zrequest_entity_too_largei  )zrequest_uri_too_largei  )zunsupported_media_typezunsupported_mediaz
media_typei   )zrequested_range_not_satisfiablezrequested_rangezrange_not_satisfiablei¡  )zexpectation_failedi¢  )zim_a_teapotzteapotzi_am_a_teapoti¥  )zmisdirected_requesti¦  )zunprocessable_entityzunprocessablei§  )zlockedi¨  )zfailed_dependencyz
dependencyi©  )zunordered_collectionz	unorderediª  )zupgrade_requiredzupgradei¬  )zprecondition_requiredzpreconditioni­  )ztoo_many_requestsztoo_manyi¯  )zheader_fields_too_largezfields_too_largei¼  )zno_responseznoneiÁ  )z
retry_withzretryiÂ  )z$blocked_by_windows_parental_controlszparental_controlsiÃ  )zunavailable_for_legal_reasonszlegal_reasonsió  )zclient_closed_requestiô  )zinternal_server_errorzserver_errorz/o\u   âiõ  )znot_implementediö  )zbad_gatewayi÷  )zservice_unavailablezunavailableiø  )zgateway_timeoutiù  )zhttp_version_not_supportedzhttp_versioniú  )zvariant_also_negotiatesiû  )zinsufficient_storageiý  )zbandwidth_limit_exceededz	bandwidthiþ  )znot_extendediÿ  )znetwork_authentication_requiredznetwork_authznetwork_authentication0C:\code\venv\callllama\lib\site-packages\requests\status_codes.py<module requests.status_codes>* %d: %slowerkeyCaseInsensitiveDict.lower_itemskeyvalLookupDict.getA case-insensitive ``dict``-like object.

    Implements all methods and operations of
    ``MutableMapping`` as well as dict's ``copy``. Also
    provides ``lower_items``.

    All keys are expected to be strings. The structure remembers the
    case of the last key to be set, and ``iter(instance)``,
    ``keys()``, ``items()``, ``iterkeys()``, and ``iteritems()``
    will contain case-sensitive keys. However, querying and contains
    testing is case insensitive::

        cid = CaseInsensitiveDict()
        cid['Accept'] = 'application/json'
        cid['aCCEPT'] == 'application/json'  # True
        list(cid) == ['Accept']  # True

    For example, ``headers['content-encoding']`` will return the
    value of a ``'Content-Encoding'`` response header, regardless
    of how the header name was originally stored.

    If the constructor, ``.update``, or equality comparison
    operations are given keys that have equal ``.lower()``s, the
    behavior is undefined.
    Like iteritems(), but with all lowercase keys.casedkeymappedvalueCaseInsensitiveDict.__iter__CaseInsensitiveDict.__eq__CaseInsensitiveDict.__repr__CaseInsensitiveDict.__init__C:\code\venv\callllama\lib\site-packages\requests\structures.pyCaseInsensitiveDict.copyLookupDict.__getitem__requests.structuresCaseInsensitiveDict.lower_items.<locals>.<genexpr>CaseInsensitiveDict.__getitem__CaseInsensitiveDict.__setitem__
requests.structures
~~~~~~~~~~~~~~~~~~~

Data structures that power Requests.
Dictionary lookup object.<module requests.structures>CaseInsensitiveDict.__len__LookupDict.__repr__CaseInsensitiveDict.__delitem__<lookup '%s'>CaseInsensitiveDict.__iter__.<locals>.<genexpr>LookupDict.__init___storegettempdirUn-escape any percent-escape sequences in a URI that are unreserved
    characters. This leaves all reserved, illegal and non-ASCII bytes encoded.

    :rtype: str
    index_of_equals^\S[^\r\n]*$|^$Returns the Requests tuple auth for a given url from netrc.<meta.*?charset=["\']*(.+?)["\'>]nullcountzip_fileall://Requests has determined the content-length for this request using the binary size of the file: however, the file has been opened in text mode (i.e. without the 'b' flag in the mode). This may lead to an incorrect content-length. In Requests 3.0, support will be removed for files in text mode.address_in_networkno_proxy_argfrom_key_val_listUNRESERVED_SETZipFiledict_to_sequencesafe_with_percentsafe_without_percentset_environ<> '"xml_reis_valid_cidrStream decodes a iterator.new_schemestring_ipshould_bypass_proxies.<locals>.<genexpr><meta.*?content=["\']*;?charset=(.+?)["\'>]ipaddrReturns the requested content back in unicode.

    :param r: Response object to get unicode content from.

    Tried:

    1. charset from content-type
    2. fall back and replace all unicode characters

    :rtype: str
    internetSettings_parse_list_headerbitsstring_networkUnable to rewind request body for redirect.items_to_stripVerifies that header value is a string which doesn't contain
    leading whitespace or return characters. This prevents unintended
    header injection.

    :param header: tuple, in the format (name, value).
    Return True, if the host should be bypassed.

        Checks proxy settings gathered from the environment, if specified,
        or the registry.
        unquote_unreservedInvalid percent-escape sequence: '%s'raise_errorsbasenameutf-8-sig=Lnetrc_path!#$%&'()*+,/:;=?@[]~HKEY_CURRENT_USERnetaddrnetmaskQueryValueExslice_lengthtotal_lengthcurrent_positionInvalid return character or leading space in header: %sTake an object and test to see if it can be represented as a
    dictionary. If it can be, return a list of tuples, e.g.,

    ::

        >>> to_key_val_list([('key', 'val')])
        [('key', 'val')]
        >>> to_key_val_list({'key': 'val'})
        [('key', 'val')]
        >>> to_key_val_list('string')
        ValueError: cannot encode objects that are not 2-tuples.

    :rtype: list
    NetrcParseError
    Return a string representing the default user agent.

    :rtype: str
    proxy_bypass_registryparams_dictConverts mask from /xx format to xxx.xxx.xxx.xxx

    Example: if mask is 24 function returns 255.255.255.0

    :rtype: str
    %s/%sProxyOverride^<\?xml.*?encoding=["\']*(.+?)["\'>]urlpartsreplace_charsproxyEnableMove file pointer back to its recorded starting position
    so it can be read again on redirect.
    fstatutf-32-leReturns an internal sequence dictionary update.get_encodings_from_contentAccept-Encoding_netrctmplogin_iproxyOverrideauthenticatorsutf-16-beshould_bypass_proxies.<locals>.<lambda>User-Agent_CLEAN_HEADER_REGEX_STRget_proxyReturns a CookieJar from a key/value dictionary.

    :param cj: CookieJar to insert cookies into.
    :param cookie_dict: Dict of key/values to insert into CookieJar.
    :rtype: CookieJar
    pragma_redotted_netmaskThis function allows you to check if an IP belongs to a network subnet

    Example: returns True if ip = 192.168.1.1 and net = 192.168.1.0/24
             returns False if ip = 192.168.1.1 and net = 192.168.100.0/24

    :rtype: bool
    extracted_pathutf-16-leis_filenameNETRC_FILESReturns a key/value dictionary from a CookieJar.

    :param cj: CookieJar object to extract cookies from.
    :rtype: dict
    In requests 3.0, get_unicode_from_response will be removed. For more information, please see the discussion on issue #2266. (This warning should only appear once.)Parse lists of key, value pairs as described by RFC 2068 Section 2 and
    convert them into a python dict:

    >>> d = parse_dict_header('foo="is a fish", bar="as well"')
    >>> type(d) is dict
    True
    >>> sorted(d.items())
    [('bar', 'as well'), ('foo', 'is a fish')]

    If there is no value for a key it will be `None`:

    >>> parse_dict_header('key_without_value')
    {'key_without_value': None}

    To create a header from the :class:`dict` again, use the
    :func:`dump_header` function.

    :param value: a string with a dict header.
    :return: :class:`dict`
    :rtype: dict
    Set the environment variable 'env_name' to 'value'

    Save previous value, yield, and then restore the previous value stored in
    the environment variable 'env_name'.

    If 'value' is None, do nothingReturns encodings from given HTTP Header Dict.

    :param headers: dictionary to extract encoding from.
    :rtype: str
    An error occurred when rewinding request body for redirect.Value for header {%s: %s} must be of type str or bytes, not %s.netrc
    Returns whether we should bypass proxies or not.

    :rtype: bool
    ¾B   úFÚMúYÚiÚrÚxú2Úpú-Údú8ÚXÚKÚQÚcÚDÚEÚlÚyÚSÚOú3ÚhÚHÚmÚ.ÚPÚBÚUúJÚzúVÚAú6ÚIÚLÚkú5ÚoÚaÚ0ÚZú7Ú_ÚgÚ1ÚTúGÚfÚeÚWÚuÚwúRÚnÚbÚqÚjÚtú~ÚNÚsú4ú9ÚvÚCGiven a url with authentication components, extract them into a tuple of
    username,password.

    :rtype: (str,str)
    utf-32-be<local>add_dict_to_cookiejar_null3host_with_portProxyEnable:{0}old_valueIterate over slices of a string.
requests.utils
~~~~~~~~~~~~~~

This module provides utility functions that are used within Requests
that are also useful for external consumption.

    Very simple check of the cidr format in no_proxy variable.

    :rtype: bool
    Software\Microsoft\Windows\CurrentVersion\Internet Settings, *<Take an object and test to see if it can be represented as a
    dictionary. Unless it can not be represented as such, return an
    OrderedDict, e.g.,

    ::

        >>> from_key_val_list([('key', 'val')])
        OrderedDict([('key', 'val')])
        >>> from_key_val_list('string')
        ValueError: need more than 1 value to unpack
        >>> from_key_val_list({'key': 'val'})
        OrderedDict([('key', 'val')])

    :rtype: OrderedDict
    C:\code\venv\callllama\lib\site-packages\requests\utils.pydefault_user_agentReturns encodings from given content string.

    :param content: bytestring to extract encodings from.
    Return a list of parsed link headers proxies.

    i.e. Link: <http:/.../front.jpeg>; rel=front; type="image/jpeg",<http://.../back.jpeg>; rel=back;type="image/jpeg"

    :rtype: list
    In requests 3.0, get_encodings_from_content will be removed. For more information, please see the discussion on issue #2266. (This warning should only appear once.)charset_re_null2Given a URL that may or may not have a scheme, prepend the given scheme.
    Does not replace a present scheme with the one provided as an argument.

    :rtype: str
    Select a proxy for the url, if applicable.

    :param url: The url being for the request
    :param proxies: A dictionary of schemes or schemes and hosts to proxy URLs
    splitstrtempfileRe-quote the given URI.

    This function passes the given URI through an unquote/quote cycle to
    ensure that it is fully and consistently quoted.

    :rtype: str
    _CLEAN_HEADER_REGEX_BYTEdict_from_cookiejarproxy_keysParse lists as described by RFC 2068 Section 2.

    In particular, parse comma-separated lists where the elements of
    the list may include quoted-strings.  A quoted-string could
    contain a comma.  A non-quoted string could have quotes in the
    middle.  Quotes are removed automatically after parsing.

    It basically works like :func:`parse_set_header` just that items
    may appear multiple times and case sensitivity is preserved.

    The return value is a standard :class:`list`:

    >>> parse_list_header('token, "quoted value"')
    ['token', 'quoted value']

    To create a header from the :class:`list` again, use the
    :func:`dump_header` function.

    :param value: a string with a list header.
    :return: :class:`list`
    :rtype: list
    ~/{0}isalnumvalue_changedReturns content type and parameters from given header

    :param header: string
    :return: tuple containing content type and dictionary of
         parameters
    proxy_ipzipfile_parse_content_type_headergaierrornamelist
    Given a url remove the fragment and the authentication part.

    :rtype: str
    Unquotes a header value.  (Reversal of :func:`quote_header_value`).
    This does not use the real unquoting but what browsers are actually
    using for quoting.

    :param value: the header value to unquote.
    :rtype: str
    Tries to guess the filename of the given object.!#$&'()*+,/:;=?@[]~
    :rtype: requests.structures.CaseInsensitiveDict
    is_ipv4_addressis_zipfilegetincrementaldecoder
    Return a dict of environment proxies.

    :rtype: dict
    Replace nonexistent paths that look like they refer to a member of a zip
    archive with the location of an extracted copy of the target, or else
    just return the provided path unchanged.
    unquote_header_valueinet_ntoa<module requests.utils>st_size1.11.0def raise_from(value, from_value):
    try:
        if from_value is None:
            raise value
        raise value from from_value
    finally:
        value = None
with_metaclass.<locals>.metaclass.__prepare__six.moves.urllibsix.moves.urllib_errorsix.moves.urllib.responseC:\code\venv\callllama\lib\site-packages\six.pygetoutputsubprocesssix.moves.urllib.requestsix.moves.urllib_parse<module six>def raise_from(value, from_value):
    try:
        raise value from from_value
    finally:
        value = None
six.moves.urllib.errordef reraise(tp, value, tb=None):
    try:
        raise tp, value, tb
    finally:
        tb = None
six.moves.urllib.robotparsersplitvalueemail.MIMEImageparse_keqv_listunquote_to_bytesemail_mime_imageemail.mime.imageC:\code\venv\callllama\lib\site-packages\tzlocal<module tzlocal>C:\code\venv\callllama\lib\site-packages\tzlocal\__init__.pytzenvusr/local/etc/localtimeetc/timezoneCan not find any timezone configuration\s*TIMEZONE\s*=\s*"configfiletzpathetctzzone_retimezone_reend_re_try_tz_from_envislink_get_localzoneC:\code\venv\callllama\lib\site-packages\tzlocal\unix.pyTZif2<module tzlocal.unix>\s*ZONE\s*=\s*"etc/sysconfig/clockvar/db/zoneinforealpathetc/conf.d/clocktzlocal() does not support non-zoneinfo timezones like %s. 
Please use a timezone in the form of Continent/CityGet the computers configured local timezone, if any.Tries to find the local timezone configuration.

    This method prefers finding the timezone name and passing that to pytz,
    over passing in the localtime file, as in the later case the zoneinfo
    name is unknown.

    The parameter _root makes the function look for files like /etc/localtime
    beneath the _root directory. This is primarily used by the tests.
    In normal usage you call the function without parameters.C:\code\venv\callllama\lib\site-packages\tzlocal\win32.pyCan not find timezone keyvaluesget_localzone_namelocaltzsubkeyTimeZoneKeyNameCan not find Windows timezone configuration<module tzlocal.win32>Returns the zoneinfo-based tzinfo object that matches the Windows-configured timezone.ûzAfrica/AbidjanzGreenwich Standard TimezAfrica/AccrazGreenwich Standard TimezAfrica/Addis_AbabazE. Africa Standard TimezAfrica/AlgierszW. Central Africa Standard TimezAfrica/AsmerazE. Africa Standard TimezAfrica/BamakozGreenwich Standard TimezAfrica/BanguizW. Central Africa Standard TimezAfrica/BanjulzGreenwich Standard TimezAfrica/BissauzGreenwich Standard TimezAfrica/BlantyrezSouth Africa Standard TimezAfrica/BrazzavillezW. Central Africa Standard TimezAfrica/BujumburazSouth Africa Standard TimezAfrica/CairozEgypt Standard TimezAfrica/CasablancazMorocco Standard TimezAfrica/CeutazRomance Standard TimezAfrica/ConakryzGreenwich Standard TimezAfrica/DakarzGreenwich Standard TimezAfrica/Dar_es_SalaamzE. Africa Standard TimezAfrica/DjiboutizE. Africa Standard TimezAfrica/DoualazW. Central Africa Standard TimezAfrica/El_AaiunzMorocco Standard TimezAfrica/FreetownzGreenwich Standard TimezAfrica/GaboronezSouth Africa Standard TimezAfrica/HararezSouth Africa Standard TimezAfrica/JohannesburgzSouth Africa Standard TimezAfrica/JubazE. Africa Standard TimezAfrica/KampalazE. Africa Standard TimezAfrica/KhartoumzE. Africa Standard TimezAfrica/KigalizSouth Africa Standard TimezAfrica/KinshasazW. Central Africa Standard TimezAfrica/LagoszW. Central Africa Standard TimezAfrica/LibrevillezW. Central Africa Standard TimezAfrica/LomezGreenwich Standard TimezAfrica/LuandazW. Central Africa Standard TimezAfrica/LubumbashizSouth Africa Standard TimezAfrica/LusakazSouth Africa Standard TimezAfrica/MalabozW. Central Africa Standard TimezAfrica/MaputozSouth Africa Standard TimezAfrica/MaseruzSouth Africa Standard TimezAfrica/MbabanezSouth Africa Standard TimezAfrica/MogadishuzE. Africa Standard TimezAfrica/MonroviazGreenwich Standard TimezAfrica/NairobizE. Africa Standard TimezAfrica/NdjamenazW. Central Africa Standard TimezAfrica/NiameyzW. Central Africa Standard TimezAfrica/NouakchottzGreenwich Standard TimezAfrica/OuagadougouzGreenwich Standard TimezAfrica/Porto-NovozW. Central Africa Standard TimezAfrica/Sao_TomezGreenwich Standard TimezAfrica/TimbuktuzGreenwich Standard TimezAfrica/TripolizLibya Standard TimezAfrica/TuniszW. Central Africa Standard TimezAfrica/WindhoekzNamibia Standard TimezAmerica/AdakzAleutian Standard TimezAmerica/AnchoragezAlaskan Standard TimezAmerica/AnguillazSA Western Standard TimezAmerica/AntiguazSA Western Standard TimezAmerica/AraguainazTocantins Standard TimezAmerica/Argentina/La_RiojazArgentina Standard TimezAmerica/Argentina/Rio_GallegoszArgentina Standard TimezAmerica/Argentina/SaltazArgentina Standard TimezAmerica/Argentina/San_JuanzArgentina Standard TimezAmerica/Argentina/San_LuiszArgentina Standard TimezAmerica/Argentina/TucumanzArgentina Standard TimezAmerica/Argentina/UshuaiazArgentina Standard TimezAmerica/ArubazSA Western Standard TimezAmerica/AsuncionzParaguay Standard TimezAmerica/AtkazAleutian Standard TimezAmerica/BahiazBahia Standard TimezAmerica/Bahia_BanderaszCentral Standard Time (Mexico)zAmerica/BarbadoszSA Western Standard TimezAmerica/BelemzSA Eastern Standard TimezAmerica/BelizezCentral America Standard TimezAmerica/Blanc-SablonzSA Western Standard TimezAmerica/Boa_VistazSA Western Standard TimezAmerica/BogotazSA Pacific Standard TimezAmerica/BoisezMountain Standard TimezAmerica/Buenos_AireszArgentina Standard TimezAmerica/Cambridge_BayzMountain Standard TimezAmerica/Campo_GrandezCentral Brazilian Standard TimezAmerica/CancunzEastern Standard Time (Mexico)zAmerica/CaracaszVenezuela Standard TimezAmerica/CatamarcazArgentina Standard TimezAmerica/CayennezSA Eastern Standard TimezAmerica/CaymanzSA Pacific Standard TimezAmerica/ChicagozCentral Standard TimezAmerica/ChihuahuazMountain Standard Time (Mexico)zAmerica/Coral_HarbourzSA Pacific Standard TimezAmerica/CordobazArgentina Standard TimezAmerica/Costa_RicazCentral America Standard TimezAmerica/CrestonzUS Mountain Standard TimezAmerica/CuiabazCentral Brazilian Standard TimezAmerica/CuracaozSA Western Standard TimezAmerica/DanmarkshavnzUTCzAmerica/DawsonzPacific Standard TimezAmerica/Dawson_CreekzUS Mountain Standard TimezAmerica/DenverzMountain Standard TimezAmerica/DetroitzEastern Standard TimezAmerica/DominicazSA Western Standard TimezAmerica/EdmontonzMountain Standard TimezAmerica/EirunepezSA Pacific Standard TimezAmerica/El_SalvadorzCentral America Standard TimezAmerica/EnsenadazPacific Standard Time (Mexico)zAmerica/Fort_NelsonzUS Mountain Standard TimezAmerica/FortalezazSA Eastern Standard TimezAmerica/Glace_BayzAtlantic Standard TimezAmerica/GodthabzGreenland Standard TimezAmerica/Goose_BayzAtlantic Standard TimezAmerica/Grand_TurkzTurks And Caicos Standard TimezAmerica/GrenadazSA Western Standard TimezAmerica/GuadeloupezSA Western Standard TimezAmerica/GuatemalazCentral America Standard TimezAmerica/GuayaquilzSA Pacific Standard TimezAmerica/GuyanazSA Western Standard TimezAmerica/HalifaxzAtlantic Standard TimezAmerica/HavanazCuba Standard TimezAmerica/HermosillozUS Mountain Standard TimezAmerica/Indiana/KnoxzCentral Standard TimezAmerica/Indiana/MarengozUS Eastern Standard TimezAmerica/Indiana/PetersburgzEastern Standard TimezAmerica/Indiana/Tell_CityzCentral Standard TimezAmerica/Indiana/VevayzUS Eastern Standard TimezAmerica/Indiana/VincenneszEastern Standard TimezAmerica/Indiana/WinamaczEastern Standard TimezAmerica/IndianapoliszUS Eastern Standard TimezAmerica/InuvikzMountain Standard TimezAmerica/IqaluitzEastern Standard TimezAmerica/JamaicazSA Pacific Standard TimezAmerica/JujuyzArgentina Standard TimezAmerica/JuneauzAlaskan Standard TimezAmerica/Kentucky/MonticellozEastern Standard TimezAmerica/Knox_INzCentral Standard TimezAmerica/KralendijkzSA Western Standard TimezAmerica/La_PazzSA Western Standard TimezAmerica/LimazSA Pacific Standard TimezAmerica/Los_AngeleszPacific Standard TimezAmerica/LouisvillezEastern Standard TimezAmerica/Lower_PrinceszSA Western Standard TimezAmerica/MaceiozSA Eastern Standard TimezAmerica/ManaguazCentral America Standard TimezAmerica/ManauszSA Western Standard TimezAmerica/MarigotzSA Western Standard TimezAmerica/MartiniquezSA Western Standard TimezAmerica/MatamoroszCentral Standard TimezAmerica/MazatlanzMountain Standard Time (Mexico)zAmerica/MendozazArgentina Standard TimezAmerica/MenomineezCentral Standard TimezAmerica/MeridazCentral Standard Time (Mexico)zAmerica/MetlakatlazAlaskan Standard TimezAmerica/Mexico_CityzCentral Standard Time (Mexico)zAmerica/MiquelonzSaint Pierre Standard TimezAmerica/MonctonzAtlantic Standard TimezAmerica/MonterreyzCentral Standard Time (Mexico)zAmerica/MontevideozMontevideo Standard TimezAmerica/MontrealzEastern Standard TimezAmerica/MontserratzSA Western Standard TimezAmerica/NassauzEastern Standard TimezAmerica/New_YorkzEastern Standard TimezAmerica/NipigonzEastern Standard TimezAmerica/NomezAlaskan Standard TimezAmerica/NoronhazUTC-02zAmerica/North_Dakota/BeulahzCentral Standard TimezAmerica/North_Dakota/CenterzCentral Standard TimezAmerica/North_Dakota/New_SalemzCentral Standard TimezAmerica/OjinagazMountain Standard TimezAmerica/PanamazSA Pacific Standard TimezAmerica/PangnirtungzEastern Standard TimezAmerica/ParamaribozSA Eastern Standard TimezAmerica/PhoenixzUS Mountain Standard TimezAmerica/Port-au-PrincezHaiti Standard TimezAmerica/Port_of_SpainzSA Western Standard TimezAmerica/Porto_AcrezSA Pacific Standard TimezAmerica/Porto_VelhozSA Western Standard TimezAmerica/Puerto_RicozSA Western Standard TimezAmerica/Punta_ArenaszMagallanes Standard TimezAmerica/Rainy_RiverzCentral Standard TimezAmerica/Rankin_InletzCentral Standard TimezAmerica/RecifezSA Eastern Standard TimezAmerica/ReginazCanada Central Standard TimezAmerica/ResolutezCentral Standard TimezAmerica/Rio_BrancozSA Pacific Standard TimezAmerica/Santa_IsabelzPacific Standard Time (Mexico)zAmerica/SantaremzSA Eastern Standard TimezAmerica/SantiagozPacific SA Standard TimezAmerica/Santo_DomingozSA Western Standard TimezAmerica/Sao_PaulozE. South America Standard TimezAmerica/ScoresbysundzAzores Standard TimezAmerica/ShiprockzMountain Standard TimezAmerica/SitkazAlaskan Standard TimezAmerica/St_BarthelemyzSA Western Standard TimezAmerica/St_JohnszNewfoundland Standard TimezAmerica/St_KittszSA Western Standard TimezAmerica/St_LuciazSA Western Standard TimezAmerica/St_ThomaszSA Western Standard TimezAmerica/St_VincentzSA Western Standard TimezAmerica/Swift_CurrentzCanada Central Standard TimezAmerica/TegucigalpazCentral America Standard TimezAmerica/ThulezAtlantic Standard TimezAmerica/Thunder_BayzEastern Standard TimezAmerica/TijuanazPacific Standard Time (Mexico)zAmerica/TorontozEastern Standard TimezAmerica/TortolazSA Western Standard TimezAmerica/VancouverzPacific Standard TimezAmerica/VirginzSA Western Standard TimezAmerica/WhitehorsezPacific Standard TimezAmerica/WinnipegzCentral Standard TimezAmerica/YakutatzAlaskan Standard TimezAmerica/YellowknifezMountain Standard TimezAntarctica/CaseyzCentral Pacific Standard TimezAntarctica/DaviszSE Asia Standard TimezAntarctica/DumontDUrvillezWest Pacific Standard TimezAntarctica/MacquariezCentral Pacific Standard TimezAntarctica/MawsonzWest Asia Standard TimezAntarctica/McMurdozNew Zealand Standard TimezAntarctica/PalmerzMagallanes Standard TimezAntarctica/RotherazSA Eastern Standard TimezAntarctica/South_PolezNew Zealand Standard TimezAntarctica/SyowazE. Africa Standard TimezAntarctica/VostokzCentral Asia Standard TimezArctic/LongyearbyenzW. Europe Standard Timez	Asia/AdenzArab Standard TimezAsia/AlmatyzCentral Asia Standard Timez
Asia/AmmanzJordan Standard TimezAsia/AnadyrzRussia Time Zone 11z
Asia/AqtauzWest Asia Standard TimezAsia/AqtobezWest Asia Standard TimezAsia/AshgabatzWest Asia Standard TimezAsia/AshkhabadzWest Asia Standard TimezAsia/AtyrauzWest Asia Standard TimezAsia/BaghdadzArabic Standard TimezAsia/BahrainzArab Standard Timez	Asia/BakuzAzerbaijan Standard TimezAsia/BangkokzSE Asia Standard TimezAsia/BarnaulzAltai Standard TimezAsia/BeirutzMiddle East Standard TimezAsia/BishkekzCentral Asia Standard TimezAsia/BruneizSingapore Standard TimezAsia/CalcuttazIndia Standard Timez
Asia/ChitazTransbaikal Standard TimezAsia/ChoibalsanzUlaanbaatar Standard TimezAsia/ChongqingzChina Standard TimezAsia/ChungkingzChina Standard TimezAsia/ColombozSri Lanka Standard Timez
Asia/DaccazBangladesh Standard TimezAsia/DamascuszSyria Standard Timez
Asia/DhakazBangladesh Standard Timez	Asia/DilizTokyo Standard Timez
Asia/DubaizArabian Standard TimezAsia/DushanbezWest Asia Standard TimezAsia/FamagustazTurkey Standard Timez	Asia/GazazWest Bank Standard TimezAsia/HarbinzChina Standard TimezAsia/HebronzWest Bank Standard TimezAsia/Hong_KongzChina Standard Timez	Asia/HovdzW. Mongolia Standard TimezAsia/IrkutskzNorth Asia East Standard TimezAsia/JakartazSE Asia Standard TimezAsia/JayapurazTokyo Standard TimezAsia/JerusalemzIsrael Standard Timez
Asia/KabulzAfghanistan Standard TimezAsia/KamchatkazRussia Time Zone 11zAsia/KarachizPakistan Standard TimezAsia/KashgarzCentral Asia Standard TimezAsia/KatmanduzNepal Standard TimezAsia/KhandygazYakutsk Standard TimezAsia/KrasnoyarskzNorth Asia Standard TimezAsia/Kuala_LumpurzSingapore Standard TimezAsia/KuchingzSingapore Standard TimezAsia/KuwaitzArab Standard Timez
Asia/MacaozChina Standard Timez
Asia/MacauzChina Standard TimezAsia/MagadanzMagadan Standard TimezAsia/MakassarzSingapore Standard TimezAsia/ManilazSingapore Standard TimezAsia/MuscatzArabian Standard TimezAsia/NicosiazGTB Standard TimezAsia/NovokuznetskzNorth Asia Standard TimezAsia/NovosibirskzN. Central Asia Standard Timez	Asia/OmskzOmsk Standard Timez	Asia/OralzWest Asia Standard TimezAsia/Phnom_PenhzSE Asia Standard TimezAsia/PontianakzSE Asia Standard TimezAsia/PyongyangzNorth Korea Standard Timez
Asia/QatarzArab Standard TimezAsia/QyzylordazCentral Asia Standard TimezAsia/RangoonzMyanmar Standard TimezAsia/RiyadhzArab Standard TimezAsia/SaigonzSE Asia Standard TimezAsia/SakhalinzSakhalin Standard TimezAsia/SamarkandzWest Asia Standard Timez
Asia/SeoulzKorea Standard TimezAsia/ShanghaizChina Standard TimezAsia/SingaporezSingapore Standard TimezAsia/SrednekolymskzRussia Time Zone 10zAsia/TaipeizTaipei Standard TimezAsia/TashkentzWest Asia Standard TimezAsia/TbilisizGeorgian Standard TimezAsia/TehranzIran Standard TimezAsia/Tel_AvivzIsrael Standard TimezAsia/ThimbuzBangladesh Standard TimezAsia/ThimphuzBangladesh Standard Timez
Asia/TokyozTokyo Standard Timez
Asia/TomskzTomsk Standard TimezAsia/Ujung_PandangzSingapore Standard TimezAsia/UlaanbaatarzUlaanbaatar Standard TimezAsia/Ulan_BatorzUlaanbaatar Standard TimezAsia/UrumqizCentral Asia Standard TimezAsia/Ust-NerazVladivostok Standard TimezAsia/VientianezSE Asia Standard TimezAsia/VladivostokzVladivostok Standard TimezAsia/YakutskzYakutsk Standard TimezAsia/YekaterinburgzEkaterinburg Standard TimezAsia/YerevanzCaucasus Standard TimezAtlantic/AzoreszAzores Standard TimezAtlantic/BermudazAtlantic Standard TimezAtlantic/CanaryzGMT Standard TimezAtlantic/Cape_VerdezCape Verde Standard TimezAtlantic/FaeroezGMT Standard TimezAtlantic/Jan_MayenzW. Europe Standard TimezAtlantic/MadeirazGMT Standard TimezAtlantic/ReykjavikzGreenwich Standard TimezAtlantic/South_GeorgiazUTC-02zAtlantic/St_HelenazGreenwich Standard TimezAtlantic/StanleyzSA Eastern Standard TimezAustralia/ACTzAUS Eastern Standard TimezAustralia/AdelaidezCen. Australia Standard TimezAustralia/BrisbanezE. Australia Standard TimezAustralia/Broken_HillzCen. Australia Standard TimezAustralia/CanberrazAUS Eastern Standard TimezAustralia/CurriezTasmania Standard TimezAustralia/DarwinzAUS Central Standard TimezAustralia/EuclazAus Central W. Standard TimezAustralia/HobartzTasmania Standard TimezAustralia/LHIzLord Howe Standard TimezAustralia/LindemanzE. Australia Standard TimezAustralia/Lord_HowezLord Howe Standard TimezAustralia/MelbournezAUS Eastern Standard TimezAustralia/NSWzAUS Eastern Standard TimezAustralia/NorthzAUS Central Standard TimezAustralia/PerthzW. Australia Standard TimezAustralia/QueenslandzE. Australia Standard TimezAustralia/SouthzCen. Australia Standard TimezAustralia/SydneyzAUS Eastern Standard TimezAustralia/TasmaniazTasmania Standard TimezAustralia/VictoriazAUS Eastern Standard TimezAustralia/WestzW. Australia Standard TimezAustralia/YancowinnazCen. Australia Standard TimezBrazil/AcrezSA Pacific Standard TimezBrazil/DeNoronhazUTC-02zBrazil/EastzE. South America Standard TimezBrazil/WestzSA Western Standard TimezCST6CDTzCentral Standard TimezCanada/AtlanticzAtlantic Standard TimezCanada/CentralzCentral Standard TimezCanada/EasternzEastern Standard TimezCanada/MountainzMountain Standard TimezCanada/NewfoundlandzNewfoundland Standard TimezCanada/PacificzPacific Standard TimezCanada/SaskatchewanzCanada Central Standard TimezCanada/YukonzPacific Standard TimezChile/ContinentalzPacific SA Standard TimezChile/EasterIslandzEaster Island Standard TimezCubazCuba Standard TimezEST5EDTzEastern Standard TimezEgyptzEgypt Standard TimezEirezGMT Standard TimezEtc/GMTzUTCz	Etc/GMT+1zCape Verde Standard Timez
Etc/GMT+10zHawaiian Standard Timez
Etc/GMT+11zUTC-11z
Etc/GMT+12zDateline Standard Timez	Etc/GMT+2zUTC-02z	Etc/GMT+3zSA Eastern Standard Timez	Etc/GMT+4zSA Western Standard Timez	Etc/GMT+5zSA Pacific Standard Timez	Etc/GMT+6zCentral America Standard Timez	Etc/GMT+7zUS Mountain Standard Timez	Etc/GMT+8zUTC-08z	Etc/GMT+9zUTC-09z	Etc/GMT-1zW. Central Africa Standard Timez
Etc/GMT-10zWest Pacific Standard Timez
Etc/GMT-11zCentral Pacific Standard Timez
Etc/GMT-12zUTC+12z
Etc/GMT-13zUTC+13z
Etc/GMT-14zLine Islands Standard Timez	Etc/GMT-2zSouth Africa Standard Timez	Etc/GMT-3zE. Africa Standard Timez	Etc/GMT-4zArabian Standard Timez	Etc/GMT-5zWest Asia Standard Timez	Etc/GMT-6zCentral Asia Standard Timez	Etc/GMT-7zSE Asia Standard Timez	Etc/GMT-8zSingapore Standard Timez	Etc/GMT-9zTokyo Standard TimezEtc/UTCzUTCzEurope/AmsterdamzW. Europe Standard TimezEurope/AndorrazW. Europe Standard TimezEurope/AstrakhanzAstrakhan Standard TimezEurope/AthenszGTB Standard TimezEurope/BelfastzGMT Standard TimezEurope/BelgradezCentral Europe Standard TimezEurope/BerlinzW. Europe Standard TimezEurope/BratislavazCentral Europe Standard TimezEurope/BrusselszRomance Standard TimezEurope/BucharestzGTB Standard TimezEurope/BudapestzCentral Europe Standard TimezEurope/BusingenzW. Europe Standard TimezEurope/ChisinauzE. Europe Standard TimezEurope/CopenhagenzRomance Standard TimezEurope/DublinzGMT Standard TimezEurope/GibraltarzW. Europe Standard TimezEurope/GuernseyzGMT Standard TimezEurope/HelsinkizFLE Standard TimezEurope/Isle_of_ManzGMT Standard TimezEurope/IstanbulzTurkey Standard TimezEurope/JerseyzGMT Standard TimezEurope/KaliningradzKaliningrad Standard TimezEurope/KievzFLE Standard TimezEurope/KirovzRussian Standard TimezEurope/LisbonzGMT Standard TimezEurope/LjubljanazCentral Europe Standard TimezEurope/LondonzGMT Standard TimezEurope/LuxembourgzW. Europe Standard TimezEurope/MadridzRomance Standard TimezEurope/MaltazW. Europe Standard TimezEurope/MariehamnzFLE Standard TimezEurope/MinskzBelarus Standard TimezEurope/MonacozW. Europe Standard TimezEurope/MoscowzRussian Standard TimezEurope/OslozW. Europe Standard TimezEurope/PariszRomance Standard TimezEurope/PodgoricazCentral Europe Standard TimezEurope/PraguezCentral Europe Standard TimezEurope/RigazFLE Standard TimezEurope/RomezW. Europe Standard TimezEurope/SamarazRussia Time Zone 3zEurope/San_MarinozW. Europe Standard TimezEurope/SarajevozCentral European Standard TimezEurope/SaratovzSaratov Standard TimezEurope/SimferopolzRussian Standard TimezEurope/SkopjezCentral European Standard TimezEurope/SofiazFLE Standard TimezEurope/StockholmzW. Europe Standard TimezEurope/TallinnzFLE Standard TimezEurope/TiranezCentral Europe Standard TimezEurope/TiraspolzE. Europe Standard TimezEurope/UlyanovskzAstrakhan Standard TimezEurope/UzhgorodzFLE Standard TimezEurope/VaduzzW. Europe Standard TimezEurope/VaticanzW. Europe Standard TimezEurope/ViennazW. Europe Standard TimezEurope/VilniuszFLE Standard TimezEurope/VolgogradzRussian Standard TimezEurope/WarsawzCentral European Standard TimezEurope/ZagrebzCentral European Standard TimezEurope/ZaporozhyezFLE Standard TimezEurope/ZurichzW. Europe Standard TimezGBzGMT Standard TimezGB-EirezGMT Standard TimezGMT+0zUTCzGMT-0zUTCzGMT0zUTCz	GreenwichzUTCzHongkongzChina Standard TimezIcelandzGreenwich Standard TimezIndian/AntananarivozE. Africa Standard TimezIndian/ChagoszCentral Asia Standard TimezIndian/ChristmaszSE Asia Standard TimezIndian/CocoszMyanmar Standard TimezIndian/ComorozE. Africa Standard TimezIndian/KerguelenzWest Asia Standard TimezIndian/MahezMauritius Standard TimezIndian/MaldiveszWest Asia Standard TimezIndian/MauritiuszMauritius Standard TimezIndian/MayottezE. Africa Standard TimezIndian/ReunionzMauritius Standard TimezIranzIran Standard TimezIsraelzIsrael Standard TimezJamaicazSA Pacific Standard TimezJapanzTokyo Standard Timez	KwajaleinzUTC+12zLibyazLibya Standard TimezMST7MDTzMountain Standard TimezMexico/BajaNortezPacific Standard Time (Mexico)zMexico/BajaSurzMountain Standard Time (Mexico)zMexico/GeneralzCentral Standard Time (Mexico)zNZzNew Zealand Standard TimezNZ-CHATzChatham Islands Standard TimezNavajozMountain Standard TimezPRCzChina Standard TimezPST8PDTzPacific Standard TimezPacific/ApiazSamoa Standard TimezPacific/AucklandzNew Zealand Standard TimezPacific/BougainvillezBougainville Standard TimezPacific/ChathamzChatham Islands Standard TimezPacific/EasterzEaster Island Standard TimezPacific/EfatezCentral Pacific Standard TimezPacific/EnderburyzUTC+13zPacific/FakaofozUTC+13zPacific/FijizFiji Standard TimezPacific/FunafutizUTC+12zPacific/GalapagoszCentral America Standard TimezPacific/GambierzUTC-09zPacific/GuadalcanalzCentral Pacific Standard TimezPacific/GuamzWest Pacific Standard TimezPacific/HonoluluzHawaiian Standard TimezPacific/JohnstonzHawaiian Standard TimezPacific/KiritimatizLine Islands Standard TimezPacific/KosraezCentral Pacific Standard TimezPacific/KwajaleinzUTC+12zPacific/MajurozUTC+12zPacific/MarquesaszMarquesas Standard TimezPacific/MidwayzUTC-11zPacific/NauruzUTC+12zPacific/NiuezUTC-11zPacific/NorfolkzNorfolk Standard TimezPacific/NoumeazCentral Pacific Standard TimezPacific/Pago_PagozUTC-11zPacific/PalauzTokyo Standard TimezPacific/PitcairnzUTC-08zPacific/PonapezCentral Pacific Standard TimezPacific/Port_MoresbyzWest Pacific Standard TimezPacific/RarotongazHawaiian Standard TimezPacific/SaipanzWest Pacific Standard TimezPacific/SamoazUTC-11zPacific/TahitizHawaiian Standard TimezPacific/TarawazUTC+12zPacific/TongatapuzTonga Standard TimezPacific/TrukzWest Pacific Standard TimezPacific/WakezUTC+12zPacific/WalliszUTC+12zPolandzCentral European Standard TimezPortugalzGMT Standard TimezROCzTaipei Standard TimezROKzKorea Standard Timez	SingaporezSingapore Standard TimezTurkeyzTurkey Standard Timez	US/AlaskazAlaskan Standard TimezUS/AleutianzAleutian Standard Timez
US/ArizonazUS Mountain Standard Timez
US/CentralzCentral Standard Timez
US/EasternzEastern Standard Timez	US/HawaiizHawaiian Standard TimezUS/Indiana-StarkezCentral Standard TimezUS/MichiganzEastern Standard TimezUS/MountainzMountain Standard Timez
US/PacificzPacific Standard TimezUS/SamoazUTC-11zUTCzUTCz	UniversalzUTCzW-SUzRussian Standard TimezZuluzUTC0ûzAUS Central Standard TimezAustralia/DarwinzAUS Eastern Standard TimezAustralia/SydneyzAfghanistan Standard Timez
Asia/KabulzAlaskan Standard TimezAmerica/AnchoragezAleutian Standard TimezAmerica/AdakzAltai Standard TimezAsia/BarnaulzArab Standard TimezAsia/RiyadhzArabian Standard Timez
Asia/DubaizArabic Standard TimezAsia/BaghdadzArgentina Standard TimezAmerica/Buenos_AireszAstrakhan Standard TimezEurope/AstrakhanzAtlantic Standard TimezAmerica/HalifaxzAus Central W. Standard TimezAustralia/EuclazAzerbaijan Standard Timez	Asia/BakuzAzores Standard TimezAtlantic/AzoreszBahia Standard TimezAmerica/BahiazBangladesh Standard Timez
Asia/DhakazBelarus Standard TimezEurope/MinskzBougainville Standard TimezPacific/BougainvillezCanada Central Standard TimezAmerica/ReginazCape Verde Standard TimezAtlantic/Cape_VerdezCaucasus Standard TimezAsia/YerevanzCen. Australia Standard TimezAustralia/AdelaidezCentral America Standard TimezAmerica/GuatemalazCentral Asia Standard TimezAsia/AlmatyzCentral Brazilian Standard TimezAmerica/CuiabazCentral Europe Standard TimezEurope/BudapestzCentral European Standard TimezEurope/WarsawzCentral Pacific Standard TimezPacific/GuadalcanalzCentral Standard TimezAmerica/ChicagozCentral Standard Time (Mexico)zAmerica/Mexico_CityzChatham Islands Standard TimezPacific/ChathamzChina Standard TimezAsia/ShanghaizCuba Standard TimezAmerica/HavanazDateline Standard Timez
Etc/GMT+12zE. Africa Standard TimezAfrica/NairobizE. Australia Standard TimezAustralia/BrisbanezE. Europe Standard TimezEurope/ChisinauzE. South America Standard TimezAmerica/Sao_PaulozEaster Island Standard TimezPacific/EasterzEastern Standard TimezAmerica/New_YorkzEastern Standard Time (Mexico)zAmerica/CancunzEgypt Standard TimezAfrica/CairozEkaterinburg Standard TimezAsia/YekaterinburgzFLE Standard TimezEurope/KievzFiji Standard TimezPacific/FijizGMT Standard TimezEurope/LondonzGTB Standard TimezEurope/BucharestzGeorgian Standard TimezAsia/TbilisizGreenland Standard TimezAmerica/GodthabzGreenwich Standard TimezAtlantic/ReykjavikzHaiti Standard TimezAmerica/Port-au-PrincezHawaiian Standard TimezPacific/HonoluluzIndia Standard TimezAsia/CalcuttazIran Standard TimezAsia/TehranzIsrael Standard TimezAsia/JerusalemzJordan Standard Timez
Asia/AmmanzKaliningrad Standard TimezEurope/KaliningradzKorea Standard Timez
Asia/SeoulzLibya Standard TimezAfrica/TripolizLine Islands Standard TimezPacific/KiritimatizLord Howe Standard TimezAustralia/Lord_HowezMagadan Standard TimezAsia/MagadanzMagallanes Standard TimezAmerica/Punta_ArenaszMarquesas Standard TimezPacific/MarquesaszMauritius Standard TimezIndian/MauritiuszMiddle East Standard TimezAsia/BeirutzMontevideo Standard TimezAmerica/MontevideozMorocco Standard TimezAfrica/CasablancazMountain Standard TimezAmerica/DenverzMountain Standard Time (Mexico)zAmerica/ChihuahuazMyanmar Standard TimezAsia/RangoonzN. Central Asia Standard TimezAsia/NovosibirskzNamibia Standard TimezAfrica/WindhoekzNepal Standard TimezAsia/KatmanduzNew Zealand Standard TimezPacific/AucklandzNewfoundland Standard TimezAmerica/St_JohnszNorfolk Standard TimezPacific/NorfolkzNorth Asia East Standard TimezAsia/IrkutskzNorth Asia Standard TimezAsia/KrasnoyarskzNorth Korea Standard TimezAsia/PyongyangzOmsk Standard Timez	Asia/OmskzPacific SA Standard TimezAmerica/SantiagozPacific Standard TimezAmerica/Los_AngeleszPacific Standard Time (Mexico)zAmerica/TijuanazPakistan Standard TimezAsia/KarachizParaguay Standard TimezAmerica/AsuncionzRomance Standard TimezEurope/PariszRussia Time Zone 10zAsia/SrednekolymskzRussia Time Zone 11zAsia/KamchatkazRussia Time Zone 3zEurope/SamarazRussian Standard TimezEurope/MoscowzSA Eastern Standard TimezAmerica/CayennezSA Pacific Standard TimezAmerica/BogotazSA Western Standard TimezAmerica/La_PazzSE Asia Standard TimezAsia/BangkokzSaint Pierre Standard TimezAmerica/MiquelonzSakhalin Standard TimezAsia/SakhalinzSamoa Standard TimezPacific/ApiazSaratov Standard TimezEurope/SaratovzSingapore Standard TimezAsia/SingaporezSouth Africa Standard TimezAfrica/JohannesburgzSri Lanka Standard TimezAsia/ColombozSyria Standard TimezAsia/DamascuszTaipei Standard TimezAsia/TaipeizTasmania Standard TimezAustralia/HobartzTocantins Standard TimezAmerica/AraguainazTokyo Standard Timez
Asia/TokyozTomsk Standard Timez
Asia/TomskzTonga Standard TimezPacific/TongatapuzTransbaikal Standard Timez
Asia/ChitazTurkey Standard TimezEurope/IstanbulzTurks And Caicos Standard TimezAmerica/Grand_TurkzUS Eastern Standard TimezAmerica/IndianapoliszUS Mountain Standard TimezAmerica/PhoenixzUTCzEtc/GMTzUTC+12z
Etc/GMT-12zUTC+13z
Etc/GMT-13zUTC-02z	Etc/GMT+2zUTC-08z	Etc/GMT+8zUTC-09z	Etc/GMT+9zUTC-11z
Etc/GMT+11zUlaanbaatar Standard TimezAsia/UlaanbaatarzVenezuela Standard TimezAmerica/CaracaszVladivostok Standard TimezAsia/VladivostokzW. Australia Standard TimezAustralia/PerthzW. Central Africa Standard TimezAfrica/LagoszW. Europe Standard TimezEurope/BerlinzW. Mongolia Standard Timez	Asia/HovdzWest Asia Standard TimezAsia/TashkentzWest Bank Standard TimezAsia/HebronzWest Pacific Standard TimezPacific/Port_MoresbyzYakutsk Standard TimezAsia/Yakutsk0tz_wintz_namesC:\code\venv\callllama\lib\site-packages\tzlocal\windows_tz.pysetLevelC:\code\venv\callllama\lib\site-packages\urllib3add_stderr_loggerdisable_warnings
    Helper for quickly adding a StreamHandler to the logger. Useful for
    debugging.

    Returns the handler after adding it.
    C:\code\venv\callllama\lib\site-packages\urllib3\__init__.pyAdded a stderr logging handler to logger: %sAndrey Petrov (andrey.petrov@shazow.net)setFormatter%(asctime)s %(levelname)s %(message)s
urllib3 - Thread-safe connection pooling and re-using.

    Helper for quickly disabling all urllib3 warnings.
    1.23<module urllib3>_copy_fromHTTPHeaderDict.popRecentlyUsedContainer.__init__HTTPHeaderDict.__getitem__HTTPHeaderDict.itermergedRecentlyUsedContainer.__delitem__RLock.__exit__HTTPHeaderDict.__iter__HTTPHeaderDict.from_httplibRecentlyUsedContainer.__getitem__HTTPHeaderDict.__len__RecentlyUsedContainer.__len__RecentlyUsedContainer.clearevicted_value
    :param headers:
        An iterable of field-value pairs. Must not contain multiple field names
        when compared case-insensitively.

    :param kwargs:
        Additional field-value pairs to pass in to ``dict.update``.

    A ``dict`` like container for storing HTTP Headers.

    Field names are stored and compared case-insensitively in compliance with
    RFC 7230. Iteration provides the first case-sensitive key seen for each
    case-insensitive pair.

    Using ``__setitem__`` syntax overwrites fields that compare equal
    case-insensitively in order to maintain ``dict``'s api. For fields that
    compare equal, instead create a new ``HTTPHeaderDict`` and use ``.add``
    in a loop.

    If multiple fields that are equal case-insensitively are passed to the
    constructor or ``.update``, the behavior is undefined and some will be
    lost.

    >>> headers = HTTPHeaderDict()
    >>> headers.add('Set-Cookie', 'foo=bar')
    >>> headers.add('set-cookie', 'baz=quxx')
    >>> headers['content-length'] = '7'
    >>> headers['SET-cookie']
    'foo=bar, baz=quxx'
    >>> headers['Content-Length']
    '7'
    key_lowernew_valsHTTPHeaderDict.__ne__HTTPHeaderDict.addIteration over this class is unlikely to be threadsafe.HTTPHeaderDict.__setitem__HTTPHeaderDict.itemsget_allRead headers from a Python 2 httplib message object.HTTPHeaderDict.__contains__Adds a (name, value) pair, doesn't overwrite the value if it already
        exists.

        >>> headers = HTTPHeaderDict(foo='bar')
        >>> headers.add('Foo', 'baz')
        >>> headers['foo']
        'bar, baz'
        <module urllib3._collections>D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
          If key is not found, d is returned if given, otherwise KeyError is raised.
        HTTPHeaderDict.__delitem__Iterate over all header lines, including duplicate ones.Header continuation with no previous header: %sgetlistIterate over all headers, merging duplicate ones together.HTTPHeaderDict.__repr__RecentlyUsedContainer.__iter__HTTPHeaderDict._copy_fromRLock.__enter__ContainerCls_NullHTTPHeaderDict.iteritemsHTTPHeaderDict.__init__obs_fold_continued_leadersReturns a list of all the values for the named field. Returns an
        empty list if the key doesn't exist.HTTPHeaderDict.__eq__.<locals>.<genexpr>RecentlyUsedContainer.__setitem__HTTPHeaderDict.copygetallmatchingheadersHTTPHeaderDict.getlistHTTPHeaderDict.discardextend() takes at most 1 positional arguments ({0} given)
    Provides a thread-safe dict-like container which maintains up to
    ``maxsize`` keys while throwing away the least-recently-used keys beyond
    ``maxsize``.

    :param maxsize:
        Maximum number of recent elements to retain.

    :param dispose_func:
        Every time an item is evicted from the container,
        ``dispose_func(value)`` is called.  Callback which will get called
    _containerC:\code\venv\callllama\lib\site-packages\urllib3\_collections.pypackages.ordered_dictexc_valueHTTPHeaderDict.extendigetGeneric import function for any type of header-like object.
        Adapted version of MutableMapping.update in order to insert items
        with self.add instead of self.__setitem__
        _HTTPHeaderDict__markerRecentlyUsedContainer.keysHTTPConnection.__init__HTTPSConnection.connect
        Getter method to remove any trailing dots that indicate the hostname is an FQDN.

        In general, SSL certificates don't include the trailing dot indicating a
        fully-qualified domain name, and thus, they don't validate properly when
        checked against a domain name that includes the dot. In addition, some
        servers may not expect to receive the trailing dot when provided.

        However, the hostname with trailing dot is critical to DNS resolution; doing a
        lookup with the trailing dot will properly only resolve the appropriate FQDN,
        whereas a lookup without a trailing dot will search the system's search domain
        list. Thus, it's important to keep the original host around for use only in
        those cases where it's appropriate (i.e., when doing DNS lookup to establish the
        actual TCP connection across which we're going to send HTTP requests).
        urllib3.connectionstringish_typesCertificate did not match expected hostname: %s. Certificate: %stodayskip_hostHTTPConnection.request_chunkedHTTPConnection.connectIPPROTO_TCPis_time_offRECENT_DATE_peer_cert<module urllib3.connection>
        Setter for the `host` property.

        We assume that only urllib3 uses the _dns_host attribute; httplib itself
        only uses `host`, and it seems reasonable that other libraries follow suit.
        util.ssl_HTTPConnection._prepare_connCertificate for {0} has no `subjectAltName`, falling back to check for a `commonName` for now. This feature is being removed by major browsers and deprecated by RFC 2818. (See https://github.com/shazow/urllib3/issues/497 for details.)asserted_hostnameHTTPConnection._new_connSystem time is way off (before {0}). This will probably lead to SSL verification errors Establish a socket connection and set nodelay settings on it.

        :return: New socket connection.
        
        This method should only be called once, before the connection is used.
        TCP_NODELAYC:\code\venv\callllama\lib\site-packages\urllib3\connection.py_tunnel_host
    Based on httplib.HTTPSConnection but wraps the socket with
    SSL certification.
    _match_hostnameHTTPConnection.hostUsed to detect a failed ConnectionCls import.HTTPSConnection.__init__UnverifiedHTTPSConnection
    Based on httplib.HTTPConnection but provides an extra constructor
    backwards-compatibility layer between older and newer Pythons.

    Additional keyword parameters are used to configure attributes of the connection.
    Accepted parameters include:

      - ``strict``: See the documentation on :class:`urllib3.connectionpool.HTTPConnectionPool`
      - ``source_address``: Set the source address for the current connection.

        .. note:: This is ignored for Python 2.6. It is only applied for 2.7 and 3.x

      - ``socket_options``: Set specific options on the underlying socket. If not specified, then
        defaults are loaded from ``HTTPConnection.default_socket_options`` which includes disabling
        Nagle's algorithm (sets TCP_NODELAY to 1) unless the connection is behind a proxy.

        For example, if you wish to enable TCP Keep Alive in addition to the defaults,
        you might pass::

            HTTPConnection.default_socket_options + [
                (socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1),
            ]

        Or you may want to disable the defaults by passing an empty list (e.g., ``[]``).
    VerifiedHTTPSConnection.set_cert
        Alternative to the common request method, which sends the
        body with chunked encoding and not as one block
        VerifiedHTTPSConnection.connectdefault_port
        Get a connection. Will return a pooled connection if one is available.

        If no connections are available and :prop:`.block` is ``False``, then a
        fresh connection is returned.

        :param timeout:
            Seconds to wait before giving up and raising
            :class:`urllib3.exceptions.EmptyPoolError` if the pool is empty and
            :prop:`.block` is ``True``.
        <module urllib3.connectionpool>
    Same as :class:`.HTTPConnectionPool`, but HTTPS.

    When Python is compiled with the :mod:`ssl` module, then
    :class:`.VerifiedHTTPSConnection` is used, which *can* verify certificates,
    instead of :class:`.HTTPSConnection`.

    :class:`.VerifiedHTTPSConnection` uses one of ``assert_fingerprint``,
    ``assert_hostname`` and ``host`` in this order to verify connections.
    If ``assert_hostname`` is False, no verification is done.

    The ``key_file``, ``cert_file``, ``cert_reqs``, ``ca_certs``,
    ``ca_cert_dir``, and ``ssl_version`` are only used if :mod:`ssl` is
    available and are fed into :meth:`urllib3.util.ssl_wrap_socket` to upgrade
    the connection socket into an SSL socket.
    HTTPConnectionPool.urlopen.<locals>.drain_and_release_conn_ipv6_host_set_tunnel
        Establish tunnel connection early, because otherwise httplib
        would improperly set Host: header to proxy's IP:port.
        actual_port_prepare_proxy
        Perform a request on a given urllib connection object taken from our
        pool.

        :param conn:
            a connection from one of our connection pools

        :param timeout:
            Socket timeout in seconds for the request. This can be a
            float or integer, which will set the same timeout value for
            the socket connect and the socket read, or an instance of
            :class:`urllib3.util.Timeout`, which gives you more fine-grained
            control over your timeouts.
        pool_timeoutC:\code\venv\callllama\lib\site-packages\urllib3\connectionpool.pyold_pooltimeout_valueconn_kwgetdefaulttimeoutdid not complete (read)_blocking_errnos
        Close all pooled connections and disable the pool.
        QueueClsHTTPConnectionPool._get_timeouttimeout_objRetrying (%r) after connection broken by '%r': %s_absolute_url
    Base class for all connection pools, such as
    :class:`.HTTPConnectionPool` and :class:`.HTTPSConnectionPool`.
    ConnectionPool.__str__
        Called right before a request is made, after the socket is created.
        HTTPSConnectionPool._validate_connCan't connect to HTTPS URL because the SSL module is not available.©ÚselfÚhostÚportÚstrictÚtimeoutÚmaxsizeÚblockÚheadersÚretriesÚ_proxyÚ_proxy_headersÚkey_fileÚ	cert_fileÚ	cert_reqsÚca_certsÚssl_versionÚassert_hostnameÚassert_fingerprintÚca_cert_dirÚconn_kwnum_requestsHTTPConnectionPool._prepare_proxyNo pool connections are available.actual_hostConnection pool is full, discarding connection: %s
    Given a url, return an :class:`.ConnectionPool` instance of its host.

    This is a shortcut for not having to parse out the scheme, host, and port
    of the url before creating an :class:`.ConnectionPool` instance.

    :param url:
        Absolute URL string that must include the scheme. Port is optional.

    :param \**kw:
        Passes additional parameters to the constructor of the appropriate
        :class:`.ConnectionPool`. Useful for specifying things like
        timeout, maxsize, headers, etc.

    Example::

        >>> conn = connection_from_url('http://google.com/')
        >>> r = conn.request('GET', '/')
    Failed to parse headers (url=%s): %sResetting dropped connection: %sHTTP/?exc_infohttplib_request_kw
    Process IPv6 address literals
    HTTPSConnectionPool._prepare_conn%25HTTPSConnectionPool._prepare_proxyUnverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warningsConnectionPool.closehttplib_responsehpeHTTPConnectionPool._raise_timeoutStarting new HTTPS connection (%d): %s:%s_make_requestHTTPConnectionPool._validate_connHTTPConnectionPool.closeHTTPConnectionPool.is_same_hostConnection aborted.HTTPConnectionPool._put_conn
    Thread-safe connection pool for one host.

    :param host:
        Host used for this HTTP Connection (e.g. "localhost"), passed into
        :class:`httplib.HTTPConnection`.

    :param port:
        Port used for this HTTP Connection (None is equivalent to 80), passed
        into :class:`httplib.HTTPConnection`.

    :param strict:
        Causes BadStatusLine to be raised if the status line can't be parsed
        as a valid HTTP/1.0 or 1.1 status line, passed into
        :class:`httplib.HTTPConnection`.

        .. note::
           Only works in Python 2. This parameter is ignored in Python 3.

    :param timeout:
        Socket timeout in seconds for each individual connection. This can
        be a float or integer, which sets the timeout for the HTTP request,
        or an instance of :class:`urllib3.util.Timeout` which gives you more
        fine-grained control over request timeouts. After the constructor has
        been parsed, this is always a `urllib3.util.Timeout` object.

    :param maxsize:
        Number of connections to save that can be reused. More than 1 is useful
        in multithreaded situations. If ``block`` is set to False, more
        connections will be created but they will not be saved once they've
        been used.

    :param block:
        If set to True, no more than ``maxsize`` connections will be used at
        a time. When no free connections are available, the call will block
        until a connection has been released. This is a useful side effect for
        particular multithreaded situations where one does not want to use more
        than maxsize connections per host to prevent flooding.

    :param headers:
        Headers to include with all requests, unless other headers are given
        explicitly.

    :param retries:
        Retry configuration to use by default with requests in this pool.

    :param _proxy:
        Parsed proxy URL, should not be used directly, instead, see
        :class:`urllib3.connectionpool.ProxyManager`"

    :param _proxy_headers:
        A dictionary with proxy headers, should not be used directly,
        instead, see :class:`urllib3.connectionpool.ProxyManager`"

    :param \**conn_kw:
        Additional parameters are used to create fresh :class:`urllib3.connection.HTTPConnection`,
        :class:`urllib3.connection.HTTPSConnection` instances.
    %s://%s:%s "%s %s %s" %s %sRetry: %sConnectionPool.__init__Starting new HTTP connection (%d): %s:%sutil.connectionConnectionPool.__exit__HTTPConnectionPool.__init__©ÚselfÚmethodÚurlÚbodyÚheadersÚretriesÚredirectÚassert_same_hostÚtimeoutÚpool_timeoutÚrelease_connÚchunkedÚbody_posÚresponse_kwÚconnÚrelease_this_connÚerrÚ
clean_exitÚtimeout_objÚis_new_proxy_connÚhttplib_responseÚresponse_connÚresponseÚeÚdrain_and_release_connÚredirect_locationÚhas_retry_afternum_connectionsHTTPConnectionPool._make_request_http_vsn_str
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you'll need to specify all
        the raw details.

        .. note::

           More commonly, it's appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.

        .. note::

           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.

        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)

        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).

        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.

        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.

            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.

            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.

        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.

        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.

        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.

        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.

        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.

        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you're not preloading
            the response's content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get('preload_content', True)``.

        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.

        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won't need to be set because urllib3 will
            auto-populate the value when needed.

        :param \**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        Read timed out. (read timeout=%s)Pool is closed.%s(host=%r, port=%r)
        Check if the given ``url`` is a member of the same host as this
        connection pool.
        EWOULDBLOCK
        Put a connection back into the pool.

        :param conn:
            Connection object for the current host and port as returned by
            :meth:`._new_conn` or :meth:`._get_conn`.

        If the pool is already full, the connection is closed and discarded
        because we exceeded maxsize. If connections are discarded frequently,
        then maxsize should be increased.

        If the pool is closed, then the connection will be closed and discarded.
        Pool reached maximum size and no more connections are allowed.Cannot connect to proxy.HTTPSConnectionPool._new_connEAGAINHTTPConnectionPool._get_conn_proxy_hostutil.queueHTTPConnectionPool._absolute_url Helper that always returns a :class:`urllib3.util.Timeout` HTTPConnectionPool._new_connHTTPSConnectionPool.__init__Is the error actually a timeout? Will raise a ReadTimeout or pass
        Return a fresh :class:`HTTPConnection`.
        
        Return a fresh :class:`httplib.HTTPSConnection`.
        
        Prepare the ``connection`` for :meth:`urllib3.util.ssl_wrap_socket`
        and establish the tunnel if proxy is used.
        ConnectionPool.__enter__C:\code\venv\callllama\lib\site-packages\urllib3\contribC:\code\venv\callllama\lib\site-packages\urllib3\contrib\__init__.pyUnsupportedExtensionsuppress_ragged_eofsX509API-compatibility wrapper for Python OpenSSL's Connection-class.

    Note: _makefile_refs, _drop() and _reuse() are needed for the garbage
    collector of pypy.
    <module urllib3.contrib.pyopenssl>gettimeoutget_extension_for_class
    Given an PyOpenSSL certificate, provides all the subject alternative names.
    WrappedSocket.filenoVERIFY_NONEUnexpected EOFget_values_for_typeset_tlsext_host_nameWrappedSocket.__init__SSL_WRITE_BLOCKSIZE
SSL with SNI_-support for Python 2. Follow these instructions if you would
like to verify SSL certificates in Python 2. Note, the default libraries do
*not* do certificate checking; you need to do additional work to validate
certificates yourself.

This needs the following packages installed:

* pyOpenSSL (tested with 16.0.0)
* cryptography (minimum 1.3.4, from pyopenssl)
* idna (minimum 2.0, from cryptography)

However, pyopenssl depends on cryptography, which depends on idna, so while we
use all three directly here we end up having relatively few packages required.

You can install them with the following command:

    pip install pyopenssl cryptography idna

To activate certificate checking, call
:func:`~urllib3.contrib.pyopenssl.inject_into_urllib3` from your Python code
before you begin making HTTP requests. This can be done in a ``sitecustomize``
module, or at any other time before your application begins using ``urllib3``,
like this::

    try:
        import urllib3.contrib.pyopenssl
        urllib3.contrib.pyopenssl.inject_into_urllib3()
    except ImportError:
        pass

Now you can use :mod:`urllib3` as you normally would, and it will support SNI
when the required modules are installed.

Activating this module also has the positive side effect of disabling SSL/TLS
compression in Python 2 (see `CRIME attack`_).

If you want to configure the default list of supported cipher suites, you can
set the ``urllib3.contrib.pyopenssl.DEFAULT_SSL_CIPHER_LIST`` variable.

.. _sni: https://en.wikipedia.org/wiki/Server_Name_Indication
.. _crime attack: https://en.wikipedia.org/wiki/CRIME_(security_exploit)
PyOpenSSLContext.verify_modeset_verifyWrappedSocket.sendallWrappedSocket.recv_intocryptography.hazmat.backends.openssl.x509PyOpenSSLContext.__init__set_connect_statePROTOCOL_TLSv1extract_from_urllib3cnxmax_length_send_until_donedo_handshake_on_connect
        Borrowed wholesale from the Python Cryptography Project. It turns out
        that we can't just safely call `idna.encode`: it can explode for
        wildcard names. This avoids that problem.
        bufsizePROTOCOL_TLSv1_1get_subj_alt_name.<locals>.<genexpr>WrappedSocket._dropWrappedSocket._reuseThe read operation timed outPyOpenSSLContext.set_cipherscryptography.x509.extensionscadataExtensionNotFoundRECEIVED_SHUTDOWNuse_privatekey_filebad handshake: %r_fileobject_stdlib_to_openssl_verifyset_optionsWrappedSocket.settimeoutset_passwd_cbVERIFY_FAIL_IF_NO_PEER_CERTPyOpenSSLContext.set_default_verify_pathsTLSv1_2_METHODPyOpenSSLContext.load_cert_chain_ctxerr_noerr_depthreturn_codedump_certificate_CertificateSSLv3_METHODSysCallErrorWrappedSocket.closePyOpenSSLContext.load_cert_chain.<locals>.<lambda>VERIFY_PEERset_cipher_listuserdatause_certificate_chain_filetotal_sentPROTOCOL_TLSv1_2PyOpenSSLContext.load_verify_locationsselect timed outIPAddress_dnsname_to_stdlib.<locals>.idna_encodePyOpenSSLContext.options_verify_callbackPROTOCOL_SSLv3FILETYPE_ASN1
    Verifies that PyOpenSSL's package-level dependencies have been met.
    Throws `ImportError` if they are not met.
    
    Converts a dNSName SubjectAlternativeName field to the form used by the
    standard library on the given Python version.

    Cryptography produces a dNSName as a unicode string that was idna-decoded
    from ASCII bytes. We need to idna-encode that string to get it back, and
    then on Python 3 we also need to convert to unicode via UTF-8 (the stdlib
    uses PyUnicode_FromStringAndSize on it, which decodes via UTF-8).
    get_peer_certificateto_cryptographyopenssl_backendWantReadError_validate_dependencies_metWantWriteErrorZeroReturnErrorWrappedSocket._decref_socketiosget_shutdown'cryptography' module missing required functionality.  Try upgrading to v1.3.4 or newer.prompt_twice_x509CERT_OPTIONAL_openssl_to_stdlib_verify'pyOpenSSL' module missing required functionality. Try upgrading to v0.14 or newer.DuplicateExtensionSSLv23_METHODUndo monkey-patching by :func:`inject_into_urllib3`.WrappedSocket._send_until_done
    I am a wrapper class for the PyOpenSSL ``Context`` object. I am responsible
    for translating the interface of the standard library ``SSLContext`` object
    to calls into PyOpenSSL.
    get_verify_modeWrappedSocket.shutdownTLSv1_1_METHOD_openssl_versionsA problem was encountered with the certificate that prevented urllib3 from finding the SubjectAlternativeName field. This can affect certificate validation. The error was %sWrappedSocket.getpeercertDNSNameUnsupportedGeneralNameTypepackages.backports.makefileorig_util_SSLContextC:\code\venv\callllama\lib\site-packages\urllib3\contrib\pyopenssl.pyMonkey-patch urllib3 with PyOpenSSL-backed SSL-support.get_subjectPyOpenSSLContext.wrap_socketOpenSSL.cryptoOpenSSL.SSLTLSv1_METHODorig_util_HAS_SNISOCKSHTTPSConnectionproxy_rdnssocket_errSOCKSConnectionSOCKS support in urllib3 requires the installation of optional dependencies: specifically, PySocks.  For more information, see https://urllib3.readthedocs.io/en/latest/contrib.html#socks-proxies
This module contains provisional support for SOCKS proxies from within
urllib3. This module supports SOCKS4 (specifically the SOCKS4A variant) and
SOCKS5. To enable its functionality, either install PySocks or install this
module with the ``socks`` extra.

The SOCKS implementation supports the full range of urllib3 features. It also
supports the following SOCKS features:

- SOCKS4
- SOCKS4a
- SOCKS5
- Usernames and passwords for the SOCKS proxy

Known Limitations:

- Currently PySocks does not support contacting remote websites via literal
  IPv6 addresses. Any such connection attempt will fail. You must use a domain
  name.
- Currently PySocks does not support IPv6 connections to the SOCKS proxy. Any
  such connection attempt will fail.
PROXY_TYPE_SOCKS5
    A plain-text HTTP connection that connects via a SOCKS proxy.
    socks4C:\code\venv\callllama\lib\site-packages\urllib3\contrib\socks.py
        Establish a new connection via the SOCKS proxy.
        SOCKSConnection._new_connSOCKSHTTPConnectionPoolproxy_portproxy_usernameproxy_addrSOCKSConnection.__init__proxy_typePROXY_TYPE_SOCKS4
    A version of the urllib3 ProxyManager that routes connections via the
    defined SOCKS proxy.
    socks5hUnable to determine SOCKS version from %ssocks4asocks_version<module urllib3.contrib.socks>socks_optionsSOCKSProxyManager.__init__proxy_passwordSOCKSHTTPSConnectionPoolhttplib_IncompleteReadHeaderParsingError.__init__ Raised when passing an invalid state to a timeout Raised when a socket timeout occurs while connecting to a serverUsed as a container for an error reason supplied in a MaxRetryError.RequestError.__init__
    Body should be httplib.HTTPResponse like (have an fp attribute which
    returns raw chunks) for read_chunked().
    Response needs to be chunked in order to read it as chunks.Base warning used by this module.Warned when connecting to a host with a certificate missing a SAN.Base exception for PoolErrors that have associated URLs.<module urllib3.exceptions>Base exception used by this module.too many error responsesHostChangedError.__init__Raised when SSL certificate fails in an HTTPS connection.IncompleteRead.__repr__Warned when system time is suspected to be wrongFailed to parse: %s Raised when a socket timeout error occurs.

    Catching this error will catch both :exc:`ReadTimeoutErrors
    <ReadTimeoutError>` and :exc:`ConnectTimeoutErrors <ConnectTimeoutError>`.
    Raised when an existing pool gets a request for a foreign host.Warned when making a HTTPS request without SNI available.
    Response length doesn't match expected Content-Length

    Subclass of http_client.IncompleteRead to allow int value
    for `partial` to avoid creating large objects on streamed
    reads.
    The header provided was somehow invalid.Raised when something unexpected happens mid-request/response.MaxRetryError.__init__Raised when a socket timeout occurs while receiving data from a serverRaised when a pool runs out of connections and no more are allowed.Warned when making an unverified HTTPS request.PoolError.__reduce__Warned when certain SSL configuration is not available on a platform.ProxySchemeUnknown.__init__LocationParseError.__init__ProxyManager does not support the supplied schemeC:\code\venv\callllama\lib\site-packages\urllib3\exceptions.pyMax retries exceeded with url: %s (Caused by %r)Raised when the connection to a proxy fails.too many {status_code} error responsesRaised when the maximum number of retries is exceeded.

    :param pool: The connection pool
    :type pool: :class:`~urllib3.connectionpool.HTTPConnectionPool`
    :param string url: The requested Url
    :param exceptions.Exception reason: The underlying error

    Raised when we fail to establish a new connection. Usually ECONNREFUSED.Base exception for errors caused within a pool.urllib3 encountered an error when trying to rewind a bodyRaised when a request enters a pool after the pool has been closed.Raised when automatic decoding based on Content-Type fails.Warned when performing security reducing actionsPoolError.__init__Not supported proxy scheme %sRaised when there is something wrong with a given URL input.Raised when get_host or similar fails to parse the URL input.Raised by assert_header_parsing, but we convert it to a log.warning statement.RequestError.__reduce__Tried to open a foreign host with url: %s%s, unparsed data: %rIncompleteRead(%i bytes read, %i more expected)IncompleteRead.__init__
    Warned when an attempt is made to import a module with missing optional
    dependencies.
    RequestField.__init__mimetypesformat_header_paramheader_nameRequestField.from_tuplescontent_dispositioncontent_location_render_partemail.utilssort_keyfieldnamerequest_paramContent-DispositionC:\code\venv\callllama\lib\site-packages\urllib3\fields.pysort_keys
        Overridable helper function to format a single header parameter.

        :param name:
            The name of the parameter, a string expected to be ASCII only.
        :param value:
            The value of the parameter, provided as a unicode string.
        Content-LocationRequestField.render_headers"\
format_header_param.<locals>.<genexpr>encode_rfc2231
    A data container for request body parameters.

    :param name:
        The name of this request field.
    :param data:
        The data/value body.
    :param filename:
        An optional filename of the request field.
    :param headers:
        An optional dict-like object of headers to initially use for the field.
    header_parts
        Helper function to format and quote a single header.

        Useful for single headers that are composed of multiple items. E.g.,
        'Content-Disposition' fields.

        :param header_parts:
            A sequence of (k, v) tuples or a :class:`dict` of (k, v) to format
            as `k1="v1"; k2="v2"; ...`.
        RequestField._render_part<module urllib3.fields>
        A :class:`~urllib3.fields.RequestField` factory from old-style tuple parameters.

        Supports constructing :class:`~urllib3.fields.RequestField` from
        parameter of key/value strings AND key/filetuple. A filetuple is a
        (filename, data, MIME type) tuple where the MIME type is optional.
        For example::

            'foo': 'bar',
            'fakefile': ('foofile.txt', 'contents of foofile'),
            'realfile': ('barfile.txt', open('realfile').read()),
            'typedfile': ('bazfile.bin', open('bazfile').read(), 'image/jpeg'),
            'nonamefile': 'contents of nonamefile field',

        Field names and filenames must be unicode.
        RequestField._render_parts
        Renders the headers for this request field.
        guess_typeapplication/octet-stream%s*=%sRequestField.make_multipart
        Makes this request field into a multipart request field.

        This method overrides "Content-Disposition", "Content-Type" and
        "Content-Location" headers to the request parameter.

        :param content_type:
            The 'Content-Type' of the request body.
        :param content_location:
            The 'Content-Location' of the request body.

        
    Guess the "Content-Type" of a file.

    :param filename:
        The filename to guess the "Content-Type" of using :mod:`mimetypes`.
    :param default:
        If no "Content-Type" can be guessed, default to `default`.
    
    Helper function to format and quote a single header parameter.

    Particularly useful for header parameters which might contain
    non-ASCII values, like file names. This follows RFC 2231, as
    suggested by RFC 2388 Section 4.4.

    :param name:
        The name of the parameter, a string expected to be ASCII only.
    :param value:
        The value of the parameter, provided as a unicode string.
    guess_content_type
    Iterate over fields.

    Supports list of (k, v) tuples and dicts, and lists of
    :class:`~urllib3.fields.RequestField`.

    iter_fields.<locals>.<genexpr>multipart/form-data; boundary=%s
    .. deprecated:: 1.6

    Iterate over fields.

    The addition of :class:`~urllib3.fields.RequestField` makes this function
    obsolete. Instead, use :func:`iter_field_objects`, which returns
    :class:`~urllib3.fields.RequestField` objects.

    Supports list of (k, v) tuples and dicts.
    
    Encode a dictionary of ``fields`` using the multipart/form-data MIME format.

    :param fields:
        Dictionary of fields or list of (key, :class:`~urllib3.fields.RequestField`).

    :param boundary:
        If not specified, then a random boundary will be generated using
        :func:`urllib3.filepost.choose_boundary`.
    <module urllib3.filepost>writer
    Our embarrassingly-simple replacement for mimetools.choose_boundary.
    C:\code\venv\callllama\lib\site-packages\urllib3\filepost.pygetvalue--%s
--%s--
C:\code\venv\callllama\lib\site-packages\urllib3\packagesurllib3.packagesC:\code\venv\callllama\lib\site-packages\urllib3\packages\__init__.pyssl_match_hostname<module urllib3.packages>urllib3.packages.backportsC:\code\venv\callllama\lib\site-packages\urllib3\packages\backportsC:\code\venv\callllama\lib\site-packages\urllib3\packages\backports\__init__.pyBufferedRWPairunbuffered streams must be binarywritingBufferedReader<module urllib3.packages.backports.makefile>invalid mode %r (only r, w, b allowed)rawmodeC:\code\venv\callllama\lib\site-packages\urllib3\packages\backports\makefile.pySocketIODEFAULT_BUFFER_SIZETextIOWrapperBufferedWriter
backports.makefile
~~~~~~~~~~~~~~~~~~

Backports the Python 3 ``socket.makefile`` method for use with anything that
wants to create a "fake" socket object.

    Backport of ``socket.makefile`` from Python 3.5.
    _OrderedDict__mapOrderedDict.valuesod.__reversed__() <==> reversed(od)od.viewkeys() -> a set-like object providing a view on od's keysOrderedDict.__reduce__link_prevlink_nextod.__iter__() <==> iter(od)get_identod.__eq__(y) <==> od==y.  Comparison to another OD is order-sensitive
        while comparison to a regular mapping is order-insensitive.

        _repr_runningcall_keyod.update(E, **F) -> None.  Update od from dict/iterable E and F.

        If E is a dict instance, does:           for k in E: od[k] = E[k]
        If E has a .keys() method, does:         for k in E.keys(): od[k] = E[k]
        Or if E is an iterable of items, does:   for k, v in E: od[k] = v
        In either case, this is followed by:     for k, v in F.items(): od[k] = v

        C:\code\venv\callllama\lib\site-packages\urllib3\packages\ordered_dict.pyOrderedDict.clearod.viewvalues() -> an object providing a view on od's valuesDictionary that remembers insertion orderdictionary is emptyOrderedDict.updateOrderedDict.viewvaluesOrderedDict.iterkeysOrderedDict.iteritemsdict_setitemfromkeysOrderedDict.__ne__od.popitem() -> (k, v), return and remove a (key, value) pair.
        Pairs are returned in LIFO order if last is true or FIFO order if false.

        OrderedDict.__reversed__od.clear() -> None.  Remove all items from od.OrderedDict.__repr__OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S
        and values equal to v (which defaults to None).

        <module urllib3.packages.ordered_dict>ItemsViewOrderedDict.__setitem__od.pop(k[,d]) -> v, remove specified key and return the corresponding value.
        If key is not found, d is returned if given, otherwise KeyError is raised.

        _abcollinst_dict_OrderedDict__rootReturn state information for picklingdict_delitemkwdsValuesViewod.itervalues -> an iterator over the values in odod.__delitem__(y) <==> del od[y]_get_identod.setdefault(k[,d]) -> od.get(k,d), also set od[k]=d if k not in odod.keys() -> list of keys in od_OrderedDict__markerod.iteritems -> an iterator over the (key, value) items in odupdate() takes at least 1 argument (0 given)update() takes at most 2 positional arguments (%d given)OrderedDict.setdefaultOrderedDict.viewitemsOrderedDict.popitemInitialize an ordered dictionary.  Signature is the same as for
        regular dictionaries, but keyword arguments are not recommended
        because their insertion order is arbitrary.

        od.__repr__() <==> repr(od)od.values() -> list of values in odexpected at most 1 arguments, got %dOrderedDict.fromkeysOrderedDict.keysOrderedDict.__iter__OrderedDict.itervaluesOrderedDict.__init__od.iterkeys() -> an iterator over the keys in odOrderedDict.items_OrderedDict__updateOrderedDict.__eq__od.copy() -> a shallow copy of odOrderedDict.__delitem__OrderedDict.copyKeysViewOrderedDict.viewkeysod.viewitems() -> a set-like object providing a view on od's itemsod.items() -> list of (key, value) pairs in od%s(%r)od.__setitem__(i, y) <==> od[i]=yurllib3.packages.six.movesdef raise_from(value, from_value):
    raise value from from_value
urllib3.packages.six.moves.urllib.requesturllib3.packages.six.moves.urllib.robotparserurllib3.packages.six.moves.urllib.responseurllib3.packages.six.moves.urllib_parsedef reraise(tp, value, tb=None):
    raise tp, value, tb
C:\code\venv\callllama\lib\site-packages\urllib3\packages\six.pyurllib3.packages.six.moves.urllib.error1.10.0def raise_from(value, from_value):
    if from_value is None:
        raise value
    raise value from from_value
urllib3.packages.six.moves.urllib_error<module urllib3.packages.six>C:\code\venv\callllama\lib\site-packages\urllib3\packages\ssl_match_hostnameC:\code\venv\callllama\lib\site-packages\urllib3\packages\ssl_match_hostname\__init__.py_implementation<module urllib3.packages.ssl_match_hostname>Fallback to vendored codebackports.ssl_match_hostnameipnamehost_iphostname %r doesn't match %rdnsnamesurllib3.packages.ssl_match_hostname._implementation_ipaddress_matchVerify that *cert* (in decoded format as returned by
    SSLSocket.getpeercert()) matches the *hostname*.  RFC 2818 and RFC 6125
    rules are followed, but IP addresses are not accepted for *hostname*.

    CertificateError is raised on failure. On success, the function
    returns nothing.
    max_wildcards[^.]+\ZMatching according to RFC 6125, section 6.4.3

    http://tools.ietf.org/html/rfc6125#section-6.4.3
    empty or no certificate, match_hostname needs a SSL socket or SSL context with either CERT_OPTIONAL or CERT_REQUIRED[^.]*_dnsname_match3.5.0.1\AC:\code\venv\callllama\lib\site-packages\urllib3\packages\ssl_match_hostname\_implementation.pyno appropriate commonName or subjectAltName fields were foundThe match_hostname() function from Python 3.3.3, essential when using SSL.patsleftmosthostname %r doesn't match either of %s<module urllib3.packages.ssl_match_hostname._implementation>Exact matching of IP addresses.

    RFC 6125 explicitly doesn't define an algorithm for this
    (section 1.7.2 - "Out of Scope").
    too many wildcards in certificate DNS name: pool_key
        Get a :class:`ConnectionPool` based on the host, port, and scheme.

        If ``port`` isn't given, it will be derived from the ``scheme`` using
        ``urllib3.connectionpool.port_by_scheme``. If ``pool_kwargs`` is
        provided, it is merged with the instance's ``connection_pool_kw``
        variable and used to create the new connection pool, if one is
        needed.
        _merge_pool_kwargs%s://%s:%i_new_poolPoolManager._merge_pool_kwargsheaders_key_fn_by_scheme
        Similar to :func:`urllib3.connectionpool.connection_from_url`.

        If ``pool_kwargs`` is not provided and a new pool needs to be
        constructed, ``self.connection_pool_kw`` is used to initialize
        the :class:`urllib3.connectionpool.ConnectionPool`. If ``pool_kwargs``
        is provided, it is used instead. Note that if a new pool does not
        need to be created for the request, the provided ``pool_kwargs`` are
        not used.
        <module urllib3.poolmanager>Same as HTTP(S)ConnectionPool.urlopen, ``url`` must be absolute.PoolManager.__enter__©z
key_schemezkey_hostzkey_portzkey_timeoutzkey_retriesz
key_strictz	key_blockzkey_source_addresszkey_key_filezkey_cert_filezkey_cert_reqszkey_ca_certszkey_ssl_versionzkey_ca_cert_dirzkey_ssl_contextzkey_maxsizezkey_headersz
key__proxyzkey__proxy_headerszkey_socket_optionszkey__socks_optionszkey_assert_hostnamezkey_assert_fingerprintPoolManager.clearbase_pool_kwargs_set_proxy_headersC:\code\venv\callllama\lib\site-packages\urllib3\poolmanager.pyPoolManager.connection_from_contextkey_class
        Get a :class:`ConnectionPool` based on the request context.

        ``request_context`` must at least contain the ``scheme`` key and its
        value must be a key in ``key_fn_by_scheme`` instance variable.
        
        Get a :class:`ConnectionPool` based on the provided pool key.

        ``pool_key`` should be a namedtuple that only contains immutable
        objects. At a minimum it must have the ``scheme``, ``host``, and
        ``port`` fields.
        pool_clssocket_optsPoolManager.urlopen
        Empty our store of pools and direct them all to close.

        This will not affect in-flight connections, but they will not be
        re-used after completion.
        PoolManager.connection_from_pool_keyPoolManager.__init__.<locals>.<lambda>PoolKeypool_key_constructorPoolManager._new_pool_default_key_normalizerProxyManager._set_proxy_headers
    Allows for arbitrary requests while transparently keeping track of
    necessary connection pools for you.

    :param num_pools:
        Number of connection pools to cache before discarding the least
        recently used pool.

    :param headers:
        Headers to include with all requests, unless other headers are given
        explicitly.

    :param \**connection_pool_kw:
        Additional parameters are used to create fresh
        :class:`urllib3.connectionpool.ConnectionPool` instances.

    Example::

        >>> manager = PoolManager(num_pools=2)
        >>> r = manager.request('GET', 'http://google.com/')
        >>> r = manager.request('GET', 'http://google.com/mail')
        >>> r = manager.request('GET', 'http://yahoo.com/')
        >>> len(manager.pools)
        2

    ProxyManager.connection_from_host
        Create a new :class:`ConnectionPool` based on host, port, scheme, and
        any additional pool keyword arguments.

        If ``request_context`` is provided, it is provided as keyword arguments
        to the pool class used. This method is used to actually create the
        connection pools handed out by :meth:`connection_from_url` and
        companion methods. It is intended to be overridden for customization.
        ProxyManager.urlopen
    Behaves just like :class:`PoolManager`, but sends all requests through
    the defined proxy, using the CONNECT method for HTTPS URLs.

    :param proxy_url:
        The URL of the proxy to be used.

    :param proxy_headers:
        A dictionary containing headers that will be sent to the proxy. In case
        of HTTP they are being sent with each request, while in the
        HTTPS/CONNECT case they are sent only once. Could be used for proxy
        authentication.

    Example:
        >>> proxy = urllib3.ProxyManager('http://localhost:3128/')
        >>> r1 = proxy.request('GET', 'http://google.com/')
        >>> r2 = proxy.request('GET', 'http://httpbin.org/')
        >>> len(proxy.pools)
        1
        >>> r3 = proxy.request('GET', 'https://httpbin.org/')
        >>> r4 = proxy.request('GET', 'https://twitter.com/')
        >>> len(proxy.pools)
        3

    
        Sets headers needed by proxies: specifically, the Accept and Host
        headers. Only sets headers not provided by the user.
        
        Same as :meth:`urllib3.connectionpool.HTTPConnectionPool.urlopen`
        with custom cross-host redirect logic and only sends the request-uri
        portion of the ``url``.

        The given ``url`` parameter must be absolute, such that an appropriate
        :class:`urllib3.connectionpool.ConnectionPool` can be chosen for it.
        PoolManager.connection_from_url
        Merge a dictionary of override values for self.connection_pool_kw.

        This does not modify self.connection_pool_kw and returns a new dict.
        Any keys in the override dictionary with a value of ``None`` are
        removed from the merged dictionary.
        PoolManager.__exit__SSL_KEYWORDS_key_fieldsPoolManager.connection_from_host
    Create a pool key out of a request context dictionary.

    According to RFC 3986, both the scheme and host are case-insensitive.
    Therefore, this function normalizes both before constructing the pool
    key for an HTTPS request. If you wish to change this behaviour, provide
    alternate callables to ``key_fn_by_scheme``.

    :param key_class:
        The class to use when constructing the key. This should be a namedtuple
        with the ``scheme`` and ``host`` keys at a minimum.
    :type  key_class: namedtuple
    :param request_context:
        A dictionary-like object that contain the context for a request.
    :type  request_context: dict

    :return: A namedtuple that can be used as a connection pool key.
    :rtype:  PoolKey
    urllib3.requestencode_multipartmultipart_boundaryurlopen_kw
    Convenience mixin for classes who implement a :meth:`urlopen` method, such
    as :class:`~urllib3.connectionpool.HTTPConnectionPool` and
    :class:`~urllib3.poolmanager.PoolManager`.

    Provides behavior for making common types of HTTP request methods and
    decides which type of request field encoding to use.

    Specifically,

    :meth:`.request_encode_url` is for sending requests whose fields are
    encoded in the URL (such as GET, HEAD, DELETE).

    :meth:`.request_encode_body` is for sending requests whose fields are
    encoded in the *body* of the request using multipart or www-form-urlencoded
    (such as for POST, PUT, PATCH).

    :meth:`.request` is for making any kind of request, it will look up the
    appropriate encoding format and use one of the above two methods to make
    the request.

    Initializer parameters:

    :param headers:
        Headers to include with all requests, unless other headers are given
        explicitly.
    request got values for both 'fields' and 'body', can only specify one.
        Make a request using :meth:`urlopen` with the appropriate encoding of
        ``fields`` based on the ``method`` used.

        This is a convenience method that requires the least amount of manual
        effort. It can be used in most situations, while still having the
        option to drop down to more specific methods when necessary, such as
        :meth:`request_encode_url`, :meth:`request_encode_body`,
        or even the lowest level :meth:`urlopen`.
        RequestMethods.request_encode_urlClasses extending RequestMethods must implement their own ``urlopen`` method.
        Make a request using :meth:`urlopen` with the ``fields`` encoded in
        the url. This is useful for request methods like GET, HEAD, DELETE, etc.
        _encode_url_methodsRequestMethods.request_encode_bodyRequestMethods.urlopen<module urllib3.request>C:\code\venv\callllama\lib\site-packages\urllib3\request.pyRequestMethods.__init__
        Make a request using :meth:`urlopen` with the ``fields`` encoded in
        the body. This is useful for request methods like POST, PUT, PATCH, etc.

        When ``encode_multipart=True`` (default), then
        :meth:`urllib3.filepost.encode_multipart_formdata` is used to encode
        the payload with the appropriate content type. Otherwise
        :meth:`urllib.urlencode` is used with the
        'application/x-www-form-urlencoded' content type.

        Multipart encoding must be used when posting files, and it's reasonably
        safe to use it in other times too. However, it may break request
        signing, such as with OAuth.

        Supports an optional ``fields`` parameter of key/value strings AND
        key/filetuple. A filetuple is a (filename, data, MIME type) tuple where
        the MIME type is optional. For example::

            fields = {
                'foo': 'bar',
                'fakefile': ('foofile.txt', 'contents of foofile'),
                'realfile': ('barfile.txt', open('realfile').read()),
                'typedfile': ('bazfile.bin', open('bazfile').read(),
                              'image/jpeg'),
                'nonamefile': 'contents of nonamefile field',
            }

        When uploading a file, providing a filename (the first parameter of the
        tuple) is optional but recommended to best mimic behavior of browsers.

        Note that if ``headers`` are supplied, the 'Content-Type' header will
        be overwritten because it depends on the dynamic random boundary string
        which is used to compose the body of the request. The random boundary
        string can be explicitly set with the ``multipart_boundary`` parameter.
        HTTPResponse.streamC:\code\venv\callllama\lib\site-packages\urllib3\response.pyHTTPResponse.readintoHTTPResponse.closelength_remainingprevious_stateReceived response with both Content-Length and Transfer-Encoding set. This is expressly forbidden by RFC 7230 sec 3.3.2. Ignoring Content-Length and attempting to process response as Transfer-Encoding: chunked.decompressThe file-like object this HTTPResponse is wrapped around has no file descriptorzlibDeflateDecoder.decompressunused_data
        Obtain the number of bytes pulled over the wire so far. May differ from
        the amount of content returned by :meth:``HTTPResponse.read`` if bytes
        are encoded on the wire (e.g, compressed).
        Response is not chunked. Header 'transfer-encoding: chunked' is missing.HTTPResponse._update_chunk_lengthreturned_chunk_handle_chunk<module urllib3.response>HTTPResponse._decodeHTTPResponse._handle_chunkdecompressedGzipDecoder.__getattr__SWALLOW_DATA_first_try_flush_decoderchunk_leftHTTPResponse.release_connHTTPResponse.tellcache_content
        Returns the URL that was the source of this response.
        If the request that generated this response redirected, this method
        will return the final redirect location.
        _fp
        Catch low-level python exceptions, instead re-raising urllib3
        variants, so that low-level exceptions are not leaked in the
        high-level api.

        On exit, release the connection back to the pool.
        REDIRECT_STATUSES
        Given an :class:`httplib.HTTPResponse` instance ``r``, return a
        corresponding :class:`urllib3.response.HTTPResponse` object.

        Remaining parameters are passed to the HTTPResponse constructor, along
        with ``original_response=r``.
        
        Flushes the decoder. Should only be called if the decoder is actually
        being used.
        HTTPResponse._init_lengthOTHER_MEMBERSdecompressobjHTTPResponse.__init__Body should be httplib.HTTPResponse like. It should have have an fp attribute which returns raw chunks.
        Should we redirect and where to?

        :returns: Truthy redirect location string if we got a redirect status
            code and valid location. ``None`` if redirect status and no
            location. ``False`` if not a redirect status code.
        _fp_bytes_read
        Set-up the _decoder attribute if necessary.
        _init_decoderHTTPResponse.isclosed
        Similar to :meth:`httplib.HTTPResponse.read`, but with two additional
        parameters: ``decode_content`` and ``cache_content``.

        :param amt:
            How much of the content to read. If specified, caching is skipped
            because it doesn't make sense to cache partial content as the full
            response.

        :param decode_content:
            If True, will attempt to decode the body based on the
            'content-encoding' header.

        :param cache_content:
            If True, will save the returned data such that the same result is
            returned despite of the state of the underlying file object. This
            is useful if you want the ``.data`` property to continue working
            after having ``.read()`` the file object. (Overridden if ``amt`` is
            set.)
        enforce_content_length
        Decode the data passed in and potentially flush the decoder.
        lengthsHTTPResponse._init_decoderHTTPResponse._flush_decoderreadlinecontent_encodingtr_enc_request_urlHTTPResponse.readableHTTPResponse.dataHTTPResponse.get_redirect_locationHTTPResponse.closedCONTENT_DECODERSConnection broken: %rHTTPResponse.infoReceived response with content-encoding: %s, but failed to decode it.HTTPResponse.filenoGzipDecoderStateIOBase
        A generator wrapper for the read() method. A call will block until
        ``amt`` bytes have been read from the connection or until the
        connection is closed.

        :param amt:
            How much of the content to read. The generator will return up to
            much data per iteration, but may return less. This is particularly
            likely when using compressed data. However, the empty string will
            never be returned.

        :param decode_content:
            If True, will attempt to decode the body based on the
            'content-encoding' header.
        DeflateDecoder.__init__
        Set initial length value for Response content if available.
        _error_catcherHTTPResponse.supports_chunked_readsHTTPResponse.__init__.<locals>.<genexpr>HTTPResponse.getheaderHTTPResponse.connection
        Similar to :meth:`HTTPResponse.read`, but with an additional
        parameter: ``decode_content``.

        :param amt:
            How much of the content to read. If specified, caching is skipped
            because it doesn't make sense to cache partial content as the full
            response.

        :param decode_content:
            If True, will attempt to decode the body based on the
            'content-encoding' header.
        FIRST_MEMBERHTTPResponse.getheadersMAX_WBITSHTTPResponse.geturlHTTPResponse.read_chunkedDeflateDecoder.__getattr___safe_readGzipDecoder.decompress
    HTTP Response container.

    Backwards-compatible to httplib's HTTPResponse but the response ``body`` is
    loaded and decoded on-demand when the ``data`` property is accessed.  This
    class is also compatible with the Python standard library's :mod:`io`
    module, and can hence be treated as a readable object in the context of that
    framework.

    Extra parameters for behaviour not present in httplib.HTTPResponse:

    :param preload_content:
        If True, the response's body will be preloaded during construction.

    :param decode_content:
        If True, will attempt to decode the body based on the
        'content-encoding' header.

    :param original_response:
        When this HTTPResponse wrapper is generated from an httplib.HTTPResponse
        object, it's convenient to include the original for debug purposes. It's
        otherwise unused.

    :param retries:
        The retries contains the last :class:`~urllib3.util.retry.Retry` that
        was used during the request.

    :param enforce_content_length:
        Enforce content length checking. Body returned by server must match
        value of Content-Length header, if present. Otherwise, raise error.
    Content-Length contained multiple unmatching values (%s)GzipDecoder.__init__HTTPResponse.flush_get_decoderHTTPResponse has no file to get a fileno from
        Checks if the underlying file-like object looks like a
        httplib.HTTPResponse object. We do this by testing for the fp
        attribute. If it is present we assume it returns raw chunks as
        processed by read_chunked().
        HTTPResponse._error_catcher<module urllib3.util>C:\code\venv\callllama\lib\site-packages\urllib3\util\__init__.py©zHAS_SNIzIS_PYOPENSSLzIS_SECURETRANSPORTz
SSLContextzRetryzTimeoutzUrlzassert_fingerprintzcurrent_timezis_connection_droppedzis_fp_closedzget_hostz	parse_urlzmake_headerszresolve_cert_reqszresolve_ssl_versionzsplit_firstzssl_wrap_socketzwait_for_readzwait_for_writesocktypecanonnamehas_ipv6getaddrinfo returns an empty listHAS_IPV6SOCK_STREAM<module urllib3.util.connection>
    Returns True if the connection is dropped and should be closed.

    :param conn:
        :class:`httplib.HTTPConnection` object.

    Note: For platforms like AppEngine, this will always return ``False`` to
    let the platform handle connection recycling transparently for us.
    This function is designed to work in the context of
    getaddrinfo, where family=socket.AF_UNSPEC is the default and
    will perform a DNS search for both IPv6 and IPv4 records.setsockoptallowed_gai_family_has_ipv6 Returns True if the system can bind an IPv6 address. _set_socket_optionsConnect to *address* and return the socket object.

    Convenience function.  Connect to *address* (a 2-tuple ``(host,
    port)``) and return the socket object.  Passing the optional
    *timeout* parameter will set the timeout on the socket instance
    before attempting to connect.  If no *timeout* is supplied, the
    global default timeout setting returned by :func:`getdefaulttimeout`
    is used.  If *source_address* is set it must be a tuple of (host, port)
    for the socket to bind as a source address before making the connection.
    An host of '' or port 0 tells the OS to use the default.
    C:\code\venv\callllama\lib\site-packages\urllib3\util\connection.pyLifoQueue._getLifoQueue._putC:\code\venv\callllama\lib\site-packages\urllib3\util\queue.py<module urllib3.util.queue>LifoQueue._init_qsize_unused_module_QueueLifoQueue._qsize
    Attempt to rewind body to a certain position.
    Primarily used for request redirects and retries.

    :param body:
        File-like object that supports seek.

    :param int pos:
        Position to seek to in file.
    keep_aliveaccept_encodingbasic_authproxy_basic_authdisable_cacheACCEPT_ENCODINGUnable to record file position for rewinding request body during a redirect/retry.gzip,deflateC:\code\venv\callllama\lib\site-packages\urllib3\util\request.pycache-controlno-cachebody_pos must be of type integer, instead it was %s.proxy-authorization<module urllib3.util.request>An error occurred when rewinding request body for redirect/retry.
    Shortcuts for generating request headers.

    :param keep_alive:
        If ``True``, adds 'connection: keep-alive' header.

    :param accept_encoding:
        Can be a boolean, list, or string.
        ``True`` translates to 'gzip,deflate'.
        List will get joined by comma.
        String will be used as provided.

    :param user_agent:
        String representing the user-agent you want, such as
        "python-urllib3/0.6"

    :param basic_auth:
        Colon-separated username:password string for 'authorization: basic ...'
        auth header.

    :param proxy_basic_auth:
        Colon-separated username:password string for 'proxy-authorization: basic ...'
        auth header.

    :param disable_cache:
        If ``True``, adds 'cache-control: no-cache' header.

    Example::

        >>> make_headers(keep_alive=True, user_agent="Batman/1.0")
        {'connection': 'keep-alive', 'user-agent': 'Batman/1.0'}
        >>> make_headers(accept_encoding=True)
        {'accept-encoding': 'gzip,deflate'}
    _FAILEDTELL
    If a position is provided, move file to that point.
    Otherwise, we'll attempt to record a position for future use.
    C:\code\venv\callllama\lib\site-packages\urllib3\util\response.pyurllib3.util.response<module urllib3.util.response>get_payloadUnable to determine whether fp is closed.expected httplib.Message, got {0}.
    Checks whether a given file-like object is closed.

    :param obj:
        The file-like object to check.
    
    Asserts whether all headers have been successfully parsed.
    Extracts encountered errors from the result of parsing headers.

    Only works on Python 3.

    :param headers: Headers to verify.
    :type headers: `httplib.HTTPMessage`.

    :raises urllib3.exceptions.HeaderParsingError:
        If parsing errors are found.
    
    Checks whether the request of a response has been a HEAD-request.
    Handles the quirks of AppEngine.

    :param conn:
    :type conn: :class:`httplib.HTTPResponse`
     Errors that occur after the request has been started, so we should
        assume that the server began processing it.
        Retry.get_backoff_time.<locals>.<lambda>sleptretry_date_tupleRETRY_AFTER_STATUS_CODES_sleep_backoffbackoff_factorRetry.sleep_for_retrymktimeRetry._sleep_backoff Backwards-compatibility for the old retries format.TRACErespect_retry_after_headerRetry.__init__Retry.is_retryRequestHistoryRetry.from_intconsecutive_errors_lenInvalid Retry-After header: %s Retry configuration.

    Each retry attempt will create a new Retry object with updated values, so
    they can be safely reused.

    Retries can be defined as a default for a pool::

        retries = Retry(connect=5, read=2, redirect=5)
        http = PoolManager(retries=retries)
        response = http.request('GET', 'http://example.com/')

    Or per-request (which overrides the default for the pool)::

        response = http.request('GET', 'http://example.com/', retries=Retry(10))

    Retries can be disabled by passing ``False``::

        response = http.request('GET', 'http://example.com/', retries=False)

    Errors will be wrapped in :class:`~urllib3.exceptions.MaxRetryError` unless
    retries are disabled, in which case the causing exception will be raised.

    :param int total:
        Total number of retries to allow. Takes precedence over other counts.

        Set to ``None`` to remove this constraint and fall back on other
        counts. It's a good idea to set this to some sensibly-high value to
        account for unexpected edge cases and avoid infinite retry loops.

        Set to ``0`` to fail on the first retry.

        Set to ``False`` to disable and imply ``raise_on_redirect=False``.

    :param int connect:
        How many connection-related errors to retry on.

        These are errors raised before the request is sent to the remote server,
        which we assume has not triggered the server to process the request.

        Set to ``0`` to fail on the first retry of this type.

    :param int read:
        How many times to retry on read errors.

        These errors are raised after the request was sent to the server, so the
        request may have side-effects.

        Set to ``0`` to fail on the first retry of this type.

    :param int redirect:
        How many redirects to perform. Limit this to avoid infinite redirect
        loops.

        A redirect is a HTTP response with a status code 301, 302, 303, 307 or
        308.

        Set to ``0`` to fail on the first retry of this type.

        Set to ``False`` to disable and imply ``raise_on_redirect=False``.

    :param int status:
        How many times to retry on bad status codes.

        These are retries made on responses, where status code matches
        ``status_forcelist``.

        Set to ``0`` to fail on the first retry of this type.

    :param iterable method_whitelist:
        Set of uppercased HTTP method verbs that we should retry on.

        By default, we only retry on methods which are considered to be
        idempotent (multiple requests with the same parameters end with the
        same state). See :attr:`Retry.DEFAULT_METHOD_WHITELIST`.

        Set to a ``False`` value to retry on any verb.

    :param iterable status_forcelist:
        A set of integer HTTP status codes that we should force a retry on.
        A retry is initiated if the request method is in ``method_whitelist``
        and the response status code is in ``status_forcelist``.

        By default, this is disabled with ``None``.

    :param float backoff_factor:
        A backoff factor to apply between attempts after the second try
        (most errors are resolved immediately by a second try without a
        delay). urllib3 will sleep for::

            {backoff factor} * (2 ^ ({number of total retries} - 1))

        seconds. If the backoff_factor is 0.1, then :func:`.sleep` will sleep
        for [0.0s, 0.2s, 0.4s, ...] between retries. It will never be longer
        than :attr:`Retry.BACKOFF_MAX`.

        By default, backoff is disabled (set to 0).

    :param bool raise_on_redirect: Whether, if the number of redirects is
        exhausted, to raise a MaxRetryError, or to return a response with a
        response code in the 3xx range.

    :param bool raise_on_status: Similar meaning to ``raise_on_redirect``:
        whether we should raise an exception, or return a response,
        if status falls in ``status_forcelist`` range and retries have
        been exhausted.

    :param tuple history: The history of the request encountered during
        each call to :meth:`~Retry.increment`. The list is in the order
        the requests occurred. Each list item is of class :class:`RequestHistory`.

    :param bool respect_retry_after_header:
        Whether to respect Retry-After header on status codes defined as
        :attr:`Retry.RETRY_AFTER_STATUS_CODES` or not.

    :param iterable remove_headers_on_redirect:
        Sequence of headers to remove from the request when a response
        indicating a redirect is returned before firing off the redirected
        request.
    <module urllib3.util.retry>_is_method_retryableis_exhaustednew_retriesparse_retry_afterRetry.__repr__Retry._is_read_errorRetry._is_method_retryable Get the value of Retry-After in seconds.  Formula for computing the current backoff

        :rtype: float
        ^\s*[0-9]+\s*$Retry.newstatus_countnew_retry{cls.__name__}(total={self.total}, connect={self.connect}, read={self.read}, redirect={self.redirect}, status={self.status})get_retry_afterRetry.get_retry_after Errors when we're fairly sure that the server did not receive the
        request, so it should be safe to retry.
         Return a new Retry object with incremented retry counters.

        :param response: A response object, or None, if the server did not
            return a response.
        :type response: :class:`~urllib3.response.HTTPResponse`
        :param Exception error: An error encountered during the request, or
            None if the response was received successfully.

        :return: A new ``Retry`` object.
        retry_countstakewhileRetry.is_exhausted_is_connection_errortoo many redirectsRetry.parse_retry_afterC:\code\venv\callllama\lib\site-packages\urllib3\util\retry.py Checks if a given HTTP method should be retried upon, depending if
        it is included on the method whitelist.
        parsedatebackoff_value Are we out of retries?  Sleep between retry attempts.

        This method will respect a server's ``Retry-After`` response header
        and sleep the duration of the time requested. If that is not present, it
        will use an exponential backoff. By default, the backoff factor is 0 and
        this method will return immediately.
        DEFAULT_REDIRECT_HEADERS_BLACKLISTRetry._is_connection_errorIncremented Retry for (url='%s'): %rConverted retries value: %r -> %r Is this method/status code retryable? (Based on whitelists and control
        variables such as the number of total retries to allow, whether to
        respect the Retry-After header, whether this header is present, and
        whether the returned status code is on the list of status codes to
        be retried upon on the presence of the aforementioned header)
        familiesCA directories not supported in older Pythonsunhexlifycipher_suitehashfuncOP_NO_SSLv2hmac<module urllib3.util.ssl_>protocol_versionC:\code\venv\callllama\lib\site-packages\urllib3\util\ssl_.pyHASHFUNC_MAPTLS13-CHACHA20-POLY1305-SHA256digest_lengthfingerprint_bytescert_digestTLS13-AES-128-GCM-SHA256load_default_certsRSA+AESDH+AESGCM!aNULL!MD5ECDH+CHACHA20DH+AES256Fingerprint of invalid length: {0}TLS13-AES-256-GCM-SHA384ECDH+AESGCMECDH+AES256ECDH+AES128RSA+AESGCM!eNULLFingerprints did not match. Expected "{0}", got "{1}".OP_NO_SSLv3Your version of Python does not support setting a custom cipher suite. Please upgrade to Python 2.7, 3.2, or later if you need this functionality._const_compare_digest_backportAn HTTPS request has been made, but the SNI (Server Name Indication) extension to TLS is not available on this platform. This may cause the server to present an incorrect TLS certificate, which can cause validation failures. You can upgrade to a newer version of Python to solve this. For more information, see https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
    like resolve_cert_reqs
    DEFAULT_CIPHERSsupports_set_ciphersinet_pton
    Compare two digests of equal length in constant time.

    The digests must be of type str/bytes.
    Returns True if the digests match, and False otherwise.
    All arguments have the same meaning as ``ssl_wrap_socket``.

    By default, this function does a lot of the same work that
    ``ssl.create_default_context`` does on Python 3.4+. It:

    - Disables SSLv2, SSLv3, and compression
    - Sets a restricted set of server ciphers

    If you wish to enable SSLv3, you can do::

        from urllib3.util import ssl_
        context = ssl_.create_urllib3_context()
        context.options &= ~ssl_.OP_NO_SSLv3

    You can do the same to enable compression (substituting ``COMPRESSION``
    for ``SSLv3`` in the last line above).

    :param ssl_version:
        The desired protocol version to use. This will default to
        PROTOCOL_SSLv23 which will negotiate the highest protocol that both
        the server and your installation of OpenSSL support.
    :param cert_reqs:
        Whether to require the certificate verification. This defaults to
        ``ssl.CERT_REQUIRED``.
    :param options:
        Specific OpenSSL options. These default to ``ssl.OP_NO_SSLv2``,
        ``ssl.OP_NO_SSLv3``, ``ssl.OP_NO_COMPRESSION``.
    :param ciphers:
        Which cipher suites to allow the server to select.
    :returns:
        Constructed SSLContext object with specified options
    :rtype: SSLContext
    ENOENTis_ipaddress
    Resolves the argument to a numeric constant, which can be passed to
    the wrap_socket function/method from the ssl module.
    Defaults to :data:`ssl.CERT_NONE`.
    If given a string it is assumed to be the name of the constant in the
    :mod:`ssl` module or its abbreviation.
    (So you can specify `REQUIRED` instead of `CERT_REQUIRED`.
    If it's neither `None` nor a string we assume it is already the numeric
    constant which can directly be passed to wrap_socket.
    
    Checks if given fingerprint matches the supplied certificate.

    :param cert:
        Certificate as bytes object.
    :param fingerprint:
        Fingerprint as string of hexdigits, can be interspersed by colons.
    A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. You can upgrade to a newer version of Python to solve this. For more information, see https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
    All arguments except for server_hostname, ssl_context, and ca_cert_dir have
    the same meaning as they do when using :func:`ssl.wrap_socket`.

    :param server_hostname:
        When SNI is supported, the expected hostname of the certificate
    :param ssl_context:
        A pre-made :class:`SSLContext` object. If none is provided, one will
        be created using :func:`create_urllib3_context`.
    :param ciphers:
        A string of ciphers we wish the client to support. This is not
        supported on Python 2.6 as the ssl module does not support it.
    :param ca_cert_dir:
        A directory containing CA certificates in multiple separate files, as
        supported by OpenSSL's -CApath flag or the capath argument to
        SSLContext.load_verify_locations().
    Detects whether the hostname given is an IP address.

    :param str hostname: Hostname to examine.
    :return: True if the hostname is an IP address, False otherwise.
    Timeout.__str__Timeout cannot be a boolean value. It must be an int, float or None. Create a new Timeout from a legacy timeout value.

        The timeout value used by httplib.py sets the same timeout on the
        connect(), and recv() socket requests. This creates a :class:`Timeout`
        object that sets the individual timeouts to the ``timeout`` value
        passed to this function.

        :param timeout: The legacy timeout value.
        :type timeout: integer, float, sentinel default object, or None
        :return: Timeout object
        :rtype: :class:`Timeout`
         Start the timeout clock, used during a connect() attempt

        :raises urllib3.exceptions.TimeoutStateError: if you attempt
            to start a timer that has been started already.
        Can't get connect duration for timer that has not started.get_connect_durationTimeout._validate_timeoutTimeout.connect_timeoutTimeout.__init__%s(connect=%r, read=%r, total=%r)Timeout.start_connect Get the value for the read timeout.

        This assumes some time has elapsed in the connection timeout and
        computes the read timeout appropriately.

        If self.total is set, the read timeout is dependent on the amount of
        time taken by the connect timeout. If the connection time has not been
        established, a :exc:`~urllib3.exceptions.TimeoutStateError` will be
        raised.

        :return: Value to use for the read timeout.
        :rtype: int, float, :attr:`Timeout.DEFAULT_TIMEOUT` or None
        :raises urllib3.exceptions.TimeoutStateError: If :meth:`start_connect`
            has not yet been called on this object.
        Timeout.cloneTimeout timer has already been started.Timeout.read_timeoutC:\code\venv\callllama\lib\site-packages\urllib3\util\timeout.pyAttempted to set %s timeout to %s, but the timeout cannot be set to a value less than or equal to 0.Timeout.get_connect_duration Get the value to use when setting a connection timeout.

        This will be a positive float or integer, the value None
        (never timeout), or the default system timeout.

        :return: Connect timeout.
        :rtype: int, float, :attr:`Timeout.DEFAULT_TIMEOUT` or None
         Check that a timeout attribute is valid.

        :param value: The timeout value to validate
        :param name: The name of the timeout attribute to validate. This is
            used to specify in error messages.
        :return: The validated and casted version of the given value.
        :raises ValueError: If it is a numeric value less than or equal to
            zero, or the type is not an integer, float, or None.
         Timeout configuration.

    Timeouts can be defined as a default for a pool::

        timeout = Timeout(connect=2.0, read=7.0)
        http = PoolManager(timeout=timeout)
        response = http.request('GET', 'http://example.com/')

    Or per-request (which overrides the default for the pool)::

        response = http.request('GET', 'http://example.com/', timeout=Timeout(10))

    Timeouts can be disabled by setting all the parameters to ``None``::

        no_timeout = Timeout(connect=None, read=None)
        response = http.request('GET', 'http://example.com/, timeout=no_timeout)


    :param total:
        This combines the connect and read timeouts into one; the read timeout
        will be set to the time leftover from the connect attempt. In the
        event that both a connect timeout and a total are specified, or a read
        timeout and a total are specified, the shorter timeout will be applied.

        Defaults to None.

    :type total: integer, float, or None

    :param connect:
        The maximum amount of time to wait for a connection attempt to a server
        to succeed. Omitting the parameter will default the connect timeout to
        the system default, probably `the global default timeout in socket.py
        <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.
        None will set an infinite timeout for connection attempts.

    :type connect: integer, float, or None

    :param read:
        The maximum amount of time to wait between consecutive
        read operations for a response from the server. Omitting
        the parameter will default the read timeout to the system
        default, probably `the global default timeout in socket.py
        <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.
        None will set an infinite timeout.

    :type read: integer, float, or None

    .. note::

        Many factors can affect the total amount of time for urllib3 to return
        an HTTP response.

        For example, Python's DNS resolver does not obey the timeout specified
        on the socket. Other factors that can affect total request time include
        high CPU load, high swap, the program running at a low priority level,
        or other behaviors.

        In addition, the read and total timeouts only measure the time between
        read operations on the socket connecting the client and the server,
        not the total amount of time for the request to return a complete
        response. For most requests, the timeout is raised because the server
        has not sent the first byte in the specified time. This is not always
        the case; if a server streams one byte every fifteen seconds, a timeout
        of 20 seconds will not trigger, even though the request will take
        several minutes to complete.

        If your goal is to cut off any request after a set amount of wall clock
        time, consider having a second "watcher" thread to cut off a slow
        request.
     Create a copy of the timeout object

        Timeout properties are stored per-pool but each request needs a fresh
        Timeout object to ensure each one has its own start/stop configured.

        :return: a copy of the timeout object
        :rtype: :class:`Timeout`
        Timeout value %s was %s, but it must be an int, float or None. Gets the time elapsed since the call to :meth:`start_connect`.

        :return: Elapsed time.
        :rtype: float
        :raises urllib3.exceptions.TimeoutStateError: if you attempt
            to get duration for a timer that hasn't been started.
        _start_connect<module urllib3.util.timeout>Timeout.from_floatUrl.__new__delimsmin_idxmin_delim
    Deprecated. Use :func:`parse_url` instead.
    C:\code\venv\callllama\lib\site-packages\urllib3\util\url.py<module urllib3.util.url>For backwards-compatibility with urlparse. We're nice like that.%s:%dUrl.urlUrl.hostnameNetwork location including host and portUrl.request_uri
    Datastructure for representing an HTTP URL. Used as a return value for
    :func:`parse_url`. Both the scheme and host are normalized as they are
    both case-insensitive according to RFC 3986.
    Url.__str__url_attrs
    Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is
    performed to parse incomplete urls. Fields not provided will be None.

    Partly backwards-compatible with :mod:`urlparse`.

    Example::

        >>> parse_url('http://google.com/mail/')
        Url(scheme='http', host='google.com', port=None, path='/mail/', ...)
        >>> parse_url('google.com:80')
        Url(scheme=None, host='google.com', port=80, path=None, ...)
        >>> parse_url('/foo?bar')
        Url(scheme=None, host=None, port=None, path='/foo', query='bar', ...)
    
    Given a string and an iterable of delimiters, split on the first found
    delimiter. Return two split parts and the matched delimiter.

    If not found, then the first part is the full input string.

    Example::

        >>> split_first('foo/bar?baz', '?/=')
        ('foo', 'bar?baz', '/')
        >>> split_first('foo/bar?baz', '123')
        ('foo/bar?baz', '', None)

    Scales linearly with number of delims. Not ideal for large number of delims.
    Url.netlocAbsolute path including the query string.
        Convert self into a url

        This function should more or less round-trip with :func:`.parse_url`. The
        returned url may not be exactly the same as the url inputted to
        :func:`.parse_url`, but it should be equivalent by the RFC (e.g., urls
        with a blank port will have : removed).

        Example: ::

            >>> U = parse_url('http://google.com/mail/')
            >>> U.url
            'http://google.com/mail/'
            >>> Url('http', 'username:password', 'host.com', 80,
            ... '/path', 'query', 'fragment').url
            'http://username:password@host.com:80/path?query#fragment'
        poll_objno select-equivalent availablewait_for_socketselect_wait_for_socketpoll_wait_for_socket.<locals>.do_poll_have_working_pollrcheck Waits for reading to be available on a given socket.
    Returns True if the socket is readable, or False if the timeout expired.
    POLLINdeadlineurllib3.util.wait      ðPOLLOUTwcheckrreadywreadyxreadyEINTRC:\code\venv\callllama\lib\site-packages\urllib3\util\wait.py Waits for writing to be available on a given socket.
    Returns True if the socket is readable, or False if the timeout expired.
    must specify at least one of read=True, write=Truenull_wait_for_socket_retry_on_intr<module urllib3.util.wait>bom_encodingfallback_encoding0.5.1Encoding.__init__mac-cyrillicIncrementalEncoder.__init__
    Accept either an encoding object or label.

    :param encoding: An :class:`Encoding` object or a label string.
    :returns: An :class:`Encoding` object.
    :raises: :exc:`~exceptions.LookupError` for an unknown label.

    iso-8859-8-iTransform (only) ASCII letters to lower case: A-Z is mapped to a-z.

    :param string: An Unicode string.
    :returns: A new Unicode string.

    This is used for `ASCII case-insensitive
    <http://encoding.spec.whatwg.org/#ascii-case-insensitive>`_
    matching of encoding labels.
    The same matching is also used, among other things,
    for `CSS keywords <http://dev.w3.org/csswg/css-values/#keywords>`_.

    This is different from the :meth:`~py:str.lower` method of Unicode strings
    which also affect non-ASCII characters,
    sometimes mapping them into the ASCII range:

        >>> keyword = u'Bac\N{KELVIN SIGN}ground'
        >>> assert keyword.lower() == u'background'
        >>> assert ascii_lower(keyword) != keyword.lower()
        >>> assert ascii_lower(keyword) == u'bac\N{KELVIN SIGN}ground'

    C:\code\venv\callllama\lib\site-packages\webencodings\__init__.pyx-mac-cyrillicwindows-874cp874encoding_or_label
    Look for an encoding by its label.
    This is the specâs `get an encoding
    <http://encoding.spec.whatwg.org/#concept-encoding-get>`_ algorithm.
    Supported labels are listed there.

    :param label: A string.
    :returns:
        An :class:`Encoding` object, or :obj:`None` for an unknown label.

    _get_encoding
    âPushâ-based encoder.

    :param encoding: An :class:`Encoding` object or a label string.
    :param errors: Type of error handling. See :func:`codecs.register`.
    :raises: :exc:`~exceptions.LookupError` for an unknown encoding label.

    .. method:: encode(input, final=False)

        :param input: An Unicode string.
        :param final:
            Indicate that no more input is available.
            Must be :obj:`True` if this is the last call.
        :returns: A byte string.

    <Encoding %s>chunck
    âPullâ-based encoder.

    :param input: An iterable of Unicode strings.
    :param encoding: An :class:`Encoding` object or a label string.
    :param errors: Type of error handling. See :func:`codecs.register`.
    :raises: :exc:`~exceptions.LookupError` for an unknown encoding label.
    :returns: An iterable of byte strings.

    <module webencodings>
    Encode a single string.

    :param input: An Unicode string.
    :param encoding: An :class:`Encoding` object or a label string.
    :param errors: Type of error handling. See :func:`codecs.register`.
    :raises: :exc:`~exceptions.LookupError` for an unknown encoding label.
    :return: A byte string.

    Return (bom_encoding, input), with any BOM removed from the input.PYTHON_NAMESx_user_defined
    Decode a single string.

    :param input: A byte string
    :param fallback_encoding:
        An :class:`Encoding` object or a label string.
        The encoding to use if :obj:`input` does note have a BOM.
    :param errors: Type of error handling. See :func:`codecs.register`.
    :raises: :exc:`~exceptions.LookupError` for an unknown encoding label.
    :return:
        A ``(output, encoding)`` tuple of an Unicode string
        and an :obj:`Encoding`.

    Reresents a character encoding such as UTF-8,
    that can be used for decoding or encoding.

    .. attribute:: name

        Canonical name of the encoding

    .. attribute:: codec_info

        The actual implementation of the encoding,
        a stdlib :class:`~codecs.CodecInfo` object.
        See :func:`codecs.register`.

    _iter_encode_generatorCACHEDecode one chunk of the input.

        :param input: A byte string.
        :param final:
            Indicate that no more input is available.
            Must be :obj:`True` if this is the last call.
        :returns: An Unicode string.

        Unknown encoding label: %rpython_name_UTF16LE
    âPushâ-based decoder.

    :param fallback_encoding:
        An :class:`Encoding` object or a label string.
        The encoding to use if :obj:`input` does note have a BOM.
    :param errors: Type of error handling. See :func:`codecs.register`.
    :raises: :exc:`~exceptions.LookupError` for an unknown encoding label.

    

    webencodings
    ~~~~~~~~~~~~

    This is a Python implementation of the `WHATWG Encoding standard
    <http://encoding.spec.whatwg.org/>`. See README for details.

    :copyright: Copyright 2012 by Simon Sapin
    :license: BSD, see LICENSE for details.

_iter_decode_generatorEncoding.__repr___fallback_encoding	
 _UTF16BE
    "Pull"-based decoder.

    :param input:
        An iterable of byte strings.

        The input is first consumed just enough to determine the encoding
        based on the precense of a BOM,
        then consumed on demand when the return value is.
    :param fallback_encoding:
        An :class:`Encoding` object or a label string.
        The encoding to use if :obj:`input` does note have a BOM.
    :param errors: Type of error handling. See :func:`codecs.register`.
    :raises: :exc:`~exceptions.LookupError` for an unknown encoding label.
    :returns:
        An ``(output, encoding)`` tuple.
        :obj:`output` is an iterable of Unicode strings,
        :obj:`encoding` is the :obj:`Encoding` that is being used.

    Return a generator that first yields the :obj:`Encoding`,
    then yields output chukns as Unicode strings.

    _detect_bomIncrementalDecoder.__init__C:\code\venv\callllama\lib\site-packages\webencodings\labels.pywebencodings.labelsûzunicode-1-1-utf-8zutf-8zutf-8zutf-8zutf8zutf-8z866zibm866zcp866zibm866zcsibm866zibm866zibm866zibm866zcsisolatin2z
iso-8859-2z
iso-8859-2z
iso-8859-2z
iso-ir-101z
iso-8859-2z	iso8859-2z
iso-8859-2ziso88592z
iso-8859-2z
iso_8859-2z
iso-8859-2ziso_8859-2:1987z
iso-8859-2zl2z
iso-8859-2zlatin2z
iso-8859-2zcsisolatin3z
iso-8859-3z
iso-8859-3z
iso-8859-3z
iso-ir-109z
iso-8859-3z	iso8859-3z
iso-8859-3ziso88593z
iso-8859-3z
iso_8859-3z
iso-8859-3ziso_8859-3:1988z
iso-8859-3zl3z
iso-8859-3zlatin3z
iso-8859-3zcsisolatin4z
iso-8859-4z
iso-8859-4z
iso-8859-4z
iso-ir-110z
iso-8859-4z	iso8859-4z
iso-8859-4ziso88594z
iso-8859-4z
iso_8859-4z
iso-8859-4ziso_8859-4:1988z
iso-8859-4zl4z
iso-8859-4zlatin4z
iso-8859-4zcsisolatincyrillicz
iso-8859-5zcyrillicz
iso-8859-5z
iso-8859-5z
iso-8859-5z
iso-ir-144z
iso-8859-5z	iso8859-5z
iso-8859-5ziso88595z
iso-8859-5z
iso_8859-5z
iso-8859-5ziso_8859-5:1988z
iso-8859-5zarabicz
iso-8859-6zasmo-708z
iso-8859-6zcsiso88596ez
iso-8859-6zcsiso88596iz
iso-8859-6zcsisolatinarabicz
iso-8859-6zecma-114z
iso-8859-6z
iso-8859-6z
iso-8859-6ziso-8859-6-ez
iso-8859-6ziso-8859-6-iz
iso-8859-6z
iso-ir-127z
iso-8859-6z	iso8859-6z
iso-8859-6ziso88596z
iso-8859-6z
iso_8859-6z
iso-8859-6ziso_8859-6:1987z
iso-8859-6zcsisolatingreekz
iso-8859-7zecma-118z
iso-8859-7zelot_928z
iso-8859-7zgreekz
iso-8859-7zgreek8z
iso-8859-7z
iso-8859-7z
iso-8859-7z
iso-ir-126z
iso-8859-7z	iso8859-7z
iso-8859-7ziso88597z
iso-8859-7z
iso_8859-7z
iso-8859-7ziso_8859-7:1987z
iso-8859-7zsun_eu_greekz
iso-8859-7zcsiso88598ez
iso-8859-8zcsisolatinhebrewz
iso-8859-8zhebrewz
iso-8859-8z
iso-8859-8z
iso-8859-8ziso-8859-8-ez
iso-8859-8z
iso-ir-138z
iso-8859-8z	iso8859-8z
iso-8859-8ziso88598z
iso-8859-8z
iso_8859-8z
iso-8859-8ziso_8859-8:1988z
iso-8859-8zvisualz
iso-8859-8zcsiso88598iziso-8859-8-iziso-8859-8-iziso-8859-8-izlogicalziso-8859-8-izcsisolatin6ziso-8859-10ziso-8859-10ziso-8859-10z
iso-ir-157ziso-8859-10z
iso8859-10ziso-8859-10z	iso885910ziso-8859-10zl6ziso-8859-10zlatin6ziso-8859-10ziso-8859-13ziso-8859-13z
iso8859-13ziso-8859-13z	iso885913ziso-8859-13ziso-8859-14ziso-8859-14z
iso8859-14ziso-8859-14z	iso885914ziso-8859-14zcsisolatin9ziso-8859-15ziso-8859-15ziso-8859-15z
iso8859-15ziso-8859-15z	iso885915ziso-8859-15ziso_8859-15ziso-8859-15zl9ziso-8859-15ziso-8859-16ziso-8859-16zcskoi8rzkoi8-rzkoizkoi8-rzkoi8zkoi8-rzkoi8-rzkoi8-rzkoi8_rzkoi8-rzkoi8-uzkoi8-uzcsmacintoshz	macintoshzmacz	macintoshz	macintoshz	macintoshzx-mac-romanz	macintoshzdos-874zwindows-874ziso-8859-11zwindows-874z
iso8859-11zwindows-874z	iso885911zwindows-874ztis-620zwindows-874zwindows-874zwindows-874zcp1250zwindows-1250zwindows-1250zwindows-1250zx-cp1250zwindows-1250zcp1251zwindows-1251zwindows-1251zwindows-1251zx-cp1251zwindows-1251zansi_x3.4-1968zwindows-1252zasciizwindows-1252zcp1252zwindows-1252zcp819zwindows-1252zcsisolatin1zwindows-1252zibm819zwindows-1252z
iso-8859-1zwindows-1252z
iso-ir-100zwindows-1252z	iso8859-1zwindows-1252ziso88591zwindows-1252z
iso_8859-1zwindows-1252ziso_8859-1:1987zwindows-1252zl1zwindows-1252zlatin1zwindows-1252zus-asciizwindows-1252zwindows-1252zwindows-1252zx-cp1252zwindows-1252zcp1253zwindows-1253zwindows-1253zwindows-1253zx-cp1253zwindows-1253zcp1254zwindows-1254zcsisolatin5zwindows-1254z
iso-8859-9zwindows-1254z
iso-ir-148zwindows-1254z	iso8859-9zwindows-1254ziso88599zwindows-1254z
iso_8859-9zwindows-1254ziso_8859-9:1989zwindows-1254zl5zwindows-1254zlatin5zwindows-1254zwindows-1254zwindows-1254zx-cp1254zwindows-1254zcp1255zwindows-1255zwindows-1255zwindows-1255zx-cp1255zwindows-1255zcp1256zwindows-1256zwindows-1256zwindows-1256zx-cp1256zwindows-1256zcp1257zwindows-1257zwindows-1257zwindows-1257zx-cp1257zwindows-1257zcp1258zwindows-1258zwindows-1258zwindows-1258zx-cp1258zwindows-1258zx-mac-cyrilliczx-mac-cyrilliczx-mac-ukrainianzx-mac-cyrilliczchinesezgbkzcsgb2312zgbkzcsiso58gb231280zgbkzgb2312zgbkzgb_2312zgbkz
gb_2312-80zgbkzgbkzgbkz	iso-ir-58zgbkzx-gbkzgbkzgb18030zgb18030z
hz-gb-2312z
hz-gb-2312zbig5zbig5z
big5-hkscszbig5zcn-big5zbig5zcsbig5zbig5zx-x-big5zbig5zcseucpkdfmtjapanesezeuc-jpzeuc-jpzeuc-jpzx-euc-jpzeuc-jpzcsiso2022jpziso-2022-jpziso-2022-jpziso-2022-jpz
csshiftjisz	shift_jiszms_kanjiz	shift_jisz	shift-jisz	shift_jisz	shift_jisz	shift_jiszsjisz	shift_jiszwindows-31jz	shift_jiszx-sjisz	shift_jiszcseuckrzeuc-krzcsksc56011987zeuc-krzeuc-krzeuc-krz
iso-ir-149zeuc-krzkoreanzeuc-krzks_c_5601-1987zeuc-krzks_c_5601-1989zeuc-krzksc5601zeuc-krzksc_5601zeuc-krzwindows-949zeuc-krzcsiso2022krziso-2022-krziso-2022-krziso-2022-krzutf-16bezutf-16bezutf-16zutf-16lezutf-16lezutf-16lezx-user-definedzx-user-defined0

    webencodings.labels
    ~~~~~~~~~~~~~~~~~~~

    Map encoding labels to their name.

    :copyright: Copyright 2012 by Simon Sapin
    :license: BSD, see LICENSE for details.

IncrementalEncoder.encodeCodec.encodewebencodings.x_user_definedStreamReadercharmap_buildstreamwriter 	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ïïïïïïïïïïïïïïïïïïïïïïïïïïïïïïïïï ï¡ï¢ï£ï¤ï¥ï¦ï§ï¨ï©ïªï«ï¬ï­ï®ï¯ï°ï±ï²ï³ï´ïµï¶ï·ï¸ï¹ïºï»ï¼ï½ï¾ï¿ïïïïïïïïïïïïïïïïïïïïïïïïïïïïïïïïï ï¡ï¢ï£ï¤ï¥ï¦ï§ï¨ï©ïªï«ï¬ï­ï®ï¯ï°ï±ï²ï³ï´ïµï¶ï·ï¸ï¹ïºï»ï¼ï½ï¾ï¿C:\code\venv\callllama\lib\site-packages\webencodings\x_user_defined.py<module webencodings.x_user_defined>encoding_tabledecoding_tableStreamWritercharmap_encodecharmap_decodeCodec.decode

    webencodings.x_user_defined
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~

    An implementation of the x-user-defined encoding.

    :copyright: Copyright 2012 by Simon Sapin
    :license: BSD, see LICENSE for details.

              ð?{®Gáz?©?      è?ffffffî?®Gáz®ï?MITPY2StdTixttkFASTPY34ZEROexecgdbmizipsha1BLUESTkdndbasesdequedstonexec_flagsjydayminormtextnode1node2pipesshlexslots<string>DATrieDialogGREENSHTML_5ITS_MEKOREANKoreanLABELSMarkerNOT_MEStruct_locs_appletbisectcafileenfoldexc_tbgetcwdgroupsis_py2is_py3isfileisleaplayoutlstripmathmlrstripsettertkFontunichrwall_0wall_1win_tzwinregxrangeABCTrieAF_INETBytesIOCOMMENTChineseEnumKeyMAXSIZENON_CJKOpenKeyTkinterVERBOSEYELLOWS__all____dir____doc____get____mro____url___globs__winregacquireaddbasecPicklecopyregdbm_gnudefectsdelattrdirnamedocinfofindallgetcwdbgetcwduhashlibifilterim_funcim_selfinspectis_htmlisalphaisdigitkeyfilelen_strmarqueenew_modnsmatchold_modreprlibtkinterunboundurandomurljoin<listcomp>AF_INET6BOM_UTF8CallableFOUND_ITIteratorJAPANESEURLErrorUserDictUserList_Default__cake____code____dict____file____func____main____path____self____spec___add_doc_parsetz_tzinfosadd_moveassignedbinasciibuiltinsbyte2intcategorycertfilechar_valcopy_regdatavarsdivisionendswithexc_typef_localsfromlistfullTreefullnameget_codeimporterint2bytenew_namenodeNamenodeTypensprefixold_attrparse_qsprefixessplittagtagStackurlsplitClassTypeDETECTINGESC_ASCIIEnumValueHelveticaIDNAErrorTEXT_NODEURLopener__attrs____bases____build____debug____slots____title___cache_tz_getframe_importerauto_openb64encodebody_seekcStringIOcoding_smenumerateetree_tagf_globalsfrozensetfullnamesfunc_codefunctoolsgetLoggerhexDigitsimportlibinet_atoniterbytesiterlistsitertoolsknown_xmllocalNamelocalnamemeta_pathmonotonicnameTuplenew_valuenodeValueorig_varsparse_qslpicklablepublic_idputheaderraw_inputreadlinesroot_nameslots_varsplitusersuper_lensystem_idtext_typetimetupletoordinaltracebackurldefragxmlrpclibFTPHandlerFileDialogIGNORECASEInputStateInvalidURLKoi8rModelMethodTypeModuleTypePERMISSIVEPURE_ASCIIUserString_LazyDescr__author____cached____import____loader____module___func_code_meth_func_meth_self_utcoffsetaddHandlerattrgetterbasestringchildNodescontextlibendheadersexpanduserfirstChildfirst_charget_sourcegetproxiesindexbytesinsertRootip_addressis_packageitemgettermonthrangenamespacesparentNodeputrequestquote_plussplitlinessplitquerystartswithsystem_urltag_regexpthis_basesurlcleanupurlunparseurlunsplituses_queryBaseHandlerDecodeErrorFileHandlerHTTPHandlerHTTPWarningHZ_SM_MODELIbm855ModelIbm866ModelMovedModuleNullHandlerParseResultResponseClsSocketErrorSplitResultTkconstantsURLRequired_LazyModule_MovedItems__builtin____closure____globals____license____package____weakref____wrapped___add_module_cache_lock_childNodes_get_module_stacktraceassertRegexattr_stringbinary_formbinary_typebisect_leftbuiltin_strclass_tableclass_typesclassmethodfilterfalsefind_moduleformPointerfromordinalgetpreviousgetresponseheadPointerhtml_parserideographicinternalDTDis_verifiediter_sliceslang_filterload_moduleremove_moverequote_urirewind_bodysame_offsetsecond_charserver_sideshlex_quotestate_tabletkinter_dndtkinter_tixtkinter_ttkurlretrieveuses_netlocuses_paramsxmlEntitieszip_longestBOM_UTF16_BEBOM_UTF16_LEBOM_UTF32_BEBOM_UTF32_LEBaseSSLErrorCOMMENT_NODEConfigParserELEMENT_NODEHTTPSHandlerMachineStateProbingStateProxyHandlerQueryInfoKeySimpleButtonSimpleDialogSocketServerStandardName__builtins____defaults____get_module__internal____qualname___assertRegexaddclosehookbisect_rightbuild_openercharEncodingclass_factorconfigparsercontext_confdistrib_confdo_not_clearfunc_closurefunc_globalsgetDomModulehttp_cookiesifilterfalseizip_longestmethodcallernamespaceURIopenElementspathname2urlselect_proxysimplefiltersocketserverstaticmethodstreamreaderstring_typestkFileDialogtkMessageBoxtkinter_fontunquote_plusurl2pathnamevaluestodictversion_infovoidElementswant_unicodeBIG5_SM_MODELCGIHTTPServerDEFAULTPARSERDOCUMENT_NODEDOCUMENT_ROOTGENERIC_ERRORHTTPExceptionInvalidHeaderInvalidSchemaMissingSchemaProtocolErrorResponseErrorSJIS_SM_MODELSocketTimeoutUTF8_SM_MODEL__copyright____metaclass____traceback___dummy_thread_func_closure_func_globalsadd_metaclassallocate_lockcdataElementsdefault_etreedispatch_hookfunc_defaultshasChildNodeshtml_entitiesinteger_typesjoining_typesknown_modulesmerge_cookiesreload_moduletagTokenTypestotal_secondstry_encodingsunparsed_dataurldefragauthuses_fragmentuses_relativewhitespace_rexmlrpc_clientxmlrpc_server<setcontraction>BaseHTTPServerCP949_SM_MODELEUCJP_SM_MODELEUCKR_SM_MODELEUCTW_SM_MODELFancyURLopenerJIS_TABLE_SIZELanguageFilterMovedAttributeOpenerDirectorREDIRECT_STATIReadFormButtonRuntimeWarningSPECIFIC_ERRORTZLOCALKEYNAMEUnknownHandler__orig_bases___body_position_func_defaults_import_modulechar_len_tablecheck_hostnamecontextmanagergetETreeModuleget_netrc_authguess_filenameguess_json_utfhtmlentitydefshttp_cookiejarinstall_openerlongest_prefixproxy_from_urlrcdataElementsrequest_methodtkColorChoosertkCommonDialogtkSimpleDialogtkinter_dialogunicode_escapewith_traceback<dictcontraction>ALTERNATE_NAMESBIG5_TABLE_SIZECacheFTPHandlerClosedPoolErrorConnectRegistryConnectionErrorDEFAULTTZPARSERDummyConnectionFileModeWarningGB2312_SM_MODELHTTPPasswordMgrInvalidProxyURLRobotFileParserSecurityWarningTIS620ThaiModelWRAPPER_UPDATES__description____mro_entries___basic_auth_strabsolute_importascii_uppercasedatetime_existsdefault_headersemail_mime_baseemail_mime_textget_method_selfheadingElementsisSurrogatePairparse_http_listscopingElementssix_module_namespecialElementstemporary_classtried_encodingsEUCKR_TABLE_SIZEEUCTW_TABLE_SIZEInvalidTimeErrorLatin7GreekModelMacCyrillicModelSimpleHTTPServerTooManyRedirects__author_email___copy_cookie_jar_transition_infoadvance_iteratorasciiUpper2LowerassertCountEqualassertItemsEqualbuilder_registrycontext_analyzerdefaultNamespacememorized_ttinforeload_localzoneto_native_stringunicode_is_asciiunicode_literalsutcfromtimestampì   ÿÿÿÿ CharacterCategoryDependencyWarningGB2312_TABLE_SIZESNIMissingWarningSystemTimeWarningWin1253GreekModel_ReparseException__class_getitem___assertCountEqual_dst_base_offset__moved_attributesany_unused_tokensassertRaisesRegexbackport_makefilebooleanAttributescodepoint_classescreate_connectionget_auth_from_urlget_function_codeintranges_containoriginal_encodingprecedence_matrixset_file_positiontkinter_constantsCHINESE_SIMPLIFIEDDOCUMENT_TYPE_NODEDeprecationWarningHKEY_LOCAL_MACHINEHTTPErrorProcessorISO2022CN_SM_MODELISO2022JP_SM_MODELISO2022KR_SM_MODELLatin5TurkishModelLocationValueErrorNewConnectionErrorResponseNotChunkedSimpleXMLRPCServerWin1255HebrewModel_assertRaisesRegex_original_responseassertRaisesRegexpdatetime_ambiguousincrementalencodermemorized_datetimeparse_header_linkstkinter_filedialogtkinter_messageboxurllib_robotparserHTTPCookieProcessorHTTPRedirectHandlerLatin5CyrillicModelStreamConsumedErrorWRAPPER_ASSIGNMENTSassertRegexpMatchescookiejar_from_dictcreate_bound_methodget_environ_proxiesget_method_functionis_response_to_headkeep_english_letterlongest_prefix_itemmemorized_timedeltamost_recent_elementChunkedEncodingErrorContentDecodingErrorContentTooShortErrorHTTPBasicAuthHandlerLatin5BulgarianModelNORMALIZABLE_SCHEMESParserRejectedMarkupUnsupportedOperationWin1251CyrillicModel_SixMetaPathImporter_most_recent_elementdefault_element_sizeemail_mime_multipartextract_zipped_pathsget_function_closureget_function_globalsget_unbound_functionhas_keys_with_prefixskip_accept_encodingtkinter_colorchoosertkinter_commondialogtkinter_scrolledtexttkinter_simpledialogtkinter_tkfiledialogHTTPDigestAuthHandlerProcessingInstructionProxyBasicAuthHandlerSubjectAltNameWarningUnrewindableBodyErrorWin1251BulgarianModel_utc_transition_timescdata_list_attributescheck_header_validitycreate_unbound_methoddistribution_analyzerget_function_defaultsreplacementCharactersDEFAULT_CA_BUNDLE_PATHDEFAULT_REDIRECT_LIMITDOCUMENT_FRAGMENT_NODEElementTreeCommentTypeInsecureRequestWarningJIS_CHAR_TO_FREQ_ORDERMINIMUM_DATA_THRESHOLDProxyDigestAuthHandlerUnknownTimezoneWarningextract_cookies_to_jargetproxies_environmentpool_classes_by_schemetkinter_tksimpledialogtypical_positive_ratioBIG5_CHAR_TO_FREQ_ORDERHTTPDefaultErrorHandlerInsecurePlatformWarningModule_six_moves_urllib_GLOBAL_DEFAULT_TIMEOUTemail_mime_nonmultipartselfClosingAcknowledgedtableInsertModeElementsuser_specified_encodingAbstractBasicAuthHandlerBodyNotHttplibCompatibleEUCKR_CHAR_TO_FREQ_ORDEREUCTW_CHAR_TO_FREQ_ORDERHTML_ENTITY_TO_CHARACTERXMLProcessingInstructionactiveFormattingElementsprepend_scheme_if_neededpreserve_whitespace_tagsproxy_bypass_environmentsupports_lone_surrogatessurrogatePairToCodepointAbstractDigestAuthHandlerDeprecatedTzFormatWarningElementTreeImplementationGB2312_CHAR_TO_FREQ_ORDERNoWayToWaitForSocketErrorRequestsDependencyWarningget_encoding_from_headerspreventDoubleDashCommentsdocument_declared_encodingsubmodule_search_locationspython_2_unicode_compatiblehtmlIntegrationPointElementsModule_six_moves_urllib_errorModule_six_moves_urllib_parseJIS_TYPICAL_DISTRIBUTION_RATIO_urllib_error_moved_attributes_urllib_parse_moved_attributesstream_decode_response_unicodeBIG5_TYPICAL_DISTRIBUTION_RATIOHTTPPasswordMgrWithDefaultRealmModule_six_moves_urllib_requestcontains_replacement_charactersEUCKR_TYPICAL_DISTRIBUTION_RATIOEUCTW_TYPICAL_DISTRIBUTION_RATIOModule_six_moves_urllib_response_SixMetaPathImporter__get_module_urllib_request_moved_attributesConnection to %s timed out. (connect timeout=%s)urllib.parseNaive time - no tzinfo set
    A meta path importer to import six.moves and its submodules.

    This class implements a PEP302 finder and loader. It should be compatible
    with Python 2.5 and all existing versions of Python3
    http.client&%s;python_2_unicode_compatible.<locals>.<lambda>Byte literalThe new-style print function for Python 2.4 and 2.5.tkinter.filedialogtkinter.scrolledtextpackages.six.moves.http_clientemail.MIMEBaseemail.mime.nonmultipartLazy loading of moved objects in six.moves.urllib_parseAdd an item to six.moves.%s %s prober hit error at byte %smoves.urllib.parseCreate a base class with a metaclass.Import module, returning the module after the last dot.packages.six.moves.urllib.parse|%s%s="%s"EUC-JPtkinter.dndMovedModule._resolveIterator.next|%s<!DOCTYPE %s>Return None

        Required, if is_package is implementedLazy loading of moved objects in six.moves.urllib_robotparsermoves.urllib_response|%s"%s"http://www.w3.org/XML/1998/namespace<!DOCTYPE>callable.<locals>.<genexpr>tzfile.__reduce__email.MIMETexthttp.cookiejarevent-sourcemoves.urllib_requestX.__len__unsupported property: tkinter.dialog@python_2_unicode_compatible cannot be applied to %s because it doesn't define __str__().email.mime.textExecute code in a namespace.Lazy loading of moved objects in six.moves.urllib_errorTrie.has_keys_with_prefixMovedModule.__getattr__email.MIMENonMultipart{%s}%s_SixMetaPathImporter._add_moduleRedirecting %s -> %sprint_.<locals>.writelatin-1
    A decorator that defines __unicode__ and __str__ methods under Python 2.
    Under Python 3 it does nothing.

    To support Python 2 and 3 with a single code base, define a __str__ method
    returning text and apply this decorator to the class.
    VALUE=DATE-TIME_LazyModule.__dir__email.mime.multipart10.0.0tkinter.font[%s]+email.MIMEMultipartTrie.__getitem__Reload the cached localzone. You need to call this if the timezone has changed.Trie.__iter__|%s<%s>invalid keyword arguments to print()exec _code_ in _globs_, _locs_add_metaclass.<locals>.wrapperxmlrpc.clientMovedAttribute.__init__tkinter.colorchooserIP AddressTrie.__contains__MovedAttribute._resolve%s %s confidence = %swith_metaclass.<locals>.metaclass.__new__\\
        Return true, if the named module is a package.

        We need this method to get correct spec objects with
        Python 3.4 (see PEP451)
        SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zonesend must be None or a string_SixMetaPathImporter.load_module{([^}]*)}(.*)EUC-KR_SixMetaPathImporter.get_code
        For a given year, get the DST on and off transition times, expressed
        always on the standard time side. For zones with no transitions, this
        function returns ``None``.

        :param year:
            The year whose transitions you would like to query.

        :return:
            Returns a :class:`tuple` of :class:`datetime.datetime` objects,
            ``(dston, dstoff)`` for zones with an annual DST transition, or
            ``None`` for fixed offset zones.
        Lazy loading of moved objects in six.moves.urllib_responseNullHandler.emitannotation-xmlemail.mime.baseModule_six_moves_urllib.__dir__SYSTEM\CurrentControlSet\Control\TimeZoneInformationxmlrpc.serverBenjamin Peterson <benjamin@python.org>|%s<!DOCTYPE >Reraise an exception.dbm.gnu#documentUtilities for writing code that runs on Python 2 and 3tkinter.simpledialog%s argument after ** must be a mapping, not %s*/*_LazyDescr.__init__TreeBuilder.reset|%s<!-- %s -->Trie.longest_prefix_itemsep must be None or a stringGet the function out of a possibly unbound functionReturn an iterator over the (key, value) pairs of a dictionary.http.server%s(%s)Failed to establish a new connection: %sISO-8859-5xml.sax.saxutilsTrie.__len__empty property name%s argument after * must be an iterable, not %sClass decorator for creating a class with a metaclass.tkinter.commondialogCreate a six.moves.urllib namespace that resembles the Python 3 namespaceNot naive datetime (tzinfo is already set)http://www.w3.org/2000/xmlns/MovedModule.__init__No host specified._LazyDescr.__get__utf-32leRemove item from six.moves.__init__() got an unexpected keyword argument '%s'weekday.__init__Return an iterator over the values of a dictionary.Return an iterator over the keys of a dictionary.The content for this response was already consumedC:\code\venv\callllama\Scripts\python.exewraps.<locals>.wrapperSerialize an element and its child nodes to a string_SixMetaPathImporter._get_module<!--%s-->tzlocal.windows_tzAdd documentation to a function.%s()Trie.keysThis loader does not know module _SixMetaPathImporter.find_moduleAll keys must be strings%s=%sSee `TreeBuilder`.TreeWalker.__init__Filter.__iter___SixMetaPathImporter.__init__no such move, %rtkinter.messageboxcollections.abc|%s<!DOCTYPE %s "%s" "%s">TreeBuilder.insertRoottkinter.ttkos.path_LazyModule.__init__
        Whether or not the "wall time" of a given datetime is ambiguous in this
        zone.

        :param dt:
            A :py:class:`datetime.datetime`, naive or time zone aware.


        :return:
            Returns ``True`` if ambiguous, ``False`` otherwise.

        .. versionadded:: 2.6.0
        _SixMetaPathImporter.is_packageText literalReturn an iterator over the (key, [values]) pairs of a dictionary.</%s>Convert a registry key's values to a dictionary.Lazy loading of moved objects in six.moves.urllib_requesttkinter.tix_SixMetaPathImporter.__get_modulehtml.entities\\\\fromutc() requires a datetime argument#document-fragmenthttp.cookiestkinter.constantsIncrementalDecoder.decode%s got multiple values for keyword argument '%s'utf-32beGB2312_TYPICAL_DISTRIBUTION_RATIO_urllib_response_moved_attributesmathmlTextIntegrationPointElements0

ï»¿Module_six_moves_urllib_robotparser_urllib_robotparser_moved_attributesã            F   @   sN  d Z ddlmZ ddlZddlZddlZddlZddlZddlZddl	Z	ddl
Z
ddlZddlZddlZddlZddlZddlZddlZddlZddlZddlZddlZddlZddlZddlZddlmZ yddlZW n ek
rô   ddlZY nX ddlmZ ddl m!Z!m"Z"m#Z# ddlm$Z$ yddlm%Z%m&Z&m'Z' d	Z(W n ek
rX   d
Z(Y nX ddlm)Z* ddl+m,Z,m-Z- yddl.m/Z0 e0j1 W n ek
r¦   dZ0Y nX ddl2m3Z3 ddlm4Z4 ddlm5Z5 e6d e6d e6d e6d dej7  k rdk rn ne8dej9r"dZ:dZ;dZ<dZ=dZ>dZ?dZ@dZAdZBdZCdZDdZEdZFdZGdZHdZIdZJdZKdZLG dd deMZNdd ZOi ZPdd ZQdd ZRd d! ZSd"d# ZTd$d% ZUd&d' ZVd(d) ZWd*d+  ZXZYd,d- ZZd.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMddNddOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqgFZ[G drdI dIe\Z]G dsdJ dJe]Z^G dtdu due^Z_G dvdK dKe]Z`G dwdL dLe]Zai Zbejcddx ZddxZedyZfdZgdZhdzZid{dm Zjd|d0 Zkg fd}d~Zldd Zmdd Zne od¡Zpe od¡ZqenZrddR Zsdd/ ZtetZudd1 Zvdd2 Zwdûdd3Zxdd4 ZyG dd` d`ZzG dda daezZ{G ddD dDe|Z}G dd de~ZG ddC dCe|ZeZG ddM dMe8ZG ddE dEZddB ZddO ZddP ZddU ZddV ZddW ZdüddXZG ddg dgZeje|e G ddh dheZG ddi dieZe ¡  G dde deeZe ZG dd de~ZG d d¡ d¡eZG d¢dj djeZeje
je G d£db dbeZG d¤dc dceZG d¥dd ddeZeQd¦i d§ d¨dk Zdýd©d?Zdþdªd«Zee
je dÿd¬d­Zee|e d®d¯ Zd d°d±Zd²d³ ZG d´dµ dµZd¶d· Z d¸d¹ Z¡dºd» Z¢d¼d½ Z£eej¤e e¥e0d¾rpee0j¦e eQd¦i d¿ eQd¦i dÀ dÁdl Z§dÂdÃ Z¨dÄdÅ Z©dÆd< ZªddÇdnZ«dÈdÉ Z¬e§ej¤e¬ e§e
je¬ e¥e0d¾rìe§e0j¦e¬ dÊdË Z­e§e|e­ dÌdZ Z®i fdÍdÎZ¯dÏdÐ Z°dÑdÒ Z±dÓdÔ Z²dÕdS Z³e odÖ¡j´Zµe od×ej¶ej·B ¡j´Z¸G dØdH dHe|Z¹dÙdÚ ZºdÛdÜ Z»G dÝdF dFe|Z¼G dÞdß dße¼Z½G dàdá dáe¼Z¾e¼e½e¾dâZ¿dãdä ZÀG dådæ dæeÁZÂdçdN ZÃG dèdG dGe5jÄjÅZÅdédê ZÆdëdì ZÇdídY ZÈdîdï ZÉdðdT ZÊdñdò ZËejÌdóeNd	dô dõdö ZÍeÍeÎ fd÷døZÏeÍdùdú ZÐdS (  aZ  
Package resource API
--------------------

A resource is a logical file contained within a package, or a logical
subdirectory thereof.  The package resource API expects resource names
to have their path parts separated with ``/``, *not* whatever the local
path separator is.  Do not use os.path operations to manipulate resource
names being passed into the API.

The package resource API is designed to work with normal filesystem packages,
.egg files, and unpacked .egg files.  It can also work in a limited way with
.zip files and with custom PEP 302 loaders that support the ``get_data()``
method.
é    )Úabsolute_importN)Úget_importer)Úsix)ÚurllibÚmapÚfilter)Úutime)ÚmkdirÚrenameÚunlinkTF)Úopen)ÚisdirÚsplité   )Ú
py31compat)Úappdirs)Ú	packagingz&pkg_resources.extern.packaging.versionz)pkg_resources.extern.packaging.specifiersz+pkg_resources.extern.packaging.requirementsz&pkg_resources.extern.packaging.markers)é   r   )r   r   zPython 3.3 or later is requiredc               @   s   e Zd ZdZdS )ÚPEP440Warningza
    Used when there is an issue with a version or specifier not complying with
    PEP 440.
    N)Ú__name__Ú
__module__Ú__qualname__Ú__doc__© r   r   úBC:\code\venv\callllama\lib\site-packages\pkg_resources\__init__.pyr   n   s   r   c             C   s2   yt j | ¡S  t jjk
r,   t j | ¡S X d S )N)r   ÚversionÚVersionÚInvalidVersionÚLegacyVersion)Úvr   r   r   Úparse_versionu   s    r    c             K   s"   t   |¡ t t || ¡¡ d S )N)ÚglobalsÚupdateÚ_state_varsÚdictÚfromkeys)ÚvartypeÚkwr   r   r   Ú_declare_state   s    r(   c              C   s<   i } t  }x,t ¡ D ] \}}|d|  || | |< qW | S )NZ_sget_)r!   r#   Úitems)ÚstateÚgÚkr   r   r   r   Ú__getstate__   s
    r-   c             C   s<   t  }x0|  ¡ D ]$\}}|dt|   ||| | qW | S )NZ_sset_)r!   r)   r#   )r*   r+   r,   r   r   r   r   Ú__setstate__   s     r.   c             C   s   |   ¡ S )N)Úcopy)Úvalr   r   r   Ú
_sget_dict   s    r1   c             C   s   |  ¡  | |¡ d S )N)Úclearr"   )ÚkeyÚobr*   r   r   r   Ú
_sset_dict   s    r5   c             C   s   |   ¡ S )N)r-   )r0   r   r   r   Ú_sget_object   s    r6   c             C   s   |  |¡ d S )N)r.   )r3   r4   r*   r   r   r   Ú_sset_object    s    r7   c              G   s   d S )Nr   )Úargsr   r   r   Ú<lambda>¤   s    r9   c              C   sb   t  } t | ¡}|dk	r^tjdkr^y&dd t dd ¡| d¡f } W n tk
r\   Y nX | S )aZ  Return this platform's maximum compatible version.

    distutils.util.get_platform() normally reports the minimum version
    of Mac OS X that would be required to *use* extensions produced by
    distutils.  But what we want when checking compatibility is to know the
    version of Mac OS X that we are *running*.  To allow usage of packages that
    explicitly require a newer version of Mac OS X, we must also know the
    current version of the OS.

    If this condition occurs for any other platform with a version in its
    platform strings, this function should be extended accordingly.
    NÚdarwinzmacosx-%s-%sÚ.é   r   )	Úget_build_platformÚmacosVersionStringÚmatchÚsysÚplatformÚjoinÚ_macosx_versÚgroupÚ
ValueError)ÚplatÚmr   r   r   Úget_supported_platform§   s    
&rH   ÚrequireÚ
run_scriptÚget_providerÚget_distributionÚload_entry_pointÚget_entry_mapÚget_entry_infoÚiter_entry_pointsÚresource_stringÚresource_streamÚresource_filenameÚresource_listdirÚresource_existsÚresource_isdirÚdeclare_namespaceÚworking_setÚadd_activation_listenerÚfind_distributionsÚset_extraction_pathÚcleanup_resourcesÚget_default_cacheÚEnvironmentÚ
WorkingSetÚResourceManagerÚDistributionÚRequirementÚ
EntryPointÚResolutionErrorÚVersionConflictÚDistributionNotFoundÚUnknownExtraÚExtractionErrorÚparse_requirementsÚ	safe_nameÚsafe_versionÚget_platformÚcompatible_platformsÚyield_linesÚsplit_sectionsÚ
safe_extraÚto_filenameÚinvalid_markerÚevaluate_markerÚensure_directoryÚnormalize_pathÚEGG_DISTÚBINARY_DISTÚSOURCE_DISTÚCHECKOUT_DISTÚDEVELOP_DISTÚIMetadataProviderÚIResourceProviderÚFileMetadataÚPathMetadataÚEggMetadataÚEmptyProviderÚempty_providerÚNullProviderÚEggProviderÚDefaultProviderÚZipProviderÚregister_finderÚregister_namespace_handlerÚregister_loader_typeÚfixup_namespace_packagesr   Úrun_mainÚAvailableDistributionsc               @   s   e Zd ZdZdd ZdS )rd   z.Abstract base for dependency resolution errorsc             C   s   | j jt| j S )N)Ú	__class__r   Úreprr8   )Úselfr   r   r   Ú__repr__ñ   s    zResolutionError.__repr__N)r   r   r   r   r   r   r   r   r   rd   î   s   c               @   s<   e Zd ZdZdZedd Zedd Zdd Zd	d
 Z	dS )re   zª
    An already-installed version conflicts with the requested version.

    Should be initialized with the installed Distribution and the requested
    Requirement.
    z3{self.dist} is installed but {self.req} is requiredc             C   s
   | j d S )Nr   )r8   )r   r   r   r   Údistÿ   s    zVersionConflict.distc             C   s
   | j d S )Nr   )r8   )r   r   r   r   Úreq  s    zVersionConflict.reqc             C   s   | j jf t S )N)Ú	_templateÚformatÚlocals)r   r   r   r   Úreport  s    zVersionConflict.reportc             C   s   |s| S | j |f }t| S )zt
        If required_by is non-empty, return a version of self that is a
        ContextualVersionConflict.
        )r8   ÚContextualVersionConflict)r   Úrequired_byr8   r   r   r   Úwith_context
  s    zVersionConflict.with_contextN)
r   r   r   r   r   Úpropertyr   r   r   r   r   r   r   r   re   õ   s   c               @   s&   e Zd ZdZejd Zedd ZdS )r   z
    A VersionConflict that accepts a third parameter, the set of the
    requirements that required the installed Distribution.
    z by {self.required_by}c             C   s
   | j d S )Nr<   )r8   )r   r   r   r   r     s    z%ContextualVersionConflict.required_byN)r   r   r   r   re   r   r   r   r   r   r   r   r     s   
r   c               @   sH   e Zd ZdZdZedd Zedd Zedd Zd	d
 Z	dd Z
dS )rf   z&A requested distribution was not foundzSThe '{self.req}' distribution was not found and is required by {self.requirers_str}c             C   s
   | j d S )Nr   )r8   )r   r   r   r   r   (  s    zDistributionNotFound.reqc             C   s
   | j d S )Nr   )r8   )r   r   r   r   Ú	requirers,  s    zDistributionNotFound.requirersc             C   s   | j s
dS d | j ¡S )Nzthe applicationz, )r   rB   )r   r   r   r   Úrequirers_str0  s    z"DistributionNotFound.requirers_strc             C   s   | j jf t S )N)r   r   r   )r   r   r   r   r   6  s    zDistributionNotFound.reportc             C   s   |   ¡ S )N)r   )r   r   r   r   Ú__str__9  s    zDistributionNotFound.__str__N)r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   rf   "  s   c               @   s   e Zd ZdZdS )rg   z>Distribution doesn't have an "extra feature" of the given nameN)r   r   r   r   r   r   r   r   rg   =  s   r   r<   éÿÿÿÿc             C   s   |t | < dS )a  Register `provider_factory` to make providers for `loader_type`

    `loader_type` is the type or class of a PEP 302 ``module.__loader__``,
    and `provider_factory` is a function that, passed a *module* object,
    returns an ``IResourceProvider`` for that module.
    N)Ú_provider_factories)Úloader_typeÚprovider_factoryr   r   r   r   K  s    c             C   st   t | tr$t | ¡p"tt| d S ytj|  }W n& tk
rX   t	|  tj|  }Y nX t
|dd}tt||S )z?Return an IResourceProvider for the named module or requirementr   Ú
__loader__N)Ú
isinstancerb   rX   ÚfindrI   Ústrr@   ÚmodulesÚKeyErrorÚ
__import__ÚgetattrÚ_find_adapterr   )ÚmoduleOrReqÚmoduleÚloaderr   r   r   rK   U  s    
c             C   sd   | s\t  ¡ d }|dkrLd}tj |¡rLttdrLt |¡}d|krL|d }|  | 	d¡¡ | d S )Nr   Ú z0/System/Library/CoreServices/SystemVersion.plistÚ	readPlistZProductVersionr;   )
rA   Úmac_verÚosÚpathÚexistsÚhasattrÚplistlibr®   Úappendr   )Ú_cacher   ÚplistÚplist_contentr   r   r   rC   b  s    

rC   c             C   s   ddd  | | ¡S )NZppc)ZPowerPCZPower_Macintosh)Úget)Úmachiner   r   r   Ú_macosx_archr  s    r»   c              C   s¢   yddl m}  W n  tk
r0   ddlm}  Y nX |  }tjdkr| d¡sy<t }t 	¡ d  
dd¡}dt|d t|d	 t|f S  tk
r   Y nX |S )
zÄReturn this platform's string for platform-specific distributions

    XXX Currently this is the same as ``distutils.util.get_platform()``, but it
    needs some hacks for Linux and Mac OS X.
    r   )rl   r:   zmacosx-é   ú Ú_zmacosx-%d.%d-%sr   )Ú	sysconfigrl   ÚImportErrorÚdistutils.utilr@   rA   Ú
startswithrC   r°   ÚunameÚreplaceÚintr»   rE   )rl   rF   r   rº   r   r   r   r=   v  s    r=   zmacosx-(\d+)\.(\d+)-(.*)zdarwin-(\d+)\.(\d+)\.(\d+)-(.*)c             C   sè   | dks|dks| |krdS t  |¡}|rät  | ¡}|st | ¡}|rt| d¡}d| d¡| d¡f }|dkr||dks|dkr|d	krdS d
S | d¡| d¡ks¼| d¡| d¡krÀd
S t| d¡t| d¡kràd
S dS d
S )zÛCan code for the `provided` platform run on the `required` platform?

    Returns true if either platform is ``None``, or the platforms are equal.

    XXX Needs compatibility checks for Linux and other unixy OSes.
    NTr   z%s.%sr<   é   z10.3é   z10.4Fr   )r>   r?   ÚdarwinVersionStringrÅ   rD   )ÚprovidedÚrequiredÚreqMacÚprovMacÚ
provDarwinÚdversionÚmacosversionr   r   r   rm     s*    


c             C   s<   t  d¡j}|d }| ¡  ||d< t| d  ||¡ dS )z@Locate distribution `dist_spec` and run its `script_name` scriptr   r   r   N)r@   Ú	_getframeÚ	f_globalsr2   rI   rJ   )Ú	dist_specÚscript_nameÚnsÚnamer   r   r   rJ   Æ  s
    c             C   s@   t | tjrt | ¡} t | tr(t| } t | ts<td| | S )z@Return a current distribution object for a Requirement or stringz-Expected string, Requirement, or Distribution)r¢   r   Ústring_typesrb   ÚparserK   ra   Ú	TypeError)r   r   r   r   rL   Ó  s    



c             C   s   t |  ||¡S )zDReturn `name` entry point of `group` for `dist` or raise ImportError)rL   rM   )r   rD   rÕ   r   r   r   rM   Þ  s    c             C   s   t |  |¡S )z=Return the entry point map for `group`, or the full entry map)rL   rN   )r   rD   r   r   r   rN   ã  s    c             C   s   t |  ||¡S )z<Return the EntryPoint object for `group`+`name`, or ``None``)rL   rO   )r   rD   rÕ   r   r   r   rO   è  s    c               @   s<   e Zd Zdd Zdd Zdd Zdd Zd	d
 Zdd ZdS )r{   c             C   s   dS )z;Does the package's distribution contain the named metadata?Nr   )rÕ   r   r   r   Úhas_metadataî  s    zIMetadataProvider.has_metadatac             C   s   dS )z'The named metadata resource as a stringNr   )rÕ   r   r   r   Úget_metadatañ  s    zIMetadataProvider.get_metadatac             C   s   dS )zÒYield named metadata resource as list of non-blank non-comment lines

       Leading and trailing whitespace is stripped from each line, and lines
       with ``#`` as the first non-blank character are omitted.Nr   )rÕ   r   r   r   Úget_metadata_linesô  s    z$IMetadataProvider.get_metadata_linesc             C   s   dS )z>Is the named metadata a directory?  (like ``os.path.isdir()``)Nr   )rÕ   r   r   r   Úmetadata_isdirú  s    z IMetadataProvider.metadata_isdirc             C   s   dS )z?List of metadata names in the directory (like ``os.listdir()``)Nr   )rÕ   r   r   r   Úmetadata_listdirý  s    z"IMetadataProvider.metadata_listdirc             C   s   dS )z=Execute the named script in the supplied namespace dictionaryNr   )rÓ   Ú	namespacer   r   r   rJ      s    zIMetadataProvider.run_scriptN)	r   r   r   rÙ   rÚ   rÛ   rÜ   rÝ   rJ   r   r   r   r   r{   í  s   c               @   s@   e Zd ZdZdd Zdd Zdd Zdd	 Zd
d Zdd Z	dS )r|   z3An object that provides access to package resourcesc             C   s   dS )zdReturn a true filesystem path for `resource_name`

        `manager` must be an ``IResourceManager``Nr   )ÚmanagerÚresource_namer   r   r   Úget_resource_filename  s    z'IResourceProvider.get_resource_filenamec             C   s   dS )ziReturn a readable file-like object for `resource_name`

        `manager` must be an ``IResourceManager``Nr   )rß   rà   r   r   r   Úget_resource_stream  s    z%IResourceProvider.get_resource_streamc             C   s   dS )zmReturn a string containing the contents of `resource_name`

        `manager` must be an ``IResourceManager``Nr   )rß   rà   r   r   r   Úget_resource_string  s    z%IResourceProvider.get_resource_stringc             C   s   dS )z,Does the package contain the named resource?Nr   )rà   r   r   r   Úhas_resource  s    zIResourceProvider.has_resourcec             C   s   dS )z>Is the named resource a directory?  (like ``os.path.isdir()``)Nr   )rà   r   r   r   rV     s    z IResourceProvider.resource_isdirc             C   s   dS )z?List of resource names in the directory (like ``os.listdir()``)Nr   )rà   r   r   r   rT     s    z"IResourceProvider.resource_listdirN)
r   r   r   r   rá   râ   rã   rä   rV   rT   r   r   r   r   r|     s   c               @   s¬   e Zd ZdZd'ddZedd Zedd Zd	d
 Zdd Z	dd Z
d(ddZdd Zdd Zd)ddZd*ddZd+ddZdd Zd,dd Zd!d" Zd#d$ Zd%d& ZdS )-r_   zDA collection of active distributions on sys.path (or a similar list)Nc             C   sB   g | _ i | _i | _g | _|dkr&tj}x|D ]}|  |¡ q,W dS )z?Create working set from list of path entries (default=sys.path)N)ÚentriesÚ
entry_keysÚby_keyÚ	callbacksr@   r±   Ú	add_entry)r   rå   Úentryr   r   r   Ú__init__#  s    
zWorkingSet.__init__c             C   sZ   |  }yddl m} W n tk
r*   |S X y| |¡ W n tk
rT   |  |¡S X |S )z1
        Prepare the master working set.
        r   )Ú__requires__)Ú__main__rì   rÀ   rI   re   Ú_build_from_requirements)ÚclsÚwsrì   r   r   r   Ú_build_master0  s    zWorkingSet._build_masterc             C   sn   | g }t |}| |t ¡}x|D ]}| |¡ q$W x"tjD ]}||jkr>| |¡ q>W |jtjdd< |S )zQ
        Build a working set from a requirement spec. Rewrites sys.path.
        N)ri   Úresolver^   Úaddr@   r±   rå   ré   )rï   Úreq_specrð   ÚreqsÚdistsr   rê   r   r   r   rî   D  s    

z#WorkingSet._build_from_requirementsc             C   s@   | j  |g ¡ | j |¡ x t|dD ]}|  ||d¡ q&W dS )aÝ  Add a path item to ``.entries``, finding any distributions on it

        ``find_distributions(entry, True)`` is used to find distributions
        corresponding to the path entry, and they are added.  `entry` is
        always appended to ``.entries``, even if it is already present.
        (This is because ``sys.path`` can contain the same value more than
        once, and the ``.entries`` of the ``sys.path`` WorkingSet should always
        equal ``sys.path``.)
        TFN)ræ   Ú
setdefaultrå   rµ   rZ   ró   )r   rê   r   r   r   r   ré   Z  s    
zWorkingSet.add_entryc             C   s   | j  |j¡|kS )z9True if `dist` is the active distribution for its project)rç   r¹   r3   )r   r   r   r   r   Ú__contains__i  s    zWorkingSet.__contains__c             C   s,   | j  |j¡}|dk	r(||kr(t|||S )aÐ  Find a distribution matching requirement `req`

        If there is an active distribution for the requested project, this
        returns it as long as it meets the version requirement specified by
        `req`.  But, if there is an active distribution for the project and it
        does *not* meet the `req` requirement, ``VersionConflict`` is raised.
        If there is no active distribution for the requested project, ``None``
        is returned.
        N)rç   r¹   r3   re   )r   r   r   r   r   r   r£   m  s    

zWorkingSet.findc             c   sP   xJ| D ]B}|  |¡}|dkr6x*| ¡ D ]
}|V  q&W q||kr|| V  qW dS )a  Yield entry point objects from `group` matching `name`

        If `name` is None, yields all entry points in `group` from all
        distributions in the working set, otherwise only ones matching
        both `group` and `name` are yielded (in distribution order).
        N)rN   Úvalues)r   rD   rÕ   r   rå   Úepr   r   r   rP   }  s    

zWorkingSet.iter_entry_pointsc             C   s>   t  d¡j}|d }| ¡  ||d< |  |¡d  ||¡ dS )z?Locate distribution for `requires` and run `script_name` scriptr   r   r   N)r@   rÐ   rÑ   r2   rI   rJ   )r   ÚrequiresrÓ   rÔ   rÕ   r   r   r   rJ     s
    zWorkingSet.run_scriptc             c   sT   i }xJ| j D ]@}|| jkrqx.| j| D ] }||kr(d||< | j| V  q(W qW dS )z¸Yield distributions for non-duplicate projects in the working set

        The yield order is the order in which the items' path entries were
        added to the working set.
        r   N)rå   ræ   rç   )r   ÚseenÚitemr3   r   r   r   Ú__iter__  s    
zWorkingSet.__iter__TFc             C   s   |r|j | j||d |dkr$|j}| j |g ¡}| j |jg ¡}|sV|j| jkrVdS || j|j< |j|krx| |j¡ |j|kr| |j¡ |  |¡ dS )a  Add `dist` to working set, associated with `entry`

        If `entry` is unspecified, it defaults to the ``.location`` of `dist`.
        On exit from this routine, `entry` is added to the end of the working
        set's ``.entries`` (if it wasn't already present).

        `dist` is only added to the working set if it's for a project that
        doesn't already have a distribution in the set, unless `replace=True`.
        If it's added, any callbacks registered with the ``subscribe()`` method
        will be called.
        )rÄ   N)	Ú	insert_onrå   Úlocationræ   r÷   r3   rç   rµ   Ú
_added_new)r   r   rê   ÚinsertrÄ   ÚkeysÚkeys2r   r   r   ró   ¥  s    

zWorkingSet.addc             C   s  t |ddd }i }i }g }t }	t t¡}
xL|r|| d¡}||krLq2|	 ||¡sZq2| |j¡}|dkr| j	 |j¡}|dks||krü|rü| }|dkrÂ|dkr²t
| j}nt
g }tg }|j||||d }||j< |dkrü|
 |d¡}t||| |¡ ||kr(|
| }t|| |¡| |j¡ddd }| |¡ x(|D ] }|
|  |j¡ |j|	|< qNW d||< q2W |S )aÎ  List all distributions needed to (recursively) meet `requirements`

        `requirements` must be a sequence of ``Requirement`` objects.  `env`,
        if supplied, should be an ``Environment`` instance.  If
        not supplied, it defaults to all distributions available within any
        entry or distribution in the working set.  `installer`, if supplied,
        will be invoked with each requirement that cannot be met by an
        already-installed distribution; it should return a ``Distribution`` or
        ``None``.

        Unless `replace_conflicting=True`, raises a VersionConflict exception
        if
        any requirements are found on the path that have the correct name but
        the wrong version.  Otherwise, if an `installer` is supplied it will be
        invoked to obtain the correct version of the requirement and activate
        it.

        `extras` is a list of the extras to be used with these requirements.
        This is important because extra requirements may look like `my_req;
        extra = "my_extra"`, which would otherwise be interpreted as a purely
        optional requirement.  Instead, we want to be able to assert that these
        requirements are truly required.
        Nr   r   )Úreplace_conflictingT)ÚlistÚ
_ReqExtrasÚcollectionsÚdefaultdictÚsetÚpopÚmarkers_passr¹   r3   rç   r^   rå   r_   Ú
best_matchrf   rµ   re   r   rû   ÚextrasÚextendró   Úproject_name)r   ÚrequirementsÚenvÚ	installerr  r  Ú	processedÚbestÚto_activateÚ
req_extrasr   r   r   rð   r   Údependent_reqÚnew_requirementsÚnew_requirementr   r   r   rò   Ã  sN    








zWorkingSet.resolvec             C   s  t |}| ¡  i }i }|dkr4t| j}||7 }n|| }|  g ¡}	t t|	j|  x|D ]}
x||
 D ]x}| ¡ g}y|	 |||¡}W n4 t	k
r¾ } z|||< |r¬wjnP W dd}~X Y qjX t t|	j| | 
t |¡¡ P qjW q\W t |}| ¡  ||fS )as  Find all activatable distributions in `plugin_env`

        Example usage::

            distributions, errors = working_set.find_plugins(
                Environment(plugin_dirlist)
            )
            # add plugins+libs to sys.path
            map(working_set.add, distributions)
            # display errors
            print('Could not load', errors)

        The `plugin_env` should be an ``Environment`` instance that contains
        only distributions that are in the project's "plugin directory" or
        directories. The `full_env`, if supplied, should be an ``Environment``
        contains all currently-available distributions.  If `full_env` is not
        supplied, one is created automatically from the ``WorkingSet`` this
        method is called on, which will typically mean that every directory on
        ``sys.path`` will be scanned for distributions.

        `installer` is a standard installer callback as used by the
        ``resolve()`` method. The `fallback` flag indicates whether we should
        attempt to resolve older versions of a plugin if the newest version
        cannot be resolved.

        This method returns a 2-tuple: (`distributions`, `error_info`), where
        `distributions` is a list of the distributions found in `plugin_env`
        that were loadable, along with any other distributions that are needed
        to resolve their dependencies.  `error_info` is a dictionary mapping
        unloadable plugin distributions to an exception instance describing the
        error that occurred. Usually this will be a ``DistributionNotFound`` or
        ``VersionConflict`` instance.
        N)r  Úsortr^   rå   r   r   ró   Úas_requirementrò   rd   r"   r$   r%   )r   Ú
plugin_envÚfull_envr  ÚfallbackÚplugin_projectsÚ
error_infoÚdistributionsr  Ú
shadow_setr  r   r   Ú	resolveesr   r   r   r   Úfind_plugins  s4    $





zWorkingSet.find_pluginsc             G   s*   |   t|¡}x|D ]}|  |¡ qW |S )a¾  Ensure that distributions matching `requirements` are activated

        `requirements` must be a string or a (possibly-nested) sequence
        thereof, specifying the distributions and versions required.  The
        return value is a sequence of the distributions that needed to be
        activated to fulfill the requirements; all relevant distributions are
        included, even if they were already activated in this working set.
        )rò   ri   ró   )r   r  Úneededr   r   r   r   rI   s  s    	
zWorkingSet.requirec             C   s<   || j krdS | j  |¡ |s"dS x| D ]}|| q(W dS )zInvoke `callback` for all distributions

        If `existing=True` (default),
        call on all existing ones, as well.
        N)rè   rµ   )r   ÚcallbackÚexistingr   r   r   r   Ú	subscribe  s    

zWorkingSet.subscribec             C   s   x| j D ]}|| qW d S )N)rè   )r   r   r'  r   r   r   r    s    zWorkingSet._added_newc             C   s,   | j d d  | j ¡ | j ¡ | jd d  fS )N)rå   ræ   r/   rç   rè   )r   r   r   r   r-     s    zWorkingSet.__getstate__c             C   s@   |\}}}}|d d  | _ | ¡ | _| ¡ | _|d d  | _d S )N)rå   r/   ræ   rç   rè   )r   Úe_k_b_crå   r  rç   rè   r   r   r   r.     s
    

zWorkingSet.__setstate__)N)N)NTF)NNFN)NNT)T)r   r   r   r   rë   Úclassmethodrñ   rî   ré   rø   r£   rP   rJ   rþ   ró   rò   r%  rI   r)  r  r-   r.   r   r   r   r   r_      s&   


 
\
S
c               @   s   e Zd ZdZdddZdS )r  z>
    Map each requirement to the extras that demanded it.
    Nc                s2    fdd|    d¡|pd D } j p0t|S )z»
        Evaluate markers for req against each extra that
        demanded it.

        Return False if the req has a marker and fails
        evaluation. Otherwise, return True.
        c             3   s   | ]} j  d |i¡V  qdS )ÚextraN)ÚmarkerÚevaluate)Ú.0r,  )r   r   r   ú	<genexpr>±  s   z*_ReqExtras.markers_pass.<locals>.<genexpr>r   )N)r¹   r-  Úany)r   r   r  Úextra_evalsr   )r   r   r  ¨  s    	
z_ReqExtras.markers_pass)N)r   r   r   r   r  r   r   r   r   r  £  s   r  c               @   sx   e Zd ZdZde efddZdd Zdd Zdd	d
Z	dd Z
dd ZdddZdddZdd Zdd Zdd ZdS )r^   z5Searchable snapshot of distributions on a search pathNc             C   s    i | _ || _|| _|  |¡ dS )a!  Snapshot distributions available on a search path

        Any distributions found on `search_path` are added to the environment.
        `search_path` should be a sequence of ``sys.path`` items.  If not
        supplied, ``sys.path`` is used.

        `platform` is an optional string specifying the name of the platform
        that platform-specific distributions must be compatible with.  If
        unspecified, it defaults to the current platform.  `python` is an
        optional string naming the desired version of Python (e.g. ``'3.3'``);
        it defaults to the current version.

        You may explicitly set `platform` (and/or `python`) to ``None`` if you
        wish to map *all* distributions, not just those compatible with the
        running platform or Python version.
        N)Ú_distmaprA   ÚpythonÚscan)r   Úsearch_pathrA   r4  r   r   r   rë   º  s    zEnvironment.__init__c             C   s2   | j dkp|jdkp|j| j k}|o0t|j| jS )zåIs distribution `dist` acceptable for this environment?

        The distribution must match the platform and python version
        requirements specified when this environment was created, or False
        is returned.
        N)r4  Ú
py_versionrm   rA   )r   r   Ú	py_compatr   r   r   Úcan_addÒ  s    

zEnvironment.can_addc             C   s   | j |j  |¡ dS )z"Remove `dist` from the environmentN)r3  r3   Úremove)r   r   r   r   r   r:  à  s    zEnvironment.removec             C   s<   |dkrt j}x(|D ] }xt|D ]}|  |¡ q"W qW dS )ad  Scan `search_path` for distributions usable in this environment

        Any distributions found are added to the environment.
        `search_path` should be a sequence of ``sys.path`` items.  If not
        supplied, ``sys.path`` is used.  Only distributions conforming to
        the platform/python version defined at initialization are added.
        N)r@   r±   rZ   ró   )r   r6  rý   r   r   r   r   r5  ä  s
    
zEnvironment.scanc             C   s   |  ¡ }| j |g ¡S )a  Return a newest-to-oldest list of distributions for `project_name`

        Uses case-insensitive `project_name` comparison, assuming all the
        project's distributions use their project's name converted to all
        lowercase as their key.

        )Úlowerr3  r¹   )r   r  Údistribution_keyr   r   r   Ú__getitem__ó  s    zEnvironment.__getitem__c             C   sL   |   |¡rH| ¡ rH| j |jg ¡}||krH| |¡ |jt d¡dd dS )zLAdd `dist` if we ``can_add()`` it and it has not already been added
        ÚhashcmpT)r3   ÚreverseN)	r9  Úhas_versionr3  r÷   r3   rµ   r  ÚoperatorÚ
attrgetter)r   r   rö   r   r   r   ró   þ  s
    
zEnvironment.addFc             C   sf   y|  |¡}W n tk
r,   |s$ d}Y nX |dk	r:|S x| |j D ]}||krF|S qFW |  ||¡S )a¸  Find distribution best matching `req` and usable on `working_set`

        This calls the ``find(req)`` method of the `working_set` to see if a
        suitable distribution is already active.  (This may raise
        ``VersionConflict`` if an unsuitable version of the project is already
        active in the specified `working_set`.)  If a suitable distribution
        isn't active, this method returns the newest distribution in the
        environment that meets the ``Requirement`` in `req`.  If no suitable
        distribution is found, and `installer` is supplied, then the result of
        calling the environment's ``obtain(req, installer)`` method will be
        returned.
        N)r£   re   r3   Úobtain)r   r   rX   r  r  r   r   r   r   r    s    
zEnvironment.best_matchc             C   s   |dk	r||S dS )aÞ  Obtain a distribution matching `requirement` (e.g. via download)

        Obtain a distro that matches requirement (e.g. via download).  In the
        base ``Environment`` class, this routine just returns
        ``installer(requirement)``, unless `installer` is None, in which case
        None is returned instead.  This method is a hook that allows subclasses
        to attempt other ways of obtaining a distribution before falling back
        to the `installer` argument.Nr   )r   Úrequirementr  r   r   r   rC  #  s    	zEnvironment.obtainc             c   s&   x | j  ¡ D ]}| | r|V  qW dS )z=Yield the unique project names of the available distributionsN)r3  r  )r   r3   r   r   r   rþ   /  s    zEnvironment.__iter__c             C   s^   t |tr|  |¡ nDt |trLx8|D ] }x|| D ]}|  |¡ q4W q&W ntd|f | S )z2In-place addition of a distribution or environmentzCan't add %r to environment)r¢   ra   ró   r^   rØ   )r   ÚotherÚprojectr   r   r   r   Ú__iadd__5  s    


zEnvironment.__iadd__c             C   s.   | j g ddd}x| |fD ]}||7 }qW |S )z4Add an environment or distribution to an environmentN)rA   r4  )r   )r   rE  Únewr  r   r   r   Ú__add__A  s    zEnvironment.__add__)N)NF)N)r   r   r   r   rH   ÚPY_MAJORrë   r9  r:  r5  r=  ró   r  rC  rþ   rG  rI  r   r   r   r   r^   ·  s   



c               @   s   e Zd ZdZdS )rh   aT  An error occurred extracting a resource

    The following attributes are available from instances of this exception:

    manager
        The resource manager that raised this exception

    cache_path
        The base directory for resource extraction

    original_error
        The exception instance that caused extraction to fail
    N)r   r   r   r   r   r   r   r   rh   M  s   c               @   s   e Zd ZdZdZdd Zdd Zdd Zd	d
 Zdd Z	dd Z
dd Zdd ZdddZedd Zdd Zdd Zd ddZdS )!r`   z'Manage resource extraction and packagesNc             C   s
   i | _ d S )N)Úcached_files)r   r   r   r   rë   a  s    zResourceManager.__init__c             C   s   t | |¡S )zDoes the named resource exist?)rK   rä   )r   Úpackage_or_requirementrà   r   r   r   rU   d  s    zResourceManager.resource_existsc             C   s   t | |¡S )z,Is the named resource an existing directory?)rK   rV   )r   rL  rà   r   r   r   rV   h  s    zResourceManager.resource_isdirc             C   s   t | | |¡S )z4Return a true filesystem path for specified resource)rK   rá   )r   rL  rà   r   r   r   rS   n  s    z!ResourceManager.resource_filenamec             C   s   t | | |¡S )z9Return a readable file-like object for specified resource)rK   râ   )r   rL  rà   r   r   r   rR   t  s    zResourceManager.resource_streamc             C   s   t | | |¡S )z%Return specified resource as a string)rK   rã   )r   rL  rà   r   r   r   rQ   z  s    zResourceManager.resource_stringc             C   s   t | |¡S )z1List the contents of the named resource directory)rK   rT   )r   rL  rà   r   r   r   rT     s    z ResourceManager.resource_listdirc             C   sR   t  ¡ d }| jpt }t d¡ ¡ }t|jf t	 }| |_
||_||_|dS )z5Give an error message for problems extracting file(s)r   a  
            Can't extract file(s) to egg cache

            The following error occurred while trying to extract file(s)
            to the Python egg cache:

              {old_exc}

            The Python egg cache directory is currently set to:

              {cache_path}

            Perhaps your account does not have write access to this directory?
            You can change the cache directory by setting the PYTHON_EGG_CACHE
            environment variable to point to an accessible directory.
            N)r@   Úexc_infoÚextraction_pathr]   ÚtextwrapÚdedentÚlstriprh   r   r   rß   Ú
cache_pathÚoriginal_error)r   Úold_excrR  ÚtmplÚerrr   r   r   Úextraction_error  s    
z ResourceManager.extraction_errorr   c             C   sf   | j p
t }tjj||d f| }yt| W n tk
rL   |  ¡  Y nX |  |¡ d| j	|< |S )a®  Return absolute location in cache for `archive_name` and `names`

        The parent directory of the resulting path will be created if it does
        not already exist.  `archive_name` should be the base filename of the
        enclosing egg (which may not be the name of the enclosing zipfile!),
        including its ".egg" extension.  `names`, if provided, should be a
        sequence of path name parts "under" the egg's extraction location.

        This method should only be called by resource providers that need to
        obtain an extraction location, and only for names they intend to
        extract, as it tracks the generated names for possible cleanup later.
        z-tmpr   )
rN  r]   r°   r±   rB   Ú_bypass_ensure_directoryÚ	ExceptionrW  Ú_warn_unsafe_extraction_pathrK  )r   Úarchive_nameÚnamesÚextract_pathÚtarget_pathr   r   r   Úget_cache_path¢  s    

zResourceManager.get_cache_pathc             C   sV   t jdkr|  t jd ¡sdS t  | ¡j}|tj@ s>|tj@ rRd|  }t 	|t
¡ dS )aN  
        If the default extraction path is overridden and set to an insecure
        location, such as /tmp, it opens up an opportunity for an attacker to
        replace an extracted file with an unauthorized payload. Warn the user
        if a known insecure location is used.

        See Distribute #375 for more details.
        ÚntZwindirNzË%s is writable by group/others and vulnerable to attack when used with get_resource_filename. Consider a more secure location (set with .set_extraction_path or the PYTHON_EGG_CACHE environment variable).)r°   rÕ   rÂ   ÚenvironÚstatÚst_modeÚS_IWOTHÚS_IWGRPÚwarningsÚwarnÚUserWarning)r±   ÚmodeÚmsgr   r   r   rZ  »  s    
z,ResourceManager._warn_unsafe_extraction_pathc             C   s.   t jdkr*t  |¡jdB d@ }t  ||¡ dS )a4  Perform any platform-specific postprocessing of `tempname`

        This is where Mac header rewrites should be done; other platforms don't
        have anything special they should do.

        Resource providers should call this method ONLY after successfully
        extracting a compressed resource.  They must NOT call it on resources
        that are already in the filesystem.

        `tempname` is the current (temporary) name of the file, and `filename`
        is the name it will be renamed to by the caller after this routine
        returns.
        Úposixim  iÿ  N)r°   rÕ   rb  rc  Úchmod)r   ÚtempnameÚfilenameri  r   r   r   ÚpostprocessÕ  s    
zResourceManager.postprocessc             C   s   | j rtd|| _dS )aÒ  Set the base path where resources will be extracted to, if needed.

        If you do not call this routine before any extractions take place, the
        path defaults to the return value of ``get_default_cache()``.  (Which
        is based on the ``PYTHON_EGG_CACHE`` environment variable, with various
        platform-specific fallbacks.  See that routine's documentation for more
        details.)

        Resources are extracted to subdirectories of this path based upon
        information given by the ``IResourceProvider``.  You may set this to a
        temporary directory, but then you must call ``cleanup_resources()`` to
        delete the extracted files when done.  There is no guarantee that
        ``cleanup_resources()`` will be able to remove all extracted files.

        (Note: you may not change the extraction path for a given resource
        manager once resources have been extracted, unless you first call
        ``cleanup_resources()``.)
        z5Can't change extraction path, files already extractedN)rK  rE   rN  )r   r±   r   r   r   r[   é  s    z#ResourceManager.set_extraction_pathFc             C   s   dS )aB  
        Delete all extracted resource files and directories, returning a list
        of the file and directory names that could not be successfully removed.
        This function does not have any concurrency protection, so it should
        generally only be called when the extraction path is a temporary
        directory exclusive to a single process.  This method is not
        automatically called; you must call it explicitly or register it as an
        ``atexit`` function if you wish to ensure cleanup of a temporary
        directory used for extractions.
        Nr   )r   Úforcer   r   r   r\     s    
z!ResourceManager.cleanup_resources)r   )F)r   r   r   r   rN  rë   rU   rV   rS   rR   rQ   rT   rW  r_  ÚstaticmethodrZ  ro  r[   r\   r   r   r   r   r`   ]  s   
c               C   s   t j d¡ptjddS )z
    Return the ``PYTHON_EGG_CACHE`` environment variable
    or a platform-relevant user cache dir for an app
    named "Python-Eggs".
    ZPYTHON_EGG_CACHEzPython-Eggs)Úappname)r°   ra  r¹   r   Úuser_cache_dirr   r   r   r   r]     s    c             C   s   t  dd| ¡S )zConvert an arbitrary string to a standard distribution name

    Any runs of non-alphanumeric/. characters are replaced with a single '-'.
    z[^A-Za-z0-9.]+ú-)ÚreÚsub)rÕ   r   r   r   rj     s    c             C   sD   yt tj | ¡S  tjjk
r>   |  dd¡} t dd| ¡S X dS )zB
    Convert an arbitrary string to a standard version string
    r½   r;   z[^A-Za-z0-9.]+rt  N)r¤   r   r   r   r   rÄ   ru  rv  )r   r   r   r   rk   %  s
    c             C   s   t  dd| ¡ ¡ S )z±Convert an arbitrary string to a standard 'extra' name

    Any runs of non-alphanumeric characters are replaced with a single '_',
    and the result is always lowercased.
    z[^A-Za-z0-9.-]+r¾   )ru  rv  r;  )r,  r   r   r   rp   1  s    c             C   s   |   dd¡S )z|Convert a project or version name to its filename-escaped form

    Any '-' characters are currently replaced with '_'.
    rt  r¾   )rÄ   )rÕ   r   r   r   rq   :  s    c          
   C   s@   yt |  W n. tk
r: } zd|_d|_|S d}~X Y nX dS )zo
    Validate text as a PEP 508 environment marker; return an exception
    if invalid or False otherwise.
    NF)rs   ÚSyntaxErrorrn  Úlineno)ÚtextÚer   r   r   rr   B  s    c          
   C   sH   yt j | ¡}| ¡ S  t jjk
rB } zt|W dd}~X Y nX dS )zÙ
    Evaluate a PEP 508 environment marker.
    Return a boolean indicating the marker result in this environment.
    Raise SyntaxError if marker is invalid.

    This implementation uses the 'pyparsing' module.
    N)r   ÚmarkersÚMarkerr.  ÚInvalidMarkerrw  )ry  r,  r-  rz  r   r   r   rs   P  s
    c               @   s¬   e Zd ZdZdZdZdZdd Zdd Zdd Z	d	d
 Z
dd Zdd Zdd Zdd Zdd Zdd Zdd Zdd Zdd Zdd Zdd  Zd!d" Zd#d$ Zd%d& ZdS )'r   zETry to implement resources and metadata for arbitrary PEP 302 loadersNc             C   s(   t |dd | _tj t |dd¡| _d S )Nr¡   Ú__file__r­   )r¨   r¬   r°   r±   ÚdirnameÚmodule_path)r   r«   r   r   r   rë   f  s    zNullProvider.__init__c             C   s   |   | j|¡S )N)Ú_fnr  )r   rß   rà   r   r   r   rá   j  s    z"NullProvider.get_resource_filenamec             C   s   t  |  ||¡¡S )N)ÚioÚBytesIOrã   )r   rß   rà   r   r   r   râ   m  s    z NullProvider.get_resource_streamc             C   s   |   |  | j|¡¡S )N)Ú_getr  r  )r   rß   rà   r   r   r   rã   p  s    z NullProvider.get_resource_stringc             C   s   |   |  | j|¡¡S )N)Ú_hasr  r  )r   rà   r   r   r   rä   s  s    zNullProvider.has_resourcec             C   s   | j o|  |  | j |¡¡S )N)Úegg_infor  r  )r   rÕ   r   r   r   rÙ   v  s    zNullProvider.has_metadatac             C   s2   | j s
dS |  |  | j |¡¡}tjr.| d¡S |S )Nr­   zutf-8)r  r  r  r   ÚPY3Údecode)r   rÕ   Úvaluer   r   r   rÚ   y  s    zNullProvider.get_metadatac             C   s   t |  |¡S )N)rn   rÚ   )r   rÕ   r   r   r   rÛ     s    zNullProvider.get_metadata_linesc             C   s   |   |  | j|¡¡S )N)Ú_isdirr  r  )r   rà   r   r   r   rV     s    zNullProvider.resource_isdirc             C   s   | j o|  |  | j |¡¡S )N)r  r  r  )r   rÕ   r   r   r   rÜ     s    zNullProvider.metadata_isdirc             C   s   |   |  | j|¡¡S )N)Ú_listdirr  r  )r   rà   r   r   r   rT     s    zNullProvider.resource_listdirc             C   s   | j r|  |  | j |¡¡S g S )N)r  r  r  )r   rÕ   r   r   r   rÝ     s    zNullProvider.metadata_listdirc       
      C   sÌ   d| }|   |¡s$tdjf t |  |¡ dd¡}| dd¡}|  | j|¡}||d< tj	 
|¡rt| ¡ }t||d}t||| n>dd	lm} t|d| d¡|f||< t||d}	t|	|| d S )
Nzscripts/z<Script {script!r} not found in metadata at {self.egg_info!r}z
Ú
úr~  Úexecr   )Úcache)rÙ   rd   r   r   rÚ   rÄ   r  r  r°   r±   r²   r   ÚreadÚcompiler  Ú	linecacher  Úlenr   )
r   rÓ   rÞ   ÚscriptÚscript_textÚscript_filenameÚsourceÚcoder  Úscript_coder   r   r   rJ     s"    

zNullProvider.run_scriptc             C   s   t dd S )Nz9Can't perform this operation for unregistered loader type)ÚNotImplementedError)r   r±   r   r   r   r  §  s    zNullProvider._hasc             C   s   t dd S )Nz9Can't perform this operation for unregistered loader type)r  )r   r±   r   r   r   r  ¬  s    zNullProvider._isdirc             C   s   t dd S )Nz9Can't perform this operation for unregistered loader type)r  )r   r±   r   r   r   r  ±  s    zNullProvider._listdirc             C   s    |rt jj|f| d¡ S |S )Nú/)r°   r±   rB   r   )r   Úbaserà   r   r   r   r  ¶  s    zNullProvider._fnc             C   s$   t | jdr| j |¡S tdd S )NÚget_dataz=Can't perform this operation for loaders without 'get_data()')r³   r¬   r  r  )r   r±   r   r   r   r  »  s    zNullProvider._get)r   r   r   r   Úegg_namer  r¬   rë   rá   râ   rã   rä   rÙ   rÚ   rÛ   rV   rÜ   rT   rÝ   rJ   r  r  r  r  r  r   r   r   r   r   _  s,   c               @   s    e Zd ZdZdd Zdd ZdS )r   z&Provider based on a virtual filesystemc             C   s   t  | |¡ |  ¡  d S )N)r   rë   Ú_setup_prefix)r   r«   r   r   r   rë   É  s    zEggProvider.__init__c             C   s^   | j }d }xN||krXt|rBtj |¡| _tj |d¡| _|| _P |}tj 	|¡\}}qW d S )NzEGG-INFO)
r  Ú_is_egg_pathr°   r±   Úbasenamer  rB   r  Úegg_rootr   )r   r±   Úoldr  r   r   r   r  Í  s    
zEggProvider._setup_prefixN)r   r   r   r   rë   r  r   r   r   r   r   Æ  s   c               @   sD   e Zd ZdZdd Zdd Zdd Zdd	 Zd
d Ze	dd Z
dS )r   z6Provides access to package resources in the filesystemc             C   s   t j |¡S )N)r°   r±   r²   )r   r±   r   r   r   r  ß  s    zDefaultProvider._hasc             C   s   t j |¡S )N)r°   r±   r   )r   r±   r   r   r   r  â  s    zDefaultProvider._isdirc             C   s
   t  |¡S )N)r°   Úlistdir)r   r±   r   r   r   r  å  s    zDefaultProvider._listdirc             C   s   t |  | j|¡dS )NÚrb)r   r  r  )r   rß   rà   r   r   r   râ   è  s    z#DefaultProvider.get_resource_streamc          	   C   s   t |d
}| ¡ S Q R X d S )Nr¥  )r   r  )r   r±   Ústreamr   r   r   r  ë  s    zDefaultProvider._getc             C   s   t tdtd }t||  d S )NÚSourceFileLoader)r¨   Úimportlib_machineryÚtyper   )rï   Ú
loader_clsr   r   r   Ú	_registerï  s
    
zDefaultProvider._registerN)r   r   r   r   r  r  r  râ   r  r+  r«  r   r   r   r   r   Ü  s   c               @   s8   e Zd ZdZdZdd  ZZdd Zdd Zd	d
 Z	dS )r   z.Provider that returns nothing for all requestsNc             C   s   dS )NFr   )r   r±   r   r   r   r9     s    zEmptyProvider.<lambda>c             C   s   dS )Nr­   r   )r   r±   r   r   r   r    s    zEmptyProvider._getc             C   s   g S )Nr   )r   r±   r   r   r   r    s    zEmptyProvider._listdirc             C   s   d S )Nr   )r   r   r   r   rë   	  s    zEmptyProvider.__init__)
r   r   r   r   r  r  r  r  r  rë   r   r   r   r   r   ü  s   c               @   s    e Zd ZdZedd ZeZdS )ÚZipManifestsz
    zip manifest builder
    c          	      s4   t  |¡   fdd  ¡ D }t|S Q R X dS )a  
        Build a dictionary similar to the zipimport directory
        caches, except instead of tuples, store ZipInfo objects.

        Use a platform-specific path separator (os.sep) for the path keys
        for compatibility with pypy on Windows.
        c             3   s&   | ]}|  d tj¡  |¡fV  qdS )r  N)rÄ   r°   ÚsepÚgetinfo)r/  rÕ   )Úzfiler   r   r0     s   z%ZipManifests.build.<locals>.<genexpr>N)ÚzipfileÚZipFileÚnamelistr$   )rï   r±   r)   r   )r¯  r   Úbuild  s    	
zZipManifests.buildN)r   r   r   r   r+  r³  Úloadr   r   r   r   r¬    s   r¬  c               @   s$   e Zd ZdZe dd¡Zdd ZdS )ÚMemoizedZipManifestsz%
    Memoized zipfile manifests.
    Úmanifest_modzmanifest mtimec             C   sR   t j |¡}t  |¡j}|| ks.| | j|krH|  |¡}|  ||¡| |< | | jS )zW
        Load a manifest at path or return a suitable manifest already loaded.
        )	r°   r±   Únormpathrb  Úst_mtimeÚmtimer³  r¶  Úmanifest)r   r±   r¹  rº  r   r   r   r´  1  s    
zMemoizedZipManifests.loadN)r   r   r   r   r  Ú
namedtupler¶  r´  r   r   r   r   rµ  +  s   rµ  c               @   s   e Zd ZdZdZe Zdd Zdd Zdd Z	e
d	d
 Zdd Zedd Zdd Zdd Zdd Zdd Zdd Zdd Zdd Zdd Zdd  ZdS )!r   z"Resource support for zips and eggsNc             C   s    t  | |¡ | jjtj | _d S )N)r   rë   r¬   Úarchiver°   r­  Úzip_pre)r   r«   r   r   r   rë   E  s    zZipProvider.__init__c             C   sP   |  tj¡}|| jjkrdS | | j¡r:|t| jd  S td|| jf d S )Nr­   z%s is not a subpath of %s)	Úrstripr°   r­  r¬   r¼  rÂ   r½  r  ÚAssertionError)r   Úfspathr   r   r   Ú_zipinfo_nameI  s    zZipProvider._zipinfo_namec             C   sP   | j | }| | jtj ¡r:|t| jd d   tj¡S td|| jf d S )Nr   z%s is not a subpath of %s)r½  rÂ   r¢  r°   r­  r  r   r¿  )r   Úzip_pathrÀ  r   r   r   Ú_partsU  s
    
zZipProvider._partsc             C   s   | j  | jj¡S )N)Ú_zip_manifestsr´  r¬   r¼  )r   r   r   r   Úzipinfo_  s    zZipProvider.zipinfoc             C   s`   | j std|  |¡}|  ¡ }d |  |¡¡|krTx|D ]}|  ||  |¡¡ q:W |  ||¡S )Nz5resource_filename() only supported for .egg, not .zipr  )r  r  Ú_resource_to_zipÚ_get_eager_resourcesrB   rÃ  Ú_extract_resourceÚ_eager_to_zip)r   rß   rà   rÂ  ÚeagersrÕ   r   r   r   rá   c  s    

z!ZipProvider.get_resource_filenamec             C   s"   | j }| jd }t |¡}||fS )N)r   r   r   )Ú	file_sizeÚ	date_timeÚtimeÚmktime)Úzip_statÚsizerÌ  Ú	timestampr   r   r   Ú_get_date_and_sizep  s    

zZipProvider._get_date_and_sizec       
      C   sn  ||   ¡ krDx*|   ¡ | D ]}|  |tj ||¡¡}qW tj |¡S |  | j| ¡\}}tsdt	dyä| 
| j|  |¡¡}|  ||¡r|S tdtj |¡d\}}	t || j |¡¡ t |¡ t|	||f | |	|¡ yt|	| W n\ tjk
rD   tj |¡r>|  ||¡r|S tjdkr>t| t|	| |S  Y nX W n  tjk
rh   | ¡  Y nX |S )Nz>"os.rename" and "os.unlink" are not supported on this platformz	.$extract)Údirr`  )Ú_indexrÈ  r°   r±   rB   r  rÒ  rÅ  ÚWRITE_SUPPORTÚIOErrorr_  r  rÃ  Ú_is_currentÚ_mkstempÚwriter¬   r  Úcloser   ro  r
   ÚerrorÚisfilerÕ   r   rW  )
r   rß   rÂ  rÕ   ÚlastrÑ  rÐ  Ú	real_pathÚoutfÚtmpnamr   r   r   rÈ  y  sD    

zZipProvider._extract_resourcec       	   	   C   sx   |   | j| ¡\}}tj |¡s$dS t |¡}|j|ksB|j|krFdS | j 	|¡}t
|d}| ¡ }W dQ R X ||kS )zK
        Return True if the file_path is current for this zip_path
        Fr¥  N)rÒ  rÅ  r°   r±   rÜ  rb  Úst_sizer¸  r¬   r  r   r  )	r   Ú	file_pathrÂ  rÑ  rÐ  rb  Úzip_contentsÚfÚfile_contentsr   r   r   r×  °  s    
zZipProvider._is_currentc             C   sB   | j d kr<g }x&dD ]}|  |¡r| |  |¡¡ qW || _ | j S )N)znative_libs.txtzeager_resources.txt)rÊ  rÙ   r  rÛ   )r   rÊ  rÕ   r   r   r   rÇ  À  s    


z ZipProvider._get_eager_resourcesc          	   C   s   y| j S  tk
r   i }xd| jD ]Z}| tj¡}xH|rztj |d d ¡}||krj||  |d ¡ P q4| ¡ g||< q4W q"W || _ |S X d S )Nr   )	Ú	_dirindexÚAttributeErrorrÅ  r   r°   r­  rB   rµ   r  )r   Úindr±   ÚpartsÚparentr   r   r   rÔ  É  s    zZipProvider._indexc             C   s    |   |¡}|| jkp||  ¡ kS )N)rÁ  rÅ  rÔ  )r   rÀ  rÂ  r   r   r   r  Ú  s    
zZipProvider._hasc             C   s   |   |¡|  ¡ kS )N)rÁ  rÔ  )r   rÀ  r   r   r   r  Þ  s    zZipProvider._isdirc             C   s   t |  ¡  |  |¡d¡S )Nr   )r  rÔ  r¹   rÁ  )r   rÀ  r   r   r   r  á  s    zZipProvider._listdirc             C   s   |   |  | j|¡¡S )N)rÁ  r  r¢  )r   rà   r   r   r   rÉ  ä  s    zZipProvider._eager_to_zipc             C   s   |   |  | j|¡¡S )N)rÁ  r  r  )r   rà   r   r   r   rÆ  ç  s    zZipProvider._resource_to_zip)r   r   r   r   rÊ  rµ  rÄ  rë   rÁ  rÃ  r   rÅ  rá   rq  rÒ  rÈ  r×  rÇ  rÔ  r  r  r  rÉ  rÆ  r   r   r   r   r   ?  s$   
	7	c               @   s8   e Zd ZdZdd Zdd Zdd Zdd	 Zd
d ZdS )r}   a*  Metadata handler for standalone PKG-INFO files

    Usage::

        metadata = FileMetadata("/path/to/PKG-INFO")

    This provider rejects all data and metadata requests except for PKG-INFO,
    which is treated as existing, and will be the contents of the file at
    the provided location.
    c             C   s
   || _ d S )N)r±   )r   r±   r   r   r   rë   ú  s    zFileMetadata.__init__c             C   s   |dkot j | j¡S )NzPKG-INFO)r°   r±   rÜ  )r   rÕ   r   r   r   rÙ   ý  s    zFileMetadata.has_metadatac          	   C   sD   |dkrt dtj| jddd}| ¡ }W d Q R X |  |¡ |S )NzPKG-INFOz(No metadata except PKG-INFO is availablezutf-8rÄ   )ÚencodingÚerrors)r¦   r  r   r±   r  Ú_warn_on_replacement)r   rÕ   rä  Úmetadatar   r   r   rÚ      s    
zFileMetadata.get_metadatac             C   s2   d  d¡}||kr.d}|jf t }t |¡ d S )Ns   ï¿½zutf-8z2{self.path} could not be properly decoded in UTF-8)r  r   r   rf  rg  )r   rî  Úreplacement_charrU  rj  r   r   r   rí  	  s
    
z!FileMetadata._warn_on_replacementc             C   s   t |  |¡S )N)rn   rÚ   )r   rÕ   r   r   r   rÛ     s    zFileMetadata.get_metadata_linesN)	r   r   r   r   rë   rÙ   rÚ   rí  rÛ   r   r   r   r   r}   î  s   
	c               @   s   e Zd ZdZdd ZdS )r~   as  Metadata provider for egg directories

    Usage::

        # Development eggs:

        egg_info = "/path/to/PackageName.egg-info"
        base_dir = os.path.dirname(egg_info)
        metadata = PathMetadata(base_dir, egg_info)
        dist_name = os.path.splitext(os.path.basename(egg_info))[0]
        dist = Distribution(basedir, project_name=dist_name, metadata=metadata)

        # Unpacked egg directories:

        egg_path = "/path/to/PackageName-ver-pyver-etc.egg"
        metadata = PathMetadata(egg_path, os.path.join(egg_path,'EGG-INFO'))
        dist = Distribution.from_filename(egg_path, metadata=metadata)
    c             C   s   || _ || _d S )N)r  r  )r   r±   r  r   r   r   rë   )  s    zPathMetadata.__init__N)r   r   r   r   rë   r   r   r   r   r~     s   c               @   s   e Zd ZdZdd ZdS )r   z Metadata provider for .egg filesc             C   sD   |j tj | _|| _|jr0tj |j |j¡| _n|j | _|  	¡  dS )z-Create a metadata provider from a zipimporterN)
r¼  r°   r­  r½  r¬   Úprefixr±   rB   r  r  )r   Úimporterr   r   r   rë   1  s    zEggMetadata.__init__N)r   r   r   r   rë   r   r   r   r   r   .  s   r$   )Ú_distribution_findersc             C   s   |t | < dS )ax  Register `distribution_finder` to find distributions in sys.path items

    `importer_type` is the type or class of a PEP 302 "Importer" (sys.path item
    handler), and `distribution_finder` is a callable that, passed a path
    item and the importer instance, yields ``Distribution`` instances found on
    that path item.  See ``pkg_resources.find_on_path`` for an example.N)rò  )Úimporter_typeÚdistribution_finderr   r   r   r   @  s    c             C   s   t | }tt|}||| |S )z.Yield distributions accessible via `path_item`)r   r©   rò  )Ú	path_itemÚonlyrñ  Úfinderr   r   r   rZ   J  s    
c       	      c   sÎ   | j  d¡rdS t| }| d¡r2tj||dV  |r:dS x| d¡D ]}t|rtj	 
||¡}tt |¡|}xT|D ]
}|V  qvW qF| ¡  d¡rFtj	 
||¡}tt |¡}||_t |||¡V  qFW dS )z@
    Find eggs in zip files; possibly multiple nested eggs.
    z.whlNzPKG-INFO)rî  r  z
.dist-info)r¼  Úendswithr   rÙ   ra   Úfrom_filenamerT   r   r°   r±   rB   Úfind_eggs_in_zipÚ	zipimportÚzipimporterr;  r  Úfrom_location)	rñ  rõ  rö  rî  ÚsubitemÚsubpathrö   r   Úsubmetar   r   r   rú  Q  s$    

rú  c             C   s   dS )Nr   r   )rñ  rõ  rö  r   r   r   Úfind_nothingo  s    r  c             C   s   dd }t | |ddS )aL  
    Given a list of filenames, return them in descending order
    by version number.

    >>> names = 'bar', 'foo', 'Python-2.7.10.egg', 'Python-2.7.2.egg'
    >>> _by_version_descending(names)
    ['Python-2.7.10.egg', 'Python-2.7.2.egg', 'foo', 'bar']
    >>> names = 'Setuptools-1.2.3b1.egg', 'Setuptools-1.2.3.egg'
    >>> _by_version_descending(names)
    ['Setuptools-1.2.3.egg', 'Setuptools-1.2.3b1.egg']
    >>> names = 'Setuptools-1.2.3b1.egg', 'Setuptools-1.2.3.post1.egg'
    >>> _by_version_descending(names)
    ['Setuptools-1.2.3.post1.egg', 'Setuptools-1.2.3b1.egg']
    c             S   s2   t j | ¡\} }t |  d¡|g¡}dd |D S )z6
        Parse each component of the filename
        rt  c             S   s   g | ]}t j |¡qS r   )r   r   r×   )r/  Úpartr   r   r   ú
<listcomp>  s    z?_by_version_descending.<locals>._by_version.<locals>.<listcomp>)r°   r±   ÚsplitextÚ	itertoolsÚchainr   )rÕ   Úextré  r   r   r   Ú_by_version  s    z+_by_version_descending.<locals>._by_versionT)r3   r?  )Úsorted)r\  r  r   r   r   Ú_by_version_descendingv  s    r
  c       
      #   s   t tr4tjttj d¡dV  dS t} fdd|D }t	|}x>|D ]6}tj |¡}t
| }x||D ]
}	|	V  qW q^W dS )z6Yield distributions accessible on a sys.path directoryzEGG-INFO)rî  Nc             3   s   | ]}t | r|V  qd S )N)Údist_factory)r/  rê   )rö  rõ  r   r   r0  ¢  s   zfind_on_path.<locals>.<genexpr>)Ú_normalize_cachedÚ_is_unpacked_eggra   rù  r~   r°   r±   rB   Úsafe_listdirr
  r  )
rñ  rõ  rö  rå   ÚfilteredÚpath_item_entriesrê   ÚfullpathÚfactoryr   r   )rö  rõ  r   Úfind_on_path  s    
r  c             C   sH   |  ¡ }tt|jd}|r tS |s0t|r0tS |sB| d¡rBtS t S )z9
    Return a dist_factory for a path_item and entry
    )z	.egg-infoz
.dist-infoz	.egg-link)	r;  r1  r   rø  Údistributions_from_metadatar   rZ   Úresolve_egg_linkÚNoDists)rõ  rê   rö  r;  Úis_metar   r   r   r  °  s    r  c               @   s*   e Zd ZdZdd ZejreZdd ZdS )r  zS
    >>> bool(NoDists())
    False

    >>> list(NoDists()('anything'))
    []
    c             C   s   dS )NFr   )r   r   r   r   Ú__bool__É  s    zNoDists.__bool__c             C   s   t dS )Nr   )Úiter)r   r  r   r   r   Ú__call__Î  s    zNoDists.__call__N)	r   r   r   r   r  r   ÚPY2Ú__nonzero__r  r   r   r   r   r  Á  s
   r  c          
   C   st   y
t  | ¡S  ttfk
r"   Y nN tk
rn } z0|jtjtjtjfkpVt	|dddk}|s^ W dd}~X Y nX dS )zI
    Attempt to list contents of path, but suppress some exceptions.
    ÚwinerrorNi  r   )
r°   r¤  ÚPermissionErrorÚNotADirectoryErrorÚOSErrorÚerrnoÚENOTDIRÚEACCESÚENOENTr¨   )r±   rz  Ú	ignorabler   r   r   r  Ò  s    
r  c             c   sf   t j | ¡}t j | ¡r:tt  | ¡dkr.d S t|| }nt| }t j | ¡}t	j
|||tdV  d S )Nr   )Ú
precedence)r°   r±   r  r   r  r¤  r~   r}   r¡  ra   rý  rz   )r±   Úrootrî  rê   r   r   r   r  ç  s    r  c          	   c   s8   t | &}x|D ]}| ¡ }|r|V  qW W dQ R X dS )z1
    Yield non-empty lines from file at path
    N)r   Ústrip)r±   rä  Úliner   r   r   Únon_empty_linesö  s
    

r*  c                s.   t  } fdd|D }tt|}t|dS )za
    Given a path to an .egg-link, resolve distributions
    present in the referenced path.
    c             3   s$   | ]}t j t j  ¡|¡V  qd S )N)r°   r±   rB   r  )r/  Úref)r±   r   r   r0    s   z#resolve_egg_link.<locals>.<genexpr>r   )r*  r   rZ   Únext)r±   Úreferenced_pathsÚresolved_pathsÚdist_groupsr   )r±   r   r    s
    

r  Ú
FileFinder)Ú_namespace_handlers)Ú_namespace_packagesc             C   s   |t | < dS )a  Register `namespace_handler` to declare namespace packages

    `importer_type` is the type or class of a PEP 302 "Importer" (sys.path item
    handler), and `namespace_handler` is a callable like this::

        def namespace_handler(importer, path_entry, moduleName, module):
            # return a path_entry to use for child packages

    Namespace handlers are only called if the importer object has already
    agreed that it can handle the relevant path item, and they should only
    return a subpath if the module __path__ does not already contain an
    equivalent subpath.  For an example namespace handler, see
    ``pkg_resources.file_ns_handler``.
    N)r1  )ró  Únamespace_handlerr   r   r   r     s    c             C   sÀ   t |}|dkrdS | | ¡}|dkr*dS tj | ¡}|dkrbt | ¡ }tj| < g |_t|  nt	|dsvt
d| tt|}|||| |}|dk	r¼|j}| |¡ | | ¡ t|| | |S )zEEnsure that named package includes a subpath of path_item (if needed)NÚ__path__zNot a package:)r   Úfind_moduler@   r¥   r¹   ÚtypesÚ
ModuleTyper4  Ú_set_parent_nsr³   rØ   r©   r1  rµ   Úload_moduleÚ_rebuild_mod_path)ÚpackageNamerõ  rñ  r¬   r«   Úhandlerrÿ  r±   r   r   r   Ú
_handle_ns*  s*    






r=  c                s`   dd t jD fdd fdd}t| ts8dS | j|d d	d | D |jdd< dS )
zq
    Rebuild module.__path__ ensuring that all entries are ordered
    corresponding to their sys.path order
    c             S   s   g | ]}t |qS r   )r  )r/  Úpr   r   r   r  I  s    z%_rebuild_mod_path.<locals>.<listcomp>c                s(   y
   | ¡S  tk
r"   tdS X dS )z/
        Workaround for #520 and #513.
        ÚinfN)ÚindexrE   Úfloat)rê   )Úsys_pathr   r   Úsafe_sys_path_indexK  s    
z._rebuild_mod_path.<locals>.safe_sys_path_indexc                s<   |   tj¡}  d¡d }|d|  }ttj |¡S )zR
        Return the ordinal of the path based on its position in sys.path
        r;   r   N)r   r°   r­  Úcountr  rB   )r±   Ú
path_partsÚmodule_partsré  )Úpackage_namerC  r   r   Úposition_in_sys_pathT  s    z/_rebuild_mod_path.<locals>.position_in_sys_pathN)r3   c             S   s   g | ]}t |qS r   )r  )r/  r>  r   r   r   r  b  s    )r@   r±   r¢   r  r  r4  )Ú	orig_pathrG  r«   rH  r   )rG  rC  rB  r   r:  D  s    		
r:  c             C   sÒ   t  ¡  zº| tkrdS tjd }}d| krd |  d¡dd ¡}t| |tkrZt| ytj	| j
}W n tk
r   td|Y nX t |g ¡ | ¡ t | g ¡ x|D ]}t| | q®W W dt  ¡  X dS )z9Declare that package 'packageName' is a namespace packageNr;   r   zNot a package:)Ú_impÚacquire_lockr2  r@   r±   rB   r   rW   r§   r¥   r4  rç  rØ   r÷   rµ   r=  Úrelease_lock)r;  r±   rê  rõ  r   r   r   rW   e  s&    
c             C   sJ   t  ¡  z2x,t |d¡D ]}t|| }|rt|| qW W dt  ¡  X dS )zDEnsure that previously-declared namespace packages include path_itemr   N)rJ  rK  r2  r¹   r=  r   rL  )rõ  rê  Úpackagerÿ  r   r   r   r     s    
c             C   sF   t j || d¡d ¡}t|}x |jD ]}t||kr(P q(W |S dS )zBCompute an ns-package subpath for a filesystem or zipfile importerr;   r   N)r°   r±   rB   r   r  r4  )rñ  rõ  r;  r«   rÿ  Ú
normalizedrý   r   r   r   Úfile_ns_handler  s    rO  c             C   s   d S )Nr   )rñ  rõ  r;  r«   r   r   r   Únull_ns_handler¦  s    rP  c             C   s   t j t j | ¡¡S )z1Normalize a file/dir name for comparison purposes)r°   r±   ÚnormcaseÚrealpath)rn  r   r   r   ru   ­  s    c             C   s2   y||  S  t k
r,   t|  || < }|S X d S )N)r¦   ru   )rn  r¶   Úresultr   r   r   r  ²  s
    r  c             C   s   |   ¡  d¡S )z7
    Determine if given path appears to be an egg.
    z.egg)r;  rø  )r±   r   r   r   r   º  s    r   c             C   s    t | otj tj | dd¡¡S )z@
    Determine if given path appears to be an unpacked egg.
    zEGG-INFOzPKG-INFO)r   r°   r±   rÜ  rB   )r±   r   r   r   r  Á  s    r  c             C   s<   |   d¡}| ¡ }|r8d |¡}ttj| |tj|   d S )Nr;   )r   r  rB   Úsetattrr@   r¥   )r;  ré  rÕ   rê  r   r   r   r8  Ë  s
    

r8  c             c   sf   t | tjr<xT|  ¡ D ] }| ¡ }|r| d¡s|V  qW n&x$| D ]}xt|D ]
}|V  qPW qBW dS )z9Yield non-empty/non-comment lines of a string or sequenceú#N)r¢   r   rÖ   Ú
splitlinesr(  rÂ   rn   )ÚstrsÚsÚssr   r   r   rn   Ó  s    
z\w+(\.\w+)*$z
    (?P<name>[^-]+) (
        -(?P<ver>[^-]+) (
            -py(?P<pyver>[^-]+) (
                -(?P<plat>.+)
            )?
        )?
    )?
    c               @   s   e Zd ZdZdddZdd Zdd	 ZdddZdd ZdddZ	e
 d¡ZedddZedd ZedddZedddZdS ) rc   z3Object representing an advertised importable objectr   Nc             C   s<   t |std||| _|| _t|| _t|| _|| _d S )NzInvalid module name)ÚMODULErE   rÕ   Úmodule_nameÚtupleÚattrsr  r   )r   rÕ   r[  r]  r  r   r   r   r   rë   ó  s    


zEntryPoint.__init__c             C   sH   d| j | jf }| jr*|dd | j¡ 7 }| jrD|dd | j¡ 7 }|S )Nz%s = %sú:r;   z [%s]ú,)rÕ   r[  r]  rB   r  )r   rX  r   r   r   r   ü  s    zEntryPoint.__str__c             C   s   dt |  S )NzEntryPoint.parse(%r))r¤   )r   r   r   r   r   	  s    zEntryPoint.__repr__Tc             O   s4   |r|s|rt jdtdd |r,| j|| |  ¡ S )zH
        Require packages for this EntryPoint, then resolve it.
        zJParameters to load are deprecated.  Call .resolve and .require separately.r<   )Ú
stacklevel)rf  rg  ÚDeprecationWarningrI   rò   )r   rI   r8   Úkwargsr   r   r   r´  	  s    zEntryPoint.loadc          
   C   sV   t | jdgdd}yt t| j|¡S  tk
rP } ztt|W dd}~X Y nX dS )zD
        Resolve the entry point from its module and attrs.
        r   r   )ÚfromlistÚlevelN)	r§   r[  Ú	functoolsÚreducer¨   r]  rç  rÀ   r¤   )r   r«   Úexcr   r   r   rò   	  s
    zEntryPoint.resolvec             C   sL   | j r| jstd| | j | j ¡}tj|||| j d}tttj| d S )Nz&Can't require() without a distribution)r  )	r  r   rg   rû   rX   rò   r  r   ró   )r   r  r  rõ   r)   r   r   r   rI    	  s
    
zEntryPoint.requirez]\s*(?P<name>.+?)\s*=\s*(?P<module>[\w.]+)\s*(:\s*(?P<attr>[\w.]+))?\s*(?P<extras>\[.*\])?\s*$c             C   sf   | j  |¡}|sd}t||| ¡ }|  |d ¡}|d rJ|d  d¡nd}| |d |d |||S )a  Parse a single entry point from string `src`

        Entry point syntax follows the form::

            name = some.module:some.attr [extra1, extra2]

        The entry name and module name are required, but the ``:attrs`` and
        ``[extras]`` parts are optional
        z9EntryPoint must be in 'name=module:attrs [extras]' formatr  Úattrr;   r   rÕ   r«   )Úpatternr?   rE   Ú	groupdictÚ_parse_extrasr   )rï   Úsrcr   rG   rj  Úresr  r]  r   r   r   r×   6	  s    
zEntryPoint.parsec             C   s(   |sdS t  d| ¡}|jr"t |jS )Nr   Úx)rb   r×   ÚspecsrE   r  )rï   Úextras_specr   r   r   r   rk  J	  s    zEntryPoint._parse_extrasc             C   sZ   t |std|i }x>t|D ]2}|  ||¡}|j|krHtd||j|||j< q W |S )zParse an entry point groupzInvalid group namezDuplicate entry point)rZ  rE   rn   r×   rÕ   )rï   rD   Úlinesr   Úthisr)  rú   r   r   r   Úparse_groupS	  s    

zEntryPoint.parse_groupc             C   sx   t |tr| ¡ }nt|}i }xR|D ]J\}}|dkrD|s<q&td| ¡ }||kr^td||  |||¡||< q&W |S )z!Parse a map of entry point groupsNz%Entry points must be listed in groupszDuplicate group name)r¢   r$   r)   ro   rE   r(  rs  )rï   Údatar   ÚmapsrD   rq  r   r   r   Ú	parse_map`	  s    


zEntryPoint.parse_map)r   r   N)T)NN)N)N)N)r   r   r   r   rë   r   r   r´  rò   rI   ru  r  ri  r+  r×   rk  rs  rv  r   r   r   r   rc   ð  s    
	


	c             C   s>   | sdS t j | ¡}|d  d¡r:t j |d d d ¡S | S )Nr­   r   zmd5=)r­   )r   r×   ÚurlparserÂ   Ú
urlunparse)r   Úparsedr   r   r   Ú_remove_md5_fragmentt	  s    rz  c             C   s@   dd }t || }tt|d}| d¡\}}}t| ¡ p>dS )z
    Given an iterable of lines from a Metadata file, return
    the value of the Version field, if present, or None otherwise.
    c             S   s   |   ¡  d¡S )Nzversion:)r;  rÂ   )r)  r   r   r   Úis_version_line	  s    z+_version_from_file.<locals>.is_version_liner­   r^  N)r   r,  r  Ú	partitionrk   r(  )rq  r{  Úversion_linesr)  r¾   r  r   r   r   Ú_version_from_file}	  s
    
r~  c               @   sl  e Zd ZdZdZddddedefddZedLddZ	dd	 Z
ed
d Zdd Zdd Zdd Zdd Zdd Zdd Zdd Zedd Zedd Zdd Zed d! Zed"d# Zed$d% Zd&d' ZdMd)d*Zd+d, ZdNd.d/Zd0d1 Zd2d3 Z d4d5 Z!d6d7 Z"edOd8d9Z#d:d; Z$d<d= Z%dPd>d?Z&d@dA Z'dQdBdCZ(dDdE Z)dFdG Z*dHdI Z+edJdK Z,dS )Rra   z5Wrap an actual or potential sys.path entry w/metadatazPKG-INFONc             C   sF   t |pd| _|d k	r t|| _|| _|| _|| _|| _|p>t| _	d S )NZUnknown)
rj   r  rk   Ú_versionr7  rA   r   r&  r   Ú	_provider)r   r   rî  r  r   r7  rA   r&  r   r   r   rë   	  s    
zDistribution.__init__c             K   s~   d gd \}}}}t j |¡\}}	|	 ¡ tkr^t|	 ¡  } t|}
|
r^|
 dddd¡\}}}}| ||f||||d| ¡ S )Nr¼   rÕ   ZverZpyverrF   )r  r   r7  rA   )r°   r±   r  r;  Ú_distributionImplÚEGG_NAMErD   Ú_reload_version)rï   r   r¡  rî  r'   r  r   r7  rA   r  r?   r   r   r   rý  	  s    
zDistribution.from_locationc             C   s   | S )Nr   )r   r   r   r   r  ¬	  s    zDistribution._reload_versionc             C   s(   | j | j| jt| j| jpd| jp$dfS )Nr­   )Úparsed_versionr&  r3   rz  r   r7  rA   )r   r   r   r   r>  ¯	  s    zDistribution.hashcmpc             C   s
   t | jS )N)Úhashr>  )r   r   r   r   Ú__hash__º	  s    zDistribution.__hash__c             C   s   | j |j k S )N)r>  )r   rE  r   r   r   Ú__lt__½	  s    zDistribution.__lt__c             C   s   | j |j kS )N)r>  )r   rE  r   r   r   Ú__le__À	  s    zDistribution.__le__c             C   s   | j |j kS )N)r>  )r   rE  r   r   r   Ú__gt__Ã	  s    zDistribution.__gt__c             C   s   | j |j kS )N)r>  )r   rE  r   r   r   Ú__ge__Æ	  s    zDistribution.__ge__c             C   s   t || jsdS | j|jkS )NF)r¢   r   r>  )r   rE  r   r   r   Ú__eq__É	  s    zDistribution.__eq__c             C   s
   | |k S )Nr   )r   rE  r   r   r   Ú__ne__Ï	  s    zDistribution.__ne__c             C   s0   y| j S  tk
r*   | j ¡  | _ }|S X d S )N)Ú_keyrç  r  r;  )r   r3   r   r   r   r3   Ö	  s
    zDistribution.keyc             C   s   t | dst| j| _| jS )NÚ_parsed_version)r³   r    r   r  )r   r   r   r   r  Þ	  s    
zDistribution.parsed_versionc             C   sX   t jj}t| j|}|sd S | js&d S t d¡ ¡  dd¡}t	 
|jf t| t¡ d S )Na>  
            '{project_name} ({version})' is being parsed as a legacy,
            non PEP 440,
            version. You may find odd behavior and sort order.
            In particular it will be sorted as less than 0.0. It
            is recommended to migrate to PEP 440 compatible
            versions.
            r  r½   )r   r   r   r¢   r  rO  rP  r(  rÄ   rf  rg  r   Úvarsr   )r   ÚLVÚ	is_legacyrU  r   r   r   Ú_warn_legacy_versionå	  s    z!Distribution._warn_legacy_versionc             C   sL   y| j S  tk
rF   t|  | j¡}|d krBd}t|| j | |S X d S )Nz(Missing 'Version:' header and/or %s file)r  rç  r~  Ú_get_metadataÚPKG_INFOrE   )r   r   rU  r   r   r   r   ÿ	  s    zDistribution.versionc             C   s2   y| j S  tk
r*   |  |  ¡ ¡| _ Y nX | j S )z~
        A map of extra to its list of (direct) requirements
        for this distribution, including the null extra.
        )Z_Distribution__dep_maprç  Ú_filter_extrasÚ_build_dep_map)r   r   r   r   Ú_dep_map

  s
    zDistribution._dep_mapc             C   sv   xpt td| D ]^}|}|  |¡}| d¡\}}}|oFt|pFt| }|rPg }t|pZd}|  |g ¡ |¡ qW | S )z¤
        Given a mapping of extras to dependencies, strip off
        environment markers and filter out any dependencies
        not matching the markers.
        Nr^  )	r  r   r  r|  rr   rs   rp   r÷   r  )Údmr,  Ú	new_extrarõ   r¾   r-  Úfails_markerr   r   r   r  
  s    

zDistribution._filter_extrasc             C   sH   i }x>dD ]6}x0t |  |¡D ]\}}| |g ¡ t|¡ qW q
W |S )N)zrequires.txtzdepends.txt)ro   r  r÷   r  ri   )r   r  rÕ   r,  rõ   r   r   r   r  ,
  s
    
zDistribution._build_dep_mapr   c          	   C   sj   | j }g }| | dd¡¡ xH|D ]@}y| |t| ¡ W q" tk
r`   td| |f Y q"X q"W |S )z@List of Requirements needed for this distro if `extras` are usedNr   z%s has no such extra feature %r)r  r  r¹   rp   r¦   rg   )r   r  r  Údepsr  r   r   r   rû   3
  s    
zDistribution.requiresc             c   s(   |   |¡r$x|  |¡D ]
}|V  qW d S )N)rÙ   rÛ   )r   rÕ   r)  r   r   r   r  A
  s    
zDistribution._get_metadataFc             C   sZ   |dkrt j}| j||d |t jkrVt| j x$|  d¡D ]}|t jkr<t| q<W dS )z>Ensure distribution is importable on `path` (default=sys.path)N)rÄ   znamespace_packages.txt)r@   r±   rÿ   r   r   r  r¥   rW   )r   r±   rÄ   Úpkgr   r   r   ÚactivateF
  s    


zDistribution.activatec             C   s8   dt | jt | j| jptf }| jr4|d| j 7 }|S )z@Return what this distribution's standard .egg filename should bez
%s-%s-py%srt  )rq   r  r   r7  rJ  rA   )r   rn  r   r   r   r  Q
  s    zDistribution.egg_namec             C   s    | j rd| | j f S t| S d S )Nz%s (%s))r   r¤   )r   r   r   r   r   \
  s    zDistribution.__repr__c             C   s@   yt | dd }W n tk
r(   d }Y nX |p0d}d| j|f S )Nr   z[unknown version]z%s %s)r¨   rE   r  )r   r   r   r   r   r   b
  s    
zDistribution.__str__c             C   s   |  d¡rt|t| j|S )zADelegate all unrecognized public attributes to .metadata providerr¾   )rÂ   rç  r¨   r  )r   rh  r   r   r   Ú__getattr__j
  s    
zDistribution.__getattr__c             K   s   | j t|tj |¡|f|S )N)rý  r  r°   r±   r¡  )rï   rn  rî  r'   r   r   r   rù  p
  s    zDistribution.from_filenamec             C   s<   t | jtjjr"d| j| jf }nd| j| jf }t |¡S )z?Return a ``Requirement`` that matches this distribution exactlyz%s==%sz%s===%s)r¢   r  r   r   r   r  rb   r×   )r   Úspecr   r   r   r  w
  s    zDistribution.as_requirementc             C   s.   |   ||¡}|dkr&td||ff | ¡ S )z=Return the `name` entry point of `group` or raise ImportErrorNzEntry point %r not found)rO   rÀ   r´  )r   rD   rÕ   rú   r   r   r   rM   
  s    zDistribution.load_entry_pointc             C   sP   y
| j }W n, tk
r6   t |  d¡| ¡ }| _ Y nX |dk	rL| |i ¡S |S )z=Return the entry point map for `group`, or the full entry mapzentry_points.txtN)Ú_ep_maprç  rc   rv  r  r¹   )r   rD   Úep_mapr   r   r   rN   
  s    
zDistribution.get_entry_mapc             C   s   |   |¡ |¡S )z<Return the EntryPoint object for `group`+`name`, or ``None``)rN   r¹   )r   rD   rÕ   r   r   r   rO   
  s    zDistribution.get_entry_infoc       
      C   s0  |p| j }|sdS t|}tj |¡}dd |D }x²t|D ]t\}}||kr\|rVP q²dS q>||kr>| jtkr>|s|||d krdS |tjkr|  	¡  | 
||¡ | 
||¡ P q>W |tjkrÈ|  	¡  |rÚ| 
d|¡ n
| |¡ dS xBy| ||d ¡}	W n tk
r   P Y qêX ||	= ||	= |	}qêW dS )aä  Ensure self.location is on path

        If replace=False (default):
            - If location is already in path anywhere, do nothing.
            - Else:
              - If it's an egg and its parent directory is on path,
                insert just ahead of the parent.
              - Else: add to the end of path.
        If replace=True:
            - If location is already on path anywhere (not eggs)
              or higher priority than its parent (eggs)
              do nothing.
            - Else:
              - If it's an egg and its parent directory is on path,
                insert just ahead of the parent,
                removing any lower-priority entries.
              - Else: add it to the front of path.
        Nc             S   s   g | ]}|rt |p|qS r   )r  )r/  r>  r   r   r   r  ±
  s    z*Distribution.insert_on.<locals>.<listcomp>r   r   )r   r  r°   r±   r  Ú	enumerater&  rv   r@   Úcheck_version_conflictr  rµ   r@  rE   )
r   r±   ÚlocrÄ   ÚnlocÚbdirÚnpathr>  rý   Únpr   r   r   rÿ   
  sB    



zDistribution.insert_onc             C   s¬   | j dkrd S t |  d¡¡}t| j}x~|  d¡D ]p}|tjks4||ks4|tkrTq4|dkr^q4t	tj| dd }|rt| 
|¡s4| 
| j¡rq4td||| jf  q4W d S )NÚ
setuptoolsznamespace_packages.txtztop_level.txt)Úpkg_resourcesr©  Úsiter~  zIModule %s was already imported from %s, but %s is being added to sys.path)r3   r$   r%   r  ru   r   r@   r¥   r2  r¨   rÂ   Úissue_warning)r   Únspr¤  ÚmodnameÚfnr   r   r   r£  Û
  s"    

z#Distribution.check_version_conflictc             C   s4   y
| j  W n$ tk
r.   tdt|   dS X dS )NzUnbuilt egg for FT)r   rE   r¬  r   )r   r   r   r   r@  ñ
  s    
zDistribution.has_versionc             K   sD   d}x$|  ¡ D ]}| |t| |d¡ qW | d| j¡ | jf |S )z@Copy this distribution, substituting in any changed keyword argsz<project_name version py_version platform location precedenceNrî  )r   r÷   r¨   r  r   )r   r'   r\  rh  r   r   r   Úcloneù
  s
    zDistribution.clonec             C   s   dd | j D S )Nc             S   s   g | ]}|r|qS r   r   )r/  Údepr   r   r   r    s    z'Distribution.extras.<locals>.<listcomp>)r  )r   r   r   r   r    s    zDistribution.extras)N)r   )NF)N)N)NF)-r   r   r   r   r  rJ  rv   rë   r+  rý  r  r   r>  r  r  r  r  r  r  r  r3   r  r  r   r  rq  r  r  rû   r  r  r  r   r   r  rù  r  rM   rN   rO   rÿ   r£  r@  r°  r  r   r   r   r   ra   	  sR   


	

Dc               @   s   e Zd Zdd ZdS )ÚEggInfoDistributionc             C   s   t |  | j¡}|r|| _| S )añ  
        Packages installed by distutils (e.g. numpy or scipy),
        which uses an old safe_version, and so
        their version numbers can get mangled when
        converted to filenames (e.g., 1.11.0.dev0+2329eae to
        1.11.0.dev0_2329eae). These distributions will not be
        parsed properly
        downstream by Distribution and safe_version, so
        take an extra step and try to get the version number from
        the metadata file itself instead of the filename.
        )r~  r  r  r  )r   Ú
md_versionr   r   r   r    s    z#EggInfoDistribution._reload_versionN)r   r   r   r  r   r   r   r   r²    s   r²  c               @   s>   e Zd ZdZdZe d¡Zedd Z	edd Z
dd	 Zd
S )ÚDistInfoDistributionzV
    Wrap an actual or potential sys.path entry
    w/metadata, .dist-info style.
    ZMETADATAz([\(,])\s*(\d.*?)\s*([,\)])c             C   s@   y| j S  tk
r:   |  | j¡}tj ¡  |¡| _ | j S X dS )zParse and cache metadataN)Ú	_pkg_inforç  rÚ   r  ÚemailÚparserÚParserÚparsestr)r   rî  r   r   r   Ú_parsed_pkg_info!  s    z%DistInfoDistribution._parsed_pkg_infoc             C   s,   y| j S  tk
r&   |  ¡ | _ | j S X d S )N)Ú_DistInfoDistribution__dep_maprç  Ú_compute_dependencies)r   r   r   r   r  +  s
    
zDistInfoDistribution._dep_mapc                s¢   dg i }| _ g  x&| j d¡p"g D ]}  t|¡ q$W  fdd}t|d}|d  |¡ x<| j d¡ppg D ](}t| ¡ }tt||| ||< qrW |S )z+Recompute this distribution's dependencies.NzRequires-Distc             3   s.   x( D ] }|j r |j  d| i¡r|V  qW d S )Nr,  )r-  r.  )r,  r   )rõ   r   r   Úreqs_for_extra<  s    
zBDistInfoDistribution._compute_dependencies.<locals>.reqs_for_extrazProvides-Extra)	r»  rº  Úget_allr  ri   Ú	frozensetrp   r(  r  )r   r  r   r½  Úcommonr,  Ús_extrar   )rõ   r   r¼  3  s    z*DistInfoDistribution._compute_dependenciesN)r   r   r   r   r  ru  r  ÚEQEQr   rº  r  r¼  r   r   r   r   r´    s   

r´  )z.eggz	.egg-infoz
.dist-infoc              O   s^   d}t  }y"xt |¡j|kr(|d7 }qW W n tk
r@   Y nX tj| d|d i| d S )Nr   r`  )r!   r@   rÐ   rÑ   rE   rf  rg  )r8   r'   rd  r+   r   r   r   r¬  R  s    r¬  c               @   s   e Zd Zdd ZdS )ÚRequirementParseErrorc             C   s   d  | j¡S )Nr½   )rB   r8   )r   r   r   r   r   `  s    zRequirementParseError.__str__N)r   r   r   r   r   r   r   r   rÃ  _  s   rÃ  c          	   c   s   t t| }xp|D ]h}d|kr0|d| d¡ }| d¡rp|dd  ¡ }y|t|7 }W n tk
rn   dS X t|V  qW dS )zYield ``Requirement`` objects for each specification in `strs`

    `strs` must be a string, or a (possibly-nested) iterable thereof.
    z #Nú\éþÿÿÿ)r  rn   r£   rø  r(  r,  ÚStopIterationrb   )rW  rq  r)  r   r   r   ri   d  s    

c                   sP   e Zd Z fddZdd Zdd Zdd Zd	d
 Zdd Ze	dd Z
  ZS )rb   c          
      sÈ   yt t|  |¡ W n2 tjjk
rF } ztt|W dd}~X Y nX | j| _	t
| j}|| ¡  | _| _dd | jD | _ttt| j| _| j| jt| j| jr°t| jndf| _t| j| _dS )z>DO NOT CALL THIS UNDOCUMENTED METHOD; use Requirement.parse()!Nc             S   s   g | ]}|j |jfqS r   )rA  r   )r/  r  r   r   r   r    s    z(Requirement.__init__.<locals>.<listcomp>)Úsuperrb   rë   r   r  ÚInvalidRequirementrÃ  r¤   rÕ   Úunsafe_namerj   r;  r  r3   Ú	specifierro  r\  r   rp   r  r¿  r-  ÚhashCmpr  Ú_Requirement__hash)r   Úrequirement_stringrz  r  )r   r   r   rë   {  s    
zRequirement.__init__c             C   s   t |to| j|jkS )N)r¢   rb   rË  )r   rE  r   r   r   r    s    
zRequirement.__eq__c             C   s
   | |k S )Nr   )r   rE  r   r   r   r    s    zRequirement.__ne__c             C   s0   t |tr |j| jkrdS |j}| jj|ddS )NFT)Úprereleases)r¢   ra   r3   r   rÊ  Úcontains)r   rý   r   r   r   rø     s
    
zRequirement.__contains__c             C   s   | j S )N)rÌ  )r   r   r   r   r  ¤  s    zRequirement.__hash__c             C   s   dt |  S )NzRequirement.parse(%r))r¤   )r   r   r   r   r   §  s    zRequirement.__repr__c             C   s   t | \}|S )N)ri   )rX  r   r   r   r   r×   ª  s    
zRequirement.parse)r   r   r   rë   r  r  rø   r  r   rq  r×   Ú__classcell__r   r   )r   r   rb   z  s   c             C   s   t | kr| t f S | S )zJ
    Ensure object appears in the mro even
    for old-style classes.
    )Úobject)Úclassesr   r   r   Ú_always_object°  s    
rÓ  c             C   s<   t t t|dt|¡}x|D ]}|| kr | | S q W dS )z2Return an adapter factory for `ob` from `registry`r   N)rÓ  ÚinspectÚgetmror¨   r©  )Úregistryr4   r6  Útr   r   r   r©   º  s    
r©   c             C   s   t j | ¡}tj|dd dS )z1Ensure that the parent directory of `path` existsT)Úexist_okN)r°   r±   r  r   Úmakedirs)r±   r  r   r   r   rt   Â  s    c             C   s>   t stdt| \}}|r:|r:t|s:t| t|d dS )z/Sandbox-bypassing version of ensure_directory()z*"os.mkdir" not supported on this platform.ií  N)rÕ  rÖ  r   r   rX  r	   )r±   r  rn  r   r   r   rX  È  s    rX  c             c   sz   d}g }xbt | D ]V}| d¡r^| d¡rR|s2|r<||fV  |dd  ¡ }g }qhtd|q| |¡ qW ||fV  dS )as  Split a string or iterable thereof into (section, content) pairs

    Each ``section`` is a stripped version of the section header ("[section]")
    and each ``content`` is a list of stripped lines excluding blank lines and
    comment-only lines.  If there are any such lines before the first section
    header, they're returned in a first ``section`` of ``None``.
    Nú[ú]r   r   zInvalid section heading)rn   rÂ   rø  r(  rE   rµ   )rX  ÚsectionÚcontentr)  r   r   r   ro   Ò  s    


c              O   s&   t j}ztt _tj| |S |t _X d S )N)r°   r   Úos_openÚtempfileÚmkstemp)r8   r'   Úold_openr   r   r   rØ  ì  s
    rØ  Úignore)Úcategoryrµ   c             O   s   | || | S )Nr   )rä  r8   rb  r   r   r   Ú_call_asideÿ  s    
rä  c                s.   t    | d< |   fddt D ¡ dS )z=Set up global resource manager (deliberately not state-saved)Z_managerc             3   s&   | ]}|  d ¡s|t |fV  qdS )r¾   N)rÂ   r¨   )r/  rÕ   )rß   r   r   r0  
  s   z_initialize.<locals>.<genexpr>N)r`   r"   rÓ  )r+   r   )rß   r   Ú_initialize  s
    
rå  c              C   s|   t  ¡ } td| d | j}| j}| j}| j}|}tdd | D  |dd dd g | _t	t
| jtj t  t ¡ d	S )
aE  
    Prepare the master working set and make the ``require()``
    API available.

    This function has explicit effects on the global state
    of pkg_resources. It is intended to be invoked once at
    the initialization of this module.

    Invocation by other packages is unsupported and done
    at their own risk.
    rÑ  )rX   c             s   s   | ]}|j d dV  qdS )F)rÄ   N)r  )r/  r   r   r   r   r0  +  s   z1_initialize_master_working_set.<locals>.<genexpr>c             S   s   | j ddS )NT)rÄ   )r  )r   r   r   r   r9   /  s    z0_initialize_master_working_set.<locals>.<lambda>F)r(  N)r_   rñ   r(   rI   rP   r)  rJ   r\  rå   r  r   ré   r@   r±   r!   r"   r   )rX   rI   rP   rY   rJ   r   r   r   r   Ú_initialize_master_working_set  s     
ræ  )N)N)F)F)F)F)N)Ñr   Ú
__future__r   r@   r°   r  rÍ  ru  r6  r°  rû  rf  rb  re  ÚpkgutilrA  rA   r  r´   Úemail.parserr¶  r!  rß  rO  r  rÔ  r   rJ  rÀ   ÚimpÚpkg_resources.externr   Úpkg_resources.extern.six.movesr   r   r   r   r	   r
   r   rÕ  r   rÞ  Úos.pathr   r   Úimportlib.machineryÚ	machineryr¨  r   r­   r   r   r   r§   Úversion_infoÚRuntimeErrorr  r  r  rI   rX   rY   Úresources_streamr\   Úresource_dirrR   r[   rV   rQ   rP   rT   rS   rU   rò  r1  r2  ÚRuntimeWarningr   r    r#   r(   r-   r.   r1   r5   r6   r7   Ú
_sget_noneÚ
_sset_nonerH   Ú__all__rY  rd   re   r   rf   rg   r   r   rJ  rv   rw   rx   ry   rz   r   rK   rC   r»   r=   r  r>   rÈ   rl   rm   rJ   r   rL   rM   rN   rO   r{   r|   rÑ  r_   r$   r  r^   r   rh   r`   r]   rj   rk   rp   rq   rr   rs   r   r   r   r«  r   r   r¬  rµ  r   rü  r}   r~   r   r   rZ   rú  r  r
  r  r  r  r  r  r*  r  ÚImpImporterr³   r0  r   r=  r:  rW   r   rO  rP  ru   r  r   r  r8  rn   r?   rZ  ÚVERBOSEÚ
IGNORECASEr  rc   rz  r~  ra   r²  r´  r  r¬  rE   rÃ  ri   r  rb   rÓ  r©   rt   rX  ro   rØ  Úfilterwarningsrä  r!   rå  ræ  r   r   r   r   Ú<module>   sÞ  



 


.

     5	
d
 -'




 !!

	 	  ~36

ã               @   s   d S )N© r   r   r   úJC:\code\venv\callllama\lib\site-packages\pkg_resources\_vendor\__init__.pyÚ<module>   s    ã               @   s  d Z dZd eee¡ZddlZddlZejd dkZ	e	r>eZ
ej d¡rddlZe ¡ d d Ze d¡rrdZqe d	¡rd
ZqdZnejZd1ddZd2ddZd3ddZd4ddZd5ddZd6ddZG dd deZdd Zdd Zd d! Zd"d# ZedkryddlZeZW nn ek
r   ydd$l m!Z! eZW nB ek
r|   yddl"Z#eZW n ek
rv   eZY nX Y nX Y nX e$d%kr~d&Z%d'Z&d(Z'e(d) ee%e&d*d+Z)x$e'D ]Z*e(d,e*e+e)e*f  q¶W e(d- ee%e&Z)x$e'D ]Z*e(d,e*e+e)e*f  qîW e(d. ee%Z)x$e'D ]Z*e(d,e*e+e)e*f  q$W e(d/ ee%dd0Z)x$e'D ]Z*e(d,e*e+e)e*f  q^W dS )7zyUtilities for determining application-specific dirs.

See <http://github.com/ActiveState/appdirs> for details and usage.
)é   é   é    Ú.r   Né   ÚjavaÚWindowsÚwin32ZMacÚdarwinZlinux2Fc             C   sÆ   t dkr^|dkr| }|rdpd}tj t|¡}| r¬|dk	rNtj ||| ¡}q¬tj || ¡}nNt dkrtj d¡}| r¬tj || ¡}n&t dtj d	¡¡}| r¬tj || ¡}| rÂ|rÂtj ||¡}|S )
aJ  Return full path to the user-specific data dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "roaming" (boolean, default False) can be set True to use the Windows
            roaming appdata directory. That means that for users on a Windows
            network setup for roaming profiles, this user data will be
            sync'd on login. See
            <http://technet.microsoft.com/en-us/library/cc766489(WS.10).aspx>
            for a discussion of issues.

    Typical user data directories are:
        Mac OS X:               ~/Library/Application Support/<AppName>
        Unix:                   ~/.local/share/<AppName>    # or in $XDG_DATA_HOME, if defined
        Win XP (not roaming):   C:\Documents and Settings\<username>\Application Data\<AppAuthor>\<AppName>
        Win XP (roaming):       C:\Documents and Settings\<username>\Local Settings\Application Data\<AppAuthor>\<AppName>
        Win 7  (not roaming):   C:\Users\<username>\AppData\Local\<AppAuthor>\<AppName>
        Win 7  (roaming):       C:\Users\<username>\AppData\Roaming\<AppAuthor>\<AppName>

    For Unix, we follow the XDG spec and support $XDG_DATA_HOME.
    That means, by default "~/.local/share/<AppName>".
    r   NÚCSIDL_APPDATAÚCSIDL_LOCAL_APPDATAFr	   z~/Library/Application Support/ÚXDG_DATA_HOMEz~/.local/share)ÚsystemÚosÚpathÚnormpathÚ_get_win_folderÚjoinÚ
expanduserÚgetenv)ÚappnameÚ	appauthorÚversionÚroamingÚconstr   © r   úIC:\code\venv\callllama\lib\site-packages\pkg_resources\_vendor\appdirs.pyÚuser_data_dir-   s&     r   c                s  t dkrR|dkr }tj td¡} rî|dk	rBtj || ¡}qîtj | ¡}nt dkrztj d¡} rîtj | ¡}ntt dtj dd	g¡¡}d
d | 	tj¡D } rÐ|r¾tj  |¡  fdd|D }|râtj |¡}n|d }|S  r|rtj ||¡}|S )ai  Return full path to the user-shared data dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "multipath" is an optional parameter only applicable to *nix
            which indicates that the entire list of data dirs should be
            returned. By default, the first item from XDG_DATA_DIRS is
            returned, or '/usr/local/share/<AppName>',
            if XDG_DATA_DIRS is not set

    Typical user data directories are:
        Mac OS X:   /Library/Application Support/<AppName>
        Unix:       /usr/local/share/<AppName> or /usr/share/<AppName>
        Win XP:     C:\Documents and Settings\All Users\Application Data\<AppAuthor>\<AppName>
        Vista:      (Fail! "C:\ProgramData" is a hidden *system* directory on Vista.)
        Win 7:      C:\ProgramData\<AppAuthor>\<AppName>   # Hidden, but writeable on Win 7.

    For Unix, this is using the $XDG_DATA_DIRS[0] default.

    WARNING: Do not use this on Windows. See the Vista-Fail note above for why.
    r   NÚCSIDL_COMMON_APPDATAFr	   z/Library/Application SupportÚXDG_DATA_DIRSz/usr/local/sharez
/usr/sharec             S   s    g | ]}t j | t j¡¡qS r   )r   r   r   ÚrstripÚsep)Ú.0Úxr   r   r   ú
<listcomp>   s    z!site_data_dir.<locals>.<listcomp>c                s   g | ]}t j | g¡qS r   )r   r    r   )r!   r"   )r   r   r   r#      s    r   )
r   r   r   r   r   r   r   r   ÚpathsepÚsplit)r   r   r   Ú	multipathr   Úpathlistr   )r   r   Úsite_data_dird   s4    r(   c             C   sX   t dkrt| |d|}n&t dtj d¡¡}| r>tj || ¡}| rT|rTtj ||¡}|S )aÒ  Return full path to the user-specific config dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "roaming" (boolean, default False) can be set True to use the Windows
            roaming appdata directory. That means that for users on a Windows
            network setup for roaming profiles, this user data will be
            sync'd on login. See
            <http://technet.microsoft.com/en-us/library/cc766489(WS.10).aspx>
            for a discussion of issues.

    Typical user data directories are:
        Mac OS X:               same as user_data_dir
        Unix:                   ~/.config/<AppName>     # or in $XDG_CONFIG_HOME, if defined
        Win *:                  same as user_data_dir

    For Unix, we follow the XDG spec and support $XDG_CONFIG_HOME.
    That means, by deafult "~/.config/<AppName>".
    )r   r	   NÚXDG_CONFIG_HOMEz	~/.config)r   r   r   r   r   r   r   )r   r   r   r   r   r   r   r   Úuser_config_dir¦   s    r*   c                s   t dkr*t |} r|rtj ||¡}ndt dd¡}dd | tj¡D } rt|rbtj  |¡  fdd|D }|rtj |¡}n|d }|S )a  Return full path to the user-shared data dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "multipath" is an optional parameter only applicable to *nix
            which indicates that the entire list of config dirs should be
            returned. By default, the first item from XDG_CONFIG_DIRS is
            returned, or '/etc/xdg/<AppName>', if XDG_CONFIG_DIRS is not set

    Typical user data directories are:
        Mac OS X:   same as site_data_dir
        Unix:       /etc/xdg/<AppName> or $XDG_CONFIG_DIRS[i]/<AppName> for each value in
                    $XDG_CONFIG_DIRS
        Win *:      same as site_data_dir
        Vista:      (Fail! "C:\ProgramData" is a hidden *system* directory on Vista.)

    For Unix, this is using the $XDG_CONFIG_DIRS[0] default, if multipath=False

    WARNING: Do not use this on Windows. See the Vista-Fail note above for why.
    )r   r	   ÚXDG_CONFIG_DIRSz/etc/xdgc             S   s    g | ]}t j | t j¡¡qS r   )r   r   r   r   r    )r!   r"   r   r   r   r#   ô   s    z#site_config_dir.<locals>.<listcomp>c                s   g | ]}t j | g¡qS r   )r   r    r   )r!   r"   )r   r   r   r#   ø   s    r   )r   r(   r   r   r   r   r%   r$   )r   r   r   r&   r   r'   r   )r   r   Úsite_config_dirÎ   s    
r,   Tc             C   sÌ   t dkrd|dkr| }tj td¡}| r²|dk	rBtj ||| ¡}ntj || ¡}|r²tj |d¡}nNt dkrtj d¡}| r²tj || ¡}n&t dtj d	¡¡}| r²tj || ¡}| rÈ|rÈtj ||¡}|S )
a  Return full path to the user-specific cache dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "opinion" (boolean) can be False to disable the appending of
            "Cache" to the base app data dir for Windows. See
            discussion below.

    Typical user cache directories are:
        Mac OS X:   ~/Library/Caches/<AppName>
        Unix:       ~/.cache/<AppName> (XDG default)
        Win XP:     C:\Documents and Settings\<username>\Local Settings\Application Data\<AppAuthor>\<AppName>\Cache
        Vista:      C:\Users\<username>\AppData\Local\<AppAuthor>\<AppName>\Cache

    On Windows the only suggestion in the MSDN docs is that local settings go in
    the `CSIDL_LOCAL_APPDATA` directory. This is identical to the non-roaming
    app data dir (the default returned by `user_data_dir` above). Apps typically
    put cache data somewhere *under* the given dir here. Some examples:
        ...\Mozilla\Firefox\Profiles\<ProfileName>\Cache
        ...\Acme\SuperApp\Cache\1.0
    OPINION: This function appends "Cache" to the `CSIDL_LOCAL_APPDATA` value.
    This can be disabled with the `opinion=False` option.
    r   Nr   FÚCacher	   z~/Library/CachesÚXDG_CACHE_HOMEz~/.cache)r   r   r   r   r   r   r   r   )r   r   r   Úopinionr   r   r   r   Úuser_cache_dir  s(    !r0   c             C   s   t dkr tj tj d¡| ¡}nNt dkrLt| ||}d}|rntj |d¡}n"t| ||}d}|rntj |d¡}| r|rtj ||¡}|S )a¿  Return full path to the user-specific log dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "appauthor" (only used on Windows) is the name of the
            appauthor or distributing body for this application. Typically
            it is the owning company name. This falls back to appname. You may
            pass False to disable it.
        "version" is an optional version path element to append to the
            path. You might want to use this if you want multiple versions
            of your app to be able to run independently. If used, this
            would typically be "<major>.<minor>".
            Only applied when appname is present.
        "opinion" (boolean) can be False to disable the appending of
            "Logs" to the base app data dir for Windows, and "log" to the
            base cache dir for Unix. See discussion below.

    Typical user cache directories are:
        Mac OS X:   ~/Library/Logs/<AppName>
        Unix:       ~/.cache/<AppName>/log  # or under $XDG_CACHE_HOME if defined
        Win XP:     C:\Documents and Settings\<username>\Local Settings\Application Data\<AppAuthor>\<AppName>\Logs
        Vista:      C:\Users\<username>\AppData\Local\<AppAuthor>\<AppName>\Logs

    On Windows the only suggestion in the MSDN docs is that local settings
    go in the `CSIDL_LOCAL_APPDATA` directory. (Note: I'm interested in
    examples of what some windows apps use for a logs dir.)

    OPINION: This function appends "Logs" to the `CSIDL_LOCAL_APPDATA`
    value for Windows and appends "log" to the user cache dir for Unix.
    This can be disabled with the `opinion=False` option.
    r	   z~/Library/Logsr   FÚLogsÚlog)r   r   r   r   r   r   r0   )r   r   r   r/   r   r   r   r   Úuser_log_dir:  s      
r3   c               @   sb   e Zd ZdZdddZedd Zedd	 Zed
d Zedd Z	edd Z
edd ZdS )ÚAppDirsz1Convenience wrapper for getting application dirs.NFc             C   s"   || _ || _|| _|| _|| _d S )N)r   r   r   r   r&   )Úselfr   r   r   r   r&   r   r   r   Ú__init__o  s
    zAppDirs.__init__c             C   s   t | j| j| j| jdS )N)r   r   )r   r   r   r   r   )r5   r   r   r   r   w  s    
zAppDirs.user_data_dirc             C   s   t | j| j| j| jdS )N)r   r&   )r(   r   r   r   r&   )r5   r   r   r   r(   |  s    
zAppDirs.site_data_dirc             C   s   t | j| j| j| jdS )N)r   r   )r*   r   r   r   r   )r5   r   r   r   r*     s    
zAppDirs.user_config_dirc             C   s   t | j| j| j| jdS )N)r   r&   )r,   r   r   r   r&   )r5   r   r   r   r,     s    
zAppDirs.site_config_dirc             C   s   t | j| j| jdS )N)r   )r0   r   r   r   )r5   r   r   r   r0     s    
zAppDirs.user_cache_dirc             C   s   t | j| j| jdS )N)r   )r3   r   r   r   )r5   r   r   r   r3     s    
zAppDirs.user_log_dir)NNFF)Ú__name__Ú
__module__Ú__qualname__Ú__doc__r6   Úpropertyr   r(   r*   r,   r0   r3   r   r   r   r   r4   m  s    
r4   c             C   s:   ddl }dddd|  }| |jd¡}| ||¡\}}|S )zThis is a fallback technique at best. I'm not sure if using the
    registry for this guarantees us the correct answer for all CSIDL_*
    names.
    r   NÚAppDatazCommon AppDatazLocal AppData)r
   r   r   z@Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders)Ú_winregÚOpenKeyÚHKEY_CURRENT_USERÚQueryValueEx)Ú
csidl_namer=   Úshell_folder_nameÚkeyÚdirÚtyper   r   r   Ú_get_win_folder_from_registry  s    rF   c             C   s    ddl m}m} | dt|| dd¡}y`t|}d}x|D ]}t|dkr:d}P q:W |rydd l}| |¡}W n t	k
r   Y nX W n t
k
r   Y nX |S )Nr   )ÚshellconÚshellFéÿ   T)Úwin32com.shellrG   rH   ÚSHGetFolderPathÚgetattrÚunicodeÚordÚwin32apiÚGetShortPathNameÚImportErrorÚUnicodeError)rA   rG   rH   rD   Úhas_high_charÚcrO   r   r   r   Ú_get_win_folder_with_pywin32­  s$    

rU   c             C   s   dd l }dddd|  }| d¡}|jj d |d d|¡ d}x|D ]}t|dkrBd	}P qBW |r| d¡}|jj |j|d¡r|}|jS )
Nr   é   é#   é   )r
   r   r   i   FrI   T)	ÚctypesÚcreate_unicode_bufferÚwindllÚshell32ÚSHGetFolderPathWrN   Úkernel32ÚGetShortPathNameWÚvalue)rA   rY   Úcsidl_constÚbufrS   rT   Úbuf2r   r   r   Ú_get_win_folder_with_ctypesÈ  s"    


rd   c             C   sØ   dd l }ddlm} ddlm} |jjd }| d|¡}|jj	}| 
d t|j| d |jj|¡ |j | ¡ ¡ d¡}d}x|D ]}	t|	dkr~d	}P q~W |rÔ| d|¡}|jj	}
t |||¡rÔ|j | ¡ ¡ d¡}|S )
Nr   )Újna)r   é   rT   ú FrI   T)ÚarrayÚcom.sunre   Úcom.sun.jna.platformr   ÚWinDefÚMAX_PATHÚzerosÚShell32ÚINSTANCErK   rL   ÚShlObjÚSHGFP_TYPE_CURRENTÚNativeÚtoStringÚtostringr   rN   ÚKernel32ÚkernalrP   )rA   rh   re   r   Úbuf_sizerb   rH   rD   rS   rT   Úkernelr   r   r   Ú_get_win_folder_with_jnaâ  s&    
ry   )r[   Ú__main__ZMyAppZ	MyCompany)r   r(   r*   r,   r0   r3   z%-- app dirs (with optional 'version')z1.0)r   z%s: %sz)
-- app dirs (without optional 'version')z+
-- app dirs (without optional 'appauthor')z(
-- app dirs (with disabled 'appauthor'))r   )NNNF)NNNF)NNNF)NNNF)NNNT)NNNT),r:   Ú__version_info__r   ÚmapÚstrÚ__version__Úsysr   Úversion_infoÚPY3rM   ÚplatformÚ
startswithÚjava_verÚos_namer   r   r(   r*   r,   r0   r3   Úobjectr4   rF   rU   rd   ry   rJ   Úwin32comr   rQ   rY   r[   Úcom.sun.jnaÚcomr7   r   r   ÚpropsÚprintÚdirsÚproprL   r   r   r   r   Ú<module>	   sz   


7
B
(
3
9
3+






ã               @   sT   d dl mZmZmZ ddlmZmZmZmZm	Z	m
Z
mZmZ dddddd	d
dgZdS )é    )Úabsolute_importÚdivisionÚprint_functioné   )Ú
__author__Ú__copyright__Ú	__email__Ú__license__Ú__summary__Ú	__title__Ú__uri__Ú__version__r   r
   r   r   r   r   r	   r   N)Ú
__future__r   r   r   Ú	__about__r   r   r   r	   r
   r   r   r   Ú__all__© r   r   úTC:\code\venv\callllama\lib\site-packages\pkg_resources\_vendor\packaging\__init__.pyÚ<module>   s   (
ã               @   sP   d dl mZmZmZ dddddddd	gZd
ZdZdZdZdZ	dZ
dZde	 ZdS )é    )Úabsolute_importÚdivisionÚprint_functionÚ	__title__Ú__summary__Ú__uri__Ú__version__Ú
__author__Ú	__email__Ú__license__Ú__copyright__Ú	packagingz"Core utilities for Python packagesz!https://github.com/pypa/packagingz16.8z)Donald Stufft and individual contributorszdonald@stufft.ioz"BSD or Apache License, Version 2.0zCopyright 2014-2016 %sN)Ú
__future__r   r   r   Ú__all__r   r   r   r   r	   r
   r   r   © r   r   úUC:\code\venv\callllama\lib\site-packages\pkg_resources\_vendor\packaging\__about__.pyÚ<module>   s   

ã               @   sV   d dl mZmZmZ d dlZejd  dkZejd  dkZerDefZ	ne
fZ	dd ZdS )é    )Úabsolute_importÚdivisionÚprint_functionNé   é   c                s&   G  fddd}t  |ddi ¡S )z/
    Create a base class with a metaclass.
    c                   s   e Zd Z fddZdS )z!with_metaclass.<locals>.metaclassc                s   | |S )N© )ÚclsÚnameÚ
this_basesÚd)ÚbasesÚmetar   úSC:\code\venv\callllama\lib\site-packages\pkg_resources\_vendor\packaging\_compat.pyÚ__new__   s    z)with_metaclass.<locals>.metaclass.__new__N)Ú__name__Ú
__module__Ú__qualname__r   r   )r   r   r   r   Ú	metaclass   s   r   Ztemporary_classr   )Útyper   )r   r   r   r   )r   r   r   Úwith_metaclass   s    r   )Ú
__future__r   r   r   ÚsysÚversion_infoÚPY2ÚPY3ÚstrÚstring_typesÚ
basestringr   r   r   r   r   Ú<module>   s   ã               @   sD   d dl mZmZmZ G dd deZe ZG dd deZe ZdS )é    )Úabsolute_importÚdivisionÚprint_functionc               @   sT   e Zd Zdd Zdd Zdd Zdd Zd	d
 Zdd Zdd Z	dd Z
dd ZdS )ÚInfinityc             C   s   dS )Nr   © )Úselfr   r   úWC:\code\venv\callllama\lib\site-packages\pkg_resources\_vendor\packaging\_structures.pyÚ__repr__	   s    zInfinity.__repr__c             C   s   t t| S )N)ÚhashÚrepr)r   r   r   r   Ú__hash__   s    zInfinity.__hash__c             C   s   dS )NFr   )r   Úotherr   r   r   Ú__lt__   s    zInfinity.__lt__c             C   s   dS )NFr   )r   r   r   r   r   Ú__le__   s    zInfinity.__le__c             C   s   t || jS )N)Ú
isinstanceÚ	__class__)r   r   r   r   r   Ú__eq__   s    zInfinity.__eq__c             C   s   t || j S )N)r   r   )r   r   r   r   r   Ú__ne__   s    zInfinity.__ne__c             C   s   dS )NTr   )r   r   r   r   r   Ú__gt__   s    zInfinity.__gt__c             C   s   dS )NTr   )r   r   r   r   r   Ú__ge__   s    zInfinity.__ge__c             C   s   t S )N)ÚNegativeInfinity)r   r   r   r   Ú__neg__!   s    zInfinity.__neg__N)Ú__name__Ú
__module__Ú__qualname__r	   r   r   r   r   r   r   r   r   r   r   r   r   r      s   r   c               @   sT   e Zd Zdd Zdd Zdd Zdd Zd	d
 Zdd Zdd Z	dd Z
dd ZdS )r   c             C   s   dS )Nz	-Infinityr   )r   r   r   r   r	   )   s    zNegativeInfinity.__repr__c             C   s   t t| S )N)r
   r   )r   r   r   r   r   ,   s    zNegativeInfinity.__hash__c             C   s   dS )NTr   )r   r   r   r   r   r   /   s    zNegativeInfinity.__lt__c             C   s   dS )NTr   )r   r   r   r   r   r   2   s    zNegativeInfinity.__le__c             C   s   t || jS )N)r   r   )r   r   r   r   r   r   5   s    zNegativeInfinity.__eq__c             C   s   t || j S )N)r   r   )r   r   r   r   r   r   8   s    zNegativeInfinity.__ne__c             C   s   dS )NFr   )r   r   r   r   r   r   ;   s    zNegativeInfinity.__gt__c             C   s   dS )NFr   )r   r   r   r   r   r   >   s    zNegativeInfinity.__ge__c             C   s   t S )N)r   )r   r   r   r   r   A   s    zNegativeInfinity.__neg__N)r   r   r   r	   r   r   r   r   r   r   r   r   r   r   r   r   r   '   s   r   N)Ú
__future__r   r   r   Úobjectr   r   r   r   r   r   Ú<module>   s   ã            	   @   s@  d dl mZmZmZ d dlZd dlZd dlZd dlZd dlm	Z	m
Z
mZmZ d dlmZmZmZmZ d dlmZ ddlmZ ddlmZmZ d	d
dddgZG dd	 d	eZG dd
 d
eZG dd deZG dd deZG dd deZG dd deZ G dd deZ!ededB edB edB edB edB edB ed B ed!B ed"B ed#B ed$B ed%B ed&B ed'B ed(B ed)B ed*B Z"d#d"ddddd+Z#e" $d,d- ¡ ed.ed/B ed0B ed1B ed2B ed3B ed4B ed5B Z%e%ed6B ed7B Z&e& $d8d- ¡ ed9ed:B Z'e' $d;d- ¡ ed<ed=B Z(e"e'B Z)ee)e& e) Z*e* $d>d- ¡ ed? +¡ Z,ed@ +¡ Z-e Z.e*ee,e. e- B Z/e.e/ee(e.  >  ee. e Z0dAdB Z1dSdDdEZ2dFd- dGd- ej3ej4ej5ej6ej7ej8dHZ9dIdJ Z:e Z;dKdL Z<dMdN Z=dOdP Z>dQd Z?G dRd deZ@dS )Té    )Úabsolute_importÚdivisionÚprint_functionN)ÚParseExceptionÚParseResultsÚstringStartÚ	stringEnd)Ú
ZeroOrMoreÚGroupÚForwardÚQuotedString)ÚLiteralé   )Ústring_types)Ú	SpecifierÚInvalidSpecifierÚInvalidMarkerÚUndefinedComparisonÚUndefinedEnvironmentNameÚMarkerÚdefault_environmentc               @   s   e Zd ZdZdS )r   zE
    An invalid marker was found, users should refer to PEP 508.
    N)Ú__name__Ú
__module__Ú__qualname__Ú__doc__© r   r   úSC:\code\venv\callllama\lib\site-packages\pkg_resources\_vendor\packaging\markers.pyr      s   c               @   s   e Zd ZdZdS )r   zP
    An invalid operation was attempted on a value that doesn't support it.
    N)r   r   r   r   r   r   r   r   r      s   c               @   s   e Zd ZdZdS )r   z\
    A name was attempted to be used that does not exist inside of the
    environment.
    N)r   r   r   r   r   r   r   r   r   %   s   c               @   s,   e Zd Zdd Zdd Zdd Zdd Zd	S )
ÚNodec             C   s
   || _ d S )N)Úvalue)Úselfr   r   r   r   Ú__init__.   s    zNode.__init__c             C   s
   t | jS )N)Ústrr   )r   r   r   r   Ú__str__1   s    zNode.__str__c             C   s   d  | jjt| ¡S )Nz<{0}({1!r})>)ÚformatÚ	__class__r   r!   )r   r   r   r   Ú__repr__4   s    zNode.__repr__c             C   s   t d S )N)ÚNotImplementedError)r   r   r   r   Ú	serialize7   s    zNode.serializeN)r   r   r   r    r"   r%   r'   r   r   r   r   r   ,   s   r   c               @   s   e Zd Zdd ZdS )ÚVariablec             C   s   t | S )N)r!   )r   r   r   r   r'   =   s    zVariable.serializeN)r   r   r   r'   r   r   r   r   r(   ;   s   r(   c               @   s   e Zd Zdd ZdS )ÚValuec             C   s
   d  | ¡S )Nz"{0}")r#   )r   r   r   r   r'   C   s    zValue.serializeN)r   r   r   r'   r   r   r   r   r)   A   s   r)   c               @   s   e Zd Zdd ZdS )ÚOpc             C   s   t | S )N)r!   )r   r   r   r   r'   I   s    zOp.serializeN)r   r   r   r'   r   r   r   r   r*   G   s   r*   Úimplementation_versionÚplatform_python_implementationÚimplementation_nameÚpython_full_versionÚplatform_releaseÚplatform_versionÚplatform_machineÚplatform_systemÚpython_versionÚsys_platformÚos_namezos.namezsys.platformzplatform.versionzplatform.machinezplatform.python_implementationÚpython_implementationÚextra)zos.namezsys.platformzplatform.versionzplatform.machinezplatform.python_implementationr6   c             C   s   t t |d |d ¡S )Nr   )r(   ÚALIASESÚget)ÚsÚlÚtr   r   r   Ú<lambda>i   s    r=   z===z==z>=z<=z!=z~=ú>ú<znot inÚinc             C   s   t |d S )Nr   )r*   )r:   r;   r<   r   r   r   r=   w   s    ú'ú"c             C   s   t |d S )Nr   )r)   )r:   r;   r<   r   r   r   r=   z   s    ÚandÚorc             C   s   t |d S )Nr   )Útuple)r:   r;   r<   r   r   r   r=      s    ú(ú)c             C   s    t | trdd | D S | S d S )Nc             S   s   g | ]}t |qS r   )Ú_coerce_parse_result)Ú.0Úir   r   r   ú
<listcomp>   s    z(_coerce_parse_result.<locals>.<listcomp>)Ú
isinstancer   )Úresultsr   r   r   rH      s    
rH   Tc             C   s¨   t | tttfstt | trHt| dkrHt | d ttfrHt| d S t | trdd | D }|rnd |¡S dd |¡ d S n"t | tr d dd	 | D ¡S | S d S )
Nr   r   c             s   s   | ]}t |d dV  qdS )F)ÚfirstN)Ú_format_marker)rI   Úmr   r   r   ú	<genexpr>    s    z!_format_marker.<locals>.<genexpr>ú rF   rG   c             S   s   g | ]}|  ¡ qS r   )r'   )rI   rP   r   r   r   rK   ¦   s    z"_format_marker.<locals>.<listcomp>)rL   ÚlistrE   r   ÚAssertionErrorÚlenrO   Újoin)ÚmarkerrN   Úinnerr   r   r   rO      s    


rO   c             C   s   | |kS )Nr   )ÚlhsÚrhsr   r   r   r=   ¬   s    c             C   s   | |kS )Nr   )rY   rZ   r   r   r   r=   ­   s    )r@   znot inr?   z<=z==z!=z>=r>   c             C   sl   yt d | ¡ |g¡}W n tk
r.   Y nX | | ¡S t | ¡ ¡}|d krbtd || |¡|| |S )NÚ z#Undefined {0!r} on {1!r} and {2!r}.)	r   rV   r'   r   ÚcontainsÚ
_operatorsr9   r   r#   )rY   ÚoprZ   ÚspecÚoperr   r   r   Ú_eval_op·   s    
ra   c             C   s&   |   |t¡}|tkr"td |¡|S )Nz/{0!r} does not exist in evaluation environment.)r9   Ú
_undefinedr   r#   )ÚenvironmentÚnamer   r   r   r   Ú_get_envË   s
    re   c       	      C   sÔ   g g}xº| D ]²}t |tttfs$tt |trD|d  t||¡ qt |tr |\}}}t |trvt||j	}|j	}n|j	}t||j	}|d  t
|||¡ q|dks¬t|dkr| g ¡ qW tdd |D S )Néÿÿÿÿ)rC   rD   rD   c             s   s   | ]}t |V  qd S )N)Úall)rI   Úitemr   r   r   rQ   î   s    z$_evaluate_markers.<locals>.<genexpr>)rL   rS   rE   r   rT   ÚappendÚ_evaluate_markersr(   re   r   ra   Úany)	Úmarkersrc   ÚgroupsrW   rY   r^   rZ   Ú	lhs_valueÚ	rhs_valuer   r   r   rj   Ö   s"    




rj   c             C   s2   d  | ¡}| j}|dkr.||d t| j 7 }|S )Nz{0.major}.{0.minor}.{0.micro}Úfinalr   )r#   Úreleaselevelr!   Úserial)ÚinfoÚversionÚkindr   r   r   Úformat_full_versionñ   s
    
rv   c              C   sl   t tdr ttjj} tjj}nd} d}|| tjt ¡ t 	¡ t 
¡ t ¡ t ¡ t ¡ t ¡ d d tjdS )NÚimplementationÚ0r[   é   )r-   r+   r5   r1   r/   r2   r0   r.   r,   r3   r4   )ÚhasattrÚsysrv   rw   rt   rd   ÚosÚplatformÚmachineÚreleaseÚsystemr3   r6   )Úiverr-   r   r   r   r   ù   s     

c               @   s.   e Zd Zdd Zdd Zdd Zd
dd	ZdS )r   c          
   C   s`   yt t |¡| _W nF tk
rZ } z(d |||j|jd  ¡}t|W d d }~X Y nX d S )Nz+Invalid marker: {0!r}, parse error at {1!r}é   )rH   ÚMARKERÚparseStringÚ_markersr   r#   Úlocr   )r   rW   ÚeÚerr_strr   r   r   r      s    zMarker.__init__c             C   s
   t | jS )N)rO   r   )r   r   r   r   r"     s    zMarker.__str__c             C   s   d  t| ¡S )Nz<Marker({0!r})>)r#   r!   )r   r   r   r   r%     s    zMarker.__repr__Nc             C   s$   t  }|dk	r| |¡ t| j|S )a$  Evaluate a marker.

        Return the boolean from evaluating the given marker against the
        environment. environment is an optional argument to override all or
        part of the determined environment.

        The environment is determined from the current Python process.
        N)r   Úupdaterj   r   )r   rc   Úcurrent_environmentr   r   r   Úevaluate   s    	
zMarker.evaluate)N)r   r   r   r    r"   r%   r   r   r   r   r   r     s   )T)AÚ
__future__r   r   r   Úoperatorr|   r}   r{   Úpkg_resources.extern.pyparsingr   r   r   r   r	   r
   r   r   r   ÚLÚ_compatr   Ú
specifiersr   r   Ú__all__Ú
ValueErrorr   r   r   Úobjectr   r(   r)   r*   ÚVARIABLEr8   ÚsetParseActionÚVERSION_CMPÚ	MARKER_OPÚMARKER_VALUEÚBOOLOPÚ
MARKER_VARÚMARKER_ITEMÚsuppressÚLPARENÚRPARENÚMARKER_EXPRÚMARKER_ATOMr   rH   rO   ÚltÚleÚeqÚneÚgeÚgtr]   ra   rb   re   rj   rv   r   r   r   r   r   r   Ú<module>   sx   
	6


ã               @   sr  d dl mZmZmZ d dlZd dlZd dlmZmZm	Z	m
Z
 d dlmZmZmZmZmZ d dlmZ d dlmZ ddlmZmZ dd	lmZmZmZ G d
d deZeejej Z ed !¡ Z"ed !¡ Z#ed !¡ Z$ed !¡ Z%ed !¡ Z&ed !¡ Z'ed !¡ Z(edZ)e ee)e  B Z*ee ee* Z+e+dZ,e+Z-eddZ.e(e. Z/e-ee&e-  Z0e"ee0 e# dZ1eej2ej3ej4B Z5eej2ej3ej4B Z6e5e6A Z7ee7ee&e7  ddddZ8ee$e8 e% e8B Z9e9 :dd ¡ e	e9dZ;e; :dd ¡ e	e dZe :d d ¡ e'Z<e<e Z=e;ee= Z>e/ee= Z?e,ee1 e?e>B  Z@ee@ e ZAG d!d" d"eBZCdS )#é    )Úabsolute_importÚdivisionÚprint_functionN)ÚstringStartÚ	stringEndÚoriginalTextForÚParseException)Ú
ZeroOrMoreÚWordÚOptionalÚRegexÚCombine)ÚLiteral)Úparseé   )ÚMARKER_EXPRÚMarker)ÚLegacySpecifierÚ	SpecifierÚSpecifierSetc               @   s   e Zd ZdZdS )ÚInvalidRequirementzJ
    An invalid requirement was found, users should refer to PEP 508.
    N)Ú__name__Ú
__module__Ú__qualname__Ú__doc__© r   r   úXC:\code\venv\callllama\lib\site-packages\pkg_resources\_vendor\packaging\requirements.pyr      s   r   ú[ú]ú(ú)ú,ú;ú@z-_.Únamez[^ ]+ÚurlÚextrasF)Ú
joinStringÚadjacentÚ	_raw_specc             C   s
   |j pdS )NÚ )r)   )ÚsÚlÚtr   r   r   Ú<lambda>6   s    r.   Ú	specifierc             C   s   |d S )Nr   r   )r+   r,   r-   r   r   r   r.   9   s    Úmarkerc             C   s   t | |j|j S )N)r   Ú_original_startÚ_original_end)r+   r,   r-   r   r   r   r.   =   s    c               @   s(   e Zd ZdZdd Zdd Zdd ZdS )	ÚRequirementzÁParse a requirement.

    Parse a given requirement string into its parts, such as name, specifier,
    URL, and extras. Raises InvalidRequirement on a badly-formed requirement
    string.
    c          
   C   sÖ   yt  |¡}W n@ tk
rN } z"td ||j|jd  ¡W d d }~X Y nX |j| _|jrt |j¡}|j	r|j
r|j	s|j
std|j| _nd | _t|jr¬|j ¡ ng | _t|j| _|jrÌ|jnd | _d S )Nz+Invalid requirement, parse error at "{0!r}"é   zInvalid URL given)ÚREQUIREMENTÚparseStringr   r   ÚformatÚlocr$   r%   ÚurlparseÚschemeÚnetlocÚsetr&   ÚasListr   r/   r0   )ÚselfÚrequirement_stringÚreqÚeÚ
parsed_urlr   r   r   Ú__init__X   s"    *
zRequirement.__init__c             C   sz   | j g}| jr*| d d t| j¡¡¡ | jr@| t| j¡ | jrX| d | j¡¡ | j	rp| d | j	¡¡ d |¡S )Nz[{0}]r!   z@ {0}z; {0}r*   )
r$   r&   Úappendr7   ÚjoinÚsortedr/   Ústrr%   r0   )r>   Úpartsr   r   r   Ú__str__m   s    zRequirement.__str__c             C   s   d  t| ¡S )Nz<Requirement({0!r})>)r7   rG   )r>   r   r   r   Ú__repr__~   s    zRequirement.__repr__N)r   r   r   r   rC   rI   rJ   r   r   r   r   r3   K   s   r3   )DÚ
__future__r   r   r   ÚstringÚreÚpkg_resources.extern.pyparsingr   r   r   r   r	   r
   r   r   r   r   ÚLÚ%pkg_resources.extern.six.moves.urllibr   r9   Úmarkersr   r   Ú
specifiersr   r   r   Ú
ValueErrorr   Úascii_lettersÚdigitsÚALPHANUMÚsuppressÚLBRACKETÚRBRACKETÚLPARENÚRPARENÚCOMMAÚ	SEMICOLONÚATÚPUNCTUATIONÚIDENTIFIER_ENDÚ
IDENTIFIERÚNAMEÚEXTRAÚURIÚURLÚEXTRAS_LISTÚEXTRASÚ
_regex_strÚVERBOSEÚ
IGNORECASEÚVERSION_PEP440ÚVERSION_LEGACYÚVERSION_ONEÚVERSION_MANYÚ_VERSION_SPECÚsetParseActionÚVERSION_SPECÚMARKER_SEPERATORÚMARKERÚVERSION_AND_MARKERÚURL_AND_MARKERÚNAMED_REQUIREMENTr5   Úobjectr3   r   r   r   r   Ú<module>   sZ   
ã               @   sæ   d dl mZmZmZ d dlZd dlZd dlZd dlZddlm	Z	m
Z
 ddlmZmZmZ G dd deZG dd	 d	e
ejeZG d
d deZG dd deZdd ZG dd deZe d¡Zdd Zdd ZG dd deZdS )é    )Úabsolute_importÚdivisionÚprint_functionNé   )Ústring_typesÚwith_metaclass)ÚVersionÚLegacyVersionÚparsec               @   s   e Zd ZdZdS )ÚInvalidSpecifierzH
    An invalid specifier was found, users should refer to PEP 440.
    N)Ú__name__Ú
__module__Ú__qualname__Ú__doc__© r   r   úVC:\code\venv\callllama\lib\site-packages\pkg_resources\_vendor\packaging\specifiers.pyr      s   r   c               @   s   e Zd Zejdd Zejdd Zejdd Zejdd Zej	d	d
 Z
e
jdd
 Z
ejdddZejdddZdS )ÚBaseSpecifierc             C   s   dS )z
        Returns the str representation of this Specifier like object. This
        should be representative of the Specifier itself.
        Nr   )Úselfr   r   r   Ú__str__   s    zBaseSpecifier.__str__c             C   s   dS )zF
        Returns a hash value for this Specifier like object.
        Nr   )r   r   r   r   Ú__hash__   s    zBaseSpecifier.__hash__c             C   s   dS )zq
        Returns a boolean representing whether or not the two Specifier like
        objects are equal.
        Nr   )r   Úotherr   r   r   Ú__eq__$   s    zBaseSpecifier.__eq__c             C   s   dS )zu
        Returns a boolean representing whether or not the two Specifier like
        objects are not equal.
        Nr   )r   r   r   r   r   Ú__ne__+   s    zBaseSpecifier.__ne__c             C   s   dS )zg
        Returns whether or not pre-releases as a whole are allowed by this
        specifier.
        Nr   )r   r   r   r   Úprereleases2   s    zBaseSpecifier.prereleasesc             C   s   dS )zd
        Sets whether or not pre-releases as a whole are allowed by this
        specifier.
        Nr   )r   Úvaluer   r   r   r   9   s    Nc             C   s   dS )zR
        Determines if the given item is contained within this specifier.
        Nr   )r   Úitemr   r   r   r   Úcontains@   s    zBaseSpecifier.containsc             C   s   dS )z
        Takes an iterable of items and filters them so that only items which
        are contained within this specifier are allowed in it.
        Nr   )r   Úiterabler   r   r   r   ÚfilterF   s    zBaseSpecifier.filter)N)N)r   r   r   ÚabcÚabstractmethodr   r   r   r   Úabstractpropertyr   Úsetterr   r   r   r   r   r   r      s   r   c               @   s    e Zd Zi Zd ddZdd Zdd Zd	d
 Zdd Zdd Z	dd Z
dd Zedd Zedd Zedd Zejdd Zdd Zd!ddZd"ddZdS )#Ú_IndividualSpecifierÚ Nc             C   sF   | j  |¡}|std |¡| d¡ ¡ | d¡ ¡ f| _|| _d S )NzInvalid specifier: '{0}'ÚoperatorÚversion)Ú_regexÚsearchr   ÚformatÚgroupÚstripÚ_specÚ_prereleases)r   Úspecr   Úmatchr   r   r   Ú__init__R   s    z_IndividualSpecifier.__init__c             C   s0   | j d k	rd | j¡nd}d | jjt| |¡S )Nz, prereleases={0!r}r$   z<{0}({1!r}{2})>)r-   r)   r   Ú	__class__r   Ústr)r   Úprer   r   r   Ú__repr___   s    z_IndividualSpecifier.__repr__c             C   s   dj | j S )Nz{0}{1})r)   r,   )r   r   r   r   r   l   s    z_IndividualSpecifier.__str__c             C   s
   t | jS )N)Úhashr,   )r   r   r   r   r   o   s    z_IndividualSpecifier.__hash__c             C   sL   t |tr0y|  |¡}W q@ tk
r,   tS X nt || js@tS | j|jkS )N)Ú
isinstancer   r1   r   ÚNotImplementedr,   )r   r   r   r   r   r   r   s    
z_IndividualSpecifier.__eq__c             C   sL   t |tr0y|  |¡}W q@ tk
r,   tS X nt || js@tS | j|jkS )N)r6   r   r1   r   r7   r,   )r   r   r   r   r   r   }   s    
z_IndividualSpecifier.__ne__c             C   s   t | d | j| ¡S )Nz_compare_{0})Úgetattrr)   Ú
_operators)r   Úopr   r   r   Ú_get_operator   s    z"_IndividualSpecifier._get_operatorc             C   s   t |ttfst|}|S )N)r6   r	   r   r
   )r   r&   r   r   r   Ú_coerce_version   s    z$_IndividualSpecifier._coerce_versionc             C   s
   | j d S )Nr   )r,   )r   r   r   r   r%      s    z_IndividualSpecifier.operatorc             C   s
   | j d S )Nr   )r,   )r   r   r   r   r&      s    z_IndividualSpecifier.versionc             C   s   | j S )N)r-   )r   r   r   r   r      s    z _IndividualSpecifier.prereleasesc             C   s
   || _ d S )N)r-   )r   r   r   r   r   r      s    c             C   s
   |   |¡S )N)r   )r   r   r   r   r   Ú__contains__    s    z!_IndividualSpecifier.__contains__c             C   s:   |d kr| j }|  |¡}|jr&|s&dS |  | j¡|| jS )NF)r   r<   Úis_prereleaser;   r%   r&   )r   r   r   r   r   r   r   £   s    

z_IndividualSpecifier.containsc             c   s   d}g }d|d k	r|ndi}xJ|D ]B}|   |¡}| j|f|r"|jrZ|sZ| jsZ| |¡ q"d}|V  q"W |s|rx|D ]
}|V  qvW d S )NFr   T)r<   r   r>   r   Úappend)r   r   r   ÚyieldedÚfound_prereleasesÚkwr&   Úparsed_versionr   r   r   r   ¶   s    




z_IndividualSpecifier.filter)r$   N)N)N)r   r   r   r9   r0   r4   r   r   r   r   r;   r<   Úpropertyr%   r&   r   r"   r=   r   r   r   r   r   r   r#   N   s    

r#   c               @   sv   e Zd ZdZe de d ejejB ¡Zdddddd	d
Z	dd Z
dd Zdd Zdd Zdd Zdd Zdd ZdS )ÚLegacySpecifieraÛ  
        (?P<operator>(==|!=|<=|>=|<|>))
        \s*
        (?P<version>
            [^,;\s)]* # Since this is a "legacy" specifier, and the version
                      # string can be just about anything, we match everything
                      # except for whitespace, a semi-colon for marker support,
                      # a closing paren since versions can be enclosed in
                      # them, and a comma since it's a version separator.
        )
        z^\s*z\s*$ÚequalÚ	not_equalÚless_than_equalÚgreater_than_equalÚ	less_thanÚgreater_than)z==z!=z<=z>=ú<ú>c             C   s   t |tstt|}|S )N)r6   r	   r2   )r   r&   r   r   r   r<   ò   s    
zLegacySpecifier._coerce_versionc             C   s   ||   |¡kS )N)r<   )r   Úprospectiver.   r   r   r   Ú_compare_equal÷   s    zLegacySpecifier._compare_equalc             C   s   ||   |¡kS )N)r<   )r   rN   r.   r   r   r   Ú_compare_not_equalú   s    z"LegacySpecifier._compare_not_equalc             C   s   ||   |¡kS )N)r<   )r   rN   r.   r   r   r   Ú_compare_less_than_equalý   s    z(LegacySpecifier._compare_less_than_equalc             C   s   ||   |¡kS )N)r<   )r   rN   r.   r   r   r   Ú_compare_greater_than_equal   s    z+LegacySpecifier._compare_greater_than_equalc             C   s   ||   |¡k S )N)r<   )r   rN   r.   r   r   r   Ú_compare_less_than  s    z"LegacySpecifier._compare_less_thanc             C   s   ||   |¡kS )N)r<   )r   rN   r.   r   r   r   Ú_compare_greater_than  s    z%LegacySpecifier._compare_greater_thanN)r   r   r   Ú
_regex_strÚreÚcompileÚVERBOSEÚ
IGNORECASEr'   r9   r<   rO   rP   rQ   rR   rS   rT   r   r   r   r   rE   Ö   s    rE   c                s   t   ¡ fdd}|S )Nc                s   t |tsdS  | ||S )NF)r6   r   )r   rN   r.   )Úfnr   r   Úwrapped  s    
z)_require_version_compare.<locals>.wrapped)Ú	functoolsÚwraps)rZ   r[   r   )rZ   r   Ú_require_version_compare
  s    r^   c            	   @   s¸   e Zd ZdZe de d ejejB ¡Zdddddd	d
ddZ	e
dd Ze
dd Ze
dd Ze
dd Ze
dd Ze
dd Ze
dd Zdd Zedd Zejdd Zd S )!Ú	Specifiera  
        (?P<operator>(~=|==|!=|<=|>=|<|>|===))
        (?P<version>
            (?:
                # The identity operators allow for an escape hatch that will
                # do an exact string match of the version you wish to install.
                # This will not be parsed by PEP 440 and we cannot determine
                # any semantic meaning from it. This operator is discouraged
                # but included entirely as an escape hatch.
                (?<====)  # Only match for the identity operator
                \s*
                [^\s]*    # We just match everything, except for whitespace
                          # since we are only testing for strict identity.
            )
            |
            (?:
                # The (non)equality operators allow for wild card and local
                # versions to be specified so we have to define these two
                # operators separately to enable that.
                (?<===|!=)            # Only match for equals and not equals

                \s*
                v?
                (?:[0-9]+!)?          # epoch
                [0-9]+(?:\.[0-9]+)*   # release
                (?:                   # pre release
                    [-_\.]?
                    (a|b|c|rc|alpha|beta|pre|preview)
                    [-_\.]?
                    [0-9]*
                )?
                (?:                   # post release
                    (?:-[0-9]+)|(?:[-_\.]?(post|rev|r)[-_\.]?[0-9]*)
                )?

                # You cannot use a wild card and a dev or local version
                # together so group them with a | and make them optional.
                (?:
                    (?:[-_\.]?dev[-_\.]?[0-9]*)?         # dev release
                    (?:\+[a-z0-9]+(?:[-_\.][a-z0-9]+)*)? # local
                    |
                    \.\*  # Wild card syntax of .*
                )?
            )
            |
            (?:
                # The compatible operator requires at least two digits in the
                # release segment.
                (?<=~=)               # Only match for the compatible operator

                \s*
                v?
                (?:[0-9]+!)?          # epoch
                [0-9]+(?:\.[0-9]+)+   # release  (We have a + instead of a *)
                (?:                   # pre release
                    [-_\.]?
                    (a|b|c|rc|alpha|beta|pre|preview)
                    [-_\.]?
                    [0-9]*
                )?
                (?:                                   # post release
                    (?:-[0-9]+)|(?:[-_\.]?(post|rev|r)[-_\.]?[0-9]*)
                )?
                (?:[-_\.]?dev[-_\.]?[0-9]*)?          # dev release
            )
            |
            (?:
                # All other operators only allow a sub set of what the
                # (non)equality operators do. Specifically they do not allow
                # local versions to be specified nor do they allow the prefix
                # matching wild cards.
                (?<!==|!=|~=)         # We have special cases for these
                                      # operators so we want to make sure they
                                      # don't match here.

                \s*
                v?
                (?:[0-9]+!)?          # epoch
                [0-9]+(?:\.[0-9]+)*   # release
                (?:                   # pre release
                    [-_\.]?
                    (a|b|c|rc|alpha|beta|pre|preview)
                    [-_\.]?
                    [0-9]*
                )?
                (?:                                   # post release
                    (?:-[0-9]+)|(?:[-_\.]?(post|rev|r)[-_\.]?[0-9]*)
                )?
                (?:[-_\.]?dev[-_\.]?[0-9]*)?          # dev release
            )
        )
        z^\s*z\s*$Ú
compatiblerF   rG   rH   rI   rJ   rK   Z	arbitrary)z~=z==z!=z<=z>=rL   rM   z===c             C   sN   d  tt dd t|¡d d ¡}|d7 }|  d¡||oL|  d¡||S )NÚ.c             S   s   |   d¡ o|   d¡ S )NÚpostÚdev)Ú
startswith)Úxr   r   r   Ú<lambda>  s   z/Specifier._compare_compatible.<locals>.<lambda>éÿÿÿÿz.*z>=z==)ÚjoinÚlistÚ	itertoolsÚ	takewhileÚ_version_splitr;   )r   rN   r.   Úprefixr   r   r   Ú_compare_compatible  s    
zSpecifier._compare_compatiblec             C   sp   |  d¡rPt|j}t|d d }tt|}|d t| }t||\}}nt|}|jsht|j}||kS )Nz.*éþÿÿÿ)Úendswithr   Úpublicrl   r2   ÚlenÚ_pad_versionÚlocal)r   rN   r.   r   r   r   rO     s    


zSpecifier._compare_equalc             C   s   |   ||¡ S )N)rO   )r   rN   r.   r   r   r   rP   À  s    zSpecifier._compare_not_equalc             C   s   |t |kS )N)r   )r   rN   r.   r   r   r   rQ   Ä  s    z"Specifier._compare_less_than_equalc             C   s   |t |kS )N)r   )r   rN   r.   r   r   r   rR   È  s    z%Specifier._compare_greater_than_equalc             C   s<   t |}||k sdS |js8|jr8t |jt |jkr8dS dS )NFT)r   r>   Úbase_version)r   rN   r.   r   r   r   rS   Ì  s    zSpecifier._compare_less_thanc             C   s^   t |}||ksdS |js8|jr8t |jt |jkr8dS |jd k	rZt |jt |jkrZdS dS )NFT)r   Úis_postreleaseru   rt   )r   rN   r.   r   r   r   rT   å  s    
zSpecifier._compare_greater_thanc             C   s   t | ¡ t | ¡ kS )N)r2   Úlower)r   rN   r.   r   r   r   Ú_compare_arbitrary  s    zSpecifier._compare_arbitraryc             C   sR   | j d k	r| j S | j\}}|dkrN|dkr@| d¡r@|d d }t|jrNdS dS )N)z==z>=z<=z~=z===z==z.*ro   TF)r-   r,   rp   r
   r>   )r   r%   r&   r   r   r   r     s    


zSpecifier.prereleasesc             C   s
   || _ d S )N)r-   )r   r   r   r   r   r     s    N)r   r   r   rU   rV   rW   rX   rY   r'   r9   r^   rn   rO   rP   rQ   rR   rS   rT   rx   rD   r   r"   r   r   r   r   r_     s*   ^#r_   z^([0-9]+)((?:a|b|c|rc)[0-9]+)$c             C   sD   g }x:|   d¡D ],}t |¡}|r2| | ¡ ¡ q| |¡ qW |S )Nra   )ÚsplitÚ_prefix_regexr(   ÚextendÚgroupsr?   )r&   Úresultr   r/   r   r   r   rl   '  s    
rl   c          
   C   sæ   g g  }}|  tt dd | ¡¡ |  tt dd |¡¡ |  | t|d d  ¡ |  |t|d d  ¡ | ddgtdt|d t|d   ¡ | ddgtdt|d t|d   ¡ ttj| ttj| fS )Nc             S   s   |   ¡ S )N)Úisdigit)re   r   r   r   rf   6  s    z_pad_version.<locals>.<lambda>c             S   s   |   ¡ S )N)r~   )re   r   r   r   rf   7  s    r   r   Ú0)r?   ri   rj   rk   rr   ÚinsertÚmaxÚchain)ÚleftÚrightÚ
left_splitÚright_splitr   r   r   rs   2  s    
&&rs   c               @   s   e Zd ZdddZdd Zdd Zd	d
 Zdd Zdd Zdd Z	dd Z
dd Zedd Zejdd Zdd ZdddZd ddZdS )!ÚSpecifierSetr$   Nc          	   C   sr   dd |  d¡D }t }xB|D ]:}y| t|¡ W q  tk
rX   | t|¡ Y q X q W t|| _|| _d S )Nc             S   s   g | ]}|  ¡ r|  ¡ qS r   )r+   )Ú.0Úsr   r   r   ú
<listcomp>R  s    z)SpecifierSet.__init__.<locals>.<listcomp>ú,)	ry   ÚsetÚaddr_   r   rE   Ú	frozensetÚ_specsr-   )r   Ú
specifiersr   ÚparsedÚ	specifierr   r   r   r0   O  s    

zSpecifierSet.__init__c             C   s*   | j d k	rd | j¡nd}d t| |¡S )Nz, prereleases={0!r}r$   z<SpecifierSet({0!r}{1})>)r-   r)   r   r2   )r   r3   r   r   r   r4   d  s    zSpecifierSet.__repr__c             C   s   d  tdd | jD ¡S )Nr   c             s   s   | ]}t |V  qd S )N)r2   )r   r   r   r   r   ú	<genexpr>n  s    z'SpecifierSet.__str__.<locals>.<genexpr>)rh   Úsortedr   )r   r   r   r   r   m  s    zSpecifierSet.__str__c             C   s
   t | jS )N)r5   r   )r   r   r   r   r   p  s    zSpecifierSet.__hash__c             C   s   t |trt|}nt |ts"tS t }t| j|jB |_| jd krX|jd k	rX|j|_n<| jd k	rv|jd krv| j|_n| j|jkr| j|_ntd|S )NzFCannot combine SpecifierSets with True and False prerelease overrides.)r6   r   r   r7   r   r   r-   Ú
ValueError)r   r   r   r   r   r   Ú__and__s  s    





zSpecifierSet.__and__c             C   sF   t |trt|}n&t |tr,tt|}nt |ts:tS | j|jkS )N)r6   r   r   r#   r2   r7   r   )r   r   r   r   r   r     s    



zSpecifierSet.__eq__c             C   sF   t |trt|}n&t |tr,tt|}nt |ts:tS | j|jkS )N)r6   r   r   r#   r2   r7   r   )r   r   r   r   r   r     s    



zSpecifierSet.__ne__c             C   s
   t | jS )N)rr   r   )r   r   r   r   Ú__len__  s    zSpecifierSet.__len__c             C   s
   t | jS )N)Úiterr   )r   r   r   r   Ú__iter__¡  s    zSpecifierSet.__iter__c             C   s.   | j d k	r| j S | jsd S tdd | jD S )Nc             s   s   | ]}|j V  qd S )N)r   )r   r   r   r   r   r   ³  s    z+SpecifierSet.prereleases.<locals>.<genexpr>)r-   r   Úany)r   r   r   r   r   ¤  s
    
zSpecifierSet.prereleasesc             C   s
   || _ d S )N)r-   )r   r   r   r   r   r   µ  s    c             C   s
   |   |¡S )N)r   )r   r   r   r   r   r=   ¹  s    zSpecifierSet.__contains__c                sL   t  ttfst  d kr$| js2 jr2dS t fdd| jD S )NFc             3   s   | ]}|j  d V  qdS ))r   N)r   )r   r   )r   r   r   r   r   Õ  s   z(SpecifierSet.contains.<locals>.<genexpr>)r6   r	   r   r
   r   r>   Úallr   )r   r   r   r   )r   r   r   r   ¼  s    
zSpecifierSet.containsc             C   s¸   |d kr| j }| jr:x | jD ]}|j|t|d}qW |S g }g }xX|D ]P}t|ttfsdt|}n|}t|trtqH|jr|s|s| 	|¡ qH| 	|¡ qHW |s°|r°|d kr°|S |S d S )N)r   )
r   r   r   Úboolr6   r	   r   r
   r>   r?   )r   r   r   r.   ÚfilteredrA   r   rC   r   r   r   r   Ù  s*    



zSpecifierSet.filter)r$   N)N)N)r   r   r   r0   r4   r   r   r   r   r   r   r   rD   r   r"   r=   r   r   r   r   r   r   r   M  s   
	


r   )Ú
__future__r   r   r   r   r\   rj   rV   Ú_compatr   r   r&   r   r	   r
   r   r   ÚABCMetaÚobjectr   r#   rE   r^   r_   rW   rz   rl   rs   r   r   r   r   r   Ú<module>   s&   9 	4	  
ã            	   @   sþ   d dl mZmZmZ d dlZd dlZd dlZddlmZ ddddd	gZ	e 
d
ddddddg¡Zdd ZG dd deZG dd deZG dd deZe dej¡ZddddddZdd Zdd ZdZG d d deZd!d" Ze d#¡Zd$d% Zd&d' ZdS )(é    )Úabsolute_importÚdivisionÚprint_functionNé   )ÚInfinityÚparseÚVersionÚLegacyVersionÚInvalidVersionÚVERSION_PATTERNÚ_VersionÚepochÚreleaseÚdevÚpreÚpostÚlocalc             C   s&   yt | S  tk
r    t| S X dS )zÑ
    Parse the given version string and return either a :class:`Version` object
    or a :class:`LegacyVersion` object depending on if the given version is
    a valid PEP 440 version or a legacy version.
    N)r   r
   r	   )Úversion© r   úSC:\code\venv\callllama\lib\site-packages\pkg_resources\_vendor\packaging\version.pyr      s    c               @   s   e Zd ZdZdS )r
   zF
    An invalid version was found, users should refer to PEP 440.
    N)Ú__name__Ú
__module__Ú__qualname__Ú__doc__r   r   r   r   r
   $   s   c               @   sL   e Zd Zdd Zdd Zdd Zdd Zd	d
 Zdd Zdd Z	dd Z
dS )Ú_BaseVersionc             C   s
   t | jS )N)ÚhashÚ_key)Úselfr   r   r   Ú__hash__,   s    z_BaseVersion.__hash__c             C   s   |   |dd ¡S )Nc             S   s   | |k S )Nr   )ÚsÚor   r   r   Ú<lambda>0   s    z%_BaseVersion.__lt__.<locals>.<lambda>)Ú_compare)r   Úotherr   r   r   Ú__lt__/   s    z_BaseVersion.__lt__c             C   s   |   |dd ¡S )Nc             S   s   | |kS )Nr   )r   r    r   r   r   r!   3   s    z%_BaseVersion.__le__.<locals>.<lambda>)r"   )r   r#   r   r   r   Ú__le__2   s    z_BaseVersion.__le__c             C   s   |   |dd ¡S )Nc             S   s   | |kS )Nr   )r   r    r   r   r   r!   6   s    z%_BaseVersion.__eq__.<locals>.<lambda>)r"   )r   r#   r   r   r   Ú__eq__5   s    z_BaseVersion.__eq__c             C   s   |   |dd ¡S )Nc             S   s   | |kS )Nr   )r   r    r   r   r   r!   9   s    z%_BaseVersion.__ge__.<locals>.<lambda>)r"   )r   r#   r   r   r   Ú__ge__8   s    z_BaseVersion.__ge__c             C   s   |   |dd ¡S )Nc             S   s   | |kS )Nr   )r   r    r   r   r   r!   <   s    z%_BaseVersion.__gt__.<locals>.<lambda>)r"   )r   r#   r   r   r   Ú__gt__;   s    z_BaseVersion.__gt__c             C   s   |   |dd ¡S )Nc             S   s   | |kS )Nr   )r   r    r   r   r   r!   ?   s    z%_BaseVersion.__ne__.<locals>.<lambda>)r"   )r   r#   r   r   r   Ú__ne__>   s    z_BaseVersion.__ne__c             C   s   t |tstS || j|jS )N)Ú
isinstancer   ÚNotImplementedr   )r   r#   Úmethodr   r   r   r"   A   s    
z_BaseVersion._compareN)r   r   r   r   r$   r%   r&   r'   r(   r)   r"   r   r   r   r   r   *   s   r   c               @   s`   e Zd Zdd Zdd Zdd Zedd Zed	d
 Zedd Z	edd Z
edd ZdS )r	   c             C   s   t || _t| j| _d S )N)ÚstrÚ_versionÚ_legacy_cmpkeyr   )r   r   r   r   r   Ú__init__J   s    
zLegacyVersion.__init__c             C   s   | j S )N)r.   )r   r   r   r   Ú__str__N   s    zLegacyVersion.__str__c             C   s   d  tt| ¡S )Nz<LegacyVersion({0})>)ÚformatÚreprr-   )r   r   r   r   Ú__repr__Q   s    zLegacyVersion.__repr__c             C   s   | j S )N)r.   )r   r   r   r   ÚpublicT   s    zLegacyVersion.publicc             C   s   | j S )N)r.   )r   r   r   r   Úbase_versionX   s    zLegacyVersion.base_versionc             C   s   d S )Nr   )r   r   r   r   r   \   s    zLegacyVersion.localc             C   s   dS )NFr   )r   r   r   r   Úis_prerelease`   s    zLegacyVersion.is_prereleasec             C   s   dS )NFr   )r   r   r   r   Úis_postreleased   s    zLegacyVersion.is_postreleaseN)r   r   r   r0   r1   r4   Úpropertyr5   r6   r   r7   r8   r   r   r   r   r	   H   s   z(\d+ | [a-z]+ | \.| -)Úczfinal-ú@)r   Úpreviewú-Úrcr   c             c   s`   xTt  | ¡D ]F}t ||¡}|r|dkr*q|d d dkrH| d¡V  qd| V  qW dV  d S )NÚ.r   Ú
0123456789é   Ú*z*final)Ú_legacy_version_component_reÚsplitÚ_legacy_version_replacement_mapÚgetÚzfill)r   Úpartr   r   r   Ú_parse_version_partsr   s    rI   c             C   s   d}g }xlt |  ¡ D ]\}| d¡rh|dk rJx|rH|d dkrH| ¡  q.W x|rf|d dkrf| ¡  qLW | |¡ qW t|}||fS )NéÿÿÿÿrB   z*finalz*final-Z00000000)rI   ÚlowerÚ
startswithÚpopÚappendÚtuple)r   r   ÚpartsrH   r   r   r   r/      s    
r/   a  
    v?
    (?:
        (?:(?P<epoch>[0-9]+)!)?                           # epoch
        (?P<release>[0-9]+(?:\.[0-9]+)*)                  # release segment
        (?P<pre>                                          # pre-release
            [-_\.]?
            (?P<pre_l>(a|b|c|rc|alpha|beta|pre|preview))
            [-_\.]?
            (?P<pre_n>[0-9]+)?
        )?
        (?P<post>                                         # post release
            (?:-(?P<post_n1>[0-9]+))
            |
            (?:
                [-_\.]?
                (?P<post_l>post|rev|r)
                [-_\.]?
                (?P<post_n2>[0-9]+)?
            )
        )?
        (?P<dev>                                          # dev release
            [-_\.]?
            (?P<dev_l>dev)
            [-_\.]?
            (?P<dev_n>[0-9]+)?
        )?
    )
    (?:\+(?P<local>[a-z0-9]+(?:[-_\.][a-z0-9]+)*))?       # local version
c               @   s|   e Zd Ze de d ejejB ¡Zdd Z	dd Z
dd Zed	d
 Zedd Zedd Zedd Zedd ZdS )r   z^\s*z\s*$c          
   C   sà   | j  |¡}|std |¡t| d¡r8t| d¡ndtdd | d¡ d¡D t	| d¡| d	¡t	| d
¡| d¡p| d¡t	| d¡| d¡t
| d¡d| _t| jj| jj| jj| jj| jj| jj| _d S )NzInvalid version: '{0}'r   r   c             s   s   | ]}t |V  qd S )N)Úint)Ú.0Úir   r   r   ú	<genexpr>Ï   s    z#Version.__init__.<locals>.<genexpr>r   r?   Zpre_lZpre_nZpost_lZpost_n1Zpost_n2Zdev_lZdev_nr   )r   r   r   r   r   r   )Ú_regexÚsearchr
   r2   r   ÚgrouprQ   rO   rD   Ú_parse_letter_versionÚ_parse_local_versionr.   Ú_cmpkeyr   r   r   r   r   r   r   )r   r   Úmatchr   r   r   r0   Æ   s.    

zVersion.__init__c             C   s   d  tt| ¡S )Nz<Version({0})>)r2   r3   r-   )r   r   r   r   r4   é   s    zVersion.__repr__c             C   sî   g }| j jdkr$| d | j j¡¡ | d dd | j jD ¡¡ | j jd k	rl| d dd | j jD ¡¡ | j jd k	r| d | j jd	 ¡¡ | j jd k	r´| d
 | j jd	 ¡¡ | j j	d k	rä| d d dd | j j	D ¡¡¡ d |¡S )Nr   z{0}!r?   c             s   s   | ]}t |V  qd S )N)r-   )rR   Úxr   r   r   rT   ô   s    z"Version.__str__.<locals>.<genexpr>Ú c             s   s   | ]}t |V  qd S )N)r-   )rR   r\   r   r   r   rT   ø   s    z.post{0}r   z.dev{0}z+{0}c             s   s   | ]}t |V  qd S )N)r-   )rR   r\   r   r   r   rT     s    )
r.   r   rN   r2   Újoinr   r   r   r   r   )r   rP   r   r   r   r1   ì   s     zVersion.__str__c             C   s   t |  dd¡d S )Nú+r   r   )r-   rD   )r   r   r   r   r5   
  s    zVersion.publicc             C   sL   g }| j jdkr$| d | j j¡¡ | d dd | j jD ¡¡ d |¡S )Nr   z{0}!r?   c             s   s   | ]}t |V  qd S )N)r-   )rR   r\   r   r   r   rT     s    z'Version.base_version.<locals>.<genexpr>r]   )r.   r   rN   r2   r^   r   )r   rP   r   r   r   r6     s
    zVersion.base_versionc             C   s$   t | }d|kr | dd¡d S d S )Nr_   r   )r-   rD   )r   Úversion_stringr   r   r   r     s    zVersion.localc             C   s   t | jjp| jjS )N)Úboolr.   r   r   )r   r   r   r   r7   !  s    zVersion.is_prereleasec             C   s   t | jjS )N)ra   r.   r   )r   r   r   r   r8   %  s    zVersion.is_postreleaseN)r   r   r   ÚreÚcompiler   ÚVERBOSEÚ
IGNORECASErU   r0   r4   r1   r9   r5   r6   r   r7   r8   r   r   r   r   r   ¿   s   
#c             C   sv   | rZ|d krd}|   ¡ } | dkr&d} n(| dkr4d} n| dkrBd} n| dkrNd	} | t|fS | sr|rrd	} | t|fS d S )
Nr   ÚalphaÚaÚbetaÚb)r:   r   r<   r>   )ZrevÚrr   )rK   rQ   )ÚletterÚnumberr   r   r   rX   *  s     rX   z[\._-]c             C   s$   | dk	r t dd t | ¡D S dS )zR
    Takes a string like abc.1.twelve and turns it into ("abc", 1, "twelve").
    Nc             s   s&   | ]}|  ¡ s| ¡ nt|V  qd S )N)ÚisdigitrK   rQ   )rR   rH   r   r   r   rT   R  s   z'_parse_local_version.<locals>.<genexpr>)rO   Ú_local_version_seperatorsrD   )r   r   r   r   rY   L  s    rY   c             C   s   t ttt dd t|¡}|d kr@|d kr@|d k	r@t }n|d krLt}|d krZt }|d krft}|d krvt }nt dd |D }| |||||fS )Nc             S   s   | dkS )Nr   r   )r\   r   r   r   r!   `  s    z_cmpkey.<locals>.<lambda>c             s   s*   | ]"}t |tr|d fnt |fV  qdS )r]   N)r*   rQ   r   )rR   rS   r   r   r   rT     s   z_cmpkey.<locals>.<genexpr>)rO   ÚreversedÚlistÚ	itertoolsÚ	dropwhiler   )r   r   r   r   r   r   r   r   r   rZ   W  s&    		
rZ   )Ú
__future__r   r   r   Úcollectionsrq   rb   Ú_structuresr   Ú__all__Ú
namedtupler   r   Ú
ValueErrorr
   Úobjectr   r	   rc   rd   rC   rE   rI   r/   r   r   rX   rn   rY   rZ   r   r   r   r   Ú<module>   s.   !
9k
ã            i   @   s  d Z dZdZdZddlZddlmZ ddlZddl	Z	ddl
Z
ddlZddlZddlZddlZddlZddlZddlmZ yddlmZ W n  ek
r¨   ddlmZ Y nX ydd	lmZ W n> ek
rø   ydd	lmZ W n ek
rò   dZY nX Y nX d
dddddddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrgiZee	jdds Zed dskZer"e	jZe Z!e"Z#e Z$e%e&e'e(e)ee*e+e,e-e.gZ/nbe	j0Ze1Z2dtdu Z$g Z/ddl3Z3xBdv 4¡ D ]6Z5ye/ 6e7e3e5¡ W n e8k
r|   wJY nX qJW e9dwdx e2dyD Z:dzd{ Z;G d|d} d}e<Z=ej>ej? Z@d~ZAeAd ZBe@eA ZCe"dZDd Eddx ejFD ¡ZGG dd! d!eHZIG dd# d#eIZJG dd% d%eIZKG dd' d'eKZLG dd* d*eHZMG dd de<ZNG dd& d&e<ZOejP QeO¡ dd= ZRddN ZSddK ZTdd ZUdd ZVdd ZWddU ZXd/ddZYG dd( d(e<ZZG dd0 d0eZZ[G dd de[Z\G dd de[Z]G dd de[Z^e^Z_e^eZ_`G dd de[ZaG dd de^ZbG dd deaZcG d dp dpe[ZdG d¡d3 d3e[ZeG d¢d+ d+e[ZfG d£d) d)e[ZgG d¤d de[ZhG d¥d2 d2e[ZiG d¦d§ d§e[ZjG d¨d dejZkG d©d dejZlG dªd dejZmG d«d. d.ejZnG d¬d- d-ejZoG d­d5 d5ejZpG d®d4 d4ejZqG d¯d$ d$eZZrG d°d
 d
erZsG d±d  d erZtG d²d derZuG d³d derZvG d´d" d"eZZwG dµd dewZxG d¶d dewZyG d·d¸ d¸ewZzG d¹d dezZ{G dºd6 d6ezZ|G d»d¼ d¼e<Z}e} Z~G d½d dewZG d¾d, d,ewZG d¿d dewZG dÀdÁ dÁeZG dÂd1 d1ewZG dÃd deZG dÄd deZG dÅd deZG dÆd/ d/eZG dÇd de<ZdÈdf Zd0dËdDZd1dÌd@ZdÍdÎ ZdÏdS ZdÐdR ZdÑdÒ Zd2dÔdWZdÕdE Zd3dÖdkZd×dl ZdØdn Ze\  dG¡Zel  dM¡Zem  dL¡Zen  de¡Zeo  dd¡ZeeeDdÙddÚ dÛdÜ ¡ZefdÝ dÞdÜ ¡Zefdß dàdÜ ¡ZeeB eB eeeGdádydâB efdãejB Z ee edä e  Z¡e^dåedæ ¢dç¡ ee{e¡e B  ¢dè¡ dé Z£dêdc Z¤dëdQ Z¥dìd` Z¦díd^ Z§dîdq Z¨e¨dïdÜ Z©e¨dðdÜ Zªdñdò Z«dódO Z¬dôdP Z­dõdi Z®e< e®_¯d4dödoZ°e= Z±e< e±_²e< e±_³ed÷edøfdùdmZ´e´Zµeefdúdû  dü¡Z¶eefdýdþ  dÿ¡Z·eefdúdû efdýdþ B  d ¡Z¸ee_de¸ ¡   d¡Z¹d÷døde¸ ¡ fddTZºd5ddjZ»e¤dZ¼e¤dZ½e¬eee@eCd  d¡\Z¾Z¿eÀeÁd	 4¡ d
ZÂefdd EeÂ Ã¡ ¡ d  d¡ZÄdd_ ZÅeefdd  d¡ZÆefd d¡ZÇefd È¡  d¡ZÉefd d¡ZÊeefdd eÊB  d¡ZËeËZÌefd d¡ZÍee{eeeGdÉdeeede^dÉ  em     Î¡  d¡ZÏeee¸ ¡ eÏB dd d>¡ZÐG d dr drZÑeÒd!krebd"ZÓebd#ZÔeee@eCd$ ZÕeeÕd%dÓd& e©¡ZÖeeeÖ d'¡Z×d(e×B ZØeeÕd%dÓd& e©¡ZÙeeeÙ d)¡ZÚeÓd*eØd' eÔ eÚd) ZÛeÛ Üd+¡ eÑjÝ Üd,¡ eÑjÞ Üd,¡ eÑjß Üd-¡ ddlàZàeÑjà e¨eàjá¡ eÑjà Üd.¡ dS (6  aS  
pyparsing module - Classes and methods to define and execute parsing grammars

The pyparsing module is an alternative approach to creating and executing simple grammars,
vs. the traditional lex/yacc approach, or the use of regular expressions.  With pyparsing, you
don't need to learn a new syntax for defining grammars or matching expressions - the parsing module
provides a library of classes that you use to construct the grammar directly in Python.

Here is a program to parse "Hello, World!" (or any greeting of the form 
C{"<salutation>, <addressee>!"}), built up using L{Word}, L{Literal}, and L{And} elements 
(L{'+'<ParserElement.__add__>} operator gives L{And} expressions, strings are auto-converted to
L{Literal} expressions)::

    from pyparsing import Word, alphas

    # define grammar of a greeting
    greet = Word(alphas) + "," + Word(alphas) + "!"

    hello = "Hello, World!"
    print (hello, "->", greet.parseString(hello))

The program outputs the following::

    Hello, World! -> ['Hello', ',', 'World', '!']

The Python representation of the grammar is quite readable, owing to the self-explanatory
class names, and the use of '+', '|' and '^' operators.

The L{ParseResults} object returned from L{ParserElement.parseString<ParserElement.parseString>} can be accessed as a nested list, a dictionary, or an
object with named attributes.

The pyparsing module handles some of the problems that are typically vexing when writing text parsers:
 - extra or missing whitespace (the above program will also handle "Hello,World!", "Hello  ,  World  !", etc.)
 - quoted strings
 - embedded comments
z2.1.10z07 Oct 2016 01:31 UTCz*Paul McGuire <ptmcg@users.sourceforge.net>é    N)Úref)Údatetime)ÚRLock)ÚOrderedDictÚAndÚCaselessKeywordÚCaselessLiteralÚ
CharsNotInÚCombineÚDictÚEachÚEmptyÚ
FollowedByÚForwardÚ
GoToColumnÚGroupÚKeywordÚLineEndÚ	LineStartÚLiteralÚ
MatchFirstÚNoMatchÚNotAnyÚ	OneOrMoreÚOnlyOnceÚOptionalÚOrÚParseBaseExceptionÚParseElementEnhanceÚParseExceptionÚParseExpressionÚParseFatalExceptionÚParseResultsÚParseSyntaxExceptionÚParserElementÚQuotedStringÚRecursiveGrammarExceptionÚRegexÚSkipToÚ	StringEndÚStringStartÚSuppressÚTokenÚTokenConverterÚWhiteÚWordÚWordEndÚ	WordStartÚ
ZeroOrMoreÚ	alphanumsÚalphasÚ
alphas8bitÚanyCloseTagÚ
anyOpenTagÚcStyleCommentÚcolÚcommaSeparatedListÚcommonHTMLEntityÚcountedArrayÚcppStyleCommentÚdblQuotedStringÚdblSlashCommentÚdelimitedListÚdictOfÚdowncaseTokensÚemptyÚhexnumsÚhtmlCommentÚjavaStyleCommentÚlineÚlineEndÚ	lineStartÚlinenoÚmakeHTMLTagsÚmakeXMLTagsÚmatchOnlyAtColÚmatchPreviousExprÚmatchPreviousLiteralÚ
nestedExprÚnullDebugActionÚnumsÚoneOfÚopAssocÚoperatorPrecedenceÚ
printablesÚpunc8bitÚpythonStyleCommentÚquotedStringÚremoveQuotesÚreplaceHTMLEntityÚreplaceWithÚ
restOfLineÚsglQuotedStringÚsrangeÚ	stringEndÚstringStartÚtraceParseActionÚunicodeStringÚupcaseTokensÚwithAttributeÚindentedBlockÚoriginalTextForÚungroupÚinfixNotationÚlocatedExprÚ	withClassÚ
CloseMatchÚtokenMapÚpyparsing_commoné   c             C   s`   t | tr| S yt| S  tk
rZ   t|  t ¡ d¡}td}| dd ¡ | 	|¡S X dS )a  Drop-in replacement for str(obj) that tries to be Unicode friendly. It first tries
           str(obj). If that fails with a UnicodeEncodeError, then it tries unicode(obj). It
           then < returns the unicode object | encodes it with the default encoding | ... >.
        Úxmlcharrefreplacez&#\d+;c             S   s$   dt t| d dd dd   S )Nz\ur   é   éÿÿÿÿ)ÚhexÚint)Út© rv   úKC:\code\venv\callllama\lib\site-packages\pkg_resources\_vendor\pyparsing.pyÚ<lambda>   s    z_ustr.<locals>.<lambda>N)
Ú
isinstanceÚunicodeÚstrÚUnicodeEncodeErrorÚencodeÚsysÚgetdefaultencodingr'   ÚsetParseActionÚtransformString)ÚobjÚretÚ
xmlcharrefrv   rv   rw   Ú_ustr   s    
r   z6sum len sorted reversed list tuple set any all min maxc             c   s   | ]
}|V  qd S )Nrv   )Ú.0Úyrv   rv   rw   ú	<genexpr>    s    r   é   c             C   s>   d}dd d  ¡ D }x"t||D ]\}}|  ||¡} q"W | S )z/Escape &, <, >, ", ', etc. in a string of data.z&><"'c             s   s   | ]}d | d V  qdS )ú&ú;Nrv   )r   Úsrv   rv   rw   r   §   s    z_xml_escape.<locals>.<genexpr>zamp gt lt quot apos)ÚsplitÚzipÚreplace)ÚdataÚfrom_symbolsÚ
to_symbolsÚfrom_Úto_rv   rv   rw   Ú_xml_escape¢   s
    r   c               @   s   e Zd ZdS )Ú
_ConstantsN)Ú__name__Ú
__module__Ú__qualname__rv   rv   rv   rw   r   ¬   s   r   Ú
0123456789ZABCDEFabcdefé\   Ú c             c   s   | ]}|t jkr|V  qd S )N)ÚstringÚ
whitespace)r   Úcrv   rv   rw   r   ´   s    c               @   sP   e Zd ZdZdddZedd Zdd	 Zd
d Zdd Z	dddZ
dd ZdS )r   z7base exception class for all parsing runtime exceptionsr   Nc             C   s>   || _ |d kr|| _d| _n|| _|| _|| _|||f| _d S )Nr   )ÚlocÚmsgÚpstrÚparserElementÚargs)Úselfr¢   r    r¡   Úelemrv   rv   rw   Ú__init__º   s    zParseBaseException.__init__c             C   s   | |j |j|j|jS )z­
        internal factory method to simplify creating one type of ParseException 
        from another - avoids having __init__ signature conflicts among subclasses
        )r¢   r    r¡   r£   )ÚclsÚperv   rv   rw   Ú_from_exceptionÅ   s    z"ParseBaseException._from_exceptionc             C   sN   |dkrt | j| jS |dkr,t| j| jS |dkrBt| j| jS t|dS )z÷supported attributes by name are:
            - lineno - returns the line number of the exception text
            - col - returns the column number of the exception text
            - line - returns the line containing the exception text
        rJ   )r9   ÚcolumnrG   N)rJ   r    r¢   r9   rG   ÚAttributeError)r¥   Úanamerv   rv   rw   Ú__getattr__Í   s    zParseBaseException.__getattr__c             C   s   d| j | j| j| jf S )Nz"%s (at char %d), (line:%d, col:%d))r¡   r    rJ   r«   )r¥   rv   rv   rw   Ú__str__Ü   s    zParseBaseException.__str__c             C   s   t | S )N)r   )r¥   rv   rv   rw   Ú__repr__ß   s    zParseBaseException.__repr__ú>!<c             C   s<   | j }| jd }|r4d |d| |||d f¡}| ¡ S )zExtracts the exception line from the input string, and marks
           the location of the exception with a special symbol.
        r   r   N)rG   r«   ÚjoinÚstrip)r¥   ÚmarkerStringÚline_strÚline_columnrv   rv   rw   ÚmarkInputlineá   s    
z ParseBaseException.markInputlinec             C   s   d  ¡ tt|  S )Nzlineno col line)r   ÚdirÚtype)r¥   rv   rv   rw   Ú__dir__ë   s    zParseBaseException.__dir__)r   NN)r±   )r   r   r   Ú__doc__r§   Úclassmethodrª   r®   r¯   r°   r·   rº   rv   rv   rv   rw   r   ¶   s   


c               @   s   e Zd ZdZdS )r   aN  
    Exception thrown when parse expressions don't match class;
    supported attributes by name are:
     - lineno - returns the line number of the exception text
     - col - returns the column number of the exception text
     - line - returns the line containing the exception text
        
    Example::
        try:
            Word(nums).setName("integer").parseString("ABC")
        except ParseException as pe:
            print(pe)
            print("column: {}".format(pe.col))
            
    prints::
       Expected integer (at char 0), (line:1, col:1)
        column: 1
    N)r   r   r   r»   rv   rv   rv   rw   r   î   s   c               @   s   e Zd ZdZdS )r!   znuser-throwable exception thrown when inconsistent parse content
       is found; stops all parsing immediatelyN)r   r   r   r»   rv   rv   rv   rw   r!     s   c               @   s   e Zd ZdZdS )r#   zßjust like L{ParseFatalException}, but thrown internally when an
       L{ErrorStop<And._ErrorStop>} ('-' operator) indicates that parsing is to stop 
       immediately because an unbacktrackable syntax error has been foundN)r   r   r   r»   rv   rv   rv   rw   r#     s   c               @   s    e Zd ZdZdd Zdd ZdS )r&   zZexception thrown by L{ParserElement.validate} if the grammar could be improperly recursivec             C   s
   || _ d S )N)ÚparseElementTrace)r¥   ÚparseElementListrv   rv   rw   r§     s    z"RecursiveGrammarException.__init__c             C   s
   d| j  S )NzRecursiveGrammarException: %s)r½   )r¥   rv   rv   rw   r¯      s    z!RecursiveGrammarException.__str__N)r   r   r   r»   r§   r¯   rv   rv   rv   rw   r&     s   c               @   s,   e Zd Zdd Zdd Zdd Zdd Zd	S )
Ú_ParseResultsWithOffsetc             C   s   ||f| _ d S )N)Útup)r¥   Úp1Úp2rv   rv   rw   r§   $  s    z _ParseResultsWithOffset.__init__c             C   s
   | j | S )N)rÀ   )r¥   Úirv   rv   rw   Ú__getitem__&  s    z#_ParseResultsWithOffset.__getitem__c             C   s   t | jd S )Nr   )ÚreprrÀ   )r¥   rv   rv   rw   r°   (  s    z _ParseResultsWithOffset.__repr__c             C   s   | j d |f| _ d S )Nr   )rÀ   )r¥   rÃ   rv   rv   rw   Ú	setOffset*  s    z!_ParseResultsWithOffset.setOffsetN)r   r   r   r§   rÄ   r°   rÆ   rv   rv   rv   rw   r¿   #  s   r¿   c               @   s  e Zd ZdZd[ddZddddefddZdd	 Zefd
dZdd Z	dd Z
dd Zdd ZeZdd Zdd Zdd Zdd Zdd ZereZeZeZn$eZeZeZdd Zd d! Zd"d# Zd$d% Zd&d' Zd\d(d)Zd*d+ Zd,d- Zd.d/ Zd0d1 Z d2d3 Z!d4d5 Z"d6d7 Z#d8d9 Z$d:d; Z%d<d= Z&d]d?d@Z'dAdB Z(dCdD Z)dEdF Z*d^dHdIZ+dJdK Z,dLdM Z-d_dOdPZ.dQdR Z/dSdT Z0dUdV Z1dWdX Z2dYdZ Z3dS )`r"   aI  
    Structured parse results, to provide multiple means of access to the parsed data:
       - as a list (C{len(results)})
       - by list index (C{results[0], results[1]}, etc.)
       - by attribute (C{results.<resultsName>} - see L{ParserElement.setResultsName})

    Example::
        integer = Word(nums)
        date_str = (integer.setResultsName("year") + '/' 
                        + integer.setResultsName("month") + '/' 
                        + integer.setResultsName("day"))
        # equivalent form:
        # date_str = integer("year") + '/' + integer("month") + '/' + integer("day")

        # parseString returns a ParseResults object
        result = date_str.parseString("1999/12/31")

        def test(s, fn=repr):
            print("%s -> %s" % (s, fn(eval(s))))
        test("list(result)")
        test("result[0]")
        test("result['month']")
        test("result.day")
        test("'month' in result")
        test("'minutes' in result")
        test("result.dump()", str)
    prints::
        list(result) -> ['1999', '/', '12', '/', '31']
        result[0] -> '1999'
        result['month'] -> '12'
        result.day -> '31'
        'month' in result -> True
        'minutes' in result -> False
        result.dump() -> ['1999', '/', '12', '/', '31']
        - day: 31
        - month: 12
        - year: 1999
    NTc             C   s"   t || r|S t | ¡}d|_|S )NT)ry   ÚobjectÚ__new__Ú_ParseResults__doinit)r¨   ÚtoklistÚnameÚasListÚmodalÚretobjrv   rv   rw   rÈ   T  s
    

zParseResults.__new__c          
   C   sb  | j rvd| _ d | _d | _i | _|| _|| _|d kr6g }||trP|d d  | _n||trft|| _n|g| _t	 | _
|d k	r^|r^|sd| j|< ||tr¦t|}|| _||td ttfrÐ|d dg fks^||trà|g}|r(||trt| ¡ d| |< ntt|d d| |< || | _n6y|d | |< W n$ tttfk
r\   || |< Y nX d S )NFr   r   )rÉ   Ú_ParseResults__nameÚ_ParseResults__parentÚ_ParseResults__accumNamesÚ_ParseResults__asListÚ_ParseResults__modalÚlistÚ_ParseResults__toklistÚ_generatorTypeÚdictÚ_ParseResults__tokdictrt   r   r¹   Ú
basestringr"   r¿   ÚcopyÚKeyErrorÚ	TypeErrorÚ
IndexError)r¥   rÊ   rË   rÌ   rÍ   ry   rv   rv   rw   r§   ]  sB    



$
zParseResults.__init__c             C   sP   t |ttfr| j| S || jkr4| j| d d S tdd | j| D S d S )Nrr   r   c             S   s   g | ]}|d  qS )r   rv   )r   Úvrv   rv   rw   ú
<listcomp>  s    z,ParseResults.__getitem__.<locals>.<listcomp>)ry   rt   ÚslicerÕ   rÑ   rØ   r"   )r¥   rÃ   rv   rv   rw   rÄ     s
    

zParseResults.__getitem__c             C   s   ||t r0| j |t ¡|g | j|< |d }nD||ttfrN|| j|< |}n&| j |t ¡t |dg | j|< |}||trt| |_	d S )Nr   )
r¿   rØ   ÚgetrÔ   rt   rà   rÕ   r"   ÚwkrefrÐ   )r¥   ÚkrÞ   ry   Úsubrv   rv   rw   Ú__setitem__  s    


"
zParseResults.__setitem__c       
      C   sÆ   t |ttfrºt| j}| j|= t |trH|dk r:||7 }t||d }tt| |¡ }| ¡  x^| j	 
¡ D ]F\}}x<|D ]4}x.t|D ]"\}\}}	t||	|	|k ||< qW q|W qnW n| j	|= d S )Nr   r   )ry   rt   rà   ÚlenrÕ   rÔ   ÚrangeÚindicesÚreverserØ   ÚitemsÚ	enumerater¿   )
r¥   rÃ   ÚmylenÚremovedrË   ÚoccurrencesÚjrã   ÚvalueÚpositionrv   rv   rw   Ú__delitem__  s    


$zParseResults.__delitem__c             C   s
   || j kS )N)rØ   )r¥   rã   rv   rv   rw   Ú__contains__¯  s    zParseResults.__contains__c             C   s
   t | jS )N)ræ   rÕ   )r¥   rv   rv   rw   Ú__len__²  s    zParseResults.__len__c             C   s
   | j   S )N)rÕ   )r¥   rv   rv   rw   Ú__bool__³  s    zParseResults.__bool__c             C   s
   t | jS )N)ÚiterrÕ   )r¥   rv   rv   rw   Ú__iter__µ  s    zParseResults.__iter__c             C   s   t | jd d d S )Nrr   )rö   rÕ   )r¥   rv   rv   rw   Ú__reversed__¶  s    zParseResults.__reversed__c             C   s$   t | jdr| j ¡ S t| jS d S )NÚiterkeys)ÚhasattrrØ   rù   rö   )r¥   rv   rv   rw   Ú	_iterkeys·  s    
zParseResults._iterkeysc                s    fdd   ¡ D S )Nc             3   s   | ]} | V  qd S )Nrv   )r   rã   )r¥   rv   rw   r   ¾  s    z+ParseResults._itervalues.<locals>.<genexpr>)rû   )r¥   rv   )r¥   rw   Ú_itervalues½  s    zParseResults._itervaluesc                s    fdd   ¡ D S )Nc             3   s   | ]}| | fV  qd S )Nrv   )r   rã   )r¥   rv   rw   r   Á  s    z*ParseResults._iteritems.<locals>.<genexpr>)rû   )r¥   rv   )r¥   rw   Ú
_iteritemsÀ  s    zParseResults._iteritemsc             C   s   t |  ¡ S )zVReturns all named result keys (as a list in Python 2.x, as an iterator in Python 3.x).)rÔ   rù   )r¥   rv   rv   rw   Úkeys×  s    zParseResults.keysc             C   s   t |  ¡ S )zXReturns all named result values (as a list in Python 2.x, as an iterator in Python 3.x).)rÔ   Ú
itervalues)r¥   rv   rv   rw   ÚvaluesÛ  s    zParseResults.valuesc             C   s   t |  ¡ S )zfReturns all named result key-values (as a list of tuples in Python 2.x, as an iterator in Python 3.x).)rÔ   Ú	iteritems)r¥   rv   rv   rw   rê   ß  s    zParseResults.itemsc             C   s
   t | jS )zSince keys() returns an iterator, this method is helpful in bypassing
           code that looks for the existence of any defined results names.)ÚboolrØ   )r¥   rv   rv   rw   Úhaskeysã  s    zParseResults.haskeysc             O   s   |s
dg}x6|  ¡ D ]*\}}|dkr2|d |f}qtd| qW t|d tsht|dksh|d | kr|d }| | }| |= |S |d }|S dS )a¹  
        Removes and returns item at specified index (default=C{last}).
        Supports both C{list} and C{dict} semantics for C{pop()}. If passed no
        argument or an integer argument, it will use C{list} semantics
        and pop tokens from the list of parsed tokens. If passed a 
        non-integer argument (most likely a string), it will use C{dict}
        semantics and pop the corresponding value from any defined 
        results names. A second default return value argument is 
        supported, just as in C{dict.pop()}.

        Example::
            def remove_first(tokens):
                tokens.pop(0)
            print(OneOrMore(Word(nums)).parseString("0 123 321")) # -> ['0', '123', '321']
            print(OneOrMore(Word(nums)).addParseAction(remove_first).parseString("0 123 321")) # -> ['123', '321']

            label = Word(alphas)
            patt = label("LABEL") + OneOrMore(Word(nums))
            print(patt.parseString("AAB 123 321").dump())

            # Use pop() in a parse action to remove named result (note that corresponding value is not
            # removed from list form of results)
            def remove_LABEL(tokens):
                tokens.pop("LABEL")
                return tokens
            patt.addParseAction(remove_LABEL)
            print(patt.parseString("AAB 123 321").dump())
        prints::
            ['AAB', '123', '321']
            - LABEL: AAB

            ['AAB', '123', '321']
        rr   Údefaultr   z-pop() got an unexpected keyword argument '%s'r   N)rê   rÜ   ry   rt   ræ   )r¥   r¤   Úkwargsrã   rÞ   Úindexr   Údefaultvaluerv   rv   rw   Úpopè  s    "zParseResults.popc             C   s   || kr| | S |S dS )ai  
        Returns named result matching the given key, or if there is no
        such name, then returns the given C{defaultValue} or C{None} if no
        C{defaultValue} is specified.

        Similar to C{dict.get()}.
        
        Example::
            integer = Word(nums)
            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")           

            result = date_str.parseString("1999/12/31")
            print(result.get("year")) # -> '1999'
            print(result.get("hour", "not specified")) # -> 'not specified'
            print(result.get("hour")) # -> None
        Nrv   )r¥   ÚkeyÚdefaultValuerv   rv   rw   rá     s    zParseResults.getc             C   sZ   | j  ||¡ xF| j ¡ D ]8\}}x.t|D ]"\}\}}t||||k ||< q,W qW dS )a  
        Inserts new element at location index in the list of parsed tokens.
        
        Similar to C{list.insert()}.

        Example::
            print(OneOrMore(Word(nums)).parseString("0 123 321")) # -> ['0', '123', '321']

            # use a parse action to insert the parse location in the front of the parsed results
            def insert_locn(locn, tokens):
                tokens.insert(0, locn)
            print(OneOrMore(Word(nums)).addParseAction(insert_locn).parseString("0 123 321")) # -> [0, '0', '123', '321']
        N)rÕ   ÚinsertrØ   rê   rë   r¿   )r¥   r  ÚinsStrrË   rî   rã   rð   rñ   rv   rv   rw   r  2  s    zParseResults.insertc             C   s   | j  |¡ dS )aþ  
        Add single element to end of ParseResults list of elements.

        Example::
            print(OneOrMore(Word(nums)).parseString("0 123 321")) # -> ['0', '123', '321']
            
            # use a parse action to compute the sum of the parsed integers, and add it to the end
            def append_sum(tokens):
                tokens.append(sum(map(int, tokens)))
            print(OneOrMore(Word(nums)).addParseAction(append_sum).parseString("0 123 321")) # -> ['0', '123', '321', 444]
        N)rÕ   Úappend)r¥   Úitemrv   rv   rw   r  F  s    zParseResults.appendc             C   s$   t |tr| |7 } n| j |¡ dS )a  
        Add sequence of elements to end of ParseResults list of elements.

        Example::
            patt = OneOrMore(Word(alphas))
            
            # use a parse action to append the reverse of the matched strings, to make a palindrome
            def make_palindrome(tokens):
                tokens.extend(reversed([t[::-1] for t in tokens]))
                return ''.join(tokens)
            print(patt.addParseAction(make_palindrome).parseString("lskdj sdlkjf lksd")) # -> 'lskdjsdlkjflksddsklfjkldsjdksl'
        N)ry   r"   rÕ   Úextend)r¥   Úitemseqrv   rv   rw   r  T  s    

zParseResults.extendc             C   s   | j dd= | j ¡  dS )z7
        Clear all elements and results names.
        N)rÕ   rØ   Úclear)r¥   rv   rv   rw   r  f  s    zParseResults.clearc             C   sf   y| | S  t k
r   dS X || jkr^|| jkrD| j| d d S tdd | j| D S ndS d S )Nr   rr   r   c             S   s   g | ]}|d  qS )r   rv   )r   rÞ   rv   rv   rw   rß   w  s    z,ParseResults.__getattr__.<locals>.<listcomp>)rÛ   rØ   rÑ   r"   )r¥   rË   rv   rv   rw   r®   m  s    

zParseResults.__getattr__c             C   s   |   ¡ }||7 }|S )N)rÚ   )r¥   Úotherr   rv   rv   rw   Ú__add__{  s    zParseResults.__add__c                s   |j rnt| jfdd |j  ¡ } fdd|D }x4|D ],\}}|| |< t|d tr>t| |d _q>W |  j|j7  _| j 	|j¡ | S )Nc                s   | dk r S |   S )Nr   rv   )Úa)Úoffsetrv   rw   rx     s    z'ParseResults.__iadd__.<locals>.<lambda>c          	      s4   g | ],\}}|D ]}|t |d   |d fqqS )r   r   )r¿   )r   rã   ÚvlistrÞ   )Ú	addoffsetrv   rw   rß     s   z)ParseResults.__iadd__.<locals>.<listcomp>r   )
rØ   ræ   rÕ   rê   ry   r"   râ   rÐ   rÑ   Úupdate)r¥   r  Ú
otheritemsÚotherdictitemsrã   rÞ   rv   )r  r  rw   Ú__iadd__  s    


zParseResults.__iadd__c             C   s&   t |tr|dkr|  ¡ S ||  S d S )Nr   )ry   rt   rÚ   )r¥   r  rv   rv   rw   Ú__radd__  s    zParseResults.__radd__c             C   s   dt | jt | jf S )Nz(%s, %s))rÅ   rÕ   rØ   )r¥   rv   rv   rw   r°     s    zParseResults.__repr__c             C   s   dd  dd | jD ¡ d S )Nú[z, c             s   s(   | ] }t |trt|nt|V  qd S )N)ry   r"   r   rÅ   )r   rÃ   rv   rv   rw   r     s    z'ParseResults.__str__.<locals>.<genexpr>ú])r²   rÕ   )r¥   rv   rv   rw   r¯     s    zParseResults.__str__r   c             C   sP   g }xF| j D ]<}|r"|r"| |¡ t|tr:|| ¡ 7 }q| t|¡ qW |S )N)rÕ   r  ry   r"   Ú_asStringListr   )r¥   ÚsepÚoutr  rv   rv   rw   r    s    

zParseResults._asStringListc             C   s   dd | j D S )a  
        Returns the parse results as a nested list of matching tokens, all converted to strings.

        Example::
            patt = OneOrMore(Word(alphas))
            result = patt.parseString("sldkj lsdkj sldkj")
            # even though the result prints in string-like form, it is actually a pyparsing ParseResults
            print(type(result), result) # -> <class 'pyparsing.ParseResults'> ['sldkj', 'lsdkj', 'sldkj']
            
            # Use asList() to create an actual list
            result_list = result.asList()
            print(type(result_list), result_list) # -> <class 'list'> ['sldkj', 'lsdkj', 'sldkj']
        c             S   s"   g | ]}t |tr| ¡ n|qS rv   )ry   r"   rÌ   )r   Úresrv   rv   rw   rß   ·  s    z'ParseResults.asList.<locals>.<listcomp>)rÕ   )r¥   rv   rv   rw   rÌ   ©  s    zParseResults.asListc                s6   t r| j}n| j} fdd t fdd| D S )aÃ  
        Returns the named parse results as a nested dictionary.

        Example::
            integer = Word(nums)
            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")
            
            result = date_str.parseString('12/31/1999')
            print(type(result), repr(result)) # -> <class 'pyparsing.ParseResults'> (['12', '/', '31', '/', '1999'], {'day': [('1999', 4)], 'year': [('12', 0)], 'month': [('31', 2)]})
            
            result_dict = result.asDict()
            print(type(result_dict), repr(result_dict)) # -> <class 'dict'> {'day': '1999', 'year': '12', 'month': '31'}

            # even though a ParseResults supports dict-like access, sometime you just need to have a dict
            import json
            print(json.dumps(result)) # -> Exception: TypeError: ... is not JSON serializable
            print(json.dumps(result.asDict())) # -> {"month": "31", "day": "1999", "year": "12"}
        c                s6   t | tr.|  ¡ r|  ¡ S  fdd| D S n| S d S )Nc                s   g | ]} |qS rv   rv   )r   rÞ   )ÚtoItemrv   rw   rß   Ö  s    z7ParseResults.asDict.<locals>.toItem.<locals>.<listcomp>)ry   r"   r  ÚasDict)r   )r#  rv   rw   r#  Ñ  s
    
z#ParseResults.asDict.<locals>.toItemc             3   s   | ]\}}| |fV  qd S )Nrv   )r   rã   rÞ   )r#  rv   rw   r   Ú  s    z&ParseResults.asDict.<locals>.<genexpr>)ÚPY_3rê   r  r×   )r¥   Úitem_fnrv   )r#  rw   r$  ¹  s
    	zParseResults.asDictc             C   s8   t | j}| j ¡ |_| j|_|j | j¡ | j|_|S )zA
        Returns a new copy of a C{ParseResults} object.
        )r"   rÕ   rØ   rÚ   rÐ   rÑ   r  rÏ   )r¥   r   rv   rv   rw   rÚ   Ü  s    
zParseResults.copyFc             C   sP  d}g }t dd | j ¡ D }|d }|s8d}d}d}d}	|dk	rJ|}	n| jrV| j}	|	sf|rbdS d}	|||d|	d	g7 }xºt| jD ]¬\}
}t|trâ|
|krÂ|| ||
 |o´|dk||¡g7 }n|| d|oÔ|dk||¡g7 }qd}|
|krö||
 }|s
|rqnd}t	t
|}|||d|d	|d
|d	g	7 }qW |||d
|	d	g7 }d |¡S )z
        (Deprecated) Returns the parse results as XML. Tags are created for tokens and lists that have defined results names.
        Ú
c             s   s(   | ] \}}|D ]}|d  |fV  qqdS )r   Nrv   )r   rã   r  rÞ   rv   rv   rw   r   í  s    z%ParseResults.asXML.<locals>.<genexpr>z  r   NZITEMú<ú>z</)r×   rØ   rê   rÏ   rë   rÕ   ry   r"   ÚasXMLr   r   r²   )r¥   ÚdoctagÚnamedItemsOnlyÚindentÚ	formattedÚnlr!  Ú
namedItemsÚnextLevelIndentÚselfTagrÃ   r"  ÚresTagÚxmlBodyTextrv   rv   rw   r*  ç  sT    


zParseResults.asXMLc             C   s:   x4| j  ¡ D ]&\}}x|D ]\}}||kr|S qW qW d S )N)rØ   rê   )r¥   rä   rã   r  rÞ   r    rv   rv   rw   Ú__lookup$  s
    zParseResults.__lookupc             C   s   | j r| j S | jr.|  ¡ }|r(| | ¡S dS nNt| dkrxt| jdkrxtt| j ¡ d d dkrxtt| j ¡ S dS dS )a(  
        Returns the results name for this token expression. Useful when several 
        different expressions might match at a particular location.

        Example::
            integer = Word(nums)
            ssn_expr = Regex(r"\d\d\d-\d\d-\d\d\d\d")
            house_number_expr = Suppress('#') + Word(nums, alphanums)
            user_data = (Group(house_number_expr)("house_number") 
                        | Group(ssn_expr)("ssn")
                        | Group(integer)("age"))
            user_info = OneOrMore(user_data)
            
            result = user_info.parseString("22 111-22-3333 #221B")
            for item in result:
                print(item.getName(), ':', item[0])
        prints::
            age : 22
            ssn : 111-22-3333
            house_number : 221B
        Nr   r   )r   rr   )	rÏ   rÐ   Ú_ParseResults__lookupræ   rØ   Únextrö   r   rþ   )r¥   Úparrv   rv   rw   ÚgetName+  s    
zParseResults.getNamer   c             C   sb  g }d}|  |t|  ¡  ¡ |rX|  ¡ rÀtdd |  ¡ D }xz|D ]r\}}|r^|  |¡ |  d|d| |f ¡ t|tr¬|r|  | ||d ¡¡ qº|  t|¡ qH|  t	|¡ qHW nt
dd | D rX| }x~t|D ]r\}	}
t|
tr*|  d|d| |	|d|d  |
 ||d ¡f ¡ qâ|  d|d| |	|d|d  t|
f ¡ qâW d	 |¡S )
aH  
        Diagnostic method for listing out the contents of a C{ParseResults}.
        Accepts an optional C{indent} argument so that this string can be embedded
        in a nested display of other data.

        Example::
            integer = Word(nums)
            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")
            
            result = date_str.parseString('12/31/1999')
            print(result.dump())
        prints::
            ['12', '/', '31', '/', '1999']
            - day: 1999
            - month: 31
            - year: 12
        r'  c             s   s   | ]\}}t ||fV  qd S )N)r{   )r   rã   rÞ   rv   rv   rw   r   g  s    z$ParseResults.dump.<locals>.<genexpr>z
%s%s- %s: z  r   c             s   s   | ]}t |tV  qd S )N)ry   r"   )r   Úvvrv   rv   rw   r   s  s    z
%s%s[%d]:
%s%s%sr   )r  r   rÌ   r  Úsortedrê   ry   r"   ÚdumprÅ   Úanyrë   r²   )r¥   r-  ÚdepthÚfullr!  ÚNLrê   rã   rÞ   rÃ   r:  rv   rv   rw   r<  P  s,    

4.zParseResults.dumpc             O   s   t j |  ¡ f|| dS )aõ  
        Pretty-printer for parsed results as a list, using the C{pprint} module.
        Accepts additional positional or keyword args as defined for the 
        C{pprint.pprint} method. (U{http://docs.python.org/3/library/pprint.html#pprint.pprint})

        Example::
            ident = Word(alphas, alphanums)
            num = Word(nums)
            func = Forward()
            term = ident | num | Group('(' + func + ')')
            func <<= ident + Group(Optional(delimitedList(term)))
            result = func.parseString("fna a,b,(fnb c,d,200),100")
            result.pprint(width=40)
        prints::
            ['fna',
             ['a',
              'b',
              ['(', 'fnb', ['c', 'd', '200'], ')'],
              '100']]
        N)ÚpprintrÌ   )r¥   r¤   r  rv   rv   rw   rA  }  s    zParseResults.pprintc             C   s.   | j | j ¡ | jd k	r|  ¡ p d | j| jffS )N)rÕ   rØ   rÚ   rÐ   rÑ   rÏ   )r¥   rv   rv   rw   Ú__getstate__  s
    zParseResults.__getstate__c             C   sN   |d | _ |d \| _}}| _i | _| j |¡ |d k	rDt|| _nd | _d S )Nr   r   )rÕ   rØ   rÏ   rÑ   r  râ   rÐ   )r¥   Ústater8  ÚinAccumNamesrv   rv   rw   Ú__setstate__  s    
zParseResults.__setstate__c             C   s   | j | j| j| jfS )N)rÕ   rÏ   rÒ   rÓ   )r¥   rv   rv   rw   Ú__getnewargs__©  s    zParseResults.__getnewargs__c             C   s   t t| t|  ¡  S )N)r¸   r¹   rÔ   rþ   )r¥   rv   rv   rw   rº   ¬  s    zParseResults.__dir__)NNTT)N)r   )NFr   T)r   r   T)4r   r   r   r»   rÈ   ry   r§   rÄ   rå   rò   ró   rô   rõ   Ú__nonzero__r÷   rø   rû   rü   rý   r%  rþ   r   rê   rù   rÿ   r  r  r  rá   r  r  r  r  r®   r  r  r  r°   r¯   r  rÌ   r$  rÚ   r*  r6  r9  r<  rA  rB  rE  rF  rº   rv   rv   rv   rw   r"   -  sh   &
	'	4

#
=%
-c             C   sF   |}d|   k rt |k r4n n|| d  dkr4dS | | dd| ¡ S )a  Returns current column within a string, counting newlines as line separators.
   The first column is number 1.

   Note: the default parsing behavior is to expand tabs in the input string
   before starting the parsing process.  See L{I{ParserElement.parseString}<ParserElement.parseString>} for more information
   on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
   consistent view of the parsed string, the parse location, and line and column
   positions within the parsed string.
   r   r   r'  )ræ   Úrfind)r    Ústrgr   rv   rv   rw   r9   ±  s    
c             C   s   |  dd| ¡d S )a  Returns current line number within a string, counting newlines as line separators.
   The first line is number 1.

   Note: the default parsing behavior is to expand tabs in the input string
   before starting the parsing process.  See L{I{ParserElement.parseString}<ParserElement.parseString>} for more information
   on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
   consistent view of the parsed string, the parse location, and line and column
   positions within the parsed string.
   r'  r   r   )Úcount)r    rI  rv   rv   rw   rJ   ¾  s    
c             C   sF   |  dd| ¡}| d| ¡}|dkr2||d | S ||d d S dS )zfReturns the line of text containing loc within a string, counting newlines as line separators.
       r'  r   r   N)rH  Úfind)r    rI  ÚlastCRÚnextCRrv   rv   rw   rG   Ê  s
    c             C   s8   t dt| d t| dt|| t|| f   d S )NzMatch z at loc z(%d,%d))Úprintr   rJ   r9   )Úinstringr    Úexprrv   rv   rw   Ú_defaultStartDebugActionÔ  s    rQ  c             C   s$   t dt| d t| ¡   d S )NzMatched z -> )rN  r   r{   rÌ   )rO  ÚstartlocÚendlocrP  Útoksrv   rv   rw   Ú_defaultSuccessDebugAction×  s    rU  c             C   s   t dt|  d S )NzException raised:)rN  r   )rO  r    rP  Úexcrv   rv   rw   Ú_defaultExceptionDebugActionÚ  s    rW  c              G   s   dS )zG'Do-nothing' debug action, to suppress debugging output during parsing.Nrv   )r¤   rv   rv   rw   rQ   Ý  s    rq   c                sÒ   t krfddS dgdgtd d dkrFddd}dd	d
 ntj}tj d}|ddd }|d |d | f fdd}d}ytdtdj}W n tk
rÆ   t}Y nX ||_|S )Nc                s    |S )Nrv   )r   Úlru   )Úfuncrv   rw   rx   ú  s    z_trim_arity.<locals>.<lambda>r   Frq   )ro   é   c             S   s8   t dkrdnd}tj| |  d d| }|j|jfgS )N)ro   rZ  r   éýÿÿÿéþÿÿÿr   )Úlimit)Úsystem_versionÚ	tracebackÚextract_stackÚfilenamerJ   )r]  r  Úframe_summaryrv   rv   rw   r`     s    z"_trim_arity.<locals>.extract_stackc             S   s$   t j| |d}|d }|j|jfgS )N)r]  rr   )r_  Ú
extract_tbra  rJ   )Útbr]  Úframesrb  rv   rv   rw   rc    s    z_trim_arity.<locals>.extract_tbé   )r]  rr   r   c           	      s    xy | d d   }dd< |S  t k
r   d r> n4z.t ¡ d } |ddd d d ksj W d ~X d krd  d7  < w Y qX qW d S )Nr   Trr   rq   )r]  r   )rÜ   r~   Úexc_info)r¤   r   rd  )rc  Ú
foundArityrY  r]  ÚmaxargsÚpa_call_line_synthrv   rw   Úwrapper  s"    z_trim_arity.<locals>.wrapperz<parse action>r   Ú	__class__)r   )r   )	ÚsingleArgBuiltinsr^  r_  r`  rc  Úgetattrr   Ú	Exceptionr{   )rY  ri  r`  Ú	LINE_DIFFÚ	this_linerk  Ú	func_namerv   )rc  rh  rY  r]  ri  rj  rw   Ú_trim_arityø  s*    
rs  c                   s  e Zd ZdZdZdZedd Zedd Zddd	Z	d
d Z
dd ZdddZdddZdd Zdd Zdd Zdd Zdd Zdd Zddd Zd!d" Zdd#d$Zd%d& Zd'd( ZG d)d* d*eZed+k	ràG d,d- d-eZnG d.d- d-eZi Ze Zd/d/gZ dd0d1Z!eZ"ed2d3 Z#dZ$edd5d6Z%dd7d8Z&e'dfd9d:Z(d;d< Z)e'fd=d>Z*e'dfd?d@Z+dAdB Z,dCdD Z-dEdF Z.dGdH Z/dIdJ Z0dKdL Z1dMdN Z2dOdP Z3dQdR Z4dSdT Z5dUdV Z6dWdX Z7dYdZ Z8dd[d\Z9d]d^ Z:d_d` Z;dadb Z<dcdd Z=dedf Z>dgdh Z?ddidjZ@dkdl ZAdmdn ZBdodp ZCdqdr ZDg fdsdtZEddudvZF fdwdxZGdydz ZHd{d| ZId}d~ ZJdd ZKdddZLdddZM  ZNS )r$   z)Abstract base level parser element class.z 
	Fc             C   s
   | t _dS )aÑ  
        Overrides the default whitespace chars

        Example::
            # default whitespace chars are space, <TAB> and newline
            OneOrMore(Word(alphas)).parseString("abc def\nghi jkl")  # -> ['abc', 'def', 'ghi', 'jkl']
            
            # change to just treat newline as significant
            ParserElement.setDefaultWhitespaceChars(" \t")
            OneOrMore(Word(alphas)).parseString("abc def\nghi jkl")  # -> ['abc', 'def']
        N)r$   ÚDEFAULT_WHITE_CHARS)Úcharsrv   rv   rw   ÚsetDefaultWhitespaceChars=  s    z'ParserElement.setDefaultWhitespaceCharsc             C   s
   | t _dS )a  
        Set class to be used for inclusion of string literals into a parser.
        
        Example::
            # default literal class used is Literal
            integer = Word(nums)
            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")           

            date_str.parseString("1999/12/31")  # -> ['1999', '/', '12', '/', '31']


            # change to Suppress
            ParserElement.inlineLiteralsUsing(Suppress)
            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")           

            date_str.parseString("1999/12/31")  # -> ['1999', '12', '31']
        N)r$   Ú_literalStringClass)r¨   rv   rv   rw   ÚinlineLiteralsUsingL  s    z!ParserElement.inlineLiteralsUsingc             C   s   t  | _d | _d | _d | _|| _d| _tj| _	d| _
d| _d| _t  | _d| _d| _d| _d| _d| _d| _d | _d| _d| _d S )NTFr   )NNN)rÔ   ÚparseActionÚ
failActionÚstrReprÚresultsNameÚ
saveAsListÚskipWhitespacer$   rt  Ú
whiteCharsÚcopyDefaultWhiteCharsÚmayReturnEmptyÚkeepTabsÚignoreExprsÚdebugÚstreamlinedÚmayIndexErrorÚerrmsgÚmodalResultsÚdebugActionsÚreÚcallPreparseÚcallDuringTry)r¥   Úsavelistrv   rv   rw   r§   a  s(    zParserElement.__init__c             C   s<   t   | ¡}| jdd |_| jdd |_| jr8tj|_|S )a$  
        Make a copy of this C{ParserElement}.  Useful for defining different parse actions
        for the same parsing pattern, using copies of the original parse element.
        
        Example::
            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
            integerK = integer.copy().addParseAction(lambda toks: toks[0]*1024) + Suppress("K")
            integerM = integer.copy().addParseAction(lambda toks: toks[0]*1024*1024) + Suppress("M")
            
            print(OneOrMore(integerK | integerM | integer).parseString("5K 100 640K 256M"))
        prints::
            [5120, 100, 655360, 268435456]
        Equivalent form of C{expr.copy()} is just C{expr()}::
            integerM = integer().addParseAction(lambda toks: toks[0]*1024*1024) + Suppress("M")
        N)rÚ   ry  r  r  r$   rt  r  )r¥   Úcpyrv   rv   rw   rÚ   x  s    
zParserElement.copyc             C   s*   || _ d| j  | _t| dr&| j| j_| S )af  
        Define name for this expression, makes debugging and exception messages clearer.
        
        Example::
            Word(nums).parseString("ABC")  # -> Exception: Expected W:(0123...) (at char 0), (line:1, col:1)
            Word(nums).setName("integer").parseString("ABC")  # -> Exception: Expected integer (at char 0), (line:1, col:1)
        z	Expected Ú	exception)rË   r  rú   r  r¡   )r¥   rË   rv   rv   rw   ÚsetName  s
    

zParserElement.setNamec             C   s4   |   ¡ }| d¡r"|dd }d}||_| |_|S )aP  
        Define name for referencing matching tokens as a nested attribute
        of the returned parse results.
        NOTE: this returns a *copy* of the original C{ParserElement} object;
        this is so that the client can define a basic element, such as an
        integer, and reference it in multiple places with different names.

        You can also set results names using the abbreviated syntax,
        C{expr("name")} in place of C{expr.setResultsName("name")} - 
        see L{I{__call__}<__call__>}.

        Example::
            date_str = (integer.setResultsName("year") + '/' 
                        + integer.setResultsName("month") + '/' 
                        + integer.setResultsName("day"))

            # equivalent form:
            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")
        Ú*Nrr   T)rÚ   Úendswithr|  r  )r¥   rË   ÚlistAllMatchesÚnewselfrv   rv   rw   ÚsetResultsName  s    
zParserElement.setResultsNameTc                s@   |r&| j  d fdd	} |_|| _ nt| j dr<| j j| _ | S )z¦Method to invoke the Python pdb debugger when this element is
           about to be parsed. Set C{breakFlag} to True to enable, False to
           disable.
        Tc                s   dd l }| ¡   | |||S )Nr   )ÚpdbÚ	set_trace)rO  r    Ú	doActionsÚcallPreParser  )Ú_parseMethodrv   rw   ÚbreakerÀ  s    z'ParserElement.setBreak.<locals>.breakerÚ_originalParseMethod)TT)Ú_parser  rú   )r¥   Ú	breakFlagr  rv   )r  rw   ÚsetBreak¹  s    
zParserElement.setBreakc             O   s&   t ttt || _| dd¡| _| S )a  
        Define action to perform when successfully matching parse element definition.
        Parse action fn is a callable method with 0-3 arguments, called as C{fn(s,loc,toks)},
        C{fn(loc,toks)}, C{fn(toks)}, or just C{fn()}, where:
         - s   = the original string being parsed (see note below)
         - loc = the location of the matching substring
         - toks = a list of the matched tokens, packaged as a C{L{ParseResults}} object
        If the functions in fns modify the tokens, they can return them as the return
        value from fn, and the modified list of tokens will replace the original.
        Otherwise, fn does not need to return any value.

        Optional keyword arguments:
         - callDuringTry = (default=C{False}) indicate if parse action should be run during lookaheads and alternate testing

        Note: the default parsing behavior is to expand tabs in the input string
        before starting the parsing process.  See L{I{parseString}<parseString>} for more information
        on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
        consistent view of the parsed string, the parse location, and line and column
        positions within the parsed string.
        
        Example::
            integer = Word(nums)
            date_str = integer + '/' + integer + '/' + integer

            date_str.parseString("1999/12/31")  # -> ['1999', '/', '12', '/', '31']

            # use parse action to convert to ints at parse time
            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
            date_str = integer + '/' + integer + '/' + integer

            # note that integer fields are now ints, not strings
            date_str.parseString("1999/12/31")  # -> [1999, '/', 12, '/', 31]
        r  F)rÔ   Úmaprs  ry  rá   r  )r¥   Úfnsr  rv   rv   rw   r   Ë  s    "zParserElement.setParseActionc             O   s4   |  j tttt|7  _ | jp,| dd¡| _| S )z¦
        Add parse action to expression's list of parse actions. See L{I{setParseAction}<setParseAction>}.
        
        See examples in L{I{copy}<copy>}.
        r  F)ry  rÔ   r   rs  r  rá   )r¥   r¡  r  rv   rv   rw   ÚaddParseActionñ  s    zParserElement.addParseActionc                sb   |  dd¡|  dd¡rtnt x(|D ]  fdd}| j |¡ q&W | jpZ|  dd¡| _| S )aÓ  Add a boolean predicate function to expression's list of parse actions. See 
        L{I{setParseAction}<setParseAction>} for function call signatures. Unlike C{setParseAction}, 
        functions passed to C{addCondition} need to return boolean success/fail of the condition.

        Optional keyword arguments:
         - message = define a custom message to be used in the raised exception
         - fatal   = if True, will raise ParseFatalException to stop parsing immediately; otherwise will raise ParseException
         
        Example::
            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
            year_int = integer.copy()
            year_int.addCondition(lambda toks: toks[0] >= 2000, message="Only support years 2000 and later")
            date_str = year_int + '/' + integer + '/' + integer

            result = date_str.parseString("1999/12/31")  # -> Exception: Only support years 2000 and later (at char 0), (line:1, col:1)
        Úmessagezfailed user-defined conditionÚfatalFc                s$   t t| ||s  | |d S )N)r  rs  )r   rX  ru   )Úexc_typeÚfnr¡   rv   rw   Úpa  s    z&ParserElement.addCondition.<locals>.par  )rá   r!   r   ry  r  r  )r¥   r¡  r  r§  rv   )r¥  r¦  r¡   rw   ÚaddConditionû  s    
zParserElement.addConditionc             C   s
   || _ | S )a  Define action to perform if parsing fails at this expression.
           Fail acton fn is a callable function that takes the arguments
           C{fn(s,loc,expr,err)} where:
            - s = string being parsed
            - loc = location where expression match was attempted and failed
            - expr = the parse expression that failed
            - err = the exception thrown
           The function returns no value.  It may throw C{L{ParseFatalException}}
           if it is desired to stop parsing immediately.)rz  )r¥   r¦  rv   rv   rw   ÚsetFailAction  s    
zParserElement.setFailActionc          	   C   sZ   d}xP|rTd}xB| j D ]8}yx| ||¡\}}d}qW W q tk
rL   Y qX qW qW |S )NTF)r  r  r   )r¥   rO  r    Ú
exprsFoundÚeÚdummyrv   rv   rw   Ú_skipIgnorables#  s    zParserElement._skipIgnorablesc             C   sL   | j r|  ||¡}| jrH| j}t|}x ||k rF|| |krF|d7 }q(W |S )Nr   )r  r­  r~  r  ræ   )r¥   rO  r    ÚwtÚinstrlenrv   rv   rw   ÚpreParse0  s    zParserElement.preParsec             C   s   |g fS )Nrv   )r¥   rO  r    r  rv   rv   rw   Ú	parseImpl<  s    zParserElement.parseImplc             C   s   |S )Nrv   )r¥   rO  r    Ú	tokenlistrv   rv   rw   Ú	postParse?  s    zParserElement.postParsec          
   C   sÖ  | j }|s| jrì| jd r,| jd |||  |rD| jrD|  ||¡}n|}|}yDy|  |||¡\}}W n( tk
r   t|t|| j	| Y nX W nX t
k
rè }	 z:| jd rÀ| jd ||| |	 | jrÖ|  ||| |	¡  W d d }	~	X Y nX n|r| jr|  ||¡}n|}|}| js&|t|krjy|  |||¡\}}W n* tk
rf   t|t|| j	| Y nX n|  |||¡\}}|  |||¡}t|| j| j| jd}
| jr¦|s¶| jr¦|rXyRxL| jD ]B}||||
}|d k	rÆt|| j| joüt|ttf| jd}
qÆW W nF t
k
rT }	 z&| jd rB| jd ||| |	  W d d }	~	X Y nX nNxL| jD ]B}||||
}|d k	r`t|| j| jot|ttf| jd}
q`W |rÎ| jd rÎ| jd |||| |
 ||
fS )Nr   rq   )rÌ   rÍ   r   )r  rz  r  r  r°  r±  rÝ   r   ræ   r  r   r  r³  r"   r|  r}  r  ry  r  ry   rÔ   )r¥   rO  r    r  r  Ú	debuggingÚprelocÚtokensStartÚtokensÚerrÚ	retTokensr¦  rv   rv   rw   Ú_parseNoCacheC  sp    





zParserElement._parseNoCachec             C   s>   y| j ||ddd S  tk
r8   t||| j| Y nX d S )NF)r  r   )r  r!   r   r  )r¥   rO  r    rv   rv   rw   ÚtryParse  s    zParserElement.tryParsec          	   C   s2   y|   ||¡ W n ttfk
r(   dS X dS d S )NFT)r»  r   rÝ   )r¥   rO  r    rv   rv   rw   ÚcanParseNext  s
    zParserElement.canParseNextc               @   s   e Zd Zdd ZdS )zParserElement._UnboundedCachec                sd   i  t   | _ fdd} fdd} fdd}t || ¡| _t || ¡| _t || ¡| _d S )Nc                s      |¡S )N)rá   )r¥   r	  )ÚcacheÚnot_in_cacherv   rw   rá     s    z3ParserElement._UnboundedCache.__init__.<locals>.getc                s   | |< d S )Nrv   )r¥   r	  rð   )r½  rv   rw   Úset¡  s    z3ParserElement._UnboundedCache.__init__.<locals>.setc                s      ¡  d S )N)r  )r¥   )r½  rv   rw   r  ¤  s    z5ParserElement._UnboundedCache.__init__.<locals>.clear)rÇ   r¾  ÚtypesÚ
MethodTyperá   r¿  r  )r¥   rá   r¿  r  rv   )r½  r¾  rw   r§     s    z&ParserElement._UnboundedCache.__init__N)r   r   r   r§   rv   rv   rv   rw   Ú_UnboundedCache  s   rÂ  Nc               @   s   e Zd Zdd ZdS )zParserElement._FifoCachec                sh   t   | _t   fdd} fdd} fdd}t || ¡| _t || ¡| _t || ¡| _d S )Nc                s      |¡S )N)rá   )r¥   r	  )r½  r¾  rv   rw   rá   ²  s    z.ParserElement._FifoCache.__init__.<locals>.getc                s"   | |< t  kr  d¡ d S )NF)ræ   Úpopitem)r¥   r	  rð   )r½  Úsizerv   rw   r¿  µ  s    z.ParserElement._FifoCache.__init__.<locals>.setc                s      ¡  d S )N)r  )r¥   )r½  rv   rw   r  º  s    z0ParserElement._FifoCache.__init__.<locals>.clear)rÇ   r¾  Ú_OrderedDictrÀ  rÁ  rá   r¿  r  )r¥   rÄ  rá   r¿  r  rv   )r½  r¾  rÄ  rw   r§   ­  s    z!ParserElement._FifoCache.__init__N)r   r   r   r§   rv   rv   rv   rw   Ú
_FifoCache¬  s   rÆ  c               @   s   e Zd Zdd ZdS )zParserElement._FifoCachec                sv   t   | _i  t g ¡ fdd} fdd} fdd}t || ¡| _t || ¡| _t || ¡| _d S )Nc                s      |¡S )N)rá   )r¥   r	  )r½  r¾  rv   rw   rá   É  s    z.ParserElement._FifoCache.__init__.<locals>.getc                s2   | |< t  kr$   ¡ d ¡  |¡ d S )N)ræ   r  Úpopleftr  )r¥   r	  rð   )r½  Úkey_fiforÄ  rv   rw   r¿  Ì  s    z.ParserElement._FifoCache.__init__.<locals>.setc                s      ¡    ¡  d S )N)r  )r¥   )r½  rÈ  rv   rw   r  Ò  s    z0ParserElement._FifoCache.__init__.<locals>.clear)	rÇ   r¾  ÚcollectionsÚdequerÀ  rÁ  rá   r¿  r  )r¥   rÄ  rá   r¿  r  rv   )r½  rÈ  r¾  rÄ  rw   r§   Ã  s    z!ParserElement._FifoCache.__init__N)r   r   r   r§   rv   rv   rv   rw   rÆ  Â  s   r   c             C   sü   d\}}| ||||f}t jÖ t j}| |¡}	|	|jkrºt j|  d7  < y|  ||||¡}	W n8 tk
r }
 z| ||
j	|
j
 ¡  W d d }
~
X Y qîX | ||	d |	d  ¡ f¡ |	S n4t j|  d7  < t|	trÚ|	|	d |	d  ¡ fS W d Q R X d S )N)r   r   r   r   )r$   Úpackrat_cache_lockÚpackrat_cacherá   r¾  Úpackrat_cache_statsrº  r   r¿  rl  r¤   rÚ   ry   ro  )r¥   rO  r    r  r  ÚHITÚMISSÚlookupr½  rð   r©   rv   rv   rw   Ú_parseCacheá  s$    


zParserElement._parseCachec               C   s(   t j ¡  dgtt j t jd d < d S )Nr   )r$   rÌ  r  ræ   rÍ  rv   rv   rv   rw   Ú
resetCacheú  s    
zParserElement.resetCacheé   c             C   s8   t js4dt _| dkr t  ¡ t _nt  | ¡t _t jt _dS )a  Enables "packrat" parsing, which adds memoizing to the parsing logic.
           Repeated parse attempts at the same string location (which happens
           often in many complex grammars) can immediately return a cached value,
           instead of re-executing parsing/validating code.  Memoizing is done of
           both valid results and parsing exceptions.
           
           Parameters:
            - cache_size_limit - (default=C{128}) - if an integer value is provided
              will limit the size of the packrat cache; if None is passed, then
              the cache size will be unbounded; if 0 is passed, the cache will
              be effectively disabled.
            
           This speedup may break existing programs that use parse actions that
           have side-effects.  For this reason, packrat parsing is disabled when
           you first import pyparsing.  To activate the packrat feature, your
           program must call the class method C{ParserElement.enablePackrat()}.  If
           your program uses C{psyco} to "compile as you go", you must call
           C{enablePackrat} before calling C{psyco.full()}.  If you do not do this,
           Python will crash.  For best results, call C{enablePackrat()} immediately
           after importing pyparsing.
           
           Example::
               import pyparsing
               pyparsing.ParserElement.enablePackrat()
        TN)r$   Ú_packratEnabledrÂ  rÌ  rÆ  rÑ  r  )Úcache_size_limitrv   rv   rw   ÚenablePackrat   s    zParserElement.enablePackratc          
   C   s²   t  ¡  | js|  ¡  x| jD ]}| ¡  qW | js<| ¡ }y<|  |d¡\}}|rv|  ||¡}t	 t
  }| ||¡ W n0 tk
r¨ } zt jr n|W dd}~X Y nX |S dS )aB  
        Execute the parse expression with the given string.
        This is the main interface to the client code, once the complete
        expression has been built.

        If you want the grammar to require that the entire input string be
        successfully parsed, then set C{parseAll} to True (equivalent to ending
        the grammar with C{L{StringEnd()}}).

        Note: C{parseString} implicitly calls C{expandtabs()} on the input string,
        in order to report proper column numbers in parse actions.
        If the input string contains tabs and
        the grammar uses parse actions that use the C{loc} argument to index into the
        string being parsed, you can ensure you have a consistent view of the input
        string by:
         - calling C{parseWithTabs} on your grammar before calling C{parseString}
           (see L{I{parseWithTabs}<parseWithTabs>})
         - define your parse action using the full C{(s,loc,toks)} signature, and
           reference the input string using the parse action's C{s} argument
         - explictly expand the tabs in your input string before calling
           C{parseString}
        
        Example::
            Word('a').parseString('aaaaabaaa')  # -> ['aaaaa']
            Word('a').parseString('aaaaabaaa', parseAll=True)  # -> Exception: Expected end of text
        r   N)r$   rÒ  r  Ú
streamliner  r  Ú
expandtabsr  r°  r   r)   r   Úverbose_stacktrace)r¥   rO  ÚparseAllr«  r    r·  ÚserV  rv   rv   rw   ÚparseString#  s$    zParserElement.parseStringc          
   c   sB  | j s|  ¡  x| jD ]}| ¡  qW | js8t| ¡ }t|}d}| j}| j}t	 
¡  d}	y¬x¦||kr|	|k ry |||}
|||
dd\}}W n tk
r°   |
d }Y q`X ||krú|	d7 }	||
|fV  |rô|||}||krê|}qø|d7 }n|}q`|
d }q`W W n4 tk
r< } zt	jr( n|W dd}~X Y nX dS )a  
        Scan the input string for expression matches.  Each match will return the
        matching tokens, start location, and end location.  May be called with optional
        C{maxMatches} argument, to clip scanning after 'n' matches are found.  If
        C{overlap} is specified, then overlapping matches will be reported.

        Note that the start and end locations are reported relative to the string
        being parsed.  See L{I{parseString}<parseString>} for more information on parsing
        strings with embedded tabs.

        Example::
            source = "sldjf123lsdjjkf345sldkjf879lkjsfd987"
            print(source)
            for tokens,start,end in Word(alphas).scanString(source):
                print(' '*start + '^'*(end-start))
                print(' '*start + tokens[0])
        
        prints::
        
            sldjf123lsdjjkf345sldkjf879lkjsfd987
            ^^^^^
            sldjf
                    ^^^^^^^
                    lsdjjkf
                              ^^^^^^
                              sldkjf
                                       ^^^^^^
                                       lkjsfd
        r   F)r  r   N)r  r×  r  r  r   rØ  ræ   r°  r  r$   rÒ  r   r   rÙ  )r¥   rO  Ú
maxMatchesÚoverlapr«  r¯  r    Ú
preparseFnÚparseFnÚmatchesrµ  ÚnextLocr·  ÚnextlocrV  rv   rv   rw   Ú
scanStringU  sB    


zParserElement.scanStringc          
   C   sâ   g }d}d| _ yxh|  |¡D ]Z\}}}| ||| ¡ |rrt|trT|| ¡ 7 }nt|trh||7 }n
| |¡ |}qW | ||d ¡ dd |D }d tt	t
|¡S  tk
rÜ } ztjrÈ n|W dd}~X Y nX dS )af  
        Extension to C{L{scanString}}, to modify matching text with modified tokens that may
        be returned from a parse action.  To use C{transformString}, define a grammar and
        attach a parse action to it that modifies the returned token list.
        Invoking C{transformString()} on a target string will then scan for matches,
        and replace the matched text patterns according to the logic in the parse
        action.  C{transformString()} returns the resulting transformed string.
        
        Example::
            wd = Word(alphas)
            wd.setParseAction(lambda toks: toks[0].title())
            
            print(wd.transformString("now is the winter of our discontent made glorious summer by this sun of york."))
        Prints::
            Now Is The Winter Of Our Discontent Made Glorious Summer By This Sun Of York.
        r   TNc             S   s   g | ]}|r|qS rv   rv   )r   Úorv   rv   rw   rß   ¾  s    z1ParserElement.transformString.<locals>.<listcomp>r   )r  rä  r  ry   r"   rÌ   rÔ   r²   r   r   Ú_flattenr   r$   rÙ  )r¥   rO  r!  ÚlastEru   r   r«  rV  rv   rv   rw   r     s(    



zParserElement.transformStringc          
   C   sP   yt dd |  ||¡D S  tk
rJ } ztjr6 n|W dd}~X Y nX dS )a~  
        Another extension to C{L{scanString}}, simplifying the access to the tokens found
        to match the given parse expression.  May be called with optional
        C{maxMatches} argument, to clip searching after 'n' matches are found.
        
        Example::
            # a capitalized word starts with an uppercase letter, followed by zero or more lowercase letters
            cap_word = Word(alphas.upper(), alphas.lower())
            
            print(cap_word.searchString("More than Iron, more than Lead, more than Gold I need Electricity"))
        prints::
            ['More', 'Iron', 'Lead', 'Gold', 'I']
        c             S   s   g | ]\}}}|qS rv   rv   )r   ru   r   r«  rv   rv   rw   rß   Ö  s    z.ParserElement.searchString.<locals>.<listcomp>N)r"   rä  r   r$   rÙ  )r¥   rO  rÝ  rV  rv   rv   rw   ÚsearchStringÇ  s    zParserElement.searchStringc       	      c   sX   d}d}x<| j ||dD ]*\}}}||| V  |r>|d V  |}qW ||d V  dS )a[  
        Generator method to split a string using the given expression as a separator.
        May be called with optional C{maxsplit} argument, to limit the number of splits;
        and the optional C{includeSeparators} argument (default=C{False}), if the separating
        matching text should be included in the split results.
        
        Example::        
            punc = oneOf(list(".,;:/-!?"))
            print(list(punc.split("This, this?, this sentence, is badly punctuated!")))
        prints::
            ['This', ' this', '', ' this sentence', ' is badly punctuated', '']
        r   )rÝ  N)rä  )	r¥   rO  ÚmaxsplitÚincludeSeparatorsÚsplitsÚlastru   r   r«  rv   rv   rw   r   Þ  s    
zParserElement.splitc             C   sF   t |trt |¡}t |ts:tjdt| tdd dS t| |gS )a  
        Implementation of + operator - returns C{L{And}}. Adding strings to a ParserElement
        converts them to L{Literal}s by default.
        
        Example::
            greet = Word(alphas) + "," + Word(alphas) + "!"
            hello = "Hello, World!"
            print (hello, "->", greet.parseString(hello))
        Prints::
            Hello, World! -> ['Hello', ',', 'World', '!']
        z4Cannot combine element of type %s with ParserElementrq   )Ú
stacklevelN)	ry   rÙ   r$   rw  ÚwarningsÚwarnr¹   ÚSyntaxWarningr   )r¥   r  rv   rv   rw   r  ô  s    



zParserElement.__add__c             C   sB   t |trt |¡}t |ts:tjdt| tdd dS ||  S )z]
        Implementation of + operator when left operand is not a C{L{ParserElement}}
        z4Cannot combine element of type %s with ParserElementrq   )rí  N)ry   rÙ   r$   rw  rî  rï  r¹   rð  )r¥   r  rv   rv   rw   r    s    



zParserElement.__radd__c             C   sL   t |trt |¡}t |ts:tjdt| tdd dS t| t 	¡ |gS )zQ
        Implementation of - operator, returns C{L{And}} with error stop
        z4Cannot combine element of type %s with ParserElementrq   )rí  N)
ry   rÙ   r$   rw  rî  rï  r¹   rð  r   Ú
_ErrorStop)r¥   r  rv   rv   rw   Ú__sub__  s    



zParserElement.__sub__c             C   sB   t |trt |¡}t |ts:tjdt| tdd dS ||  S )z]
        Implementation of - operator when left operand is not a C{L{ParserElement}}
        z4Cannot combine element of type %s with ParserElementrq   )rí  N)ry   rÙ   r$   rw  rî  rï  r¹   rð  )r¥   r  rv   rv   rw   Ú__rsub__   s    



zParserElement.__rsub__c                s¸  t |tr|d }}nät |trì|d dd }|d dkrHd|d f}t |d tr |d dkr |d dkrvtS |d dkrtS |d  t S qút |d trÎt |d trÎ|\}}||8 }qútdt|d t|d ntdt||dk rtd|dk rtd	||  kr6dkrBn ntd
|r fdd |r|dkrt | }ntg|  | }n |}n|dkr¦}ntg| }|S )aå  
        Implementation of * operator, allows use of C{expr * 3} in place of
        C{expr + expr + expr}.  Expressions may also me multiplied by a 2-integer
        tuple, similar to C{{min,max}} multipliers in regular expressions.  Tuples
        may also include C{None} as in:
         - C{expr*(n,None)} or C{expr*(n,)} is equivalent
              to C{expr*n + L{ZeroOrMore}(expr)}
              (read as "at least n instances of C{expr}")
         - C{expr*(None,n)} is equivalent to C{expr*(0,n)}
              (read as "0 to n instances of C{expr}")
         - C{expr*(None,None)} is equivalent to C{L{ZeroOrMore}(expr)}
         - C{expr*(1,None)} is equivalent to C{L{OneOrMore}(expr)}

        Note that C{expr*(None,n)} does not raise an exception if
        more than n exprs exist in the input stream; that is,
        C{expr*(None,n)} does not enforce a maximum number of expr
        occurrences.  If this behavior is desired, then write
        C{expr*(None,n) + ~expr}
        r   )NNNrq   r   z7cannot multiply 'ParserElement' and ('%s','%s') objectsz0cannot multiply 'ParserElement' and '%s' objectsz/cannot multiply ParserElement by negative valuez@second tuple value must be greater or equal to first tuple valuez+cannot multiply ParserElement by 0 or (0,0)c                s(   | dkrt  | d  S t S d S )Nr   )r   )Ún)ÚmakeOptionalListr¥   rv   rw   rõ  ]  s    z/ParserElement.__mul__.<locals>.makeOptionalList)	ry   rt   Útupler2   r   rÜ   r¹   Ú
ValueErrorr   )r¥   r  ÚminElementsÚoptElementsr   rv   )rõ  r¥   rw   Ú__mul__,  sD    







zParserElement.__mul__c             C   s
   |   |¡S )N)rú  )r¥   r  rv   rv   rw   Ú__rmul__p  s    zParserElement.__rmul__c             C   sF   t |trt |¡}t |ts:tjdt| tdd dS t| |gS )zI
        Implementation of | operator - returns C{L{MatchFirst}}
        z4Cannot combine element of type %s with ParserElementrq   )rí  N)	ry   rÙ   r$   rw  rî  rï  r¹   rð  r   )r¥   r  rv   rv   rw   Ú__or__s  s    



zParserElement.__or__c             C   sB   t |trt |¡}t |ts:tjdt| tdd dS || B S )z]
        Implementation of | operator when left operand is not a C{L{ParserElement}}
        z4Cannot combine element of type %s with ParserElementrq   )rí  N)ry   rÙ   r$   rw  rî  rï  r¹   rð  )r¥   r  rv   rv   rw   Ú__ror__  s    



zParserElement.__ror__c             C   sF   t |trt |¡}t |ts:tjdt| tdd dS t| |gS )zA
        Implementation of ^ operator - returns C{L{Or}}
        z4Cannot combine element of type %s with ParserElementrq   )rí  N)	ry   rÙ   r$   rw  rî  rï  r¹   rð  r   )r¥   r  rv   rv   rw   Ú__xor__  s    



zParserElement.__xor__c             C   sB   t |trt |¡}t |ts:tjdt| tdd dS || A S )z]
        Implementation of ^ operator when left operand is not a C{L{ParserElement}}
        z4Cannot combine element of type %s with ParserElementrq   )rí  N)ry   rÙ   r$   rw  rî  rï  r¹   rð  )r¥   r  rv   rv   rw   Ú__rxor__  s    



zParserElement.__rxor__c             C   sF   t |trt |¡}t |ts:tjdt| tdd dS t| |gS )zC
        Implementation of & operator - returns C{L{Each}}
        z4Cannot combine element of type %s with ParserElementrq   )rí  N)	ry   rÙ   r$   rw  rî  rï  r¹   rð  r   )r¥   r  rv   rv   rw   Ú__and__£  s    



zParserElement.__and__c             C   sB   t |trt |¡}t |ts:tjdt| tdd dS || @ S )z]
        Implementation of & operator when left operand is not a C{L{ParserElement}}
        z4Cannot combine element of type %s with ParserElementrq   )rí  N)ry   rÙ   r$   rw  rî  rï  r¹   rð  )r¥   r  rv   rv   rw   Ú__rand__¯  s    



zParserElement.__rand__c             C   s   t | S )zE
        Implementation of ~ operator - returns C{L{NotAny}}
        )r   )r¥   rv   rv   rw   Ú
__invert__»  s    zParserElement.__invert__c             C   s   |dk	r|   |¡S |  ¡ S dS )a  
        Shortcut for C{L{setResultsName}}, with C{listAllMatches=False}.
        
        If C{name} is given with a trailing C{'*'} character, then C{listAllMatches} will be
        passed as C{True}.
           
        If C{name} is omitted, same as calling C{L{copy}}.

        Example::
            # these are equivalent
            userdata = Word(alphas).setResultsName("name") + Word(nums+"-").setResultsName("socsecno")
            userdata = Word(alphas)("name") + Word(nums+"-")("socsecno")             
        N)r  rÚ   )r¥   rË   rv   rv   rw   Ú__call__Á  s    
zParserElement.__call__c             C   s   t | S )z
        Suppresses the output of this C{ParserElement}; useful to keep punctuation from
        cluttering up returned output.
        )r+   )r¥   rv   rv   rw   ÚsuppressÔ  s    zParserElement.suppressc             C   s
   d| _ | S )a  
        Disables the skipping of whitespace before matching the characters in the
        C{ParserElement}'s defined pattern.  This is normally only used internally by
        the pyparsing module, but may be needed in some whitespace-sensitive grammars.
        F)r~  )r¥   rv   rv   rw   ÚleaveWhitespaceÛ  s    zParserElement.leaveWhitespacec             C   s   d| _ || _d| _| S )z8
        Overrides the default whitespace chars
        TF)r~  r  r  )r¥   ru  rv   rv   rw   ÚsetWhitespaceCharsä  s    z ParserElement.setWhitespaceCharsc             C   s
   d| _ | S )zé
        Overrides default behavior to expand C{<TAB>}s to spaces before parsing the input string.
        Must be called before C{parseString} when the input grammar contains elements that
        match C{<TAB>} characters.
        T)r  )r¥   rv   rv   rw   ÚparseWithTabsí  s    zParserElement.parseWithTabsc             C   sL   t |trt|}t |tr4|| jkrH| j |¡ n| j t| ¡ ¡ | S )a×  
        Define expression to be ignored (e.g., comments) while doing pattern
        matching; may be called repeatedly, to define multiple comment or other
        ignorable patterns.
        
        Example::
            patt = OneOrMore(Word(alphas))
            patt.parseString('ablaj /* comment */ lskjd') # -> ['ablaj']
            
            patt.ignore(cStyleComment)
            patt.parseString('ablaj /* comment */ lskjd') # -> ['ablaj', 'lskjd']
        )ry   rÙ   r+   r  r  rÚ   )r¥   r  rv   rv   rw   Úignoreö  s    


zParserElement.ignorec             C   s"   |pt |pt|ptf| _d| _| S )zT
        Enable display of debugging messages while doing pattern matching.
        T)rQ  rU  rW  r  r  )r¥   ÚstartActionÚsuccessActionÚexceptionActionrv   rv   rw   ÚsetDebugActions  s
    zParserElement.setDebugActionsc             C   s   |r|   ttt¡ nd| _| S )a  
        Enable display of debugging messages while doing pattern matching.
        Set C{flag} to True to enable, False to disable.

        Example::
            wd = Word(alphas).setName("alphaword")
            integer = Word(nums).setName("numword")
            term = wd | integer
            
            # turn on debugging for wd
            wd.setDebug()

            OneOrMore(term).parseString("abc 123 xyz 890")
        
        prints::
            Match alphaword at loc 0(1,1)
            Matched alphaword -> ['abc']
            Match alphaword at loc 3(1,4)
            Exception raised:Expected alphaword (at char 4), (line:1, col:5)
            Match alphaword at loc 7(1,8)
            Matched alphaword -> ['xyz']
            Match alphaword at loc 11(1,12)
            Exception raised:Expected alphaword (at char 12), (line:1, col:13)
            Match alphaword at loc 15(1,16)
            Exception raised:Expected alphaword (at char 15), (line:1, col:16)

        The output shown is that produced by the default debug actions - custom debug actions can be
        specified using L{setDebugActions}. Prior to attempting
        to match the C{wd} expression, the debugging message C{"Match <exprname> at loc <n>(<line>,<col>)"}
        is shown. Then if the parse succeeds, a C{"Matched"} message is shown, or an C{"Exception raised"}
        message is shown. Also note the use of L{setName} to assign a human-readable name to the expression,
        which makes debugging and exception messages easier to understand - for instance, the default
        name created for the C{Word} expression without calling C{setName} is C{"W:(ABCD...)"}.
        F)r  rQ  rU  rW  r  )r¥   Úflagrv   rv   rw   ÚsetDebug  s    #zParserElement.setDebugc             C   s   | j S )N)rË   )r¥   rv   rv   rw   r¯   @  s    zParserElement.__str__c             C   s   t | S )N)r   )r¥   rv   rv   rw   r°   C  s    zParserElement.__repr__c             C   s   d| _ d | _| S )NT)r  r{  )r¥   rv   rv   rw   r×  F  s    zParserElement.streamlinec             C   s   d S )Nrv   )r¥   r¾   rv   rv   rw   ÚcheckRecursionK  s    zParserElement.checkRecursionc             C   s   |   g ¡ dS )zj
        Check defined expressions for valid structure, check for infinite recursive definitions.
        N)r  )r¥   ÚvalidateTracerv   rv   rw   ÚvalidateN  s    zParserElement.validatec             C   s   y|  ¡ }W n2 tk
r>   t|d}|  ¡ }W dQ R X Y nX y|  ||¡S  tk
r| } ztjrh n|W dd}~X Y nX dS )zÐ
        Execute the parse expression on the given file or filename.
        If a filename is specified (instead of a file object),
        the entire file is opened, read, and closed before parsing.
        ÚrN)Úreadr¬   ÚopenrÜ  r   r$   rÙ  )r¥   Úfile_or_filenamerÚ  Úfile_contentsÚfrV  rv   rv   rw   Ú	parseFileT  s    zParserElement.parseFilec                sH   t |tr"| |kp t| t|kS t |tr6|  |¡S tt| |kS d S )N)ry   r$   ÚvarsrÙ   rá  Úsuper)r¥   r  )rl  rv   rw   Ú__eq__h  s
    


zParserElement.__eq__c             C   s
   | |k S )Nrv   )r¥   r  rv   rv   rw   Ú__ne__p  s    zParserElement.__ne__c             C   s   t t| S )N)ÚhashÚid)r¥   rv   rv   rw   Ú__hash__s  s    zParserElement.__hash__c             C   s   | |kS )Nrv   )r¥   r  rv   rv   rw   Ú__req__v  s    zParserElement.__req__c             C   s
   | |k S )Nrv   )r¥   r  rv   rv   rw   Ú__rne__y  s    zParserElement.__rne__c             C   s0   y| j t||d dS  tk
r*   dS X dS )aÓ  
        Method for quick testing of a parser against a test string. Good for simple 
        inline microtests of sub expressions while building up larger parser.
           
        Parameters:
         - testString - to test against this expression for a match
         - parseAll - (default=C{True}) - flag to pass to C{L{parseString}} when running tests
            
        Example::
            expr = Word(nums)
            assert expr.matches("100")
        )rÚ  TFN)rÜ  r   r   )r¥   Ú
testStringrÚ  rv   rv   rw   rá  |  s
    zParserElement.matchesú#c             C   sø  t |tr"tttj| ¡  ¡ }t |tr4t|}g }g }d}	x¬|D ]¢}
|dk	rb| 	|
d¡sj|rv|
sv| 
|
¡ qH|
s|qHd |¡|
g}g }y:|
 dd¡}
| j|
|d}| 
|j|d¡ |	oÄ| }	W nð tk
rv } zt |trêdnd	}d|
kr.| 
t|j|
¡ | 
d
t|j|
d  d | ¡ n| 
d
|j d | ¡ | 
dt| ¡ |	o`|}	|}W dd}~X Y nD tk
r¸ } z$| 
dt| ¡ |	o¢|}	|}W dd}~X Y nX |rÞ|rÐ| 
d	¡ td |¡ | 
|
|f¡ qHW |	|fS )a3  
        Execute the parse expression on a series of test strings, showing each
        test, the parsed results or where the parse failed. Quick and easy way to
        run a parse expression against a list of sample strings.
           
        Parameters:
         - tests - a list of separate test strings, or a multiline string of test strings
         - parseAll - (default=C{True}) - flag to pass to C{L{parseString}} when running tests           
         - comment - (default=C{'#'}) - expression for indicating embedded comments in the test 
              string; pass None to disable comment filtering
         - fullDump - (default=C{True}) - dump results as list followed by results names in nested outline;
              if False, only dump nested list
         - printResults - (default=C{True}) prints test output to stdout
         - failureTests - (default=C{False}) indicates if these tests are expected to fail parsing

        Returns: a (success, results) tuple, where success indicates that all tests succeeded
        (or failed if C{failureTests} is True), and the results contain a list of lines of each 
        test's output
        
        Example::
            number_expr = pyparsing_common.number.copy()

            result = number_expr.runTests('''
                # unsigned integer
                100
                # negative integer
                -100
                # float with scientific notation
                6.02e23
                # integer with scientific notation
                1e-12
                ''')
            print("Success" if result[0] else "Failed!")

            result = number_expr.runTests('''
                # stray character
                100Z
                # missing leading digit before '.'
                -.100
                # too many '.'
                3.14.159
                ''', failureTests=True)
            print("Success" if result[0] else "Failed!")
        prints::
            # unsigned integer
            100
            [100]

            # negative integer
            -100
            [-100]

            # float with scientific notation
            6.02e23
            [6.02e+23]

            # integer with scientific notation
            1e-12
            [1e-12]

            Success
            
            # stray character
            100Z
               ^
            FAIL: Expected end of text (at char 3), (line:1, col:4)

            # missing leading digit before '.'
            -.100
            ^
            FAIL: Expected {real number with scientific notation | real number | signed integer} (at char 0), (line:1, col:1)

            # too many '.'
            3.14.159
                ^
            FAIL: Expected end of text (at char 4), (line:1, col:5)

            Success

        Each test string must be on a single line. If you want to test a string that spans multiple
        lines, create a test like this::

            expr.runTest(r"this is a test\n of strings that spans \n 3 lines")
        
        (Note that this is a raw string literal, you must include the leading 'r'.)
        TNFr'  z\n)rÚ  )r?  z(FATAL)r   ú r   ú^zFAIL: zFAIL-EXCEPTION: )ry   rÙ   rÔ   r   r{   r³   ÚrstripÚ
splitlinesr   rá  r  r²   r   rÜ  r<  r   r!   rG   r    r9   ro  rN  )r¥   ÚtestsrÚ  ÚcommentÚfullDumpÚprintResultsÚfailureTestsÚ
allResultsÚcommentsÚsuccessru   r!  Úresultr©   r¤  rV  rv   rv   rw   ÚrunTests  sN    W



$


zParserElement.runTests)F)F)T)T)TT)TT)rÓ  )F)N)T)F)T)Tr#  TTF)Or   r   r   r»   rt  rÙ  Ústaticmethodrv  rx  r§   rÚ   r  r  r  r   r¢  r¨  r©  r­  r°  r±  r³  rº  r»  r¼  rÇ   rÂ  rÅ  rÆ  rÌ  r   rË  rÍ  rÑ  r  rÒ  rÔ  rÖ  rÜ  Ú_MAX_INTrä  r   rè  r   r  r  rò  ró  rú  rû  rü  rý  rþ  rÿ  r   r  r  r  r  r  r  r  r  r  r  r¯   r°   r×  r  r  r  r  r  r  r   r!  rá  r1  Ú__classcell__rv   rv   )rl  rw   r$   8  s   


&


H
"
2G+D
			

)

c                   s    e Zd ZdZ fddZ  ZS )r,   zT
    Abstract C{ParserElement} subclass, for defining atomic matching patterns.
    c                s   t t| jdd d S )NF)r  )r  r,   r§   )r¥   )rl  rv   rw   r§   	  s    zToken.__init__)r   r   r   r»   r§   r4  rv   rv   )rl  rw   r,   	  s   c                   s    e Zd ZdZ fddZ  ZS )r   z,
    An empty token, will always match.
    c                s$   t t|  ¡  d| _d| _d| _d S )Nr   TF)r  r   r§   rË   r  r  )r¥   )rl  rv   rw   r§   	  s    zEmpty.__init__)r   r   r   r»   r§   r4  rv   rv   )rl  rw   r   	  s   c                   s*   e Zd ZdZ fddZdddZ  ZS )r   z(
    A token that will never match.
    c                s*   t t|  ¡  d| _d| _d| _d| _d S )Nr   TFzUnmatchable token)r  r   r§   rË   r  r  r  )r¥   )rl  rv   rw   r§   *	  s
    zNoMatch.__init__Tc             C   s   t ||| j| d S )N)r   r  )r¥   rO  r    r  rv   rv   rw   r±  1	  s    zNoMatch.parseImpl)T)r   r   r   r»   r§   r±  r4  rv   rv   )rl  rw   r   &	  s   c                   s*   e Zd ZdZ fddZdddZ  ZS )r   aÐ  
    Token to exactly match a specified string.
    
    Example::
        Literal('blah').parseString('blah')  # -> ['blah']
        Literal('blah').parseString('blahfooblah')  # -> ['blah']
        Literal('blah').parseString('bla')  # -> Exception: Expected "blah"
    
    For case-insensitive matching, use L{CaselessLiteral}.
    
    For keyword matching (force word break before and after the matched string),
    use L{Keyword} or L{CaselessKeyword}.
    c                s   t t|  ¡  || _t|| _y|d | _W n* tk
rV   tj	dt
dd t| _Y nX dt| j | _d| j | _d| _d| _d S )Nr   z2null string passed to Literal; use Empty() insteadrq   )rí  z"%s"z	Expected F)r  r   r§   Úmatchræ   ÚmatchLenÚfirstMatchCharrÝ   rî  rï  rð  r   rl  r   rË   r  r  r  )r¥   ÚmatchString)rl  rv   rw   r§   C	  s    

zLiteral.__init__Tc             C   sJ   || | j kr6| jdks&| | j|¡r6|| j | jfS t||| j| d S )Nr   )r7  r6  Ú
startswithr5  r   r  )r¥   rO  r    r  rv   rv   rw   r±  V	  s    zLiteral.parseImpl)T)r   r   r   r»   r§   r±  r4  rv   rv   )rl  rw   r   5	  s   c                   sL   e Zd ZdZed Zd fdd	Zddd	Z fd
dZe	dd Z
  ZS )r   a\  
    Token to exactly match a specified string as a keyword, that is, it must be
    immediately followed by a non-keyword character.  Compare with C{L{Literal}}:
     - C{Literal("if")} will match the leading C{'if'} in C{'ifAndOnlyIf'}.
     - C{Keyword("if")} will not; it will only match the leading C{'if'} in C{'if x=1'}, or C{'if(y==2)'}
    Accepts two optional constructor arguments in addition to the keyword string:
     - C{identChars} is a string of characters that would be valid identifier characters,
          defaulting to all alphanumerics + "_" and "$"
     - C{caseless} allows case-insensitive matching, default is C{False}.
       
    Example::
        Keyword("start").parseString("start")  # -> ['start']
        Keyword("start").parseString("starting")  # -> Exception

    For case-insensitive matching, use L{CaselessKeyword}.
    z_$NFc                s®   t t|  ¡  |d krtj}|| _t|| _y|d | _W n$ tk
r^   t	j
dtdd Y nX d| j | _d| j | _d| _d| _|| _|r | ¡ | _| ¡ }t|| _d S )Nr   z2null string passed to Keyword; use Empty() insteadrq   )rí  z"%s"z	Expected F)r  r   r§   ÚDEFAULT_KEYWORD_CHARSr5  ræ   r6  r7  rÝ   rî  rï  rð  rË   r  r  r  ÚcaselessÚupperÚcaselessmatchr¿  Ú
identChars)r¥   r8  r>  r;  )rl  rv   rw   r§   q	  s&    

zKeyword.__init__Tc             C   s  | j r||||| j   ¡ | jkrò|t|| j ksL||| j   ¡ | jkrò|dksj||d   ¡ | jkrò|| j | jfS nv|| | jkrò| jdks¢| | j|¡rò|t|| j ksÈ||| j  | jkrò|dksâ||d  | jkrò|| j | jfS t	||| j
| d S )Nr   r   )r;  r6  r<  r=  ræ   r>  r5  r7  r9  r   r  )r¥   rO  r    r  rv   rv   rw   r±  	  s    *&zKeyword.parseImplc                s   t t|  ¡ }tj|_|S )N)r  r   rÚ   r:  r>  )r¥   r   )rl  rv   rw   rÚ   	  s    zKeyword.copyc             C   s
   | t _dS )z,Overrides the default Keyword chars
        N)r   r:  )ru  rv   rv   rw   ÚsetDefaultKeywordChars	  s    zKeyword.setDefaultKeywordChars)NF)T)r   r   r   r»   r3   r:  r§   r±  rÚ   r2  r?  r4  rv   rv   )rl  rw   r   ^	  s   
c                   s*   e Zd ZdZ fddZdddZ  ZS )r   al  
    Token to match a specified string, ignoring case of letters.
    Note: the matched results will always be in the case of the given
    match string, NOT the case of the input text.

    Example::
        OneOrMore(CaselessLiteral("CMD")).parseString("cmd CMD Cmd10") # -> ['CMD', 'CMD', 'CMD']
        
    (Contrast with example for L{CaselessKeyword}.)
    c                s6   t t|  | ¡ ¡ || _d| j | _d| j | _d S )Nz'%s'z	Expected )r  r   r§   r<  ÚreturnStringrË   r  )r¥   r8  )rl  rv   rw   r§   ª	  s    zCaselessLiteral.__init__Tc             C   s@   |||| j    ¡ | jkr,|| j  | jfS t||| j| d S )N)r6  r<  r5  r@  r   r  )r¥   rO  r    r  rv   rv   rw   r±  ±	  s    zCaselessLiteral.parseImpl)T)r   r   r   r»   r§   r±  r4  rv   rv   )rl  rw   r   	  s   
c                   s,   e Zd ZdZd fdd	Zd	ddZ  ZS )
r   zÐ
    Caseless version of L{Keyword}.

    Example::
        OneOrMore(CaselessKeyword("CMD")).parseString("cmd CMD Cmd10") # -> ['CMD', 'CMD']
        
    (Contrast with example for L{CaselessLiteral}.)
    Nc                s   t t| j||dd d S )NT)r;  )r  r   r§   )r¥   r8  r>  )rl  rv   rw   r§   ¿	  s    zCaselessKeyword.__init__Tc             C   sj   |||| j    ¡ | jkrV|t|| j  ksF||| j    ¡ | jkrV|| j  | jfS t||| j| d S )N)r6  r<  r=  ræ   r>  r5  r   r  )r¥   rO  r    r  rv   rv   rw   r±  Â	  s    *zCaselessKeyword.parseImpl)N)T)r   r   r   r»   r§   r±  r4  rv   rv   )rl  rw   r   ¶	  s   c                   s,   e Zd ZdZd fdd	Zd	ddZ  ZS )
rl   ax  
    A variation on L{Literal} which matches "close" matches, that is, 
    strings with at most 'n' mismatching characters. C{CloseMatch} takes parameters:
     - C{match_string} - string to be matched
     - C{maxMismatches} - (C{default=1}) maximum number of mismatches allowed to count as a match
    
    The results from a successful parse will contain the matched text from the input string and the following named results:
     - C{mismatches} - a list of the positions within the match_string where mismatches were found
     - C{original} - the original match_string used to compare against the input string
    
    If C{mismatches} is an empty list, then the match was an exact match.
    
    Example::
        patt = CloseMatch("ATCATCGAATGGA")
        patt.parseString("ATCATCGAAXGGA") # -> (['ATCATCGAAXGGA'], {'mismatches': [[9]], 'original': ['ATCATCGAATGGA']})
        patt.parseString("ATCAXCGAAXGGA") # -> Exception: Expected 'ATCATCGAATGGA' (with up to 1 mismatches) (at char 0), (line:1, col:1)

        # exact match
        patt.parseString("ATCATCGAATGGA") # -> (['ATCATCGAATGGA'], {'mismatches': [[]], 'original': ['ATCATCGAATGGA']})

        # close match allowing up to 2 mismatches
        patt = CloseMatch("ATCATCGAATGGA", maxMismatches=2)
        patt.parseString("ATCAXCGAAXGGA") # -> (['ATCAXCGAAXGGA'], {'mismatches': [[4, 9]], 'original': ['ATCATCGAATGGA']})
    r   c                sB   t t|  ¡  || _|| _|| _d| j| jf | _d| _d| _d S )Nz&Expected %r (with up to %d mismatches)F)	r  rl   r§   rË   Úmatch_stringÚmaxMismatchesr  r  r  )r¥   rA  rB  )rl  rv   rw   r§   á	  s    zCloseMatch.__init__Tc             C   sÌ   |}t |}|t | j }||kr¸| j}d}g }	| j}
xtt||| | jD ]0\}}|\}}||krP|	 |¡ t |	|
krPP qPW |d }t||| g}| j|d< |	|d< ||fS t||| j| d S )Nr   r   ÚoriginalÚ
mismatches)	ræ   rA  rB  rë   r   r  r"   r   r  )r¥   rO  r    r  Ústartr¯  ÚmaxlocrA  Úmatch_stringlocrD  rB  Ús_mÚsrcÚmatÚresultsrv   rv   rw   r±  ê	  s(    "

zCloseMatch.parseImpl)r   )T)r   r   r   r»   r§   r±  r4  rv   rv   )rl  rw   rl   È	  s   	c                   s8   e Zd ZdZd fdd	Zdd	d
Z fddZ  ZS )r/   a	  
    Token for matching words composed of allowed character sets.
    Defined with string containing all allowed initial characters,
    an optional string containing allowed body characters (if omitted,
    defaults to the initial character set), and an optional minimum,
    maximum, and/or exact length.  The default value for C{min} is 1 (a
    minimum value < 1 is not valid); the default values for C{max} and C{exact}
    are 0, meaning no maximum or exact length restriction. An optional
    C{excludeChars} parameter can list characters that might be found in 
    the input C{bodyChars} string; useful to define a word of all printables
    except for one or two characters, for instance.
    
    L{srange} is useful for defining custom character set strings for defining 
    C{Word} expressions, using range notation from regular expression character sets.
    
    A common mistake is to use C{Word} to match a specific literal string, as in 
    C{Word("Address")}. Remember that C{Word} uses the string argument to define
    I{sets} of matchable characters. This expression would match "Add", "AAA",
    "dAred", or any other word made up of the characters 'A', 'd', 'r', 'e', and 's'.
    To match an exact literal string, use L{Literal} or L{Keyword}.

    pyparsing includes helper strings for building Words:
     - L{alphas}
     - L{nums}
     - L{alphanums}
     - L{hexnums}
     - L{alphas8bit} (alphabetic characters in ASCII range 128-255 - accented, tilded, umlauted, etc.)
     - L{punc8bit} (non-alphabetic characters in ASCII range 128-255 - currency, symbols, superscripts, diacriticals, etc.)
     - L{printables} (any non-whitespace character)

    Example::
        # a word composed of digits
        integer = Word(nums) # equivalent to Word("0123456789") or Word(srange("0-9"))
        
        # a word with a leading capital, and zero or more lowercase
        capital_word = Word(alphas.upper(), alphas.lower())

        # hostnames are alphanumeric, with leading alpha, and '-'
        hostname = Word(alphas, alphanums+'-')
        
        # roman numeral (not a strict parser, accepts invalid mix of characters)
        roman = Word("IVXLCDM")
        
        # any string of non-whitespace characters, except for ','
        csv_value = Word(printables, excludeChars=",")
    Nr   r   Fc                sÌ  t t|  ¡   rFd  fdd|D ¡}|rFd  fdd|D ¡}|| _t|| _|rl|| _t|| _n|| _t|| _|dk| _	|dk rt
d|| _|dkr¬|| _nt| _|dkrÆ|| _|| _t| | _d| j | _d	| _|| _d
| j| j krÈ|dkrÈ|dkrÈ|dkrÈ| j| jkr8dt| j | _nHt| jdkrfdt | j¡t| jf | _ndt| jt| jf | _| jrd| j d | _yt | j¡| _W n tk
rÆ   d | _Y nX d S )Nr   c             3   s   | ]}| kr|V  qd S )Nrv   )r   r   )ÚexcludeCharsrv   rw   r   7
  s    z Word.__init__.<locals>.<genexpr>c             3   s   | ]}| kr|V  qd S )Nrv   )r   r   )rL  rv   rw   r   9
  s    r   r   zZcannot specify a minimum length < 1; use Optional(Word()) if zero-length word is permittedz	Expected Fr$  z[%s]+z%s[%s]*z	[%s][%s]*z\b)r  r/   r§   r²   ÚinitCharsOrigr¿  Ú	initCharsÚbodyCharsOrigÚ	bodyCharsÚmaxSpecifiedr÷  ÚminLenÚmaxLenr3  r   rË   r  r  Ú	asKeywordÚ_escapeRegexRangeCharsÚreStringræ   r  ÚescapeÚcompilero  )r¥   rN  rP  ÚminÚmaxÚexactrT  rL  )rl  )rL  rw   r§   4
  sT    



0
zWord.__init__Tc       
      C   sD  | j r<| j  ||¡}|s(t||| j| | ¡ }|| ¡ fS || | jkrZt||| j| |}|d7 }t|}| j}|| j	 }t
||}x ||k r¨|| |kr¨|d7 }qW d}	|| | jk rÀd}	| jrÞ||k rÞ|| |krÞd}	| jr|dkr||d  |ks||k r|| |krd}	|	r4t||| j| |||| fS )Nr   FTr   )r  r5  r   r  ÚendÚgrouprN  ræ   rP  rS  rY  rR  rQ  rT  )
r¥   rO  r    r  r0  rE  r¯  Ú	bodycharsrF  ÚthrowExceptionrv   rv   rw   r±  j
  s6    

4zWord.parseImplc                st   yt t|  ¡ S  tk
r"   Y nX | jd krndd }| j| jkr^d|| j|| jf | _nd|| j | _| jS )Nc             S   s$   t | dkr| d d d S | S d S )Né   z...)ræ   )r   rv   rv   rw   Ú
charsAsStr
  s    z Word.__str__.<locals>.charsAsStrz	W:(%s,%s)zW:(%s))r  r/   r¯   ro  r{  rM  rO  )r¥   ra  )rl  rv   rw   r¯   
  s    
zWord.__str__)Nr   r   r   FN)T)r   r   r   r»   r§   r±  r¯   r4  rv   rv   )rl  rw   r/   
  s   .6
#c                   sF   e Zd ZdZee d¡Zd fdd	ZdddZ	 fd	d
Z
  ZS )r'   a  
    Token for matching strings that match a given regular expression.
    Defined with string specifying the regular expression in a form recognized by the inbuilt Python re module.
    If the given regex contains named groups (defined using C{(?P<name>...)}), these will be preserved as 
    named parse results.

    Example::
        realnum = Regex(r"[+-]?\d+\.\d*")
        date = Regex(r'(?P<year>\d{4})-(?P<month>\d\d?)-(?P<day>\d\d?)')
        # ref: http://stackoverflow.com/questions/267399/how-do-you-match-only-valid-roman-numerals-with-a-regular-expression
        roman = Regex(r"M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})")
    z[A-Z]r   c                sÞ   t t|  ¡  t|tr|s,tjdtdd || _|| _	yt
 | j| j	¡| _
| j| _W q¸ tjk
r   tjd| tdd  Y q¸X n2t|tjr°|| _
t| | _| _|| _	ntdt| | _d| j | _d| _d| _d	S )
z­The parameters C{pattern} and C{flags} are passed to the C{re.compile()} function as-is. See the Python C{re} module for an explanation of the acceptable patterns and flags.z0null string passed to Regex; use Empty() insteadrq   )rí  z$invalid pattern (%s) passed to RegexzCRegex may only be constructed with a string or a compiled RE objectz	Expected FTN)r  r'   r§   ry   rÙ   rî  rï  rð  ÚpatternÚflagsr  rX  rV  Úsre_constantsÚerrorÚcompiledREtyper{   r÷  r   rË   r  r  r  )r¥   rb  rc  )rl  rv   rw   r§   ²
  s.    





zRegex.__init__Tc             C   sd   | j  ||¡}|s"t||| j| | ¡ }| ¡ }t| ¡ }|r\x|D ]}|| ||< qHW ||fS )N)r  r5  r   r  r\  Ú	groupdictr"   r]  )r¥   rO  r    r  r0  Údr   rã   rv   rv   rw   r±  Ô
  s    
zRegex.parseImplc                sD   yt t|  ¡ S  tk
r"   Y nX | jd kr>dt| j | _| jS )NzRe:(%s))r  r'   r¯   ro  r{  rÅ   rb  )r¥   )rl  rv   rw   r¯   á
  s    
zRegex.__str__)r   )T)r   r   r   r»   r¹   r  rX  rf  r§   r±  r¯   r4  rv   rv   )rl  rw   r'   ¤
  s
   "
c                   s8   e Zd ZdZd fdd	ZdddZ fd	d
Z  ZS )r%   a«  
    Token for matching strings that are delimited by quoting characters.
    
    Defined with the following parameters:
        - quoteChar - string of one or more characters defining the quote delimiting string
        - escChar - character to escape quotes, typically backslash (default=C{None})
        - escQuote - special quote sequence to escape an embedded quote string (such as SQL's "" to escape an embedded ") (default=C{None})
        - multiline - boolean indicating whether quotes can span multiple lines (default=C{False})
        - unquoteResults - boolean indicating whether the matched text should be unquoted (default=C{True})
        - endQuoteChar - string of one or more characters defining the end of the quote delimited string (default=C{None} => same as quoteChar)
        - convertWhitespaceEscapes - convert escaped whitespace (C{'\t'}, C{'\n'}, etc.) to actual whitespace (default=C{True})

    Example::
        qs = QuotedString('"')
        print(qs.searchString('lsjdf "This is the quote" sldjf'))
        complex_qs = QuotedString('{{', endQuoteChar='}}')
        print(complex_qs.searchString('lsjdf {{This is the "quote"}} sldjf'))
        sql_qs = QuotedString('"', escQuote='""')
        print(sql_qs.searchString('lsjdf "This is the quote with ""embedded"" quotes" sldjf'))
    prints::
        [['This is the quote']]
        [['This is the "quote"']]
        [['This is the quote with "embedded" quotes']]
    NFTc          
      sN  t t  ¡  | ¡ }|s0tjdtdd t |d kr>|}n"| ¡ }|s`tjdtdd t | _t	| _
|d  _| _t	| _| _| _| _| _|rètjtjB  _dt  j¡t jd |d k	rÜt|pÞdf  _n<d _dt  j¡t jd |d k	rt|pdf  _t	 jd	krp  jd
d  fddtt	 jd	 ddD ¡ d 7  _|r  jdt |¡ 7  _|r¾  jdt |¡ 7  _t  j¡d  _  jdt  j¡ 7  _yt  j j¡ _ j _W n0 tjk
r&   tjd j tdd  Y nX t   _!d j!  _"d _#d _$d S )Nz$quoteChar cannot be the empty stringrq   )rí  z'endQuoteChar cannot be the empty stringr   z%s(?:[^%s%s]r   z%s(?:[^%s\n\r%s]r   z|(?:z)|(?:c             3   s4   | ],}d t   jd| ¡t j| f V  qdS )z%s[^%s]N)r  rW  ÚendQuoteCharrU  )r   rÃ   )r¥   rv   rw   r   /  s   z(QuotedString.__init__.<locals>.<genexpr>rr   ú)z|(?:%s)z|(?:%s.)z(.)z)*%sz$invalid pattern (%s) passed to Regexz	Expected FT)%r  r%   r§   r³   rî  rï  rð  ÚSyntaxErrorÚ	quoteCharræ   ÚquoteCharLenÚfirstQuoteCharri  ÚendQuoteCharLenÚescCharÚescQuoteÚunquoteResultsÚconvertWhitespaceEscapesr  Ú	MULTILINEÚDOTALLrc  rW  rU  rb  r²   rç   ÚescCharReplacePatternrX  rV  rd  re  r   rË   r  r  r  )r¥   rl  rp  rq  Ú	multilinerr  ri  rs  )rl  )r¥   rw   r§     sf    




6

zQuotedString.__init__c       	      C   sØ   || | j kr| j ||¡pd }|s4t||| j| | ¡ }| ¡ }| jrÐ|| j| j	  }t
|trÐd|kr¤| jr¤ddddd}x | ¡ D ]\}}| ||¡}qW | jrºt | jd|¡}| jrÐ| | j| j¡}||fS )Nú\ú	r'  úú)z\tz\nz\fz\rz\g<1>)rn  r  r5  r   r  r\  r]  rr  rm  ro  ry   rÙ   rs  rê   r   rp  rä   rv  rq  ri  )	r¥   rO  r    r  r0  r   Úws_mapÚwslitÚwscharrv   rv   rw   r±  G  s(     
zQuotedString.parseImplc                sF   yt t|  ¡ S  tk
r"   Y nX | jd kr@d| j| jf | _| jS )Nz.quoted string, starting with %s ending with %s)r  r%   r¯   ro  r{  rl  ri  )r¥   )rl  rv   rw   r¯   j  s    
zQuotedString.__str__)NNFTNT)T)r   r   r   r»   r§   r±  r¯   r4  rv   rv   )rl  rw   r%   í
  s   A
#c                   s8   e Zd ZdZd fdd	ZdddZ fd	d
Z  ZS )r	   aô  
    Token for matching words composed of characters I{not} in a given set (will
    include whitespace in matched characters if not listed in the provided exclusion set - see example).
    Defined with string containing all disallowed characters, and an optional
    minimum, maximum, and/or exact length.  The default value for C{min} is 1 (a
    minimum value < 1 is not valid); the default values for C{max} and C{exact}
    are 0, meaning no maximum or exact length restriction.

    Example::
        # define a comma-separated-value as anything that is not a ','
        csv_value = CharsNotIn(',')
        print(delimitedList(csv_value).parseString("dkls,lsdkjf,s12 34,@!#,213"))
    prints::
        ['dkls', 'lsdkjf', 's12 34', '@!#', '213']
    r   r   c                s   t t|  ¡  d| _|| _|dk r*td|| _|dkr@|| _nt| _|dkrZ|| _|| _t	| | _
d| j
 | _| jdk| _d| _d S )NFr   zfcannot specify a minimum length < 1; use Optional(CharsNotIn()) if zero-length char group is permittedr   z	Expected )r  r	   r§   r~  ÚnotCharsr÷  rR  rS  r3  r   rË   r  r  r  )r¥   r  rY  rZ  r[  )rl  rv   rw   r§     s     
zCharsNotIn.__init__Tc             C   s   || | j krt||| j| |}|d7 }| j }t|| j t|}x ||k rd|| |krd|d7 }qFW || | jk rt||| j| |||| fS )Nr   )r  r   r  rY  rS  ræ   rR  )r¥   rO  r    r  rE  ÚnotcharsÚmaxlenrv   rv   rw   r±    s    
zCharsNotIn.parseImplc                sd   yt t|  ¡ S  tk
r"   Y nX | jd kr^t| jdkrRd| jd d  | _nd| j | _| jS )Nr`  z
!W:(%s...)z!W:(%s))r  r	   r¯   ro  r{  ræ   r  )r¥   )rl  rv   rw   r¯   ¯  s    
zCharsNotIn.__str__)r   r   r   )T)r   r   r   r»   r§   r±  r¯   r4  rv   rv   )rl  rw   r	   v  s   
c                   s<   e Zd ZdZddddddZd fdd	ZdddZ  ZS )r.   a  
    Special matching class for matching whitespace.  Normally, whitespace is ignored
    by pyparsing grammars.  This class is included when some whitespace structures
    are significant.  Define with a string containing the whitespace characters to be
    matched; default is C{" \t\r\n"}.  Also takes optional C{min}, C{max}, and C{exact} arguments,
    as defined for the C{L{Word}} class.
    z<SPC>z<TAB>z<LF>z<CR>z<FF>)r$  ry  r'  r{  rz  ú 	
r   r   c                s   t t  ¡  | _  d  fdd jD ¡¡ d dd  jD ¡ _d _d j  _	| _
|dkrt| _nt _|dkr| _| _
d S )Nr   c             3   s   | ]}| j kr|V  qd S )N)Ú
matchWhite)r   r   )r¥   rv   rw   r   Ï  s    z!White.__init__.<locals>.<genexpr>c             s   s   | ]}t j| V  qd S )N)r.   Ú	whiteStrs)r   r   rv   rv   rw   r   Ñ  s    Tz	Expected r   )r  r.   r§   r  r  r²   r  rË   r  r  rR  rS  r3  )r¥   ÚwsrY  rZ  r[  )rl  )r¥   rw   r§   Ì  s     zWhite.__init__Tc             C   s   || | j krt||| j| |}|d7 }|| j }t|t|}x"||k rd|| | j krd|d7 }qDW || | jk rt||| j| |||| fS )Nr   )r  r   r  rS  rY  ræ   rR  )r¥   rO  r    r  rE  rF  rv   rv   rw   r±  à  s    
zWhite.parseImpl)r  r   r   r   )T)r   r   r   r»   r  r§   r±  r4  rv   rv   )rl  rw   r.   ½  s   c                   s   e Zd Z fddZ  ZS )Ú_PositionTokenc                s(   t t|  ¡  | jj| _d| _d| _d S )NTF)r  r  r§   rl  r   rË   r  r  )r¥   )rl  rv   rw   r§   ñ  s    
z_PositionToken.__init__)r   r   r   r§   r4  rv   rv   )rl  rw   r  ð  s   r  c                   s2   e Zd ZdZ fddZdd Zd	ddZ  ZS )
r   zb
    Token to advance to a specific column of input text; useful for tabular report scraping.
    c                s   t t|  ¡  || _d S )N)r  r   r§   r9   )r¥   Úcolno)rl  rv   rw   r§   û  s    zGoToColumn.__init__c             C   s`   t ||| j kr\t|}| jr*|  ||¡}x0||k rZ||  ¡ rZt ||| j krZ|d7 }q,W |S )Nr   )r9   ræ   r  r­  Úisspace)r¥   rO  r    r¯  rv   rv   rw   r°  ÿ  s    &zGoToColumn.preParseTc             C   sD   t ||}|| j kr"t||d| || j  | }||| }||fS )NzText not in expected column)r9   r   )r¥   rO  r    r  ÚthiscolÚnewlocr   rv   rv   rw   r±    s    

zGoToColumn.parseImpl)T)r   r   r   r»   r§   r°  r±  r4  rv   rv   )rl  rw   r   ÷  s   	c                   s*   e Zd ZdZ fddZdddZ  ZS )r   a¿  
    Matches if current position is at the beginning of a line within the parse string
    
    Example::
    
        test = '''        AAA this line
        AAA and this line
          AAA but not this one
        B AAA and definitely not this one
        '''

        for t in (LineStart() + 'AAA' + restOfLine).searchString(test):
            print(t)
    
    Prints::
        ['AAA', ' this line']
        ['AAA', ' and this line']    

    c                s   t t|  ¡  d| _d S )NzExpected start of line)r  r   r§   r  )r¥   )rl  rv   rw   r§   &  s    zLineStart.__init__Tc             C   s*   t ||dkr|g fS t||| j| d S )Nr   )r9   r   r  )r¥   rO  r    r  rv   rv   rw   r±  *  s    zLineStart.parseImpl)T)r   r   r   r»   r§   r±  r4  rv   rv   )rl  rw   r     s   c                   s*   e Zd ZdZ fddZdddZ  ZS )r   zU
    Matches if current position is at the end of a line within the parse string
    c                s,   t t|  ¡  |  tj dd¡¡ d| _d S )Nr'  r   zExpected end of line)r  r   r§   r  r$   rt  r   r  )r¥   )rl  rv   rw   r§   3  s    zLineEnd.__init__Tc             C   sb   |t |k r6|| dkr$|d dfS t||| j| n(|t |krN|d g fS t||| j| d S )Nr'  r   )ræ   r   r  )r¥   rO  r    r  rv   rv   rw   r±  8  s    zLineEnd.parseImpl)T)r   r   r   r»   r§   r±  r4  rv   rv   )rl  rw   r   /  s   c                   s*   e Zd ZdZ fddZdddZ  ZS )r*   zM
    Matches if current position is at the beginning of the parse string
    c                s   t t|  ¡  d| _d S )NzExpected start of text)r  r*   r§   r  )r¥   )rl  rv   rw   r§   G  s    zStringStart.__init__Tc             C   s0   |dkr(||   |d¡kr(t||| j| |g fS )Nr   )r°  r   r  )r¥   rO  r    r  rv   rv   rw   r±  K  s    zStringStart.parseImpl)T)r   r   r   r»   r§   r±  r4  rv   rv   )rl  rw   r*   C  s   c                   s*   e Zd ZdZ fddZdddZ  ZS )r)   zG
    Matches if current position is at the end of the parse string
    c                s   t t|  ¡  d| _d S )NzExpected end of text)r  r)   r§   r  )r¥   )rl  rv   rw   r§   V  s    zStringEnd.__init__Tc             C   s^   |t |k rt||| j| n<|t |kr6|d g fS |t |krJ|g fS t||| j| d S )Nr   )ræ   r   r  )r¥   rO  r    r  rv   rv   rw   r±  Z  s    zStringEnd.parseImpl)T)r   r   r   r»   r§   r±  r4  rv   rv   )rl  rw   r)   R  s   c                   s.   e Zd ZdZef fdd	ZdddZ  ZS )r1   ap  
    Matches if the current position is at the beginning of a Word, and
    is not preceded by any character in a given set of C{wordChars}
    (default=C{printables}). To emulate the C{} behavior of regular expressions,
    use C{WordStart(alphanums)}. C{WordStart} will also match at the beginning of
    the string being parsed, or at the beginning of a line.
    c                s"   t t|  ¡  t|| _d| _d S )NzNot at the start of a word)r  r1   r§   r¿  Ú	wordCharsr  )r¥   r  )rl  rv   rw   r§   l  s    
zWordStart.__init__Tc             C   s@   |dkr8||d  | j ks(|| | j kr8t||| j| |g fS )Nr   r   )r  r   r  )r¥   rO  r    r  rv   rv   rw   r±  q  s
    zWordStart.parseImpl)T)r   r   r   r»   rV   r§   r±  r4  rv   rv   )rl  rw   r1   d  s   c                   s.   e Zd ZdZef fdd	ZdddZ  ZS )r0   aZ  
    Matches if the current position is at the end of a Word, and
    is not followed by any character in a given set of C{wordChars}
    (default=C{printables}). To emulate the C{} behavior of regular expressions,
    use C{WordEnd(alphanums)}. C{WordEnd} will also match at the end of
    the string being parsed, or at the end of a line.
    c                s(   t t|  ¡  t|| _d| _d| _d S )NFzNot at the end of a word)r  r0   r§   r¿  r  r~  r  )r¥   r  )rl  rv   rw   r§     s    
zWordEnd.__init__Tc             C   sP   t |}|dkrH||k rH|| | jks8||d  | jkrHt||| j| |g fS )Nr   r   )ræ   r  r   r  )r¥   rO  r    r  r¯  rv   rv   rw   r±    s    zWordEnd.parseImpl)T)r   r   r   r»   rV   r§   r±  r4  rv   rv   )rl  rw   r0   x  s   c                   s   e Zd ZdZd fdd	Zdd Zdd Zd	d
 Z fddZ fddZ	 fddZ
d fdd	Zg fddZ fddZ  ZS )r    z^
    Abstract subclass of ParserElement, for combining and post-processing parsed tokens.
    Fc                s°   t t|  |¡ t|tr"t|}t|tr<t |¡g| _	njt|t
jrzt|}tdd |D rnttj|}t|| _	n,yt|| _	W n tk
r¤   |g| _	Y nX d| _d S )Nc             s   s   | ]}t |tV  qd S )N)ry   rÙ   )r   rP  rv   rv   rw   r     s    z+ParseExpression.__init__.<locals>.<genexpr>F)r  r    r§   ry   rÖ   rÔ   rÙ   r$   rw  ÚexprsrÉ  ÚIterableÚallr   rÜ   r  )r¥   r  r  )rl  rv   rw   r§     s    

zParseExpression.__init__c             C   s
   | j | S )N)r  )r¥   rÃ   rv   rv   rw   rÄ   §  s    zParseExpression.__getitem__c             C   s   | j  |¡ d | _| S )N)r  r  r{  )r¥   r  rv   rv   rw   r  ª  s    zParseExpression.appendc             C   s4   d| _ dd | jD | _x| jD ]}| ¡  q W | S )z~Extends C{leaveWhitespace} defined in base class, and also invokes C{leaveWhitespace} on
           all contained expressions.Fc             S   s   g | ]}|  ¡ qS rv   )rÚ   )r   r«  rv   rv   rw   rß   ³  s    z3ParseExpression.leaveWhitespace.<locals>.<listcomp>)r~  r  r  )r¥   r«  rv   rv   rw   r  ¯  s
    zParseExpression.leaveWhitespacec                sz   t |trF|| jkrvtt|  |¡ xP| jD ]}| | jd ¡ q,W n0tt|  |¡ x| jD ]}| | jd ¡ q^W | S )Nrr   )ry   r+   r  r  r    r  r  )r¥   r  r«  )rl  rv   rw   r  ¸  s    

zParseExpression.ignorec                sL   yt t|  ¡ S  tk
r"   Y nX | jd krFd| jjt| jf | _| jS )Nz%s:(%s))	r  r    r¯   ro  r{  rl  r   r   r  )r¥   )rl  rv   rw   r¯   Ä  s    
zParseExpression.__str__c                s.  t t|  ¡  x| jD ]}| ¡  qW t| jdkr| jd }t|| jr¤|js¤|jd kr¤|j	s¤|jd d  | jd g | _d | _
|  j|jO  _|  j|jO  _| jd }t|| jr|js|jd kr|j	s| jd d |jd d   | _d | _
|  j|jO  _|  j|jO  _dt|  | _| S )Nrq   r   r   rr   z	Expected )r  r    r×  r  ræ   ry   rl  ry  r|  r  r{  r  r  r   r  )r¥   r«  r  )rl  rv   rw   r×  Î  s0    


zParseExpression.streamlinec                s   t t|  ||¡}|S )N)r  r    r  )r¥   rË   r  r   )rl  rv   rw   r  ð  s    zParseExpression.setResultsNamec             C   s:   |d d  | g }x| j D ]}| |¡ qW |  g ¡ d S )N)r  r  r  )r¥   r  Útmpr«  rv   rv   rw   r  ô  s    zParseExpression.validatec                s$   t t|  ¡ }dd | jD |_|S )Nc             S   s   g | ]}|  ¡ qS rv   )rÚ   )r   r«  rv   rv   rw   rß   ü  s    z(ParseExpression.copy.<locals>.<listcomp>)r  r    rÚ   r  )r¥   r   )rl  rv   rw   rÚ   ú  s    zParseExpression.copy)F)F)r   r   r   r»   r§   rÄ   r  r  r  r¯   r×  r  r  rÚ   r4  rv   rv   )rl  rw   r      s   	
"c                   sT   e Zd ZdZG dd deZd fdd	ZdddZd	d
 Zdd Z	dd Z
  ZS )r   a  
    Requires all given C{ParseExpression}s to be found in the given order.
    Expressions may be separated by whitespace.
    May be constructed using the C{'+'} operator.
    May also be constructed using the C{'-'} operator, which will suppress backtracking.

    Example::
        integer = Word(nums)
        name_expr = OneOrMore(Word(alphas))

        expr = And([integer("id"),name_expr("name"),integer("age")])
        # more easily written as:
        expr = integer("id") + name_expr("name") + integer("age")
    c                   s   e Zd Z fddZ  ZS )zAnd._ErrorStopc                s&   t tj| j|| d| _|  ¡  d S )Nú-)r  r   rñ  r§   rË   r  )r¥   r¤   r  )rl  rv   rw   r§     s    zAnd._ErrorStop.__init__)r   r   r   r§   r4  rv   rv   )rl  rw   rñ    s   rñ  Tc                sR   t t|  ||¡ tdd | jD | _|  | jd j¡ | jd j| _d| _	d S )Nc             s   s   | ]}|j V  qd S )N)r  )r   r«  rv   rv   rw   r     s    zAnd.__init__.<locals>.<genexpr>r   T)
r  r   r§   r  r  r  r  r  r~  r  )r¥   r  r  )rl  rv   rw   r§     s
    zAnd.__init__c       	      C   s  | j d j|||dd\}}d}xØ| j dd  D ]Æ}t|tjrFd}q0|rÐy| |||¡\}}W qâ tk
rv    Y qâ tk
r¦ } zd |_t |¡W d d }~X Y qâ t	k
rÌ   t|t
|| j| Y qâX n| |||¡\}}|sî| ¡ r0||7 }q0W ||fS )Nr   F)r  r   T)r  r  ry   r   rñ  r#   r   Ú__traceback__rª   rÝ   ræ   r  r  )	r¥   rO  r    r  Ú
resultlistÚ	errorStopr«  Ú
exprtokensr©   rv   rv   rw   r±    s(    zAnd.parseImplc             C   s   t |trt |¡}|  |¡S )N)ry   rÙ   r$   rw  r  )r¥   r  rv   rv   rw   r  5  s    

zAnd.__iadd__c             C   s8   |d d  | g }x | j D ]}| |¡ |jsP qW d S )N)r  r  r  )r¥   r¾   ÚsubRecCheckListr«  rv   rv   rw   r  :  s
    
zAnd.checkRecursionc             C   s@   t | dr| jS | jd kr:dd dd | jD ¡ d | _| jS )NrË   Ú{r$  c             s   s   | ]}t |V  qd S )N)r   )r   r«  rv   rv   rw   r   F  s    zAnd.__str__.<locals>.<genexpr>Ú})rú   rË   r{  r²   r  )r¥   rv   rv   rw   r¯   A  s
    

 zAnd.__str__)T)T)r   r   r   r»   r   rñ  r§   r±  r  r  r¯   r4  rv   rv   )rl  rw   r   ÿ  s   
c                   sD   e Zd ZdZd fdd	ZdddZdd	 Zd
d Zdd Z  Z	S )r   a¾  
    Requires that at least one C{ParseExpression} is found.
    If two expressions match, the expression that matches the longest string will be used.
    May be constructed using the C{'^'} operator.

    Example::
        # construct Or using '^' operator
        
        number = Word(nums) ^ Combine(Word(nums) + '.' + Word(nums))
        print(number.searchString("123 3.1416 789"))
    prints::
        [['123'], ['3.1416'], ['789']]
    Fc                s:   t t|  ||¡ | jr0tdd | jD | _nd| _d S )Nc             s   s   | ]}|j V  qd S )N)r  )r   r«  rv   rv   rw   r   \  s    zOr.__init__.<locals>.<genexpr>T)r  r   r§   r  r=  r  )r¥   r  r  )rl  rv   rw   r§   Y  s    zOr.__init__Tc             C   sT  d}d }g }x¤| j D ]}y| ||¡}W nv tk
rd }	 zd |	_|	j|krT|	}|	j}W d d }	~	X Y q tk
r   t||krt|t||j| }t|}Y qX | ||f¡ qW |r*|j	dd d x`|D ]X\}
}y| 
|||¡S  tk
r$ }	 z d |	_|	j|kr|	}|	j}W d d }	~	X Y qÎX qÎW |d k	rB| j|_|nt||d| d S )Nrr   c             S   s
   | d  S )Nr   rv   )Úxrv   rv   rw   rx   u  s    zOr.parseImpl.<locals>.<lambda>)r	  z no defined alternatives to match)r  r»  r   r  r    rÝ   ræ   r  r  Úsortr  r¡   )r¥   rO  r    r  Ú	maxExcLocÚmaxExceptionrá  r«  Úloc2r¸  Ú_rv   rv   rw   r±  `  s<    

zOr.parseImplc             C   s   t |trt |¡}|  |¡S )N)ry   rÙ   r$   rw  r  )r¥   r  rv   rv   rw   Ú__ixor__  s    

zOr.__ixor__c             C   s@   t | dr| jS | jd kr:dd dd | jD ¡ d | _| jS )NrË   r  z ^ c             s   s   | ]}t |V  qd S )N)r   )r   r«  rv   rv   rw   r     s    zOr.__str__.<locals>.<genexpr>r  )rú   rË   r{  r²   r  )r¥   rv   rv   rw   r¯     s
    

 z
Or.__str__c             C   s0   |d d  | g }x| j D ]}| |¡ qW d S )N)r  r  )r¥   r¾   r  r«  rv   rv   rw   r    s    zOr.checkRecursion)F)T)
r   r   r   r»   r§   r±  r  r¯   r  r4  rv   rv   )rl  rw   r   K  s   
&	c                   sD   e Zd ZdZd fdd	ZdddZdd	 Zd
d Zdd Z  Z	S )r   a½  
    Requires that at least one C{ParseExpression} is found.
    If two expressions match, the first one listed is the one that will match.
    May be constructed using the C{'|'} operator.

    Example::
        # construct MatchFirst using '|' operator
        
        # watch the order of expressions to match
        number = Word(nums) | Combine(Word(nums) + '.' + Word(nums))
        print(number.searchString("123 3.1416 789")) #  Fail! -> [['123'], ['3'], ['1416'], ['789']]

        # put more selective expression first
        number = Combine(Word(nums) + '.' + Word(nums)) | Word(nums)
        print(number.searchString("123 3.1416 789")) #  Better -> [['123'], ['3.1416'], ['789']]
    Fc                s:   t t|  ||¡ | jr0tdd | jD | _nd| _d S )Nc             s   s   | ]}|j V  qd S )N)r  )r   r«  rv   rv   rw   r   ®  s    z&MatchFirst.__init__.<locals>.<genexpr>T)r  r   r§   r  r=  r  )r¥   r  r  )rl  rv   rw   r§   «  s    zMatchFirst.__init__Tc       	      C   sÄ   d}d }x¶| j D ]}y| |||¡}|S  tk
r\ } z|j|krL|}|j}W d d }~X Y q tk
r   t||krt|t||j| }t|}Y qX qW |d k	r²| j|_|nt||d| d S )Nrr   z no defined alternatives to match)r  r  r   r    rÝ   ræ   r  r¡   )	r¥   rO  r    r  r  r  r«  r   r¸  rv   rv   rw   r±  ²  s$    
zMatchFirst.parseImplc             C   s   t |trt |¡}|  |¡S )N)ry   rÙ   r$   rw  r  )r¥   r  rv   rv   rw   Ú__ior__Ê  s    

zMatchFirst.__ior__c             C   s@   t | dr| jS | jd kr:dd dd | jD ¡ d | _| jS )NrË   r  z | c             s   s   | ]}t |V  qd S )N)r   )r   r«  rv   rv   rw   r   Ô  s    z%MatchFirst.__str__.<locals>.<genexpr>r  )rú   rË   r{  r²   r  )r¥   rv   rv   rw   r¯   Ï  s
    

 zMatchFirst.__str__c             C   s0   |d d  | g }x| j D ]}| |¡ qW d S )N)r  r  )r¥   r¾   r  r«  rv   rv   rw   r  Ø  s    zMatchFirst.checkRecursion)F)T)
r   r   r   r»   r§   r±  r  r¯   r  r4  rv   rv   )rl  rw   r     s   
	c                   s<   e Zd ZdZd fdd	ZdddZdd Zd	d
 Z  ZS )r   am  
    Requires all given C{ParseExpression}s to be found, but in any order.
    Expressions may be separated by whitespace.
    May be constructed using the C{'&'} operator.

    Example::
        color = oneOf("RED ORANGE YELLOW GREEN BLUE PURPLE BLACK WHITE BROWN")
        shape_type = oneOf("SQUARE CIRCLE TRIANGLE STAR HEXAGON OCTAGON")
        integer = Word(nums)
        shape_attr = "shape:" + shape_type("shape")
        posn_attr = "posn:" + Group(integer("x") + ',' + integer("y"))("posn")
        color_attr = "color:" + color("color")
        size_attr = "size:" + integer("size")

        # use Each (using operator '&') to accept attributes in any order 
        # (shape and posn are required, color and size are optional)
        shape_spec = shape_attr & posn_attr & Optional(color_attr) & Optional(size_attr)

        shape_spec.runTests('''
            shape: SQUARE color: BLACK posn: 100, 120
            shape: CIRCLE size: 50 color: BLUE posn: 50,80
            color:GREEN size:20 shape:TRIANGLE posn:20,40
            '''
            )
    prints::
        shape: SQUARE color: BLACK posn: 100, 120
        ['shape:', 'SQUARE', 'color:', 'BLACK', 'posn:', ['100', ',', '120']]
        - color: BLACK
        - posn: ['100', ',', '120']
          - x: 100
          - y: 120
        - shape: SQUARE


        shape: CIRCLE size: 50 color: BLUE posn: 50,80
        ['shape:', 'CIRCLE', 'size:', '50', 'color:', 'BLUE', 'posn:', ['50', ',', '80']]
        - color: BLUE
        - posn: ['50', ',', '80']
          - x: 50
          - y: 80
        - shape: CIRCLE
        - size: 50


        color: GREEN size: 20 shape: TRIANGLE posn: 20,40
        ['color:', 'GREEN', 'size:', '20', 'shape:', 'TRIANGLE', 'posn:', ['20', ',', '40']]
        - color: GREEN
        - posn: ['20', ',', '40']
          - x: 20
          - y: 40
        - shape: TRIANGLE
        - size: 20
    Tc                s8   t t|  ||¡ tdd | jD | _d| _d| _d S )Nc             s   s   | ]}|j V  qd S )N)r  )r   r«  rv   rv   rw   r     s    z Each.__init__.<locals>.<genexpr>T)r  r   r§   r  r  r  r~  ÚinitExprGroups)r¥   r  r  )rl  rv   rw   r§     s    zEach.__init__c          	      sú  | j rtdd | jD | _dd | jD }dd | jD }|| | _dd | jD | _dd | jD | _dd | jD | _|  j| j7  _d	| _ |}| jd d  }| jd d   g }d
}	x¶|	rp|  | j | j }
g }x~|
D ]v}y| ||¡}W n  t	k
r   | 
|¡ Y qàX | 
| j t||¡¡ ||krD| |¡ qà| krà  |¡ qàW t|t|
kr¼d	}	q¼W |rd dd |D ¡}t	||d| | fdd| jD 7 }g }x*|D ]"}| |||¡\}}| 
|¡ q¾W t|tg }||fS )Nc             s   s&   | ]}t |trt|j|fV  qd S )N)ry   r   r  rP  )r   r«  rv   rv   rw   r     s    z!Each.parseImpl.<locals>.<genexpr>c             S   s   g | ]}t |tr|jqS rv   )ry   r   rP  )r   r«  rv   rv   rw   rß     s    z"Each.parseImpl.<locals>.<listcomp>c             S   s    g | ]}|j rt|ts|qS rv   )r  ry   r   )r   r«  rv   rv   rw   rß     s    c             S   s   g | ]}t |tr|jqS rv   )ry   r2   rP  )r   r«  rv   rv   rw   rß      s    c             S   s   g | ]}t |tr|jqS rv   )ry   r   rP  )r   r«  rv   rv   rw   rß   !  s    c             S   s    g | ]}t |tttfs|qS rv   )ry   r   r2   r   )r   r«  rv   rv   rw   rß   "  s    FTz, c             s   s   | ]}t |V  qd S )N)r   )r   r«  rv   rv   rw   r   =  s    z*Missing one or more required elements (%s)c                s$   g | ]}t |tr|j kr|qS rv   )ry   r   rP  )r   r«  )ÚtmpOptrv   rw   rß   A  s    )r   r×   r  Úopt1mapÚ	optionalsÚmultioptionalsÚmultirequiredÚrequiredr»  r   r  rá   r  Úremoveræ   r²   r  Úsumr"   )r¥   rO  r    r  Úopt1Úopt2ÚtmpLocÚtmpReqdÚ
matchOrderÚkeepMatchingÚtmpExprsÚfailedr«  Úmissingr  rK  ÚfinalResultsrv   )r¡  rw   r±    sP    



zEach.parseImplc             C   s@   t | dr| jS | jd kr:dd dd | jD ¡ d | _| jS )NrË   r  z & c             s   s   | ]}t |V  qd S )N)r   )r   r«  rv   rv   rw   r   P  s    zEach.__str__.<locals>.<genexpr>r  )rú   rË   r{  r²   r  )r¥   rv   rv   rw   r¯   K  s
    

 zEach.__str__c             C   s0   |d d  | g }x| j D ]}| |¡ qW d S )N)r  r  )r¥   r¾   r  r«  rv   rv   rw   r  T  s    zEach.checkRecursion)T)T)	r   r   r   r»   r§   r±  r¯   r  r4  rv   rv   )rl  rw   r   Þ  s
   5
1	c                   sl   e Zd ZdZd fdd	ZdddZdd	 Z fd
dZ fddZdd Z	g fddZ
 fddZ  ZS )r   za
    Abstract subclass of C{ParserElement}, for combining and post-processing parsed tokens.
    Fc                s   t t|  |¡ t|tr@ttjtr2t |¡}nt t	|¡}|| _
d | _|d k	r|j| _|j| _|  |j¡ |j| _|j| _|j| _| j |j¡ d S )N)r  r   r§   ry   rÙ   Ú
issubclassr$   rw  r,   r   rP  r{  r  r  r  r  r~  r}  r  r  r  )r¥   rP  r  )rl  rv   rw   r§   ^  s    
zParseElementEnhance.__init__Tc             C   s2   | j d k	r| j j|||ddS td|| j| d S )NF)r  r   )rP  r  r   r  )r¥   rO  r    r  rv   rv   rw   r±  p  s    
zParseElementEnhance.parseImplc             C   s*   d| _ | j ¡ | _| jd k	r&| j ¡  | S )NF)r~  rP  rÚ   r  )r¥   rv   rv   rw   r  v  s
    

z#ParseElementEnhance.leaveWhitespacec                sr   t |trB|| jkrntt|  |¡ | jd k	rn| j | jd ¡ n,tt|  |¡ | jd k	rn| j | jd ¡ | S )Nrr   )ry   r+   r  r  r   r  rP  )r¥   r  )rl  rv   rw   r  }  s    



zParseElementEnhance.ignorec                s&   t t|  ¡  | jd k	r"| j ¡  | S )N)r  r   r×  rP  )r¥   )rl  rv   rw   r×    s    

zParseElementEnhance.streamlinec             C   sB   | |krt || g |d d  | g }| jd k	r>| j |¡ d S )N)r&   rP  r  )r¥   r¾   r  rv   rv   rw   r    s
    
z"ParseElementEnhance.checkRecursionc             C   s6   |d d  | g }| j d k	r(| j  |¡ |  g ¡ d S )N)rP  r  r  )r¥   r  r  rv   rv   rw   r    s    
zParseElementEnhance.validatec                sV   yt t|  ¡ S  tk
r"   Y nX | jd krP| jd k	rPd| jjt| jf | _| jS )Nz%s:(%s))	r  r   r¯   ro  r{  rP  rl  r   r   )r¥   )rl  rv   rw   r¯     s    zParseElementEnhance.__str__)F)T)r   r   r   r»   r§   r±  r  r  r×  r  r  r¯   r4  rv   rv   )rl  rw   r   Z  s   
c                   s*   e Zd ZdZ fddZdddZ  ZS )r   aõ  
    Lookahead matching of the given parse expression.  C{FollowedBy}
    does I{not} advance the parsing position within the input string, it only
    verifies that the specified parse expression matches at the current
    position.  C{FollowedBy} always returns a null token list.

    Example::
        # use FollowedBy to match a label only if it is followed by a ':'
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        
        OneOrMore(attr_expr).parseString("shape: SQUARE color: BLACK posn: upper left").pprint()
    prints::
        [['shape', 'SQUARE'], ['color', 'BLACK'], ['posn', 'upper left']]
    c                s   t t|  |¡ d| _d S )NT)r  r   r§   r  )r¥   rP  )rl  rv   rw   r§   ¸  s    zFollowedBy.__init__Tc             C   s   | j  ||¡ |g fS )N)rP  r»  )r¥   rO  r    r  rv   rv   rw   r±  ¼  s    zFollowedBy.parseImpl)T)r   r   r   r»   r§   r±  r4  rv   rv   )rl  rw   r   §  s   c                   s2   e Zd ZdZ fddZd	ddZdd Z  ZS )
r   a±  
    Lookahead to disallow matching with the given parse expression.  C{NotAny}
    does I{not} advance the parsing position within the input string, it only
    verifies that the specified parse expression does I{not} match at the current
    position.  Also, C{NotAny} does I{not} skip over leading whitespace. C{NotAny}
    always returns a null token list.  May be constructed using the '~' operator.

    Example::
        
    c                s0   t t|  |¡ d| _d| _dt| j | _d S )NFTzFound unwanted token, )r  r   r§   r~  r  r   rP  r  )r¥   rP  )rl  rv   rw   r§   Ì  s    zNotAny.__init__Tc             C   s&   | j  ||¡rt||| j| |g fS )N)rP  r¼  r   r  )r¥   rO  r    r  rv   rv   rw   r±  Ó  s    zNotAny.parseImplc             C   s4   t | dr| jS | jd kr.dt| j d | _| jS )NrË   z~{r  )rú   rË   r{  r   rP  )r¥   rv   rv   rw   r¯   Ø  s
    

zNotAny.__str__)T)r   r   r   r»   r§   r±  r¯   r4  rv   rv   )rl  rw   r   Á  s   

c                   s(   e Zd Zd fdd	ZdddZ  ZS )	Ú_MultipleMatchNc                sF   t t|  |¡ d| _|}t|tr.t |¡}|d k	r<| nd | _d S )NT)	r  r´  r§   r}  ry   rÙ   r$   rw  Ú	not_ender)r¥   rP  ÚstopOnÚender)rl  rv   rw   r§   â  s    

z_MultipleMatch.__init__Tc          	   C   sÂ   | j j}| j}| jd k	}|r$| jj}|r2||| ||||dd\}}yZ| j  }	xJ|rb||| |	rr|||}
n|}
|||
|\}}|s| ¡ rT||7 }qTW W n ttfk
r¸   Y nX ||fS )NF)r  )	rP  r  r­  rµ  r»  r  r  r   rÝ   )r¥   rO  r    r  Úself_expr_parseÚself_skip_ignorablesÚcheck_enderÚtry_not_enderr·  ÚhasIgnoreExprsrµ  Ú	tmptokensrv   rv   rw   r±  ê  s,    



z_MultipleMatch.parseImpl)N)T)r   r   r   r§   r±  r4  rv   rv   )rl  rw   r´  á  s   r´  c               @   s   e Zd ZdZdd ZdS )r   a  
    Repetition of one or more of the given expression.
    
    Parameters:
     - expr - expression that must match one or more times
     - stopOn - (default=C{None}) - expression for a terminating sentinel
          (only required if the sentinel would ordinarily match the repetition 
          expression)          

    Example::
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

        text = "shape: SQUARE posn: upper left color: BLACK"
        OneOrMore(attr_expr).parseString(text).pprint()  # Fail! read 'color' as data instead of next label -> [['shape', 'SQUARE color']]

        # use stopOn attribute for OneOrMore to avoid reading label string as part of the data
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        OneOrMore(attr_expr).parseString(text).pprint() # Better -> [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'BLACK']]
        
        # could also be written as
        (attr_expr * (1,)).parseString(text).pprint()
    c             C   s4   t | dr| jS | jd kr.dt| j d | _| jS )NrË   r  z}...)rú   rË   r{  r   rP  )r¥   rv   rv   rw   r¯   !  s
    

zOneOrMore.__str__N)r   r   r   r»   r¯   rv   rv   rv   rw   r     s   c                   s8   e Zd ZdZd
 fdd	Zd fdd	Zdd	 Z  ZS )r2   aw  
    Optional repetition of zero or more of the given expression.
    
    Parameters:
     - expr - expression that must match zero or more times
     - stopOn - (default=C{None}) - expression for a terminating sentinel
          (only required if the sentinel would ordinarily match the repetition 
          expression)          

    Example: similar to L{OneOrMore}
    Nc                s   t t| j||d d| _d S )N)r¶  T)r  r2   r§   r  )r¥   rP  r¶  )rl  rv   rw   r§   6  s    zZeroOrMore.__init__Tc          	      s6   yt t|  |||¡S  ttfk
r0   |g fS X d S )N)r  r2   r±  r   rÝ   )r¥   rO  r    r  )rl  rv   rw   r±  :  s    zZeroOrMore.parseImplc             C   s4   t | dr| jS | jd kr.dt| j d | _| jS )NrË   r  z]...)rú   rË   r{  r   rP  )r¥   rv   rv   rw   r¯   @  s
    

zZeroOrMore.__str__)N)T)r   r   r   r»   r§   r±  r¯   r4  rv   rv   )rl  rw   r2   *  s   c               @   s    e Zd Zdd ZeZdd ZdS )Ú
_NullTokenc             C   s   dS )NFrv   )r¥   rv   rv   rw   rõ   J  s    z_NullToken.__bool__c             C   s   dS )Nr   rv   )r¥   rv   rv   rw   r¯   M  s    z_NullToken.__str__N)r   r   r   rõ   rG  r¯   rv   rv   rv   rw   r¾  I  s   r¾  c                   s6   e Zd ZdZef fdd	Zd	ddZdd Z  ZS )
r   aa  
    Optional matching of the given expression.

    Parameters:
     - expr - expression that must match zero or more times
     - default (optional) - value to be returned if the optional expression is not found.

    Example::
        # US postal code can be a 5-digit zip, plus optional 4-digit qualifier
        zip = Combine(Word(nums, exact=5) + Optional('-' + Word(nums, exact=4)))
        zip.runTests('''
            # traditional ZIP code
            12345
            
            # ZIP+4 form
            12101-0001
            
            # invalid ZIP
            98765-
            ''')
    prints::
        # traditional ZIP code
        12345
        ['12345']

        # ZIP+4 form
        12101-0001
        ['12101-0001']

        # invalid ZIP
        98765-
             ^
        FAIL: Expected end of text (at char 5), (line:1, col:6)
    c                s.   t t| j|dd | jj| _|| _d| _d S )NF)r  T)r  r   r§   rP  r}  r
  r  )r¥   rP  r  )rl  rv   rw   r§   t  s    
zOptional.__init__Tc          	   C   sz   y| j j|||dd\}}W nT ttfk
rp   | jtk	rh| j jr^t| jg}| j|| j j< ql| jg}ng }Y nX ||fS )NF)r  )rP  r  r   rÝ   r
  Ú_optionalNotMatchedr|  r"   )r¥   rO  r    r  r·  rv   rv   rw   r±  z  s    


zOptional.parseImplc             C   s4   t | dr| jS | jd kr.dt| j d | _| jS )NrË   r  r  )rú   rË   r{  r   rP  )r¥   rv   rv   rw   r¯     s
    

zOptional.__str__)T)	r   r   r   r»   r¿  r§   r±  r¯   r4  rv   rv   )rl  rw   r   Q  s   "
c                   s,   e Zd ZdZd	 fdd	Zd
ddZ  ZS )r(   aÿ	  
    Token for skipping over all undefined text until the matched expression is found.

    Parameters:
     - expr - target expression marking the end of the data to be skipped
     - include - (default=C{False}) if True, the target expression is also parsed 
          (the skipped text and target expression are returned as a 2-element list).
     - ignore - (default=C{None}) used to define grammars (typically quoted strings and 
          comments) that might contain false matches to the target expression
     - failOn - (default=C{None}) define expressions that are not allowed to be 
          included in the skipped test; if found before the target expression is found, 
          the SkipTo is not a match

    Example::
        report = '''
            Outstanding Issues Report - 1 Jan 2000

               # | Severity | Description                               |  Days Open
            -----+----------+-------------------------------------------+-----------
             101 | Critical | Intermittent system crash                 |          6
              94 | Cosmetic | Spelling error on Login ('log|n')         |         14
              79 | Minor    | System slow when running too many reports |         47
            '''
        integer = Word(nums)
        SEP = Suppress('|')
        # use SkipTo to simply match everything up until the next SEP
        # - ignore quoted strings, so that a '|' character inside a quoted string does not match
        # - parse action will call token.strip() for each matched token, i.e., the description body
        string_data = SkipTo(SEP, ignore=quotedString)
        string_data.setParseAction(tokenMap(str.strip))
        ticket_expr = (integer("issue_num") + SEP 
                      + string_data("sev") + SEP 
                      + string_data("desc") + SEP 
                      + integer("days_open"))
        
        for tkt in ticket_expr.searchString(report):
            print tkt.dump()
    prints::
        ['101', 'Critical', 'Intermittent system crash', '6']
        - days_open: 6
        - desc: Intermittent system crash
        - issue_num: 101
        - sev: Critical
        ['94', 'Cosmetic', "Spelling error on Login ('log|n')", '14']
        - days_open: 14
        - desc: Spelling error on Login ('log|n')
        - issue_num: 94
        - sev: Cosmetic
        ['79', 'Minor', 'System slow when running too many reports', '47']
        - days_open: 47
        - desc: System slow when running too many reports
        - issue_num: 79
        - sev: Minor
    FNc                s`   t t|  |¡ || _d| _d| _|| _d| _t|t	rFt
 |¡| _n|| _dt| j | _d S )NTFzNo match found for )r  r(   r§   Ú
ignoreExprr  r  ÚincludeMatchrÌ   ry   rÙ   r$   rw  ÚfailOnr   rP  r  )r¥   r  Úincluder  rÂ  )rl  rv   rw   r§   È  s    
zSkipTo.__init__Tc          	   C   s,  |}t |}| j}| jj}| jd k	r,| jjnd }| jd k	rB| jjnd }	|}
x|
|krÖ|d k	rh|||
rhP |	d k	rx*y|	||
}
W qr tk
r   P Y qrX qrW y|||
ddd W n  tt	fk
rÐ   |
d7 }
Y qLX P qLW t||| j
| |
}||| }t|}| jr$||||dd\}}||7 }||fS )NF)r  r  r   )r  )ræ   rP  r  rÂ  r¼  rÀ  r»  r   r   rÝ   r  r"   rÁ  )r¥   rO  r    r  rR  r¯  rP  Ú
expr_parseÚself_failOn_canParseNextÚself_ignoreExpr_tryParseÚtmplocÚskiptextÚ
skipresultrJ  rv   rv   rw   r±  Õ  s<    

zSkipTo.parseImpl)FNN)T)r   r   r   r»   r§   r±  r4  rv   rv   )rl  rw   r(     s   6c                   sb   e Zd ZdZd fdd	Zdd Zdd Zd	d
 Zdd Zg fddZ	dd Z
 fddZ  ZS )r   aK  
    Forward declaration of an expression to be defined later -
    used for recursive grammars, such as algebraic infix notation.
    When the expression is known, it is assigned to the C{Forward} variable using the '<<' operator.

    Note: take care when assigning to C{Forward} not to overlook precedence of operators.
    Specifically, '|' has a lower precedence than '<<', so that::
        fwdExpr << a | b | c
    will actually be evaluated as::
        (fwdExpr << a) | b | c
    thereby leaving b and c out as parseable alternatives.  It is recommended that you
    explicitly group the values inserted into the C{Forward}::
        fwdExpr << (a | b | c)
    Converting to use the '<<=' operator instead will avoid this problem.

    See L{ParseResults.pprint} for an example of a recursive parser created using
    C{Forward}.
    Nc                s   t t| j|dd d S )NF)r  )r  r   r§   )r¥   r  )rl  rv   rw   r§     s    zForward.__init__c             C   sj   t |trt |¡}|| _d | _| jj| _| jj| _|  | jj	¡ | jj
| _
| jj| _| j | jj¡ | S )N)ry   rÙ   r$   rw  rP  r{  r  r  r  r  r~  r}  r  r  )r¥   r  rv   rv   rw   Ú
__lshift__  s    





zForward.__lshift__c             C   s   | |> S )Nrv   )r¥   r  rv   rv   rw   Ú__ilshift__'  s    zForward.__ilshift__c             C   s
   d| _ | S )NF)r~  )r¥   rv   rv   rw   r  *  s    zForward.leaveWhitespacec             C   s$   | j s d| _ | jd k	r | j ¡  | S )NT)r  rP  r×  )r¥   rv   rv   rw   r×  .  s
    

zForward.streamlinec             C   s>   | |kr0|d d  | g }| j d k	r0| j  |¡ |  g ¡ d S )N)rP  r  r  )r¥   r  r  rv   rv   rw   r  5  s
    
zForward.validatec             C   s>   t | dr| jS | jjd S d}W d | j| _X | jjd | S )NrË   z: ...ÚNonez: )rú   rË   rl  r   Z_revertClassÚ_ForwardNoRecurserP  r   )r¥   Ú	retStringrv   rv   rw   r¯   <  s    
     
zForward.__str__c                s.   | j d k	rtt|  ¡ S t }|| K }|S d S )N)rP  r  r   rÚ   )r¥   r   )rl  rv   rw   rÚ   M  s
    
zForward.copy)N)r   r   r   r»   r§   rÊ  rË  r  r×  r  r¯   rÚ   r4  rv   rv   )rl  rw   r     s   c               @   s   e Zd Zdd ZdS )rÍ  c             C   s   dS )Nz...rv   )r¥   rv   rv   rw   r¯   V  s    z_ForwardNoRecurse.__str__N)r   r   r   r¯   rv   rv   rv   rw   rÍ  U  s   rÍ  c                   s"   e Zd ZdZd fdd	Z  ZS )r-   zQ
    Abstract subclass of C{ParseExpression}, for converting parsed results.
    Fc                s   t t|  |¡ d| _d S )NF)r  r-   r§   r}  )r¥   rP  r  )rl  rv   rw   r§   ]  s    zTokenConverter.__init__)F)r   r   r   r»   r§   r4  rv   rv   )rl  rw   r-   Y  s   c                   s6   e Zd ZdZd
 fdd	Z fddZdd	 Z  ZS )r
   aÔ  
    Converter to concatenate all matching tokens to a single string.
    By default, the matching patterns must also be contiguous in the input string;
    this can be disabled by specifying C{'adjacent=False'} in the constructor.

    Example::
        real = Word(nums) + '.' + Word(nums)
        print(real.parseString('3.1416')) # -> ['3', '.', '1416']
        # will also erroneously match the following
        print(real.parseString('3. 1416')) # -> ['3', '.', '1416']

        real = Combine(Word(nums) + '.' + Word(nums))
        print(real.parseString('3.1416')) # -> ['3.1416']
        # no match when there are internal spaces
        print(real.parseString('3. 1416')) # -> Exception: Expected W:(0123...)
    r   Tc                s8   t t|  |¡ |r|  ¡  || _d| _|| _d| _d S )NT)r  r
   r§   r  Úadjacentr~  Ú
joinStringr  )r¥   rP  rÐ  rÏ  )rl  rv   rw   r§   r  s    zCombine.__init__c                s(   | j rt | |¡ ntt|  |¡ | S )N)rÏ  r$   r  r  r
   )r¥   r  )rl  rv   rw   r  |  s    zCombine.ignorec             C   sP   |  ¡ }|d d = |td | | j¡¡g| jd7 }| jrH| ¡ rH|gS |S d S )Nr   )rÍ   )rÚ   r"   r²   r  rÐ  r  r|  r  )r¥   rO  r    r²  ÚretToksrv   rv   rw   r³    s    
"zCombine.postParse)r   T)r   r   r   r»   r§   r  r³  r4  rv   rv   )rl  rw   r
   a  s   
c                   s(   e Zd ZdZ fddZdd Z  ZS )r   aù  
    Converter to return the matched tokens as a list - useful for returning tokens of C{L{ZeroOrMore}} and C{L{OneOrMore}} expressions.

    Example::
        ident = Word(alphas)
        num = Word(nums)
        term = ident | num
        func = ident + Optional(delimitedList(term))
        print(func.parseString("fn a,b,100"))  # -> ['fn', 'a', 'b', '100']

        func = ident + Group(Optional(delimitedList(term)))
        print(func.parseString("fn a,b,100"))  # -> ['fn', ['a', 'b', '100']]
    c                s   t t|  |¡ d| _d S )NT)r  r   r§   r}  )r¥   rP  )rl  rv   rw   r§     s    zGroup.__init__c             C   s   |gS )Nrv   )r¥   rO  r    r²  rv   rv   rw   r³    s    zGroup.postParse)r   r   r   r»   r§   r³  r4  rv   rv   )rl  rw   r     s   c                   s(   e Zd ZdZ fddZdd Z  ZS )r   aW  
    Converter to return a repetitive expression as a list, but also as a dictionary.
    Each element can also be referenced using the first token in the expression as its key.
    Useful for tabular report scraping when the first column can be used as a item key.

    Example::
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

        text = "shape: SQUARE posn: upper left color: light blue texture: burlap"
        attr_expr = (label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        
        # print attributes as plain groups
        print(OneOrMore(attr_expr).parseString(text).dump())
        
        # instead of OneOrMore(expr), parse using Dict(OneOrMore(Group(expr))) - Dict will auto-assign names
        result = Dict(OneOrMore(Group(attr_expr))).parseString(text)
        print(result.dump())
        
        # access named fields as dict entries, or output as dict
        print(result['shape'])        
        print(result.asDict())
    prints::
        ['shape', 'SQUARE', 'posn', 'upper left', 'color', 'light blue', 'texture', 'burlap']

        [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]
        - color: light blue
        - posn: upper left
        - shape: SQUARE
        - texture: burlap
        SQUARE
        {'color': 'light blue', 'posn': 'upper left', 'texture': 'burlap', 'shape': 'SQUARE'}
    See more examples at L{ParseResults} of accessing fields by results name.
    c                s   t t|  |¡ d| _d S )NT)r  r   r§   r}  )r¥   rP  )rl  rv   rw   r§   Æ  s    zDict.__init__c             C   sò   xÜt |D ]Ð\}}t|dkr q
|d }t|trBt|d  ¡ }t|dkr^td|||< q
t|dkrt|d tst|d |||< q
| ¡ }|d= t|dks¸t|trÈ| 	¡ rÈt||||< q
t|d |||< q
W | j
rê|gS |S d S )Nr   r   r   rq   )rë   ræ   ry   rt   r   r³   r¿   r"   rÚ   r  r|  )r¥   rO  r    r²  rÃ   ÚtokÚikeyÚ	dictvaluerv   rv   rw   r³  Ê  s$    
zDict.postParse)r   r   r   r»   r§   r³  r4  rv   rv   )rl  rw   r   ¢  s   #c               @   s    e Zd ZdZdd Zdd ZdS )r+   aV  
    Converter for ignoring the results of a parsed expression.

    Example::
        source = "a, b, c,d"
        wd = Word(alphas)
        wd_list1 = wd + ZeroOrMore(',' + wd)
        print(wd_list1.parseString(source))

        # often, delimiters that are useful during parsing are just in the
        # way afterward - use Suppress to keep them out of the parsed output
        wd_list2 = wd + ZeroOrMore(Suppress(',') + wd)
        print(wd_list2.parseString(source))
    prints::
        ['a', ',', 'b', ',', 'c', ',', 'd']
        ['a', 'b', 'c', 'd']
    (See also L{delimitedList}.)
    c             C   s   g S )Nrv   )r¥   rO  r    r²  rv   rv   rw   r³  ö  s    zSuppress.postParsec             C   s   | S )Nrv   )r¥   rv   rv   rw   r  ù  s    zSuppress.suppressN)r   r   r   r»   r³  r  rv   rv   rv   rw   r+   ã  s   c               @   s(   e Zd ZdZdd Zdd Zdd ZdS )	r   zI
    Wrapper for parse actions, to ensure they are only called once.
    c             C   s   t || _d| _d S )NF)rs  ÚcallableÚcalled)r¥   Ú
methodCallrv   rv   rw   r§     s    
zOnlyOnce.__init__c             C   s.   | j s|  |||¡}d| _ |S t||dd S )NTr   )rÖ  rÕ  r   )r¥   r   rX  ru   rK  rv   rv   rw   r    s
    zOnlyOnce.__call__c             C   s
   d| _ d S )NF)rÖ  )r¥   rv   rv   rw   Úreset
  s    zOnlyOnce.resetN)r   r   r   r»   r§   r  rØ  rv   rv   rv   rw   r   ý  s   c                s:   t    fdd}y j|_W n tk
r4   Y nX |S )as  
    Decorator for debugging parse actions. 
    
    When the parse action is called, this decorator will print C{">> entering I{method-name}(line:I{current_source_line}, I{parse_location}, I{matched_tokens})".}
    When the parse action completes, the decorator will print C{"<<"} followed by the returned value, or any exception that the parse action raised.

    Example::
        wd = Word(alphas)

        @traceParseAction
        def remove_duplicate_chars(tokens):
            return ''.join(sorted(set(''.join(tokens)))

        wds = OneOrMore(wd).setParseAction(remove_duplicate_chars)
        print(wds.parseString("slkdjs sld sldd sdlf sdljf"))
    prints::
        >>entering remove_duplicate_chars(line: 'slkdjs sld sldd sdlf sdljf', 0, (['slkdjs', 'sld', 'sldd', 'sdlf', 'sdljf'], {}))
        <<leaving remove_duplicate_chars (ret: 'dfjkls')
        ['dfjkls']
    c           
      s´    j }| dd  \}}}t| dkr8| d jj d | }tj d|t||||f ¡ y |  }W n8 tk
r } ztj d||f ¡  W d d }~X Y nX tj d||f ¡ |S )Nr[  ro   r   Ú.z">>entering %s(line: '%s', %d, %r)
z<<leaving %s (exception: %s)
z<<leaving %s (ret: %r)
)r   ræ   rl  r~   ÚstderrÚwriterG   ro  )ÚpaArgsÚthisFuncr   rX  ru   r   rV  )r  rv   rw   Úz#  s    ztraceParseAction.<locals>.z)rs  r   r¬   )r  rÞ  rv   )r  rw   rb     s    ú,Fc             C   s`   t | d t | d t |  d }|rBt| t||    |¡S | tt||    |¡S dS )aÇ  
    Helper to define a delimited list of expressions - the delimiter defaults to ','.
    By default, the list elements and delimiters can have intervening whitespace, and
    comments, but this can be overridden by passing C{combine=True} in the constructor.
    If C{combine} is set to C{True}, the matching tokens are returned as a single token
    string, with the delimiters included; otherwise, the matching tokens are returned
    as a list of tokens, with the delimiters suppressed.

    Example::
        delimitedList(Word(alphas)).parseString("aa,bb,cc") # -> ['aa', 'bb', 'cc']
        delimitedList(Word(hexnums), delim=':', combine=True).parseString("AA:BB:CC:DD:EE") # -> ['AA:BB:CC:DD:EE']
    z [r$  z]...N)r   r
   r2   r  r+   )rP  ÚdelimÚcombineÚdlNamerv   rv   rw   r@   9  s    $c                sj   t    fdd}|dkr0tt dd ¡}n| ¡ }| d¡ |j|dd |   d	t d
 ¡S )a:  
    Helper to define a counted list of expressions.
    This helper defines a pattern of the form::
        integer expr expr expr...
    where the leading integer tells how many expr expressions follow.
    The matched tokens returns the array of expr tokens as a list - the leading count token is suppressed.
    
    If C{intExpr} is specified, it should be a pyparsing expression that produces an integer value.

    Example::
        countedArray(Word(alphas)).parseString('2 ab cd ef')  # -> ['ab', 'cd']

        # in this parser, the leading integer value is given in binary,
        # '10' indicating that 2 values are in the array
        binaryConstant = Word('01').setParseAction(lambda t: int(t[0], 2))
        countedArray(Word(alphas), intExpr=binaryConstant).parseString('10 ab cd ef')  # -> ['ab', 'cd']
    c                s.   |d } |r t tg| p&t t>  g S )Nr   )r   r   rC   )r   rX  ru   rô  )Ú	arrayExprrP  rv   rw   ÚcountFieldParseAction_  s    "z+countedArray.<locals>.countFieldParseActionNc             S   s   t | d S )Nr   )rt   )ru   rv   rv   rw   rx   d  s    zcountedArray.<locals>.<lambda>ZarrayLenT)r  z(len) z...)r   r/   rR   r   rÚ   r  r¢  r   )rP  ÚintExprrä  rv   )rã  rP  rw   r<   L  s    
c             C   s:   g }x0| D ](}t |tr(| t|¡ q
| |¡ q
W |S )N)ry   rÔ   r  ræ  r  )ÚLr   rÃ   rv   rv   rw   ræ  k  s    

ræ  c                s6   t    fdd}| j|dd   dt|  ¡  S )a*  
    Helper to define an expression that is indirectly defined from
    the tokens matched in a previous expression, that is, it looks
    for a 'repeat' of a previous expression.  For example::
        first = Word(nums)
        second = matchPreviousLiteral(first)
        matchExpr = first + ":" + second
    will match C{"1:1"}, but not C{"1:2"}.  Because this matches a
    previous literal, will also match the leading C{"1:1"} in C{"1:10"}.
    If this is not desired, use C{matchPreviousExpr}.
    Do I{not} use with packrat parsing enabled.
    c                sP   |rBt |dkr |d >  qLt| ¡ } tdd |D >  n
 t >  d S )Nr   r   c             s   s   | ]}t |V  qd S )N)r   )r   Úttrv   rv   rw   r     s    zDmatchPreviousLiteral.<locals>.copyTokenToRepeater.<locals>.<genexpr>)ræ   ræ  rÌ   r   r   )r   rX  ru   Útflat)Úreprv   rw   ÚcopyTokenToRepeater  s    z1matchPreviousLiteral.<locals>.copyTokenToRepeaterT)r  z(prev) )r   r¢  r  r   )rP  rê  rv   )ré  rw   rO   t  s
    
c                sF   t   |  ¡ } |K   fdd}| j|dd   dt|  ¡  S )aS  
    Helper to define an expression that is indirectly defined from
    the tokens matched in a previous expression, that is, it looks
    for a 'repeat' of a previous expression.  For example::
        first = Word(nums)
        second = matchPreviousExpr(first)
        matchExpr = first + ":" + second
    will match C{"1:1"}, but not C{"1:2"}.  Because this matches by
    expressions, will I{not} match the leading C{"1:1"} in C{"1:10"};
    the expressions are evaluated first, and then compared, so
    C{"1"} is compared with C{"10"}.
    Do I{not} use with packrat parsing enabled.
    c                s*   t | ¡   fdd}j|dd d S )Nc                s$   t | ¡ }| kr tdddd S )Nr   r   )ræ  rÌ   r   )r   rX  ru   ÚtheseTokens)ÚmatchTokensrv   rw   ÚmustMatchTheseTokens£  s    zLmatchPreviousExpr.<locals>.copyTokenToRepeater.<locals>.mustMatchTheseTokensT)r  )ræ  rÌ   r   )r   rX  ru   rí  )ré  )rì  rw   rê  ¡  s    z.matchPreviousExpr.<locals>.copyTokenToRepeaterT)r  z(prev) )r   rÚ   r¢  r  r   )rP  Úe2rê  rv   )ré  rw   rN     s    c             C   s>   xdD ]}|   |t| ¡} qW |   dd¡} |   dd¡} t| S )Nz\^-]r'  z\nry  z\t)r   Ú_bslashr   )r   r   rv   rv   rw   rU  ¬  s
    
rU  Tc       
         sÈ  |rdd }dd }t  ndd }dd }t g }t| trF|  ¡ }n&t| tjr\t| }ntj	dt
dd |svt S d	}x|t|d
 k r|| }xnt||d
 d D ]N\}}	||	|rÐ||| d
 = P q¬|||	r¬||| d
 = | ||	¡ |	}P q¬W |d
7 }q|W |s¦|r¦yht|td |¡krXtdd dd |D ¡  d |¡¡S td dd |D ¡ d |¡¡S W n& tk
r¤   tj	dt
dd Y nX t fdd|D  d |¡¡S )aÛ  
    Helper to quickly define a set of alternative Literals, and makes sure to do
    longest-first testing when there is a conflict, regardless of the input order,
    but returns a C{L{MatchFirst}} for best performance.

    Parameters:
     - strs - a string of space-delimited literals, or a collection of string literals
     - caseless - (default=C{False}) - treat all literals as caseless
     - useRegex - (default=C{True}) - as an optimization, will generate a Regex
          object; otherwise, will generate a C{MatchFirst} object (if C{caseless=True}, or
          if creating a C{Regex} raises an exception)

    Example::
        comp_oper = oneOf("< = > <= >= !=")
        var = Word(alphas)
        number = Word(nums)
        term = var | number
        comparison_expr = term + comp_oper + term
        print(comparison_expr.searchString("B = 12  AA=23 B<=AA AA>12"))
    prints::
        [['B', '=', '12'], ['AA', '=', '23'], ['B', '<=', 'AA'], ['AA', '>', '12']]
    c             S   s   |   ¡ |  ¡ kS )N)r<  )r  Úbrv   rv   rw   rx   Ì  s    zoneOf.<locals>.<lambda>c             S   s   |  ¡  |   ¡ ¡S )N)r<  r9  )r  rð  rv   rv   rw   rx   Í  s    c             S   s   | |kS )Nrv   )r  rð  rv   rv   rw   rx   Ð  s    c             S   s
   |  | ¡S )N)r9  )r  rð  rv   rv   rw   rx   Ñ  s    z6Invalid argument to oneOf, expected string or iterablerq   )rí  r   r   Nr   z[%s]c             s   s   | ]}t |V  qd S )N)rU  )r   Úsymrv   rv   rw   r   ò  s    zoneOf.<locals>.<genexpr>z | ú|c             s   s   | ]}t  |¡V  qd S )N)r  rW  )r   rñ  rv   rv   rw   r   ô  s    z7Exception creating Regex for oneOf, building MatchFirstc             3   s   | ]} |V  qd S )Nrv   )r   rñ  )ÚparseElementClassrv   rw   r   û  s    )r   r   ry   rÙ   r   rÉ  r  rÔ   rî  rï  rð  r   ræ   rë   r  r²   r'   r  ro  r   )
Ústrsr;  ÚuseRegexÚisequalÚmasksÚsymbolsrÃ   Úcurrï   r  rv   )ró  rw   rS   ´  sL    





((c             C   s   t tt| | S )aÜ  
    Helper to easily and clearly define a dictionary by specifying the respective patterns
    for the key and value.  Takes care of defining the C{L{Dict}}, C{L{ZeroOrMore}}, and C{L{Group}} tokens
    in the proper order.  The key pattern can include delimiting markers or punctuation,
    as long as they are suppressed, thereby leaving the significant key text.  The value
    pattern can include named results, so that the C{Dict} results can include named token
    fields.

    Example::
        text = "shape: SQUARE posn: upper left color: light blue texture: burlap"
        attr_expr = (label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        print(OneOrMore(attr_expr).parseString(text).dump())
        
        attr_label = label
        attr_value = Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join)

        # similar to Dict, but simpler call format
        result = dictOf(attr_label, attr_value).parseString(text)
        print(result.dump())
        print(result['shape'])
        print(result.shape)  # object attribute access works too
        print(result.asDict())
    prints::
        [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]
        - color: light blue
        - posn: upper left
        - shape: SQUARE
        - texture: burlap
        SQUARE
        SQUARE
        {'color': 'light blue', 'shape': 'SQUARE', 'posn': 'upper left', 'texture': 'burlap'}
    )r   r2   r   )r	  rð   rv   rv   rw   rA   ý  s    !c             C   s^   t   dd ¡}| ¡ }d|_|d|  |d }|r@dd }ndd }| |¡ | j|_|S )	a  
    Helper to return the original, untokenized text for a given expression.  Useful to
    restore the parsed fields of an HTML start tag into the raw tag text itself, or to
    revert separate tokens with intervening whitespace back to the original matching
    input text. By default, returns astring containing the original parsed text.  
       
    If the optional C{asString} argument is passed as C{False}, then the return value is a 
    C{L{ParseResults}} containing any results names that were originally matched, and a 
    single token containing the original matched text from the input string.  So if 
    the expression passed to C{L{originalTextFor}} contains expressions with defined
    results names, you must set C{asString} to C{False} if you want to preserve those
    results name values.

    Example::
        src = "this is test <b> bold <i>text</i> </b> normal text "
        for tag in ("b","i"):
            opener,closer = makeHTMLTags(tag)
            patt = originalTextFor(opener + SkipTo(closer) + closer)
            print(patt.searchString(src)[0])
    prints::
        ['<b> bold <i>text</i> </b>']
        ['<i>text</i>']
    c             S   s   |S )Nrv   )r   r    ru   rv   rv   rw   rx   8  s    z!originalTextFor.<locals>.<lambda>FÚ_original_startÚ_original_endc             S   s   | |j |j S )N)rú  rû  )r   rX  ru   rv   rv   rw   rx   =  s    c             S   s&   | |  d¡|  d¡ g|d d < d S )Nrú  rû  )r  )r   rX  ru   rv   rv   rw   ÚextractText?  s    z$originalTextFor.<locals>.extractText)r   r   rÚ   r  r  )rP  ÚasStringÚ	locMarkerÚendlocMarkerÚ	matchExprrü  rv   rv   rw   rg      s    

c             C   s   t |  dd ¡S )zp
    Helper to undo pyparsing's default grouping of And expressions, even
    if all but one are non-empty.
    c             S   s   | d S )Nr   rv   )ru   rv   rv   rw   rx   J  s    zungroup.<locals>.<lambda>)r-   r   )rP  rv   rv   rw   rh   E  s    c             C   s4   t   dd ¡}t|d| d | ¡  ¡ d S )a©  
    Helper to decorate a returned token with its starting and ending locations in the input string.
    This helper adds the following results names:
     - locn_start = location where matched expression begins
     - locn_end = location where matched expression ends
     - value = the actual parsed results

    Be careful if the input text contains C{<TAB>} characters, you may want to call
    C{L{ParserElement.parseWithTabs}}

    Example::
        wd = Word(alphas)
        for match in locatedExpr(wd).searchString("ljsdf123lksdjjf123lkkjj1222"):
            print(match)
    prints::
        [[0, 'ljsdf', 5]]
        [[8, 'lksdjjf', 15]]
        [[18, 'lkkjj', 23]]
    c             S   s   |S )Nrv   )r   rX  ru   rv   rv   rw   rx   `  s    zlocatedExpr.<locals>.<lambda>Z
locn_startrð   Zlocn_end)r   r   r   rÚ   r  )rP  Úlocatorrv   rv   rw   rj   L  s    z\[]-*.$+^?()~ )r[  c             C   s   |d d S )Nr   r   rv   )r   rX  ru   rv   rv   rw   rx   k  s    rx   z\\0?[xX][0-9a-fA-F]+c             C   s   t t|d  d¡dS )Nr   z\0xé   )Úunichrrt   Úlstrip)r   rX  ru   rv   rv   rw   rx   l  s    z	\\0[0-7]+c             C   s   t t|d dd  dS )Nr   r   é   )r  rt   )r   rX  ru   rv   rv   rw   rx   m  s    z\])rL  r[  z\wr  r  r%  ÚnegateÚbodyr  c                sB   dd  y d   fddt | ¡jD ¡S  tk
r<   dS X dS )aÜ  
    Helper to easily define string ranges for use in Word construction.  Borrows
    syntax from regexp '[]' string range definitions::
        srange("[0-9]")   -> "0123456789"
        srange("[a-z]")   -> "abcdefghijklmnopqrstuvwxyz"
        srange("[a-z$_]") -> "abcdefghijklmnopqrstuvwxyz$_"
    The input string must be enclosed in []'s, and the returned string is the expanded
    character set joined into a single string.
    The values enclosed in the []'s may be:
     - a single character
     - an escaped character with a leading backslash (such as C{\-} or C{\]})
     - an escaped hex character with a leading C{'\x'} (C{\x21}, which is a C{'!'} character) 
         (C{\0x##} is also supported for backwards compatibility) 
     - an escaped octal character with a leading C{'\0'} (C{\041}, which is a C{'!'} character)
     - a range of any of the above, separated by a dash (C{'a-z'}, etc.)
     - any combination of the above (C{'aeiouy'}, C{'a-zA-Z0-9_$'}, etc.)
    c             S   s<   t | ts| S d dd tt| d t| d d D ¡S )Nr   c             s   s   | ]}t |V  qd S )N)r  )r   r   rv   rv   rw   r     s    z+srange.<locals>.<lambda>.<locals>.<genexpr>r   r   )ry   r"   r²   rç   Úord)Úprv   rv   rw   rx     s    zsrange.<locals>.<lambda>r   c             3   s   | ]} |V  qd S )Nrv   )r   Úpart)Ú	_expandedrv   rw   r     s    zsrange.<locals>.<genexpr>N)r²   Ú_reBracketExprrÜ  r  ro  )r   rv   )r  rw   r_   r  s
     c                s    fdd}|S )zt
    Helper method for defining parse actions that require matching at a specific
    column in the input text.
    c                s"   t ||  krt| |d  d S )Nzmatched token not at column %d)r9   r   )rI  ÚlocnrT  )rô  rv   rw   Ú	verifyCol  s    z!matchOnlyAtCol.<locals>.verifyColrv   )rô  r  rv   )rô  rw   rM     s    c                s    fddS )a¹  
    Helper method for common parse actions that simply return a literal value.  Especially
    useful when used with C{L{transformString<ParserElement.transformString>}()}.

    Example::
        num = Word(nums).setParseAction(lambda toks: int(toks[0]))
        na = oneOf("N/A NA").setParseAction(replaceWith(math.nan))
        term = na | num
        
        OneOrMore(term).parseString("324 234 N/A 234") # -> [324, 234, nan, 234]
    c                s    gS )Nrv   )r   rX  ru   )ÚreplStrrv   rw   rx      s    zreplaceWith.<locals>.<lambda>rv   )r  rv   )r  rw   r\     s    c             C   s   |d dd S )a  
    Helper parse action for removing quotation marks from parsed quoted strings.

    Example::
        # by default, quotation marks are included in parsed results
        quotedString.parseString("'Now is the Winter of our Discontent'") # -> ["'Now is the Winter of our Discontent'"]

        # use removeQuotes to strip quotation marks from parsed results
        quotedString.setParseAction(removeQuotes)
        quotedString.parseString("'Now is the Winter of our Discontent'") # -> ["Now is the Winter of our Discontent"]
    r   r   rr   rv   )r   rX  ru   rv   rv   rw   rZ   ¢  s    c                sN    fdd}yt dt dj}W n tk
rB   t}Y nX ||_|S )aG  
    Helper to define a parse action by mapping a function to all elements of a ParseResults list.If any additional 
    args are passed, they are forwarded to the given function as additional arguments after
    the token, as in C{hex_integer = Word(hexnums).setParseAction(tokenMap(int, 16))}, which will convert the
    parsed data to an integer using base 16.

    Example (compare the last to example in L{ParserElement.transformString}::
        hex_ints = OneOrMore(Word(hexnums)).setParseAction(tokenMap(int, 16))
        hex_ints.runTests('''
            00 11 22 aa FF 0a 0d 1a
            ''')
        
        upperword = Word(alphas).setParseAction(tokenMap(str.upper))
        OneOrMore(upperword).runTests('''
            my kingdom for a horse
            ''')

        wd = Word(alphas).setParseAction(tokenMap(str.title))
        OneOrMore(wd).setParseAction(' '.join).runTests('''
            now is the winter of our discontent made glorious summer by this sun of york
            ''')
    prints::
        00 11 22 aa FF 0a 0d 1a
        [0, 17, 34, 170, 255, 10, 13, 26]

        my kingdom for a horse
        ['MY', 'KINGDOM', 'FOR', 'A', 'HORSE']

        now is the winter of our discontent made glorious summer by this sun of york
        ['Now Is The Winter Of Our Discontent Made Glorious Summer By This Sun Of York']
    c                s    fdd|D S )Nc                s   g | ]}|f  qS rv   rv   )r   Útokn)r¤   rY  rv   rw   rß   Ñ  s    z(tokenMap.<locals>.pa.<locals>.<listcomp>rv   )r   rX  ru   )r¤   rY  rv   rw   r§  Ð  s    ztokenMap.<locals>.par   rl  )rn  r   ro  r{   )rY  r¤   r§  rr  rv   )r¤   rY  rw   rm   °  s     c             C   s   t |  ¡ S )N)r   r<  )ru   rv   rv   rw   rx   Ü  s    c             C   s   t |  ¡ S )N)r   Úlower)ru   rv   rv   rw   rx   ß  s    c          	   C   s¢  t | tr| }t| | d} n| j}tttd }|rt ¡  	t
¡}td| d ttt|td |  tddgd d	¡ 	d
d ¡ td }nd dd tD ¡}t ¡  	t
¡t|B }td| d ttt| 	t¡ttd|   tddgd d	¡ 	dd ¡ td }ttd|  d }| dd | dd¡ ¡  ¡ ¡ ¡ d| ¡}| dd | dd¡ ¡  ¡ ¡ ¡ d| ¡}||_||_||fS )zRInternal helper to construct opening and closing tag expressions, given a tag name)r;  z_-:r(  Útagú=ú/F)r  rC   c             S   s   |d dkS )Nr   r  rv   )r   rX  ru   rv   rv   rw   rx   ï  s    z_makeTags.<locals>.<lambda>r)  r   c             s   s   | ]}|d kr|V  qdS )r)  Nrv   )r   r   rv   rv   rw   r   ñ  s    z_makeTags.<locals>.<genexpr>c             S   s   |d dkS )Nr   r  rv   )r   rX  ru   rv   rv   rw   rx   ö  s    z</rE  ú:r$  z<%s>r\  z</%s>)ry   rÙ   r   rË   r/   r4   r3   r>   rÚ   r   rZ   r+   r   r2   r   r   r  r²   rV   rY   rB   r
   Ú_Lr   Útitler   r  r  )ÚtagStrÚxmlÚresnameÚtagAttrNameÚtagAttrValueÚopenTagÚprintablesLessRAbrackÚcloseTagrv   rv   rw   Ú	_makeTagsâ  s"    
T\..r   c             C   s
   t | dS )a   
    Helper to construct opening and closing tag expressions for HTML, given a tag name. Matches
    tags in either upper or lower case, attributes with namespaces and with quoted or unquoted values.

    Example::
        text = '<td>More info at the <a href="http://pyparsing.wikispaces.com">pyparsing</a> wiki page</td>'
        # makeHTMLTags returns pyparsing expressions for the opening and closing tags as a 2-tuple
        a,a_end = makeHTMLTags("A")
        link_expr = a + SkipTo(a_end)("link_text") + a_end
        
        for link in link_expr.searchString(text):
            # attributes in the <A> tag (like "href" shown here) are also accessible as named results
            print(link.link_text, '->', link.href)
    prints::
        pyparsing -> http://pyparsing.wikispaces.com
    F)r   )r  rv   rv   rw   rK   ÿ  s    c             C   s
   t | dS )zº
    Helper to construct opening and closing tag expressions for XML, given a tag name. Matches
    tags only in the given upper/lower case.

    Example: similar to L{makeHTMLTags}
    T)r   )r  rv   rv   rw   rL     s    c                 s8   | r| dd  n|  ¡  dd  D   fdd}|S )a<  
    Helper to create a validating parse action to be used with start tags created
    with C{L{makeXMLTags}} or C{L{makeHTMLTags}}. Use C{withAttribute} to qualify a starting tag
    with a required attribute value, to avoid false matches on common tags such as
    C{<TD>} or C{<DIV>}.

    Call C{withAttribute} with a series of attribute names and values. Specify the list
    of filter attributes names and values as:
     - keyword arguments, as in C{(align="right")}, or
     - as an explicit dict with C{**} operator, when an attribute name is also a Python
          reserved word, as in C{**{"class":"Customer", "align":"right"}}
     - a list of name-value tuples, as in ( ("ns1:class", "Customer"), ("ns2:align","right") )
    For attribute names with a namespace prefix, you must use the second form.  Attribute
    names are matched insensitive to upper/lower case.
       
    If just testing for C{class} (with or without a namespace), use C{L{withClass}}.

    To verify that the attribute exists, but without specifying a value, pass
    C{withAttribute.ANY_VALUE} as the value.

    Example::
        html = '''
            <div>
            Some text
            <div type="grid">1 4 0 1 0</div>
            <div type="graph">1,3 2,3 1,1</div>
            <div>this has no type</div>
            </div>
                
        '''
        div,div_end = makeHTMLTags("div")

        # only match div tag having a type attribute with value "grid"
        div_grid = div().setParseAction(withAttribute(type="grid"))
        grid_expr = div_grid + SkipTo(div | div_end)("body")
        for grid_header in grid_expr.searchString(html):
            print(grid_header.body)
        
        # construct a match with any div tag having a type attribute, regardless of the value
        div_any_type = div().setParseAction(withAttribute(type=withAttribute.ANY_VALUE))
        div_expr = div_any_type + SkipTo(div | div_end)("body")
        for div_header in div_expr.searchString(html):
            print(div_header.body)
    prints::
        1 4 0 1 0

        1 4 0 1 0
        1,3 2,3 1,1
    Nc             S   s   g | ]\}}||fqS rv   rv   )r   rã   rÞ   rv   rv   rw   rß   Q  s    z!withAttribute.<locals>.<listcomp>c                s^   xX D ]P\}}||kr&t | |d| |tjkr|| |krt | |d||| |f qW d S )Nzno matching attribute z+attribute '%s' has value '%s', must be '%s')r   re   Ú	ANY_VALUE)r   rX  r·  ÚattrNameÚ	attrValue)Úattrsrv   rw   r§  R  s    zwithAttribute.<locals>.pa)rê   )r¤   ÚattrDictr§  rv   )r$  rw   re     s    2c             C   s   |rd| nd}t f || iS )aã  
    Simplified version of C{L{withAttribute}} when matching on a div class - made
    difficult because C{class} is a reserved word in Python.

    Example::
        html = '''
            <div>
            Some text
            <div class="grid">1 4 0 1 0</div>
            <div class="graph">1,3 2,3 1,1</div>
            <div>this &lt;div&gt; has no class</div>
            </div>
                
        '''
        div,div_end = makeHTMLTags("div")
        div_grid = div().setParseAction(withClass("grid"))
        
        grid_expr = div_grid + SkipTo(div | div_end)("body")
        for grid_header in grid_expr.searchString(html):
            print(grid_header.body)
        
        div_any_type = div().setParseAction(withClass(withAttribute.ANY_VALUE))
        div_expr = div_any_type + SkipTo(div | div_end)("body")
        for div_header in div_expr.searchString(html):
            print(div_header.body)
    prints::
        1 4 0 1 0

        1 4 0 1 0
        1,3 2,3 1,1
    z%s:classÚclass)re   )Ú	classnameÚ	namespaceÚ	classattrrv   rv   rw   rk   \  s     ú(rj  c             C   s  t  }| || | B }x^t|D ]P\}}|d dd \}}	}
}|	dk rTd| nd| }|	dkr|dksxt|dkrtd|\}}t   |¡}|
tjkrb|	d	krÆt|| t|t	|  }n|	dkr|dk	rþt|| | t|t	||   }nt|| t|t	|  }nD|	dkrXt|| | | | t|| | | |  }ntd
nì|
tj
krF|	d	kr¨t|tst|}t|j| t||  }n|	dkr |dk	rât|| | t|t	||   }nt|| t|t	|  }nD|	dkr<t|| | | | t|| | | |  }ntd
ntd|r^| |¡ || |¡|B K }|}q"W ||K }|S )a	  
    Helper method for constructing grammars of expressions made up of
    operators working in a precedence hierarchy.  Operators may be unary or
    binary, left- or right-associative.  Parse actions can also be attached
    to operator expressions. The generated parser will also recognize the use 
    of parentheses to override operator precedences (see example below).
    
    Note: if you define a deep operator list, you may see performance issues
    when using infixNotation. See L{ParserElement.enablePackrat} for a
    mechanism to potentially improve your parser performance.

    Parameters:
     - baseExpr - expression representing the most basic element for the nested
     - opList - list of tuples, one for each operator precedence level in the
      expression grammar; each tuple is of the form
      (opExpr, numTerms, rightLeftAssoc, parseAction), where:
       - opExpr is the pyparsing expression for the operator;
          may also be a string, which will be converted to a Literal;
          if numTerms is 3, opExpr is a tuple of two expressions, for the
          two operators separating the 3 terms
       - numTerms is the number of terms for this operator (must
          be 1, 2, or 3)
       - rightLeftAssoc is the indicator whether the operator is
          right or left associative, using the pyparsing-defined
          constants C{opAssoc.RIGHT} and C{opAssoc.LEFT}.
       - parseAction is the parse action to be associated with
          expressions matching this operator expression (the
          parse action tuple member may be omitted)
     - lpar - expression for matching left-parentheses (default=C{Suppress('(')})
     - rpar - expression for matching right-parentheses (default=C{Suppress(')')})

    Example::
        # simple example of four-function arithmetic with ints and variable names
        integer = pyparsing_common.signed_integer
        varname = pyparsing_common.identifier 
        
        arith_expr = infixNotation(integer | varname,
            [
            ('-', 1, opAssoc.RIGHT),
            (oneOf('* /'), 2, opAssoc.LEFT),
            (oneOf('+ -'), 2, opAssoc.LEFT),
            ])
        
        arith_expr.runTests('''
            5+3*6
            (5+3)*6
            -2--11
            ''', fullDump=False)
    prints::
        5+3*6
        [[5, '+', [3, '*', 6]]]

        (5+3)*6
        [[[5, '+', 3], '*', 6]]

        -2--11
        [[['-', 2], '-', ['-', 11]]]
    )NNr`  ro   z%s termz	%s%s termrq   z@if numterms=3, opExpr must be a tuple or list of two expressionsr   z6operator must be unary (1), binary (2), or ternary (3)z2operator must indicate right or left associativity)r   rë   ræ   r÷  r  rT   ÚLEFTr   r   r   ÚRIGHTry   r   rP  r   )ÚbaseExprÚopListÚlparÚrparr   ÚlastExprrÃ   ÚoperDefÚopExprÚarityÚrightLeftAssocr§  ÚtermNameÚopExpr1ÚopExpr2ÚthisExprr   rv   rv   rw   ri     sR    ;
&




&


z4"(?:[^"\n\r\\]|(?:"")|(?:\\(?:[^x]|x[0-9a-fA-F]+)))*ú"z string enclosed in double quotesz4'(?:[^'\n\r\\]|(?:'')|(?:\\(?:[^x]|x[0-9a-fA-F]+)))*ú'z string enclosed in single quotesz*quotedString using single or double quotesÚuzunicode string literalc             C   s  | |krt d|dkr*t| tr"t|tr"t| dkr¨t|dkr¨|dk	rtt| t| | tj dd  	dd ¡}n$t
 ¡ t| | tj  	dd ¡ }nx|dk	rìtt| t|   t|  ttjdd  	dd ¡}n4ttt|  t|  ttjdd  	d	d ¡}nt d
t }|dk	rd|tt| t||B |B  t| K }n$|tt| t||B  t| K }| d| |f ¡ |S )a~	  
    Helper method for defining nested lists enclosed in opening and closing
    delimiters ("(" and ")" are the default).

    Parameters:
     - opener - opening character for a nested list (default=C{"("}); can also be a pyparsing expression
     - closer - closing character for a nested list (default=C{")"}); can also be a pyparsing expression
     - content - expression for items within the nested lists (default=C{None})
     - ignoreExpr - expression for ignoring opening and closing delimiters (default=C{quotedString})

    If an expression is not provided for the content argument, the nested
    expression will capture all whitespace-delimited content between delimiters
    as a list of separate values.

    Use the C{ignoreExpr} argument to define expressions that may contain
    opening or closing characters that should not be treated as opening
    or closing characters for nesting, such as quotedString or a comment
    expression.  Specify multiple expressions using an C{L{Or}} or C{L{MatchFirst}}.
    The default is L{quotedString}, but if no expressions are to be ignored,
    then pass C{None} for this argument.

    Example::
        data_type = oneOf("void int short long char float double")
        decl_data_type = Combine(data_type + Optional(Word('*')))
        ident = Word(alphas+'_', alphanums+'_')
        number = pyparsing_common.number
        arg = Group(decl_data_type + ident)
        LPAR,RPAR = map(Suppress, "()")

        code_body = nestedExpr('{', '}', ignoreExpr=(quotedString | cStyleComment))

        c_function = (decl_data_type("type") 
                      + ident("name")
                      + LPAR + Optional(delimitedList(arg), [])("args") + RPAR 
                      + code_body("body"))
        c_function.ignore(cStyleComment)
        
        source_code = '''
            int is_odd(int x) { 
                return (x%2); 
            }
                
            int dec_to_hex(char hchar) { 
                if (hchar >= '0' && hchar <= '9') { 
                    return (ord(hchar)-ord('0')); 
                } else { 
                    return (10+ord(hchar)-ord('A'));
                } 
            }
        '''
        for func in c_function.searchString(source_code):
            print("%(name)s (%(type)s) args: %(args)s" % func)

    prints::
        is_odd (int) args: [['int', 'x']]
        dec_to_hex (int) args: [['char', 'hchar']]
    z.opening and closing strings cannot be the sameNr   )r[  c             S   s   | d   ¡ S )Nr   )r³   )ru   rv   rv   rw   rx   9  s    znestedExpr.<locals>.<lambda>c             S   s   | d   ¡ S )Nr   )r³   )ru   rv   rv   rw   rx   <  s    c             S   s   | d   ¡ S )Nr   )r³   )ru   rv   rv   rw   rx   B  s    c             S   s   | d   ¡ S )Nr   )r³   )ru   rv   rv   rw   rx   F  s    zOopening and closing arguments must be strings if no content expression is givenznested %s%s expression)r÷  ry   rÙ   ræ   r
   r   r	   r$   rt  r   rC   rÚ   r   r   r   r+   r2   r  )ÚopenerÚcloserÚcontentrÀ  r   rv   rv   rw   rP   ÷  s4    :

*$c                sä    fdd} fdd} fdd}t t  d¡ ¡ }t t  |¡  d¡}t  |¡ d	¡}t  |¡ d
¡}	|r¦tt|| t |t|  t|  |	 }
n$tt|t |t|  t|  }
|  	t
t  ¡ |
 d¡S )a
	  
    Helper method for defining space-delimited indentation blocks, such as
    those used to define block statements in Python source code.

    Parameters:
     - blockStatementExpr - expression defining syntax of statement that
            is repeated within the indented block
     - indentStack - list created by caller to manage indentation stack
            (multiple statementWithIndentedBlock expressions within a single grammar
            should share a common indentStack)
     - indent - boolean indicating whether block must be indented beyond the
            the current level; set to False for block of left-most statements
            (default=C{True})

    A valid block must contain at least one C{blockStatement}.

    Example::
        data = '''
        def A(z):
          A1
          B = 100
          G = A2
          A2
          A3
        B
        def BB(a,b,c):
          BB1
          def BBA():
            bba1
            bba2
            bba3
        C
        D
        def spam(x,y):
             def eggs(z):
                 pass
        '''


        indentStack = [1]
        stmt = Forward()

        identifier = Word(alphas, alphanums)
        funcDecl = ("def" + identifier + Group( "(" + Optional( delimitedList(identifier) ) + ")" ) + ":")
        func_body = indentedBlock(stmt, indentStack)
        funcDef = Group( funcDecl + func_body )

        rvalue = Forward()
        funcCall = Group(identifier + "(" + Optional(delimitedList(rvalue)) + ")")
        rvalue << (funcCall | identifier | Word(nums))
        assignment = Group(identifier + "=" + rvalue)
        stmt << ( funcDef | assignment | identifier )

        module_body = OneOrMore(stmt)

        parseTree = module_body.parseString(data)
        parseTree.pprint()
    prints::
        [['def',
          'A',
          ['(', 'z', ')'],
          ':',
          [['A1'], [['B', '=', '100']], [['G', '=', 'A2']], ['A2'], ['A3']]],
         'B',
         ['def',
          'BB',
          ['(', 'a', 'b', 'c', ')'],
          ':',
          [['BB1'], [['def', 'BBA', ['(', ')'], ':', [['bba1'], ['bba2'], ['bba3']]]]]],
         'C',
         'D',
         ['def',
          'spam',
          ['(', 'x', 'y', ')'],
          ':',
          [[['def', 'eggs', ['(', 'z', ')'], ':', [['pass']]]]]]] 
    c                sN   |t | krd S t|| }| d krJ| d kr>t| |dt| |dd S )Nrr   zillegal nestingznot a peer entry)ræ   r9   r!   r   )r   rX  ru   ÚcurCol)ÚindentStackrv   rw   ÚcheckPeerIndent  s     
z&indentedBlock.<locals>.checkPeerIndentc                s2   t || }| d kr"  |¡ nt| |dd S )Nrr   znot a subentry)r9   r  r   )r   rX  ru   r@  )rA  rv   rw   ÚcheckSubIndent§  s    
z%indentedBlock.<locals>.checkSubIndentc                sN   |t | krd S t|| } r6| d k r6| d ksBt| |d  ¡  d S )Nrr   r\  znot an unindent)ræ   r9   r   r  )r   rX  ru   r@  )rA  rv   rw   ÚcheckUnindent®  s     
z$indentedBlock.<locals>.checkUnindentz	 ÚINDENTr   ZUNINDENTzindented block)r   r   r  r  r   r   r  r   r   r  rï  )ÚblockStatementExprrA  r-  rB  rC  rD  r@  rE  ÚPEERÚUNDENTÚsmExprrv   )rA  rw   rf   Q  s    N,z#[\0xc0-\0xd6\0xd8-\0xf6\0xf8-\0xff]z[\0xa1-\0xbf\0xd7\0xf7]z_:zany tagzgt lt amp nbsp quot aposz><& "'z&(?P<entity>rò  z);zcommon HTML entityc             C   s   t  | j¡S )zRHelper parser action to replace common HTML entities with their special characters)Ú_htmlEntityMaprá   Úentity)ru   rv   rv   rw   r[   É  s    z/\*(?:[^*]|\*(?!/))*z*/zC style commentz<!--[\s\S]*?-->zHTML commentz.*zrest of linez//(?:\\\n|[^\n])*z
// commentzC++ style commentz#.*zPython style comment)rL  z 	Ú	commaItem)r  c               @   s¨  e Zd ZdZeeZeeZe	e
 d¡ e¡Ze	e d¡ eed¡Zed d¡ e¡Ze  e¡d e  e¡  d¡Ze d	d
 ¡ eeeed ¡ e  B  d¡Ze e¡ ed d¡ e¡Zed d¡ e¡ZeeB eB  ¡ Zed d¡ e¡Ze	ed ed  d¡Zed d¡Z ed d¡Z!e!de! d   d¡Z"ee!de! d  d ee!de! d    d¡Z#e# $dd
 ¡ d e   d!¡Z%e&e"e%B e#B  d"¡ d"¡Z'ed# d$¡Z(e)d=d&d'Z*e)d>d)d*Z+ed+ d,¡Z,ed- d.¡Z-ed/ d0¡Z.e/ ¡ e0 ¡ B Z1e)d1d2 Z2e&e3e4d3 e5   e	e6d3d4 ee7d5  ¡  d6¡Z8e9ee: ;¡ e8B d7d8 d9¡Z<e)ed:d
 Z=e)ed;d
 Z>d<S )?rn   a®
  
    Here are some common low-level expressions that may be useful in jump-starting parser development:
     - numeric forms (L{integers<integer>}, L{reals<real>}, L{scientific notation<sci_real>})
     - common L{programming identifiers<identifier>}
     - network addresses (L{MAC<mac_address>}, L{IPv4<ipv4_address>}, L{IPv6<ipv6_address>})
     - ISO8601 L{dates<iso8601_date>} and L{datetime<iso8601_datetime>}
     - L{UUID<uuid>}
     - L{comma-separated list<comma_separated_list>}
    Parse actions:
     - C{L{convertToInteger}}
     - C{L{convertToFloat}}
     - C{L{convertToDate}}
     - C{L{convertToDatetime}}
     - C{L{stripHTMLTags}}
     - C{L{upcaseTokens}}
     - C{L{downcaseTokens}}

    Example::
        pyparsing_common.number.runTests('''
            # any int or real number, returned as the appropriate type
            100
            -100
            +100
            3.14159
            6.02e23
            1e-12
            ''')

        pyparsing_common.fnumber.runTests('''
            # any int or real number, returned as float
            100
            -100
            +100
            3.14159
            6.02e23
            1e-12
            ''')

        pyparsing_common.hex_integer.runTests('''
            # hex numbers
            100
            FF
            ''')

        pyparsing_common.fraction.runTests('''
            # fractions
            1/2
            -3/4
            ''')

        pyparsing_common.mixed_integer.runTests('''
            # mixed fractions
            1
            1/2
            -3/4
            1-3/4
            ''')

        import uuid
        pyparsing_common.uuid.setParseAction(tokenMap(uuid.UUID))
        pyparsing_common.uuid.runTests('''
            # uuid
            12345678-1234-5678-1234-567812345678
            ''')
    prints::
        # any int or real number, returned as the appropriate type
        100
        [100]

        -100
        [-100]

        +100
        [100]

        3.14159
        [3.14159]

        6.02e23
        [6.02e+23]

        1e-12
        [1e-12]

        # any int or real number, returned as float
        100
        [100.0]

        -100
        [-100.0]

        +100
        [100.0]

        3.14159
        [3.14159]

        6.02e23
        [6.02e+23]

        1e-12
        [1e-12]

        # hex numbers
        100
        [256]

        FF
        [255]

        # fractions
        1/2
        [0.5]

        -3/4
        [-0.75]

        # mixed fractions
        1
        [1]

        1/2
        [0.5]

        -3/4
        [-0.75]

        1-3/4
        [1.75]

        # uuid
        12345678-1234-5678-1234-567812345678
        [UUID('12345678-1234-5678-1234-567812345678')]
    Úintegerzhex integerr  z[+-]?\d+zsigned integerr  Úfractionc             C   s   | d | d  S )Nr   rr   rv   )ru   rv   rv   rw   rx     s    zpyparsing_common.<lambda>r  z"fraction or mixed integer-fractionz[+-]?\d+\.\d*zreal numberz+[+-]?\d+([eE][+-]?\d+|\.\d*([eE][+-]?\d+)?)z$real number with scientific notationz[+-]?\d+\.?\d*([eE][+-]?\d+)?Úfnumberr  Ú
identifierzK(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})){3}zIPv4 addressz[0-9a-fA-F]{1,4}Úhex_integerr  é   zfull IPv6 address)r   rf  z::zshort IPv6 addressc             C   s   t dd | D dk S )Nc             s   s   | ]}t j |¡rd V  qdS )r   N)rn   Ú
_ipv6_partrá  )r   rç  rv   rv   rw   r   ¢  s    z,pyparsing_common.<lambda>.<locals>.<genexpr>r  )r¨  )ru   rv   rv   rw   rx   ¢  s    z::ffff:zmixed IPv6 addresszIPv6 addressz:[0-9a-fA-F]{2}([:.-])[0-9a-fA-F]{2}(?:\1[0-9a-fA-F]{2}){4}zMAC addressú%Y-%m-%dc                s    fdd}|S )aØ  
        Helper to create a parse action for converting parsed date string to Python datetime.date

        Params -
         - fmt - format to be passed to datetime.strptime (default=C{"%Y-%m-%d"})

        Example::
            date_expr = pyparsing_common.iso8601_date.copy()
            date_expr.setParseAction(pyparsing_common.convertToDate())
            print(date_expr.parseString("1999-12-31"))
        prints::
            [datetime.date(1999, 12, 31)]
        c          
      sL   yt  |d  ¡ ¡ S  tk
rF } zt| |t|W d d }~X Y nX d S )Nr   )r   ÚstrptimeÚdater÷  r   r{   )r   rX  ru   Úve)Úfmtrv   rw   Úcvt_fn¹  s    z.pyparsing_common.convertToDate.<locals>.cvt_fnrv   )rX  rY  rv   )rX  rw   ÚconvertToDateª  s    zpyparsing_common.convertToDateú%Y-%m-%dT%H:%M:%S.%fc                s    fdd}|S )a  
        Helper to create a parse action for converting parsed datetime string to Python datetime.datetime

        Params -
         - fmt - format to be passed to datetime.strptime (default=C{"%Y-%m-%dT%H:%M:%S.%f"})

        Example::
            dt_expr = pyparsing_common.iso8601_datetime.copy()
            dt_expr.setParseAction(pyparsing_common.convertToDatetime())
            print(dt_expr.parseString("1999-12-31T23:59:59.999"))
        prints::
            [datetime.datetime(1999, 12, 31, 23, 59, 59, 999000)]
        c          
      sH   yt  |d  ¡S  tk
rB } zt| |t|W d d }~X Y nX d S )Nr   )r   rU  r÷  r   r{   )r   rX  ru   rW  )rX  rv   rw   rY  Ï  s    z2pyparsing_common.convertToDatetime.<locals>.cvt_fnrv   )rX  rY  rv   )rX  rw   ÚconvertToDatetimeÀ  s    z"pyparsing_common.convertToDatetimez7(?P<year>\d{4})(?:-(?P<month>\d\d)(?:-(?P<day>\d\d))?)?zISO8601 datez(?P<year>\d{4})-(?P<month>\d\d)-(?P<day>\d\d)[T ](?P<hour>\d\d):(?P<minute>\d\d)(:(?P<second>\d\d(\.\d*)?)?)?(?P<tz>Z|[+-]\d\d:?\d\d)?zISO8601 datetimez2[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}ÚUUIDc             C   s   t j |d ¡S )a  
        Parse action to remove HTML tags from web page HTML source

        Example::
            # strip HTML links from normal text 
            text = '<td>More info at the <a href="http://pyparsing.wikispaces.com">pyparsing</a> wiki page</td>'
            td,td_end = makeHTMLTags("TD")
            table_text = td + SkipTo(td_end).setParseAction(pyparsing_common.stripHTMLTags)("body") + td_end
            
            print(table_text.parseString(text).body) # -> 'More info at the pyparsing wiki page'
        r   )rn   Ú_html_stripperr   )r   rX  r·  rv   rv   rw   ÚstripHTMLTagsà  s    zpyparsing_common.stripHTMLTagsrß  )rL  z 	rL  r   )r  zcomma separated listc             C   s   t |  ¡ S )N)r   r<  )ru   rv   rv   rw   rx   ô  s    c             C   s   t |  ¡ S )N)r   r  )ru   rv   rv   rw   rx   ÷  s    N)rT  )r[  )?r   r   r   r»   rm   rt   ÚconvertToIntegerÚfloatÚconvertToFloatr/   rR   r  r   rM  rD   rQ  r'   Úsigned_integerrN  r¢  r   r  Úmixed_integerr¨  ÚrealÚsci_realr×  ÚnumberrO  r4   r3   rP  Úipv4_addressrS  Ú_full_ipv6_addressÚ_short_ipv6_addressr¨  Ú_mixed_ipv6_addressr
   Úipv6_addressÚmac_addressr2  rZ  r\  Úiso8601_dateÚiso8601_datetimeÚuuidr7   r6   r^  r_  r   r   r   rV   r.   Ú_commasepitemr@   rY   rÚ   Úcomma_separated_listrd   rB   rv   rv   rv   rw   rn   é  sN    ""
28Ú__main__ÚselectÚfromz_$rÙ  )rá  Úcolumnsr  ZtablesÚcommandaK  
        # '*' as column list and dotted table name
        select * from SYS.XYZZY

        # caseless match on "SELECT", and casts back to "select"
        SELECT * from XYZZY, ABC

        # list of column names, and mixed case SELECT keyword
        Select AA,BB,CC from Sys.dual

        # multiple tables
        Select A, B, C from Sys.dual, Table2

        # invalid SELECT keyword - should fail
        Xelect A, B, C from Sys.dual

        # incomplete command - should fail
        Select

        # invalid column name - should fail
        Select ^^^ frox Sys.dual

        z]
        100
        -100
        +100
        3.14159
        6.02e23
        1e-12
        z 
        100
        FF
        z6
        12345678-1234-5678-1234-567812345678
        )rq   )rß  F)N)FT)T)r   )T)âr»   Ú__version__Ú__versionTime__Ú
__author__r   Úweakrefr   râ   rÚ   r~   rî  r  rd  rÉ  rA  r_  rÀ  r   Ú_threadr   ÚImportErrorÚ	threadingr   rÅ  ÚordereddictÚ__all__rö  Úversion_infor^  r%  Úmaxsizer3  r{   rÙ   Úchrr  r   r¨  ræ   r;  ÚreversedrÔ   r¿  r=  r  rY  rZ  rm  ÚmaxintÚxrangerç   Ú__builtin__r   Úfnamer  rn  r¬   r¹   rÖ   r   rÇ   r   Úascii_uppercaseÚascii_lowercaser4   rR   rD   r3   rï  r²   Ú	printablerV   ro  r   r   r!   r#   r&   r¿   r"   ÚMutableMappingÚregisterr9   rJ   rG   rQ  rU  rW  rQ   rs  r$   r,   r   r   r   r  rw  r   r   r   rl   r/   r'   r%   r	   r.   r  r   r   r   r*   r)   r1   r0   r    r   r   r   r   r   r   r   r´  r   r2   r¾  r¿  r   r(   r   rÍ  r-   r
   r   r   r+   r   rb   r@   r<   ræ  rO   rN   rU  rS   rA   rg   rh   rj   r  rC   rI   rH   ra   r`   r   Ú_escapedPuncÚ_escapedHexCharÚ_escapedOctCharÚUNICODEÚ_singleCharÚ
_charRanger  r  r_   rM   r\   rZ   rm   rd   rB   r   rK   rL   re   r!  rk   rT   r+  r,  ri   rU   r>   r^   rY   rc   rP   rf   r5   rW   r7   r6   r×   r   rJ  rþ   r;   r[   r8   rE   r  r]   r?   r=   rF   rX   r×  rq  r:   rn   r   ÚselectTokenÚ	fromTokenÚidentÚ
columnNameÚcolumnNameListÚ
columnSpecÚ	tableNameÚtableNameListÚ	simpleSQLr1  rg  rO  rQ  rp  r]  rv   rv   rv   rw   Ú<module>=   sà  









8
     
@         d&A=  I 
G3pLOD|M &#@sQ,A,	I#%&0
,	?#kZr

 (
 0   


"ã            A   @   sj  d Z ddlmZ ddlZddlZddlZddlZddlZdZdZ	ej
d dkZej
d dkZej
dd dkZerefZefZefZeZeZejZn~efZeefZeejfZeZeZej d	¡rÊed
ZnHG dd deZ ye!e   W n e"k
r   ed
ZY n
X edZ[ dd Z#dd Z$G dd deZ%G dd de%Z&G dd dej'Z(G dd de%Z)G dd deZ*e*e+Z,G dd de(Z-e)dddd e)d!d"d#d$d!e)d%d"d"d&d%e)d'd(d#d)d'e)d*d(d+e)d,d"d#d-d,e)d.d/d/d0d.e)d1d/d/d.d1e)d2d(d#d3d2e)d4d(erd5nd6d7e)d8d(d9e)d:d;d<d=e)d d de)d>d>d?e)d@d@d?e)dAdAd?e)d3d(d#d3d2e)dBd"d#dCdBe)dDd"d"dEdDe&d#d(e&dFdGe&dHdIe&dJdKdLe&dMdNdMe&dOdPdQe&dRdSdTe&dUdVdWe&dXdYdZe&d[d\d]e&d^d_d`e&dadbdce&dddedfe&dgdhdie&djdjdke&dldldke&dmdmdke&dndndoe&dpdqe&drdse&dtdue&dvdwdve&dxdye&dzd{d|e&d}d~de&ddde&ddde&ddde&ddde&ddde&ddde&ddde&ddde&ddde&ddde&ddde&d d¡de&d¢e+d£ d¤e&d¥e+d¦ d§e&d¨e+d© e+d© e&dªd«d¬e&d­d®d¯e&d°d±d²g>Z.ejd³krRe.e&d´dµg7 Z.x:e.D ]2Z/e0e-e/j1e/ e2e/e&rXe, 3e/d¶e/j1 ¡ qXW [/e.e-_.e-e+d· Z4e, 3e4d¸¡ G d¹dº dºe(Z5e)d»d¼d¤e)d½d¼d¤e)d¾d¼d¤e)d¿d¼d¤e)dÀd¼d¤e)dÁd¼d¤e)d¼d¼d¤e)dÂd¼d¤e)dÃd¼d¤e)dÄd¼d¤e)d=d¨d¤e)dÅd¨d¤e)dÆd¨d¤e)dÇd¨d¤e)dÈd¨d¤e)dÉd¨d¤e)dÊd¨d¤e)dËd¨d¤e)dÌd¼d¤e)dÍd¼d¤e)dÎd¼d¤e)dÏd¼d¤e)dÐd¼d¤gZ6xe6D ]Z/e0e5e/j1e/ q®W [/e6e5_.e, 3e5e+d£ dÑdÒ¡ G dÓdÔ dÔe(Z7e)dÕdÖd§e)d×dÖd§e)dØd¨d§gZ8xe8D ]Z/e0e7e/j1e/ qW [/e8e7_.e, 3e7e+dÙ dÚdÛ¡ G dÜdÝ dÝe(Z9e)dÞdÖdße)dàdÖdße)dádÖdße)dâd¨dße)dãd¨dße)däd¨dße)dådÖdße)dædÖdße)dçdÖdße)dèdÖdße)dédÖdße)dêdÖdße)dëdÖdße)dìdÖdße)dídÖdße)dîdÖdße)dïdÖdße)dðdÖdße)dñdÖdße)dòdÖdße)dódÖdße)dôdÖdße)dõdÖdße)dödÖdße)d÷dÖdße)dødÖdße)dùdÖdße)dúdÖdße)dûd¨dße)düd¨dße)dýd¨dße)dþd¨dße)dÿd¨dßg!Z:xe:D ]Z/e0e9e/j1e/ q¶W [/e:e9_.e, 3e9e+d  dd¡ G dd de(Z;e)dd¨de)dd¨de)dd¨de)d	d¨dgZ<xe<D ]Z/e0e;e/j1e/ qJW [/e<e;_.e, 3e;e+d
 dd¡ G dd de(Z=e)dd«d¬gZ>xe>D ]Z/e0e=e/j1e/ q²W [/e>e=_.e, 3e=e+d dd¡ G dd dej'Z?e, 3e?e+d© d¡ dd Z@dd ZAe	r`dZBdZCdZDdZEdZFdZGn$d ZBd!ZCd"ZDd#ZEd$ZFd%ZGyeHZIW n" eJk
	r®   d&d' ZIY nX eIZHyeKZKW n" eJk
	rÞ   d(d) ZKY nX e
r
d*d+ ZLejMZNd,d- ZOeZPn>d.d+ ZLd/d0 ZNd1d- ZOG d2d3 d3eZPeKZKe#eLd4 e QeB¡ZRe QeC¡ZSe QeD¡ZTe QeE¡ZUe QeF¡ZVe QeG¡ZWe
rìd5d6 ZXd7d8 ZYd9d: ZZd;d< Z[e \d=¡Z]e \d>¡Z^e \d?¡Z_nTd@d6 ZXdAd8 ZYdBd: ZZdCd< Z[e \dD¡Z]e \dE¡Z^e \dF¡Z_e#eXdG e#eYdH e#eZdI e#e[dJ erdKdL Z`dMdN ZaebZcddldZded edO¡jfZg[de hd¡ZiejjZkelZmddlnZnenjoZoenjpZpdPZqej
dQ dQkrúdRZrdSZsndTZrdUZsnjdVdL Z`dWdN ZaecZcebZgdXdY ZidZd[ Zke tejuev¡ZmddloZoeojo ZoZpd\ZqdRZrdSZse#e`d] e#ead^ d_dP Zwd`dT ZxdadU ZyerÔeze4j{dbZ|d|dcddZ}nd}dedfZ|e|dg ej
dd dhkre|di n.ej
dd dhkr2e|dj ndkdl Z~eze4j{dmdZedkrddndo Zej
dd dpk reZdqdo Ze#e}dr ej
dd dk rÂejejfdsdtZnejZdudv Zdwdx Zdydz Zg Ze+Ze  d{¡dk	rg e_ejrZx>eejD ]0\ZZeej+dkr"ej1e+kr"eje= P q"W [[ej e,¡ dS (~  z6Utilities for writing code that runs on Python 2 and 3é    )Úabsolute_importNz'Benjamin Peterson <benjamin@python.org>z1.10.0é   é   )r   é   Újavaiÿÿÿc               @   s   e Zd Zdd ZdS )ÚXc             C   s   dS )Nl        © )Úselfr   r   úEC:\code\venv\callllama\lib\site-packages\pkg_resources\_vendor\six.pyÚ__len__>   s    z	X.__len__N)Ú__name__Ú
__module__Ú__qualname__r   r   r   r   r
   r   <   s   r   l   ÿÿÿÿ c             C   s
   || _ dS )z Add documentation to a function.N)Ú__doc__)ÚfuncÚdocr   r   r
   Ú_add_docK   s    r   c             C   s   t |  tj|  S )z7Import module, returning the module after the last dot.)Ú
__import__ÚsysÚmodules)Únamer   r   r
   Ú_import_moduleP   s    r   c               @   s   e Zd Zdd Zdd ZdS )Ú
_LazyDescrc             C   s
   || _ d S )N)r   )r	   r   r   r   r
   Ú__init__X   s    z_LazyDescr.__init__c             C   sB   |   ¡ }t|| j| yt|j| j W n tk
r<   Y nX |S )N)Ú_resolveÚsetattrr   ÚdelattrÚ	__class__ÚAttributeError)r	   ÚobjÚtpÚresultr   r   r
   Ú__get__[   s    z_LazyDescr.__get__N)r   r   r   r   r"   r   r   r   r
   r   V   s   r   c                   s.   e Zd Zd fdd	Zdd Zdd Z  ZS )	ÚMovedModuleNc                s2   t t|  |¡ tr(|d kr |}|| _n|| _d S )N)Úsuperr#   r   ÚPY3Úmod)r	   r   ÚoldÚnew)r   r   r
   r   i   s    zMovedModule.__init__c             C   s
   t | jS )N)r   r&   )r	   r   r   r
   r   r   s    zMovedModule._resolvec             C   s"   |   ¡ }t||}t| || |S )N)r   Úgetattrr   )r	   ÚattrÚ_moduleÚvaluer   r   r
   Ú__getattr__u   s    
zMovedModule.__getattr__)N)r   r   r   r   r   r-   Ú__classcell__r   r   )r   r
   r#   g   s   	r#   c                   s(   e Zd Z fddZdd Zg Z  ZS )Ú_LazyModulec                s   t t|  |¡ | jj| _d S )N)r$   r/   r   r   r   )r	   r   )r   r   r
   r   ~   s    z_LazyModule.__init__c             C   s    ddg}|dd | j D 7 }|S )Nr   r   c             S   s   g | ]
}|j qS r   )r   )Ú.0r*   r   r   r
   ú
<listcomp>   s    z'_LazyModule.__dir__.<locals>.<listcomp>)Ú_moved_attributes)r	   Úattrsr   r   r
   Ú__dir__   s    z_LazyModule.__dir__)r   r   r   r   r4   r2   r.   r   r   )r   r
   r/   |   s   r/   c                   s&   e Zd Zd fdd	Zdd Z  ZS )ÚMovedAttributeNc                sd   t t|  |¡ trH|d kr |}|| _|d kr@|d kr<|}n|}|| _n|| _|d krZ|}|| _d S )N)r$   r5   r   r%   r&   r*   )r	   r   Úold_modÚnew_modÚold_attrÚnew_attr)r   r   r
   r      s    zMovedAttribute.__init__c             C   s   t | j}t|| jS )N)r   r&   r)   r*   )r	   Úmoduler   r   r
   r      s    
zMovedAttribute._resolve)NN)r   r   r   r   r   r.   r   r   )r   r
   r5      s   r5   c               @   sV   e Zd ZdZdd Zdd Zdd Zdd	d
Zdd Zdd Z	dd Z
dd ZeZdS )Ú_SixMetaPathImporterzÎ
    A meta path importer to import six.moves and its submodules.

    This class implements a PEP302 finder and loader. It should be compatible
    with Python 2.5 and all existing versions of Python3
    c             C   s   || _ i | _d S )N)r   Úknown_modules)r	   Úsix_module_namer   r   r
   r   ­   s    z_SixMetaPathImporter.__init__c             G   s&   x |D ]}|| j | jd | < qW d S )NÚ.)r<   r   )r	   r&   Ú	fullnamesÚfullnamer   r   r
   Ú_add_module±   s    
z _SixMetaPathImporter._add_modulec             C   s   | j | jd |  S )Nr>   )r<   r   )r	   r@   r   r   r
   Ú_get_moduleµ   s    z _SixMetaPathImporter._get_moduleNc             C   s   || j kr| S d S )N)r<   )r	   r@   Úpathr   r   r
   Úfind_module¸   s    
z _SixMetaPathImporter.find_modulec             C   s0   y
| j | S  tk
r*   td| Y nX d S )Nz!This loader does not know module )r<   ÚKeyErrorÚImportError)r	   r@   r   r   r
   Ú__get_module½   s    
z!_SixMetaPathImporter.__get_modulec             C   sR   y
t j| S  tk
r   Y nX |  |¡}t|tr>| ¡ }n| |_|t j|< |S )N)r   r   rE   Ú _SixMetaPathImporter__get_moduleÚ
isinstancer#   r   Ú
__loader__)r	   r@   r&   r   r   r
   Úload_moduleÃ   s    




z _SixMetaPathImporter.load_modulec             C   s   t |  |¡dS )z
        Return true, if the named module is a package.

        We need this method to get correct spec objects with
        Python 3.4 (see PEP451)
        Ú__path__)ÚhasattrrH   )r	   r@   r   r   r
   Ú
is_packageÑ   s    z_SixMetaPathImporter.is_packagec             C   s   |   |¡ dS )z;Return None

        Required, if is_package is implementedN)rH   )r	   r@   r   r   r
   Úget_codeÚ   s    
z_SixMetaPathImporter.get_code)N)r   r   r   r   r   rA   rB   rD   rH   rK   rN   rO   Ú
get_sourcer   r   r   r
   r;   ¤   s   
	r;   c               @   s   e Zd ZdZg ZdS )Ú_MovedItemszLazy loading of moved objectsN)r   r   r   r   rL   r   r   r   r
   rQ   å   s   rQ   Ú	cStringIOÚioÚStringIOÚfilterÚ	itertoolsÚbuiltinsÚifilterÚfilterfalseÚifilterfalseÚinputÚ__builtin__Ú	raw_inputÚinternr   ÚmapÚimapÚgetcwdÚosZgetcwduÚgetcwdbÚrangeÚxrangeZreload_moduleÚ	importlibÚimpÚreloadÚreduceÚ	functoolsZshlex_quoteZpipesÚshlexÚquoteÚUserDictÚcollectionsÚUserListÚ
UserStringÚzipÚizipÚzip_longestÚizip_longestÚconfigparserÚConfigParserÚcopyregÚcopy_regZdbm_gnuÚgdbmzdbm.gnuÚ_dummy_threadÚdummy_threadZhttp_cookiejarÚ	cookielibzhttp.cookiejarZhttp_cookiesÚCookiezhttp.cookiesZhtml_entitiesÚhtmlentitydefszhtml.entitiesZhtml_parserÚ
HTMLParserzhtml.parserÚhttp_clientÚhttplibzhttp.clientZemail_mime_multipartzemail.MIMEMultipartzemail.mime.multipartZemail_mime_nonmultipartzemail.MIMENonMultipartzemail.mime.nonmultipartZemail_mime_textzemail.MIMETextzemail.mime.textZemail_mime_basezemail.MIMEBasezemail.mime.baseÚBaseHTTPServerzhttp.serverÚCGIHTTPServerÚSimpleHTTPServerÚcPickleÚpickleÚqueueÚQueueÚreprlibÚreprÚsocketserverÚSocketServerÚ_threadÚthreadÚtkinterÚTkinterZtkinter_dialogÚDialogztkinter.dialogZtkinter_filedialogÚ
FileDialogztkinter.filedialogZtkinter_scrolledtextÚScrolledTextztkinter.scrolledtextZtkinter_simpledialogÚSimpleDialogztkinter.simpledialogZtkinter_tixÚTixztkinter.tixZtkinter_ttkÚttkztkinter.ttkZtkinter_constantsÚTkconstantsztkinter.constantsZtkinter_dndÚTkdndztkinter.dndÚtkinter_colorchooserÚtkColorChooserztkinter.colorchooserÚtkinter_commondialogÚtkCommonDialogztkinter.commondialogZtkinter_tkfiledialogÚtkFileDialogZtkinter_fontÚtkFontztkinter.fontZtkinter_messageboxÚtkMessageBoxztkinter.messageboxÚtkinter_tksimpledialogÚtkSimpleDialogÚurllib_parsez.moves.urllib_parsezurllib.parseZurllib_errorz.moves.urllib_errorzurllib.errorÚurllibz.moves.urllibZurllib_robotparserÚrobotparserzurllib.robotparserZxmlrpc_clientÚ	xmlrpclibzxmlrpc.clientZxmlrpc_serverÚSimpleXMLRPCServerzxmlrpc.serverÚwin32ÚwinregÚ_winregzmoves.z.movesÚmovesc               @   s   e Zd ZdZdS )ÚModule_six_moves_urllib_parsez7Lazy loading of moved objects in six.moves.urllib_parseN)r   r   r   r   r   r   r   r
   r«   @  s   r«   ÚParseResultÚurlparseÚSplitResultÚparse_qsÚ	parse_qslÚ	urldefragÚurljoinÚurlsplitÚ
urlunparseÚ
urlunsplitÚ
quote_plusÚunquoteÚunquote_plusÚ	urlencodeÚ
splitqueryÚsplittagÚ	splituserÚuses_fragmentÚuses_netlocÚuses_paramsÚ
uses_queryÚuses_relativezmoves.urllib_parsezmoves.urllib.parsec               @   s   e Zd ZdZdS )ÚModule_six_moves_urllib_errorz7Lazy loading of moved objects in six.moves.urllib_errorN)r   r   r   r   r   r   r   r
   rÂ   h  s   rÂ   ÚURLErrorÚurllib2Ú	HTTPErrorÚContentTooShortErrorz.moves.urllib.errorzmoves.urllib_errorzmoves.urllib.errorc               @   s   e Zd ZdZdS )ÚModule_six_moves_urllib_requestz9Lazy loading of moved objects in six.moves.urllib_requestN)r   r   r   r   r   r   r   r
   rÇ   |  s   rÇ   Úurlopenzurllib.requestÚinstall_openerÚbuild_openerÚpathname2urlÚurl2pathnameÚ
getproxiesÚRequestÚOpenerDirectorÚHTTPDefaultErrorHandlerÚHTTPRedirectHandlerÚHTTPCookieProcessorÚProxyHandlerÚBaseHandlerÚHTTPPasswordMgrÚHTTPPasswordMgrWithDefaultRealmÚAbstractBasicAuthHandlerÚHTTPBasicAuthHandlerÚProxyBasicAuthHandlerÚAbstractDigestAuthHandlerÚHTTPDigestAuthHandlerÚProxyDigestAuthHandlerÚHTTPHandlerÚHTTPSHandlerÚFileHandlerÚ
FTPHandlerÚCacheFTPHandlerÚUnknownHandlerÚHTTPErrorProcessorÚurlretrieveÚ
urlcleanupÚ	URLopenerÚFancyURLopenerÚproxy_bypassz.moves.urllib.requestzmoves.urllib_requestzmoves.urllib.requestc               @   s   e Zd ZdZdS )Ú Module_six_moves_urllib_responsez:Lazy loading of moved objects in six.moves.urllib_responseN)r   r   r   r   r   r   r   r
   ré   ®  s   ré   Úaddbasezurllib.responseÚaddclosehookÚaddinfoÚ
addinfourlz.moves.urllib.responsezmoves.urllib_responsezmoves.urllib.responsec               @   s   e Zd ZdZdS )Ú#Module_six_moves_urllib_robotparserz=Lazy loading of moved objects in six.moves.urllib_robotparserN)r   r   r   r   r   r   r   r
   rî   Ã  s   rî   ZRobotFileParserz.moves.urllib.robotparserzmoves.urllib_robotparserzmoves.urllib.robotparserc               @   sN   e Zd ZdZg Ze d¡Ze d¡Ze d¡Z	e d¡Z
e d¡Zdd Zd	S )
ÚModule_six_moves_urllibzICreate a six.moves.urllib namespace that resembles the Python 3 namespacezmoves.urllib_parsezmoves.urllib_errorzmoves.urllib_requestzmoves.urllib_responsezmoves.urllib_robotparserc             C   s   dddddgS )NÚparseÚerrorÚrequestÚresponser¤   r   )r	   r   r   r
   r4   ß  s    zModule_six_moves_urllib.__dir__N)r   r   r   r   rL   Ú	_importerrB   rð   rñ   rò   ró   r¤   r4   r   r   r   r
   rï   Õ  s   




rï   zmoves.urllibc             C   s   t t| j|  dS )zAdd an item to six.moves.N)r   rQ   r   )Úmover   r   r
   Úadd_moveæ  s    rö   c             C   sX   yt t|  W nD tk
rR   ytj| = W n" tk
rL   td| f Y nX Y nX dS )zRemove item from six.moves.zno such move, %rN)r   rQ   r   rª   Ú__dict__rE   )r   r   r   r
   Úremove_moveë  s    rø   Ú__func__Ú__self__Ú__closure__Ú__code__Ú__defaults__Ú__globals__Úim_funcZim_selfZfunc_closureÚ	func_codeZfunc_defaultsZfunc_globalsc             C   s   |   ¡ S )N)Únext)Úitr   r   r
   Úadvance_iterator  s    r  c             C   s   t dd t| jD S )Nc             s   s   | ]}d |j kV  qdS )Ú__call__N)r÷   )r0   Úklassr   r   r
   ú	<genexpr>  s    zcallable.<locals>.<genexpr>)ÚanyÚtypeÚ__mro__)r   r   r   r
   Úcallable  s    r
  c             C   s   | S )Nr   )Úunboundr   r   r
   Úget_unbound_function  s    r  c             C   s   | S )Nr   )r   Úclsr   r   r
   Úcreate_unbound_method  s    r  c             C   s   | j S )N)rÿ   )r  r   r   r
   r  "  s    c             C   s   t  | ||j¡S )N)ÚtypesÚ
MethodTyper   )r   r   r   r   r
   Úcreate_bound_method%  s    r  c             C   s   t  | d |¡S )N)r  r  )r   r  r   r   r
   r  (  s    c               @   s   e Zd Zdd ZdS )ÚIteratorc             C   s   t |  | ¡S )N)r  Ú__next__)r	   r   r   r
   r  -  s    zIterator.nextN)r   r   r   r  r   r   r   r
   r  +  s   r  z3Get the function out of a possibly unbound functionc             K   s   t | jf |S )N)ÚiterÚkeys)ÚdÚkwr   r   r
   Úiterkeys>  s    r  c             K   s   t | jf |S )N)r  Úvalues)r  r  r   r   r
   Ú
itervaluesA  s    r  c             K   s   t | jf |S )N)r  Úitems)r  r  r   r   r
   Ú	iteritemsD  s    r  c             K   s   t | jf |S )N)r  Úlists)r  r  r   r   r
   Ú	iterlistsG  s    r  r  r  r  c             K   s   | j f |S )N)r  )r  r  r   r   r
   r  P  s    c             K   s   | j f |S )N)r  )r  r  r   r   r
   r  S  s    c             K   s   | j f |S )N)r  )r  r  r   r   r
   r  V  s    c             K   s   | j f |S )N)r  )r  r  r   r   r
   r  Y  s    ÚviewkeysÚ
viewvaluesÚ	viewitemsz1Return an iterator over the keys of a dictionary.z3Return an iterator over the values of a dictionary.z?Return an iterator over the (key, value) pairs of a dictionary.zBReturn an iterator over the (key, [values]) pairs of a dictionary.c             C   s
   |   d¡S )Nzlatin-1)Úencode)Úsr   r   r
   Úbk  s    r$  c             C   s   | S )Nr   )r#  r   r   r
   Úun  s    r%  z>BÚassertCountEqualé   ZassertRaisesRegexpZassertRegexpMatchesÚassertRaisesRegexÚassertRegexc             C   s   | S )Nr   )r#  r   r   r
   r$    s    c             C   s   t |  dd¡dS )Nz\\z\\\\Zunicode_escape)ÚunicodeÚreplace)r#  r   r   r
   r%    s    c             C   s   t | d S )Nr   )Úord)Úbsr   r   r
   Úbyte2int  s    r.  c             C   s   t | | S )N)r,  )ÚbufÚir   r   r
   Ú
indexbytes  s    r1  ZassertItemsEqualzByte literalzText literalc             O   s   t | t||S )N)r)   Ú_assertCountEqual)r	   ÚargsÚkwargsr   r   r
   r&    s    c             O   s   t | t||S )N)r)   Ú_assertRaisesRegex)r	   r3  r4  r   r   r
   r(    s    c             O   s   t | t||S )N)r)   Ú_assertRegex)r	   r3  r4  r   r   r
   r)  ¢  s    Úexecc             C   s*   |d kr|  }|j |k	r"| |¡|d S )N)Ú__traceback__Úwith_traceback)r    r,   Útbr   r   r
   Úreraise©  s
    

r;  c             C   sB   |dkr*t  d¡}|j}|dkr&|j}~n|dkr6|}td dS )zExecute code in a namespace.Nr'  zexec _code_ in _globs_, _locs_)r   Ú	_getframeÚ	f_globalsÚf_localsr7  )Ú_code_Ú_globs_Ú_locs_Úframer   r   r
   Úexec_±  s    
rC  z9def reraise(tp, value, tb=None):
    raise tp, value, tb
)r   r   zrdef raise_from(value, from_value):
    if from_value is None:
        raise value
    raise value from from_value
zCdef raise_from(value, from_value):
    raise value from from_value
c             C   s   | d S )Nr   )r,   Ú
from_valuer   r   r
   Ú
raise_fromÍ  s    rE  Úprintc        
         s4  |  dtj¡  dkrdS  fdd}d}|  dd¡}|dk	r`t|trNd}nt|ts`td|  d	d¡}|dk	rt|trd}nt|tstd
|r¢td|sÄx| D ]}t|tr¬d}P q¬W |rÚtd}td}nd}d}|dkrî|}|dkrú|}x,t| D ] \}	}|	r|| || qW || dS )z4The new-style print function for Python 2.4 and 2.5.ÚfileNc                sd   t | tst| } t  trVt | trV jd k	rVt dd }|d krHd}|   j|¡}   | ¡ d S )NÚerrorsÚstrict)	rI   Ú
basestringÚstrrG  r*  Úencodingr)   r"  Úwrite)ÚdatarH  )Úfpr   r
   rM  Ù  s    



zprint_.<locals>.writeFÚsepTzsep must be None or a stringÚendzend must be None or a stringz$invalid keyword arguments to print()Ú
ú )Úpopr   ÚstdoutrI   r*  rK  Ú	TypeErrorÚ	enumerate)
r3  r4  rM  Úwant_unicoderP  rQ  ÚargÚnewlineÚspacer0  r   )rO  r
   Úprint_Ó  sL    






r\  )r   r   c              O   s<   |  dtj¡}| dd¡}t| | |r8|d k	r8| ¡  d S )NrG  ÚflushF)Úgetr   rU  rT  Ú_printr]  )r3  r4  rO  r]  r   r   r
   r\    s
    
zReraise an exception.c                s    fdd}|S )Nc                s   t   ¡| } | _| S )N)rj   ÚwrapsÚ__wrapped__)Úf)ÚassignedÚupdatedÚwrappedr   r
   Úwrapper  s    zwraps.<locals>.wrapperr   )re  rc  rd  rf  r   )rc  rd  re  r
   r`    s    r`  c                s&   G  fddd}t  |ddi ¡S )z%Create a base class with a metaclass.c                   s   e Zd Z fddZdS )z!with_metaclass.<locals>.metaclassc                s   | |S )Nr   )r  r   Ú
this_basesr  )ÚbasesÚmetar   r
   Ú__new__'  s    z)with_metaclass.<locals>.metaclass.__new__N)r   r   r   rj  r   )rh  ri  r   r
   Ú	metaclass%  s   rk  Ztemporary_classr   )r  rj  )ri  rh  rk  r   )rh  ri  r
   Úwith_metaclass   s    rl  c                s    fdd}|S )z6Class decorator for creating a class with a metaclass.c                sl   | j  ¡ }| d¡}|d k	rDt|tr,|g}x|D ]}| |¡ q2W | dd ¡ | dd ¡  | j| j|S )NÚ	__slots__r÷   Ú__weakref__)r÷   Úcopyr^  rI   rK  rT  r   Ú	__bases__)r  Ú	orig_varsÚslotsÚ	slots_var)rk  r   r
   rf  .  s    



zadd_metaclass.<locals>.wrapperr   )rk  rf  r   )rk  r
   Úadd_metaclass,  s    rt  c             C   s2   t r.d| jkrtd| j | j| _dd | _| S )a   
    A decorator that defines __unicode__ and __str__ methods under Python 2.
    Under Python 3 it does nothing.

    To support Python 2 and 3 with a single code base, define a __str__ method
    returning text and apply this decorator to the class.
    Ú__str__zY@python_2_unicode_compatible cannot be applied to %s because it doesn't define __str__().c             S   s   |   ¡  d¡S )Nzutf-8)Ú__unicode__r"  )r	   r   r   r
   Ú<lambda>J  s    z-python_2_unicode_compatible.<locals>.<lambda>)ÚPY2r÷   Ú
ValueErrorr   ru  rv  )r  r   r   r
   Úpython_2_unicode_compatible<  s    


rz  Ú__spec__)N)NN)r   Ú
__future__r   rj   rV   Úoperatorr   r  Ú
__author__Ú__version__Úversion_inforx  r%   ÚPY34rK  Ústring_typesÚintÚinteger_typesr  Úclass_typesÚ	text_typeÚbytesÚbinary_typeÚmaxsizeÚMAXSIZErJ  ÚlongÚ	ClassTyper*  ÚplatformÚ
startswithÚobjectr   ÚlenÚOverflowErrorr   r   r   r#   Ú
ModuleTyper/   r5   r;   r   rô   rQ   r2   r*   r   r   rI   rA   rª   r«   Ú_urllib_parse_moved_attributesrÂ   Ú_urllib_error_moved_attributesrÇ   Ú _urllib_request_moved_attributesré   Ú!_urllib_response_moved_attributesrî   Ú$_urllib_robotparser_moved_attributesrï   rö   rø   Ú
_meth_funcÚ
_meth_selfÚ_func_closureÚ
_func_codeÚ_func_defaultsÚ_func_globalsr  r  Ú	NameErrorr
  r  r  r  r  r  Ú
attrgetterÚget_method_functionÚget_method_selfÚget_function_closureÚget_function_codeÚget_function_defaultsÚget_function_globalsr  r  r  r  Úmethodcallerr  r   r!  r$  r%  ÚchrÚunichrÚstructÚStructÚpackÚint2byteÚ
itemgetterr.  Úgetitemr1  r  Ú	iterbytesrS   rT   ÚBytesIOr2  r5  r6  Úpartialr`   r,  r&  r(  r)  r)   rW   rC  r;  rE  r\  r_  ÚWRAPPER_ASSIGNMENTSÚWRAPPER_UPDATESr`  rl  rt  rz  rL   Ú__package__Úglobalsr^  r{  Úsubmodule_search_locationsÚ	meta_pathrW  r0  ÚimporterÚappendr   r   r   r
   Ú<module>   sÊ  

>











































































































5ã               @   s,   d dl Z G dd dZdZeee ¡  dS )é    Nc               @   s@   e Zd ZdZdddZedd Zddd	Zd
d Zdd Z	dS )ÚVendorImporterz
    A PEP 302 meta path importer for finding optionally-vendored
    or otherwise naturally-installed packages from root_name.
    © Nc             C   s&   || _ t|| _|p| dd¡| _d S )NÚexternZ_vendor)Ú	root_nameÚsetÚvendored_namesÚreplaceÚ
vendor_pkg)Úselfr   r   r	   r   r   úIC:\code\venv\callllama\lib\site-packages\pkg_resources\extern\__init__.pyÚ__init__
   s    
zVendorImporter.__init__c             c   s   | j d V  dV  dS )zL
        Search first the vendor package then as a natural package.
        Ú.Ú N)r	   )r
   r   r   r   Úsearch_path   s    zVendorImporter.search_pathc             C   s8   |  | jd ¡\}}}|rdS tt|j| js4dS | S )z
        Return self when fullname starts with root_name and the
        target module is one vendored through this importer.
        r   N)Ú	partitionr   ÚanyÚmapÚ
startswithr   )r
   ÚfullnameÚpathÚrootÚbaseÚtargetr   r   r   Úfind_module   s    zVendorImporter.find_modulec          	   C   s   |  | jd ¡\}}}xp| jD ]T}y:|| }t| tj| }|tj|< tjdkrZtj|= |S  tk
rp   Y qX qW tdjf t	 dS )zK
        Iterate over the search path to locate and load fullname.
        r   )é   r   zThe '{target}' package is required; normally this is bundled with this package so if you get this warning, consult the packager of your distribution.N)
r   r   r   Ú
__import__ÚsysÚmodulesÚversion_infoÚImportErrorÚformatÚlocals)r
   r   r   r   r   ÚprefixÚextantÚmodr   r   r   Úload_module#   s    



zVendorImporter.load_modulec             C   s   | t jkrt j | ¡ dS )zR
        Install this importer into sys.meta_path if not already present.
        N)r   Ú	meta_pathÚappend)r
   r   r   r   Úinstall@   s    
zVendorImporter.install)r   N)N)
Ú__name__Ú
__module__Ú__qualname__Ú__doc__r   Úpropertyr   r   r%   r(   r   r   r   r   r      s   

r   )Ú	packagingZ	pyparsingÚsixÚappdirs)r   r   Únamesr)   r(   r   r   r   r   Ú<module>   s   Dã               @   sr   d dl Z d dlZd dlZd
ddZejdk p^dej  ko@dk n  p^dej  koZd	k n  Zerhene jZdS )é    NFc          
   C   sH   yt  | ¡ W n4 tk
rB } z|r0|jtjkr2 W d d }~X Y nX d S )N)ÚosÚmakedirsÚOSErrorÚerrnoÚEEXIST)ÚpathÚexist_okÚexc© r
   úDC:\code\venv\callllama\lib\site-packages\pkg_resources\py31compat.pyÚ_makedirs_31   s
    r   )é   é   é   )r   r   )r   r   é   )r   é   )r   r   é   )F)r   r   Úsysr   Úversion_infoÚneeds_makedirsr   r
   r
   r
   r   Ú<module>   s   

